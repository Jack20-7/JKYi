!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACK	JKYi/http2/frame.h	/^    ACK            = 0x1$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings	access:private
ACK	JKYi/http2/frame.h	/^    ACK            = 0x1$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing	access:private
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	440;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	443;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	446;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	449;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	453;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	455;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	457;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	461;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	464;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	467;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	472;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	475;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	478;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	483;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	486;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	489;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	492;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	425;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	428;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	431;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	434;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	438;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	440;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	442;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	446;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	449;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	452;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	457;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	460;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	463;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	468;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	471;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	474;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	477;"	d	file:
ASSOCIATING	JKYi/zk_client.cc	/^const int ZKClient::StateType::ASSOCIATING = ZOO_ASSOCIATING_STATE;$/;"	m	class:JKYi::ZKClient::StateType	file:
ASSOCIATING	JKYi/zk_client.h	/^        static const int ASSOCIATING;$/;"	m	class:JKYi::ZKClient::StateType	access:public
AUTH_FAILED	JKYi/zk_client.cc	/^const int ZKClient::StateType::AUTH_FAILED = ZOO_AUTH_FAILED_STATE;$/;"	m	class:JKYi::ZKClient::StateType	file:
AUTH_FAILED	JKYi/zk_client.h	/^        static const int AUTH_FAILED;$/;"	m	class:JKYi::ZKClient::StateType	access:public
Acceptor	JKYi/reactor/acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop,const Address::ptr& address,bool reuseport)$/;"	f	class:JKYi::net::Acceptor	signature:(EventLoop* loop,const Address::ptr& address,bool reuseport)
Acceptor	JKYi/reactor/acceptor.h	/^    Acceptor(EventLoop* loop,const Address::ptr& address,bool reuseport);$/;"	p	class:JKYi::net::Acceptor	access:public	signature:(EventLoop* loop,const Address::ptr& address,bool reuseport)
Acceptor	JKYi/reactor/acceptor.h	/^class Acceptor:public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
ActiveTimer	JKYi/reactor/timerQueue.h	/^    typedef std::pair<Timer* ,int64_t> ActiveTimer;$/;"	t	class:JKYi::net::TimerQueue	access:private
ActiveTimerSet	JKYi/reactor/timerQueue.h	/^    typedef std::set<ActiveTimer> ActiveTimerSet;$/;"	t	class:JKYi::net::TimerQueue	access:private
Address	JKYi/address.h	/^class Address{$/;"	c	namespace:JKYi
Alloc	JKYi/fiber.cc	/^   static void* Alloc(size_t size){$/;"	f	class:JKYi::MallocStackAllocator	access:public	signature:(size_t size)
Application	JKYi/application.cc	/^Application::Application(){$/;"	f	class:JKYi::Application	signature:()
Application	JKYi/application.h	/^    Application();$/;"	p	class:JKYi::Application	access:public	signature:()
Application	JKYi/application.h	/^class Application{$/;"	c	namespace:JKYi
Atof	JKYi/util.cc	/^double TypeUtil::Atof(const char * str){$/;"	f	class:JKYi::TypeUtil	signature:(const char * str)
Atof	JKYi/util.cc	/^double TypeUtil::Atof(const std::string& str){$/;"	f	class:JKYi::TypeUtil	signature:(const std::string& str)
Atof	JKYi/util.h	/^    static double Atof(const char * str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const char * str)
Atof	JKYi/util.h	/^    static double Atof(const std::string& str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const std::string& str)
Atoi	JKYi/util.cc	/^int64_t TypeUtil::Atoi(const char * str){$/;"	f	class:JKYi::TypeUtil	signature:(const char * str)
Atoi	JKYi/util.cc	/^int64_t TypeUtil::Atoi(const std::string& str){$/;"	f	class:JKYi::TypeUtil	signature:(const std::string& str)
Atoi	JKYi/util.h	/^    static int64_t Atoi(const char * str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const char * str)
Atoi	JKYi/util.h	/^    static int64_t Atoi(const std::string& str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const std::string& str)
AtomicInt32	JKYi/atomic.h	/^typedef AtomicIntegerT<int32_t> AtomicInt32;$/;"	t	namespace:JKYi
AtomicInt64	JKYi/atomic.h	/^typedef AtomicIntegerT<int64_t> AtomicInt64;$/;"	t	namespace:JKYi
AtomicIntegerT	JKYi/atomic.h	/^    AtomicIntegerT()$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
AtomicIntegerT	JKYi/atomic.h	/^class AtomicIntegerT : public Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
BIND_COPY	JKYi/db/mysql.cc	288;"	d	file:
BIND_COPY_LEN	JKYi/db/mysql.cc	372;"	d	file:
BIN_FRAME	JKYi/http/ws_session.h	/^        BIN_FRAME = 2,$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
Backtrace	JKYi/util.cc	/^void Backtrace(std::vector<std::string>&bt,int size,int skip){$/;"	f	namespace:JKYi	signature:(std::vector<std::string>&bt,int size,int skip)
Backtrace	JKYi/util.h	/^void Backtrace(std::vector<std::string>&bt,int size=64,int skip=1);$/;"	p	namespace:JKYi	signature:(std::vector<std::string>&bt,int size=64,int skip=1)
BacktraceToString	JKYi/util.cc	/^std::string BacktraceToString(int size,int skip,const std::string&prefix){$/;"	f	namespace:JKYi	signature:(int size,int skip,const std::string&prefix)
BacktraceToString	JKYi/util.h	/^std::string BacktraceToString(int size=64,int skip=2,const std::string&prefix="  ");$/;"	p	namespace:JKYi	signature:(int size=64,int skip=2,const std::string&prefix=Ó)
BlockingQueue	JKYi/BlockingQueue.h	/^    BlockingQueue()$/;"	f	class:JKYi::BlockingQueue	access:public	signature:()
BlockingQueue	JKYi/BlockingQueue.h	/^class BlockingQueue : Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
BlockingQueue	JKYi/ds/blocking_queue.h	/^class BlockingQueue{$/;"	c	namespace:JKYi::ds
BoundedBlockingQueue	JKYi/BoundedBlockingQueue.h	/^    explicit BoundedBlockingQueue(int maxSize)$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:(int maxSize)
BoundedBlockingQueue	JKYi/BoundedBlockingQueue.h	/^class BoundedBlockingQueue : Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
Bucket	JKYi/reactor/examples/idleconnection/echo.h	/^    typedef std::unordered_set<EntryPtr> Bucket;$/;"	t	class:EchoServer	access:private
Buffer	JKYi/reactor/Buffer.h	/^    explicit Buffer(size_t initialSize = kInitialSize)$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t initialSize = kInitialSize)
Buffer	JKYi/reactor/Buffer.h	/^class Buffer{$/;"	c	namespace:JKYi::net
ByteArray	JKYi/bytearray.cc	/^ByteArray::ByteArray(size_t base_size)$/;"	f	class:JKYi::ByteArray	signature:(size_t base_size)
ByteArray	JKYi/bytearray.cc	/^ByteArray::ByteArray(void * data,size_t size,bool owner)$/;"	f	class:JKYi::ByteArray	signature:(void * data,size_t size,bool owner)
ByteArray	JKYi/bytearray.h	/^    ByteArray(size_t base_size = 4096);$/;"	p	class:JKYi::ByteArray	access:public	signature:(size_t base_size = 4096)
ByteArray	JKYi/bytearray.h	/^    ByteArray(void * data,size_t size,bool owner = false);$/;"	p	class:JKYi::ByteArray	access:public	signature:(void * data,size_t size,bool owner = false)
ByteArray	JKYi/bytearray.h	/^class ByteArray{$/;"	c	namespace:JKYi
CASLock	JKYi/mutex.h	/^   CASLock(){$/;"	f	class:JKYi::CASLock	access:public	signature:()
CASLock	JKYi/mutex.h	/^class CASLock:Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
CHANGED	JKYi/zk_client.cc	/^const int ZKClient::EventType::CHANGED = ZOO_CHANGED_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
CHANGED	JKYi/zk_client.h	/^        static const int CHANGED;$/;"	m	class:JKYi::ZKClient::EventType	access:public
CHILD	JKYi/zk_client.cc	/^const int ZKClient::EventType::CHILD = ZOO_CHILD_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
CHILD	JKYi/zk_client.h	/^        static const int CHILD;$/;"	m	class:JKYi::ZKClient::EventType	access:public
CLOSE	JKYi/http/ws_session.h	/^        CLOSE = 8,$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
CMAKE_BINARY_DIR	build/JKYi/reactor/examples/Makefile	/^CMAKE_BINARY_DIR = \/home\/admin\/workSpace\/build$/;"	m
CMAKE_BINARY_DIR	build/JKYi/reactor/examples/idleconnection/Makefile	/^CMAKE_BINARY_DIR = \/home\/admin\/workSpace\/build$/;"	m
CMAKE_BINARY_DIR	build/JKYi/reactor/examples/maxconnection/Makefile	/^CMAKE_BINARY_DIR = \/home\/admin\/workSpace\/build$/;"	m
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/admin\/workSpace\/build$/;"	m
CMAKE_COMMAND	build/JKYi/reactor/examples/Makefile	/^CMAKE_COMMAND = \/usr\/local\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/JKYi/reactor/examples/idleconnection/Makefile	/^CMAKE_COMMAND = \/usr\/local\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/JKYi/reactor/examples/maxconnection/Makefile	/^CMAKE_COMMAND = \/usr\/local\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/local\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/JKYi/reactor/examples/Makefile	/^CMAKE_SOURCE_DIR = \/home\/admin\/workSpace$/;"	m
CMAKE_SOURCE_DIR	build/JKYi/reactor/examples/idleconnection/Makefile	/^CMAKE_SOURCE_DIR = \/home\/admin\/workSpace$/;"	m
CMAKE_SOURCE_DIR	build/JKYi/reactor/examples/maxconnection/Makefile	/^CMAKE_SOURCE_DIR = \/home\/admin\/workSpace$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/admin\/workSpace$/;"	m
CMD_ERR	JKYi/db/redis.h	/^        CMD_ERR = 3,$/;"	e	enum:JKYi::FoxRedis::RESULT
CMD_ERR	JKYi/db/redis.h	/^        CMD_ERR = 3,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	123;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	138;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	166;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	176;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	224;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	242;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	251;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	260;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	275;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	306;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	309;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	312;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	123;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	153;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	166;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	173;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	222;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	240;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	258;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	256;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	254;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	116;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	154;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	189;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	204;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	245;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	263;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	277;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	282;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	291;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	116;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	154;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	162;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	168;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	183;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	198;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	210;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	251;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	261;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	266;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	276;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	169;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	190;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	205;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	217;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	246;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	264;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	269;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	278;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	283;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	292;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	297;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	97;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	132;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	147;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	169;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	225;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	252;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	262;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	277;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	282;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	118;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	127;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	142;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	148;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	191;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	220;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	234;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	255;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	265;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	270;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	279;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	284;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	298;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	200;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	218;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	245;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	268;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	278;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	283;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	143;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	197;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	238;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	236;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
CONNECTED	JKYi/db/redis.h	/^        CONNECTED = 2$/;"	e	enum:JKYi::FoxRedis::STATUS
CONNECTED	JKYi/db/redis.h	/^        CONNECTED = 2$/;"	e	enum:JKYi::FoxRedisCluster::STATUS
CONNECTED	JKYi/zk_client.cc	/^const int ZKClient::StateType::CONNECTED = ZOO_CONNECTED_STATE;$/;"	m	class:JKYi::ZKClient::StateType	file:
CONNECTED	JKYi/zk_client.h	/^        static const int CONNECTED;$/;"	m	class:JKYi::ZKClient::StateType	access:public
CONNECTING	JKYi/db/redis.h	/^        CONNECTING = 1,$/;"	e	enum:JKYi::FoxRedis::STATUS
CONNECTING	JKYi/db/redis.h	/^        CONNECTING = 1,$/;"	e	enum:JKYi::FoxRedisCluster::STATUS
CONNECTING	JKYi/zk_client.cc	/^const int ZKClient::StateType::CONNECTING = ZOO_CONNECTING_STATE;$/;"	m	class:JKYi::ZKClient::StateType	file:
CONNECTING	JKYi/zk_client.h	/^        static const int CONNECTING;$/;"	m	class:JKYi::ZKClient::StateType	access:public
CONNECT_ERR	JKYi/db/redis.h	/^        CONNECT_ERR = 2,$/;"	e	enum:JKYi::FoxRedis::RESULT
CONNECT_ERR	JKYi/db/redis.h	/^        CONNECT_ERR = 2,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
CONNECT_FAIL	JKYi/http/http_connection.h	/^        CONNECT_FAIL = 3,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
CONTINUATION	JKYi/http2/frame.h	/^    CONTINUATION   = 0X9$/;"	m	class:JKYi::http2::FrameType	access:private
CONTINUE	JKYi/http/ws_session.h	/^        CONTINUE = 0,$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
CREATED	JKYi/zk_client.cc	/^const int ZKClient::EventType::CREATED = ZOO_CREATED_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
CREATED	JKYi/zk_client.h	/^        static const int CREATED;$/;"	m	class:JKYi::ZKClient::EventType	access:public
CREATE_SOCKET_ERROR	JKYi/http/http_connection.h	/^        CREATE_SOCKET_ERROR = 7,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
CXX_STD	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	558;"	d	file:
CXX_STD	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	560;"	d	file:
C_DIALECT	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	575;"	d	file:
C_DIALECT	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	577;"	d	file:
C_DIALECT	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	580;"	d	file:
C_DIALECT	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	582;"	d	file:
C_DIALECT	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	584;"	d	file:
CallerMainFunc	JKYi/fiber.cc	/^void Fiber::CallerMainFunc(){$/;"	f	class:JKYi::Fiber	signature:()
CallerMainFunc	JKYi/fiber.h	/^   static void CallerMainFunc();$/;"	p	class:JKYi::Fiber	access:public	signature:()
CaseInsensitiveLess	JKYi/http/http.h	/^struct CaseInsensitiveLess{$/;"	s	namespace:JKYi::http
Channel	JKYi/reactor/channel.cc	/^Channel::Channel(EventLoop* loop,int fd)$/;"	f	class:JKYi::net::Channel	signature:(EventLoop* loop,int fd)
Channel	JKYi/reactor/channel.h	/^    Channel(EventLoop* loop,int fd);$/;"	p	class:JKYi::net::Channel	access:public	signature:(EventLoop* loop,int fd)
Channel	JKYi/reactor/channel.h	/^class Channel{$/;"	c	namespace:JKYi::net
ChannelList	JKYi/reactor/EventLoop.h	/^    typedef std::vector<Channel*> ChannelList;$/;"	t	class:JKYi::net::EventLoop	access:private
ChannelList	JKYi/reactor/poller.h	/^    typedef std::vector<Channel*> ChannelList;$/;"	t	class:JKYi::net::Poller	access:public
ChannelMap	JKYi/reactor/poller.h	/^    typedef std::map<int,Channel*> ChannelMap;$/;"	t	class:JKYi::net::Poller	access:protected
CharsToHttpMethod	JKYi/http/http.cc	/^HttpMethod CharsToHttpMethod(const char* s){$/;"	f	namespace:JKYi::http	signature:(const char* s)
CharsToHttpMethod	JKYi/http/http.h	/^HttpMethod CharsToHttpMethod(const char* c);$/;"	p	namespace:JKYi::http	signature:(const char* c)
CloseCallback	JKYi/reactor/Callbacks.h	/^typedef std::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:JKYi::net
Cmd	JKYi/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name,const char * fmt,...){$/;"	f	class:JKYi::RedisUtil	signature:(const std::string& name,const char * fmt,...)
Cmd	JKYi/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name,const char * fmt,va_list ap){$/;"	f	class:JKYi::RedisUtil	signature:(const std::string& name,const char * fmt,va_list ap)
Cmd	JKYi/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name,const std::vector<std::string>& args){$/;"	f	class:JKYi::RedisUtil	signature:(const std::string& name,const std::vector<std::string>& args)
Cmd	JKYi/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name,const char * fmt,...);$/;"	p	class:JKYi::RedisUtil	access:public	signature:(const std::string& name,const char * fmt,...)
Cmd	JKYi/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name,const char * fmt,va_list ap);$/;"	p	class:JKYi::RedisUtil	access:public	signature:(const std::string& name,const char * fmt,va_list ap)
Cmd	JKYi/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name,const std::vector<std::string>& args);$/;"	p	class:JKYi::RedisUtil	access:public	signature:(const std::string& name,const std::vector<std::string>& args)
CmdCb	JKYi/db/redis.cc	/^void FoxRedis::CmdCb(redisAsyncContext* ac,void * r,void * pridata){$/;"	f	class:JKYi::FoxRedis	signature:(redisAsyncContext* ac,void * r,void * pridata)
CmdCb	JKYi/db/redis.cc	/^void FoxRedisCluster::CmdCb(redisClusterAsyncContext* c,void * r,void * privdata){$/;"	f	class:JKYi::FoxRedisCluster	signature:(redisClusterAsyncContext* c,void * r,void * privdata)
CmdCb	JKYi/db/redis.h	/^    static void CmdCb(redisAsyncContext* c,void * r,void * privdata);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(redisAsyncContext* c,void * r,void * privdata)
CmdCb	JKYi/db/redis.h	/^    static void CmdCb(redisClusterAsyncContext* c,void * r,void * privdata);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(redisClusterAsyncContext* c,void * r,void * privdata)
Comparator	JKYi/timer.h	/^   struct Comparator{$/;"	s	class:JKYi::Timer	access:private
Condition	JKYi/condition.h	/^    explicit Condition(Mutex& mutex)$/;"	f	class:JKYi::Condition	access:public	signature:(Mutex& mutex)
Condition	JKYi/condition.h	/^class Condition : public Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
Config	JKYi/config.h	/^class Config{$/;"	c	namespace:JKYi
ConfigVar	JKYi/config.h	/^   ConfigVar(const std::string&name,const T&default_value,const std::string&description="")$/;"	f	class:JKYi::ConfigVar	access:public	signature:(const std::string&name,const T&default_value,const std::string&description=Ó)
ConfigVar	JKYi/config.h	/^class ConfigVar:public ConfigVarBase{$/;"	c	namespace:JKYi	inherits:ConfigVarBase
ConfigVarBase	JKYi/config.h	/^   ConfigVarBase(const std::string&name,const std::string&description="")$/;"	f	class:JKYi::ConfigVarBase	access:public	signature:(const std::string&name,const std::string&description=Ó)
ConfigVarBase	JKYi/config.h	/^class ConfigVarBase{$/;"	c	namespace:JKYi
ConfigVarMap	JKYi/config.h	/^    typedef std::map<std::string,ConfigVarBase::ptr> ConfigVarMap;$/;"	t	class:JKYi::Config	access:public
ConnectCb	JKYi/db/redis.cc	/^void FoxRedis::ConnectCb(const redisAsyncContext * c,int status){$/;"	f	class:JKYi::FoxRedis	signature:(const redisAsyncContext * c,int status)
ConnectCb	JKYi/db/redis.cc	/^void FoxRedisCluster::ConnectCb(const redisAsyncContext* c,int status){$/;"	f	class:JKYi::FoxRedisCluster	signature:(const redisAsyncContext* c,int status)
ConnectCb	JKYi/db/redis.h	/^    static void ConnectCb(const redisAsyncContext* c,int status);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(const redisAsyncContext* c,int status)
ConnectCb	JKYi/db/redis.h	/^    static void ConnectCb(const redisAsyncContext* c,int status);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(const redisAsyncContext* c,int status)
ConnectionCallback	JKYi/reactor/Callbacks.h	/^typedef std::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:JKYi::net
ConnectionMap	JKYi/reactor/TcpServer.h	/^    typedef std::map<std::string,TcpConnection::ptr> ConnectionMap;$/;"	t	class:JKYi::net::TcpServer	access:private
Connector	JKYi/reactor/Connector.cc	/^Connector::Connector(EventLoop* loop,const Address::ptr& serverAddr)$/;"	f	class:JKYi::net::Connector	signature:(EventLoop* loop,const Address::ptr& serverAddr)
Connector	JKYi/reactor/Connector.h	/^    Connector(EventLoop* loop,const Address::ptr& serverAddr);$/;"	p	class:JKYi::net::Connector	access:public	signature:(EventLoop* loop,const Address::ptr& serverAddr)
Connector	JKYi/reactor/Connector.h	/^class Connector : public Noncopyable,$/;"	c	namespace:JKYi::net	inherits:Noncopyable,std::enable_shared_from_this
ConnectorPtr	JKYi/reactor/TcpClient.h	/^typedef std::shared_ptr<Connector> ConnectorPtr;$/;"	t	namespace:JKYi::net
CopyToString	JKYi/reactor/StringPiece.h	/^  void CopyToString(std::string* target) const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(std::string* target) const
Copyable	JKYi/copyable.h	/^    Copyable() = default;$/;"	p	class:JKYi::Copyable	access:protected	signature:()
Copyable	JKYi/copyable.h	/^class Copyable{$/;"	c	namespace:JKYi
CountBytes	JKYi/address.cc	/^static uint32_t CountBytes(T value){$/;"	f	namespace:JKYi	signature:(T value)
CountDownLatch	JKYi/CountDownLatch.cc	/^CountDownLatch::CountDownLatch(int count)$/;"	f	class:JKYi::CountDownLatch	signature:(int count)
CountDownLatch	JKYi/CountDownLatch.h	/^    explicit CountDownLatch(int count);$/;"	p	class:JKYi::CountDownLatch	access:public	signature:(int count)
CountDownLatch	JKYi/CountDownLatch.h	/^class CountDownLatch : Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
Create	JKYi/address.cc	/^Address::ptr Address::Create(const sockaddr*addr,socklen_t addrlen){$/;"	f	class:JKYi::Address	signature:(const sockaddr*addr,socklen_t addrlen)
Create	JKYi/address.cc	/^IPAddress::ptr IPAddress::Create(const char * address,uint16_t port){$/;"	f	class:JKYi::IPAddress	signature:(const char * address,uint16_t port)
Create	JKYi/address.cc	/^IPv4Address::ptr IPv4Address::Create(const char *addr,uint16_t port){$/;"	f	class:JKYi::IPv4Address	signature:(const char *addr,uint16_t port)
Create	JKYi/address.cc	/^IPv6Address::ptr IPv6Address::Create(const char*address,uint16_t port){$/;"	f	class:JKYi::IPv6Address	signature:(const char*address,uint16_t port)
Create	JKYi/address.h	/^	static Address::ptr Create(const sockaddr*addr,socklen_t addrlen);$/;"	p	class:JKYi::Address	access:public	signature:(const sockaddr*addr,socklen_t addrlen)
Create	JKYi/address.h	/^	static IPAddress::ptr Create(const char*address,uint16_t port=0);$/;"	p	class:JKYi::IPAddress	access:public	signature:(const char*address,uint16_t port=0)
Create	JKYi/address.h	/^	static IPv4Address::ptr Create(const char*addr,uint16_t port=0);$/;"	p	class:JKYi::IPv4Address	access:public	signature:(const char*addr,uint16_t port=0)
Create	JKYi/address.h	/^	static IPv6Address::ptr Create(const char*address,uint16_t port=0);$/;"	p	class:JKYi::IPv6Address	access:public	signature:(const char*address,uint16_t port=0)
Create	JKYi/db/mysql.cc	/^MySQLStmt::ptr MySQLStmt::Create(MySQL::ptr db,const std::string& stmt){$/;"	f	class:JKYi::MySQLStmt	signature:(MySQL::ptr db,const std::string& stmt)
Create	JKYi/db/mysql.cc	/^MySQLStmtRes::ptr MySQLStmtRes::Create(std::shared_ptr<MySQLStmt>stmt){$/;"	f	class:JKYi::MySQLStmtRes	signature:(std::shared_ptr<MySQLStmt>stmt)
Create	JKYi/db/mysql.cc	/^MySQLTransaction::ptr MySQLTransaction::Create(MySQL::ptr mysql,bool auto_commit){$/;"	f	class:JKYi::MySQLTransaction	signature:(MySQL::ptr mysql,bool auto_commit)
Create	JKYi/db/mysql.h	/^    static MySQLStmt::ptr Create(MySQL::ptr mysql,const std::string& stmt);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(MySQL::ptr mysql,const std::string& stmt)
Create	JKYi/db/mysql.h	/^    static MySQLStmtRes::ptr Create(std::shared_ptr<MySQLStmt> stmt);$/;"	p	class:JKYi::MySQLStmtRes	access:public	signature:(std::shared_ptr<MySQLStmt> stmt)
Create	JKYi/db/mysql.h	/^   static MySQLTransaction::ptr Create(MySQL::ptr mysql,bool auto_commit);$/;"	p	class:JKYi::MySQLTransaction	access:public	signature:(MySQL::ptr mysql,bool auto_commit)
Create	JKYi/http/http_connection.cc	/^HttpConnectionPool::ptr HttpConnectionPool::Create(const std::string& uri,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(const std::string& uri, const std::string& vhost, uint32_t max_size, uint32_t max_alive_time, uint32_t max_request)
Create	JKYi/http/http_connection.h	/^    static HttpConnectionPool::ptr Create(const std::string& uri,const std::string& vhost,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request);$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(const std::string& uri,const std::string& vhost,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request)
Create	JKYi/http/ws_connection.cc	/^std::pair<HttpResult::ptr,WSConnection::ptr> WSConnection::Create(Uri::ptr uri,$/;"	f	class:JKYi::http::WSConnection	signature:(Uri::ptr uri, uint64_t timeout_ms,const std::map<std::string,std::string>& headers)
Create	JKYi/http/ws_connection.cc	/^std::pair<HttpResult::ptr,WSConnection::ptr> WSConnection::Create(const std::string& url,$/;"	f	class:JKYi::http::WSConnection	signature:(const std::string& url, uint64_t timeout_ms,const std::map<std::string,std::string>& headers)
Create	JKYi/http/ws_connection.h	/^    static std::pair<HttpResult::ptr,WSConnection::ptr> Create(Uri::ptr uri,$/;"	p	class:JKYi::http::WSConnection	access:public	signature:(Uri::ptr uri, uint64_t timeous_ms,const std::map<std::string,std::string>& header = {})
Create	JKYi/http/ws_connection.h	/^    static std::pair<HttpResult::ptr,WSConnection::ptr> Create(const std::string& uri,$/;"	p	class:JKYi::http::WSConnection	access:public	signature:(const std::string& uri, uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {})
Create	JKYi/uri.h	/^    static Uri::ptr Create(const std::string& uri);$/;"	p	class:JKYi::Uri	access:public	signature:(const std::string& uri)
Create	JKYi/uri.rl.cc	/^Uri::ptr Uri::Create(const std::string& uristr) {$/;"	f	class:JKYi::Uri	signature:(const std::string& uristr)
CreateMask	JKYi/address.cc	/^static T CreateMask(uint32_t bits){$/;"	f	namespace:JKYi	signature:(uint32_t bits)
CreateModule	template/template/my_module.cc	/^JKYi::Module* CreateModule(){$/;"	f	signature:()
CreateTCP	JKYi/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCP(JKYi::Address::ptr address){$/;"	f	class:JKYi::SSLSocket	signature:(JKYi::Address::ptr address)
CreateTCP	JKYi/socket.cc	/^Socket::ptr Socket::CreateTCP(Address::ptr address){$/;"	f	class:JKYi::Socket	signature:(Address::ptr address)
CreateTCP	JKYi/socket.h	/^    static SSLSocket::ptr CreateTCP(JKYi::Address::ptr addr);$/;"	p	class:JKYi::SSLSocket	access:public	signature:(JKYi::Address::ptr addr)
CreateTCP	JKYi/socket.h	/^    static Socket::ptr CreateTCP(Address::ptr address);$/;"	p	class:JKYi::Socket	access:public	signature:(Address::ptr address)
CreateTCPSocket	JKYi/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCPSocket(){$/;"	f	class:JKYi::SSLSocket	signature:()
CreateTCPSocket	JKYi/socket.cc	/^Socket::ptr Socket::CreateTCPSocket(){$/;"	f	class:JKYi::Socket	signature:()
CreateTCPSocket	JKYi/socket.h	/^    static SSLSocket::ptr CreateTCPSocket();$/;"	p	class:JKYi::SSLSocket	access:public	signature:()
CreateTCPSocket	JKYi/socket.h	/^    static Socket::ptr CreateTCPSocket();$/;"	p	class:JKYi::Socket	access:public	signature:()
CreateTCPSocket6	JKYi/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCPSocket6(){$/;"	f	class:JKYi::SSLSocket	signature:()
CreateTCPSocket6	JKYi/socket.cc	/^Socket::ptr Socket::CreateTCPSocket6(){$/;"	f	class:JKYi::Socket	signature:()
CreateTCPSocket6	JKYi/socket.h	/^    static SSLSocket::ptr CreateTCPSocket6();$/;"	p	class:JKYi::SSLSocket	access:public	signature:()
CreateTCPSocket6	JKYi/socket.h	/^    static Socket::ptr CreateTCPSocket6();$/;"	p	class:JKYi::Socket	access:public	signature:()
CreateUDP	JKYi/socket.cc	/^Socket::ptr Socket::CreateUDP(Address::ptr address){$/;"	f	class:JKYi::Socket	signature:(Address::ptr address)
CreateUDP	JKYi/socket.h	/^    static Socket::ptr CreateUDP(Address::ptr address);$/;"	p	class:JKYi::Socket	access:public	signature:(Address::ptr address)
CreateUDPSocket	JKYi/socket.cc	/^Socket::ptr Socket::CreateUDPSocket(){$/;"	f	class:JKYi::Socket	signature:()
CreateUDPSocket	JKYi/socket.h	/^    static Socket::ptr CreateUDPSocket();$/;"	p	class:JKYi::Socket	access:public	signature:()
CreateUDPSocket6	JKYi/socket.cc	/^Socket::ptr Socket::CreateUDPSocket6(){$/;"	f	class:JKYi::Socket	signature:()
CreateUDPSocket6	JKYi/socket.h	/^    static Socket::ptr CreateUDPSocket6();$/;"	p	class:JKYi::Socket	access:public	signature:()
CreateUnixTCPSocket	JKYi/socket.cc	/^Socket::ptr Socket::CreateUnixTCPSocket(){$/;"	f	class:JKYi::Socket	signature:()
CreateUnixTCPSocket	JKYi/socket.h	/^    static Socket::ptr CreateUnixTCPSocket();$/;"	p	class:JKYi::Socket	access:public	signature:()
CreateUnixUDPSocket	JKYi/socket.cc	/^Socket::ptr Socket::CreateUnixUDPSocket(){$/;"	f	class:JKYi::Socket	signature:()
CreateUnixUDPSocket	JKYi/socket.h	/^    static Socket::ptr CreateUnixUDPSocket();$/;"	p	class:JKYi::Socket	access:public	signature:()
Ctx	JKYi/db/redis.cc	/^FoxRedis::Ctx::Ctx(FoxRedis* thr)$/;"	f	class:JKYi::FoxRedis::Ctx	signature:(FoxRedis* thr)
Ctx	JKYi/db/redis.cc	/^FoxRedisCluster::Ctx::Ctx(FoxRedisCluster* r)$/;"	f	class:JKYi::FoxRedisCluster::Ctx	signature:(FoxRedisCluster* r)
Ctx	JKYi/db/redis.h	/^        Ctx(FoxRedis* rds);$/;"	p	struct:JKYi::FoxRedis::Ctx	access:public	signature:(FoxRedis* rds)
Ctx	JKYi/db/redis.h	/^        Ctx(FoxRedisCluster* rds);$/;"	p	struct:JKYi::FoxRedisCluster::Ctx	access:public	signature:(FoxRedisCluster* rds)
Ctx	JKYi/db/redis.h	/^    struct Ctx{$/;"	s	class:JKYi::FoxRedis	access:private
Ctx	JKYi/db/redis.h	/^    struct Ctx{$/;"	s	class:JKYi::FoxRedisCluster	access:private
CurrentThread	JKYi/reactor/CurrentThread.cc	/^namespace CurrentThread{$/;"	n	namespace:JKYi	file:
CurrentThread	JKYi/reactor/CurrentThread.h	/^namespace CurrentThread{$/;"	n	namespace:JKYi
CurrentThread	JKYi/reactor/Thread.cc	/^namespace CurrentThread{$/;"	n	namespace:JKYi	file:
DATA	JKYi/http2/frame.h	/^    DATA           = 0x0,$/;"	m	class:JKYi::http2::FrameType	access:private
DEBUG	JKYi/log.h	/^     DEBUG = 1,$/;"	e	enum:JKYi::LogLevel::Level
DEC	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	496;"	d	file:
DEC	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	481;"	d	file:
DELETED	JKYi/zk_client.cc	/^const int ZKClient::EventType::DELETED = ZOO_DELETED_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
DELETED	JKYi/zk_client.h	/^        static const int DELETED;$/;"	m	class:JKYi::ZKClient::EventType	access:public
Data	JKYi/db/mysql.cc	/^MySQLStmtRes::Data::Data()$/;"	f	class:JKYi::MySQLStmtRes::Data	signature:()
Data	JKYi/db/mysql.h	/^        Data();$/;"	p	struct:JKYi::MySQLStmtRes::Data	access:public	signature:()
Data	JKYi/db/mysql.h	/^    struct Data{$/;"	s	class:JKYi::MySQLStmtRes	access:private
DataFrame	JKYi/http2/frame.h	/^struct DataFrame:public IFrame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	inherits:IFrame	access:private
DateTimeFormatItem	JKYi/log.cc	/^    DateTimeFormatItem(const std::string& format = "%Y-%m-%d %H:%M:%S")$/;"	f	class:JKYi::DateTimeFormatItem	access:public	signature:(const std::string& format = Ó)
DateTimeFormatItem	JKYi/log.cc	/^class DateTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
Dealloc	JKYi/fiber.cc	/^   static void Dealloc(void *ptr,size_t size){$/;"	f	class:JKYi::MallocStackAllocator	access:public	signature:(void *ptr,size_t size)
DecodeString	JKYi/http2/huffman.cc	/^int Huffman::DecodeString(const char* in, int in_len, std::string& out) {$/;"	f	class:JKYi::http2::Huffman	signature:(const char* in, int in_len, std::string& out)
DecodeString	JKYi/http2/huffman.cc	/^int Huffman::DecodeString(const std::string& in, std::string& out) {$/;"	f	class:JKYi::http2::Huffman	signature:(const std::string& in, std::string& out)
DecodeString	JKYi/http2/huffman.h	/^    static int DecodeString(const char* in, int in_len, std::string& out);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const char* in, int in_len, std::string& out)
DecodeString	JKYi/http2/huffman.h	/^    static int DecodeString(const std::string& in, std::string& out);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const std::string& in, std::string& out)
DecodeZigzag32	JKYi/bytearray.cc	/^static int32_t DecodeZigzag32(const uint32_t&val){$/;"	f	namespace:JKYi	signature:(const uint32_t&val)
DecodeZigzag64	JKYi/bytearray.cc	/^static int64_t DecodeZigzag64(const uint64_t &val){$/;"	f	namespace:JKYi	signature:(const uint64_t &val)
DestroyModule	template/template/my_module.cc	/^void DestroyModule(JKYi::Module * module){$/;"	f	signature:(JKYi::Module * module)
DisconnectCb	JKYi/db/redis.cc	/^void FoxRedis::DisconnectCb(const redisAsyncContext* c,int status){$/;"	f	class:JKYi::FoxRedis	signature:(const redisAsyncContext* c,int status)
DisconnectCb	JKYi/db/redis.cc	/^void FoxRedisCluster::DisconnectCb(const redisAsyncContext*c,int status){$/;"	f	class:JKYi::FoxRedisCluster	signature:(const redisAsyncContext*c,int status)
DisconnectCb	JKYi/db/redis.h	/^    static void DisconnectCb(const redisAsyncContext* c,int status);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(const redisAsyncContext* c,int status)
DisconnectCb	JKYi/db/redis.h	/^    static void DisconnectCb(const redisAsyncContext* c,int status);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(const redisAsyncContext* c,int status)
DoGet	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoGet(Uri::ptr uri,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnection	signature:(Uri::ptr uri,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
DoGet	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoGet(const std::string& url,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnection	signature:(const std::string& url,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
DoGet	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoGet(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
DoGet	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoGet(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
DoPost	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoPost(Uri::ptr uri,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnection	signature:(Uri::ptr uri,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
DoPost	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoPost(const std::string& url,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnection	signature:(const std::string& url,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
DoPost	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoPost(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
DoPost	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoPost(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body =""); $/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body =Ó)
DoRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpMethod method,Uri::ptr uri,$/;"	f	class:JKYi::http::HttpConnection	signature:(HttpMethod method,Uri::ptr uri, uint64_t timeout_ms, const std::map<std::string,std::string>&headers, const std::string& body)
DoRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpMethod method,const std::string& url,$/;"	f	class:JKYi::http::HttpConnection	signature:(HttpMethod method,const std::string& url, uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
DoRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpRequest::ptr req,Uri::ptr uri,$/;"	f	class:JKYi::http::HttpConnection	signature:(HttpRequest::ptr req,Uri::ptr uri, uint64_t timeout_ms)
DoRequest	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
DoRequest	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpMethod method,const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(HttpMethod method,const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
DoRequest	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpRequest::ptr request,Uri::ptr uri,uint64_t timeout_ms);$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(HttpRequest::ptr request,Uri::ptr uri,uint64_t timeout_ms)
DynamicTable	JKYi/http2/dynamic_table.cc	/^DynamicTable::DynamicTable()$/;"	f	class:JKYi::http2::DynamicTable	signature:()
DynamicTable	JKYi/http2/dynamic_table.h	/^    DynamicTable();$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:()
DynamicTable	JKYi/http2/dynamic_table.h	/^class DynamicTable{$/;"	c	namespace:JKYi::http2
ENABLE_PUSH	JKYi/http2/frame.h	/^        ENABLE_PUSH              =  0x2,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
END_HEADERS	JKYi/http2/frame.h	/^    END_HEADERS    = 0x4$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation	access:private
END_HEADERS	JKYi/http2/frame.h	/^    END_HEADERS    = 0x4,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	access:private
END_HEADERS	JKYi/http2/frame.h	/^    END_HEADERS    = 0x4,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise	access:private
END_STREAM	JKYi/http2/frame.h	/^    END_STREAM     = 0x1,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	access:private
END_STREAM	JKYi/http2/frame.h	/^    END_STREAM = 0x1,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData	access:private
EPHEMERAL	JKYi/zk_client.cc	/^const int ZKClient::FlagsType::EPHEMERAL = ZOO_EPHEMERAL;$/;"	m	class:JKYi::ZKClient::FlagsType	file:
EPHEMERAL	JKYi/zk_client.h	/^        static const int EPHEMERAL;$/;"	m	class:JKYi::ZKClient::FlagsType	access:public
EQUALS	build/JKYi/reactor/examples/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/JKYi/reactor/examples/idleconnection/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/JKYi/reactor/examples/maxconnection/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
ERROR	JKYi/http2/hpack.h	/^    ERROR                         = 7$/;"	m	class:JKYi::http2::IndexType	access:private
ERROR	JKYi/log.h	/^     ERROR = 4,$/;"	e	enum:JKYi::LogLevel::Level
EXCEPT	JKYi/fiber.h	/^	  EXCEPT\/\/å¼å¸¸æ$/;"	e	enum:JKYi::Fiber::State
EXEC	JKYi/fiber.h	/^	  EXEC,  \/\/è¿è¡æ$/;"	e	enum:JKYi::Fiber::State
EXPIRED_SESSION	JKYi/zk_client.cc	/^const int ZKClient::StateType::EXPIRED_SESSION = ZOO_EXPIRED_SESSION_STATE;$/;"	m	class:JKYi::ZKClient::StateType	file:
EXPIRED_SESSION	JKYi/zk_client.h	/^        static const int EXPIRED_SESSION;$/;"	m	class:JKYi::ZKClient::StateType	access:public
EchoServer	JKYi/reactor/examples/idleconnection/echo.cc	/^EchoServer::EchoServer(JKYi::net::EventLoop* loop,$/;"	f	class:EchoServer	signature:(JKYi::net::EventLoop* loop, const Address::ptr& serverAddr, int idleSeconds)
EchoServer	JKYi/reactor/examples/idleconnection/echo.h	/^    EchoServer(JKYi::net::EventLoop* loop,$/;"	p	class:EchoServer	access:public	signature:(JKYi::net::EventLoop* loop, const JKYi::Address::ptr& serverAddr, int idleSeconds)
EchoServer	JKYi/reactor/examples/idleconnection/echo.h	/^class EchoServer{$/;"	c
EchoServer	JKYi/reactor/examples/maxconnection/echo.cc	/^EchoServer::EchoServer(EventLoop *loop,$/;"	f	class:EchoServer	signature:(EventLoop *loop, const Address::ptr& serverAddr, int maxConnections)
EchoServer	JKYi/reactor/examples/maxconnection/echo.h	/^    EchoServer(JKYi::net::EventLoop *loop,$/;"	p	class:EchoServer	access:public	signature:(JKYi::net::EventLoop *loop, const JKYi::Address::ptr& serverAddr, int maxConnections)
EchoServer	JKYi/reactor/examples/maxconnection/echo.h	/^class EchoServer{$/;"	c
EchoServer::Bucket	JKYi/reactor/examples/idleconnection/echo.h	/^    typedef std::unordered_set<EntryPtr> Bucket;$/;"	t	class:EchoServer	access:private
EchoServer::EchoServer	JKYi/reactor/examples/idleconnection/echo.cc	/^EchoServer::EchoServer(JKYi::net::EventLoop* loop,$/;"	f	class:EchoServer	signature:(JKYi::net::EventLoop* loop, const Address::ptr& serverAddr, int idleSeconds)
EchoServer::EchoServer	JKYi/reactor/examples/idleconnection/echo.h	/^    EchoServer(JKYi::net::EventLoop* loop,$/;"	p	class:EchoServer	access:public	signature:(JKYi::net::EventLoop* loop, const JKYi::Address::ptr& serverAddr, int idleSeconds)
EchoServer::EchoServer	JKYi/reactor/examples/maxconnection/echo.cc	/^EchoServer::EchoServer(EventLoop *loop,$/;"	f	class:EchoServer	signature:(EventLoop *loop, const Address::ptr& serverAddr, int maxConnections)
EchoServer::EchoServer	JKYi/reactor/examples/maxconnection/echo.h	/^    EchoServer(JKYi::net::EventLoop *loop,$/;"	p	class:EchoServer	access:public	signature:(JKYi::net::EventLoop *loop, const JKYi::Address::ptr& serverAddr, int maxConnections)
EchoServer::Entry	JKYi/reactor/examples/idleconnection/echo.h	/^    struct Entry : public JKYi::Noncopyable{$/;"	s	class:EchoServer	inherits:JKYi::Noncopyable	access:private
EchoServer::Entry::Entry	JKYi/reactor/examples/idleconnection/echo.h	/^        explicit Entry(const WeakTcpConnectionPtr& weakConn)$/;"	f	struct:EchoServer::Entry	access:public	signature:(const WeakTcpConnectionPtr& weakConn)
EchoServer::Entry::weakConn_	JKYi/reactor/examples/idleconnection/echo.h	/^        WeakTcpConnectionPtr weakConn_;$/;"	m	struct:EchoServer::Entry	access:public
EchoServer::Entry::~Entry	JKYi/reactor/examples/idleconnection/echo.h	/^        ~Entry(){$/;"	f	struct:EchoServer::Entry	access:public	signature:()
EchoServer::EntryPtr	JKYi/reactor/examples/idleconnection/echo.h	/^    typedef std::shared_ptr<Entry> EntryPtr;$/;"	t	class:EchoServer	access:private
EchoServer::WeakConnectionList	JKYi/reactor/examples/idleconnection/echo.h	/^    typedef boost::circular_buffer<Bucket> WeakConnectionList;$/;"	t	class:EchoServer	access:private
EchoServer::WeakEntryPtr	JKYi/reactor/examples/idleconnection/echo.h	/^    typedef std::weak_ptr<Entry> WeakEntryPtr;$/;"	t	class:EchoServer	access:private
EchoServer::WeakTcpConnectionPtr	JKYi/reactor/examples/idleconnection/echo.h	/^    typedef std::weak_ptr<JKYi::net::TcpConnection> WeakTcpConnectionPtr;$/;"	t	class:EchoServer	access:private
EchoServer::connectionBuckets_	JKYi/reactor/examples/idleconnection/echo.h	/^    WeakConnectionList connectionBuckets_;   \/\/æ¶é´è½®$/;"	m	class:EchoServer	access:private
EchoServer::dumpConnectionBuckets	JKYi/reactor/examples/idleconnection/echo.cc	/^void EchoServer::dumpConnectionBuckets()const{$/;"	f	class:EchoServer	signature:() const
EchoServer::dumpConnectionBuckets	JKYi/reactor/examples/idleconnection/echo.h	/^    void dumpConnectionBuckets()const;\/\/è¯¥å½æ°å¶å®å°±æ¯ç¨æ¥å¯¹å½åæ¶é´è½®ä¸­çè¿æ¥è¿è¡è¾åº$/;"	p	class:EchoServer	access:private	signature:() const
EchoServer::kMaxConnections_	JKYi/reactor/examples/maxconnection/echo.h	/^   const int kMaxConnections_;   \/\/æå¤§è¿æ¥æ°$/;"	m	class:EchoServer	access:private
EchoServer::numConnected_	JKYi/reactor/examples/maxconnection/echo.h	/^   int numConnected_;$/;"	m	class:EchoServer	access:private
EchoServer::onConnection	JKYi/reactor/examples/idleconnection/echo.cc	/^void EchoServer::onConnection(const TcpConnection::ptr& conn){$/;"	f	class:EchoServer	signature:(const TcpConnection::ptr& conn)
EchoServer::onConnection	JKYi/reactor/examples/idleconnection/echo.h	/^    void onConnection(const JKYi::net::TcpConnection::ptr& conn);$/;"	p	class:EchoServer	access:private	signature:(const JKYi::net::TcpConnection::ptr& conn)
EchoServer::onConnection	JKYi/reactor/examples/maxconnection/echo.cc	/^void EchoServer::onConnection(const TcpConnection::ptr& conn){$/;"	f	class:EchoServer	signature:(const TcpConnection::ptr& conn)
EchoServer::onConnection	JKYi/reactor/examples/maxconnection/echo.h	/^   void onConnection(const JKYi::net::TcpConnection::ptr& conn);$/;"	p	class:EchoServer	access:private	signature:(const JKYi::net::TcpConnection::ptr& conn)
EchoServer::onMessage	JKYi/reactor/examples/idleconnection/echo.cc	/^void EchoServer::onMessage(const TcpConnection::ptr& conn,$/;"	f	class:EchoServer	signature:(const TcpConnection::ptr& conn, Buffer* buf,Timestamp receiveTime)
EchoServer::onMessage	JKYi/reactor/examples/idleconnection/echo.h	/^    void onMessage(const JKYi::net::TcpConnection::ptr& conn,JKYi::net::Buffer* buf,JKYi::net::Timestamp receiveTime);$/;"	p	class:EchoServer	access:private	signature:(const JKYi::net::TcpConnection::ptr& conn,JKYi::net::Buffer* buf,JKYi::net::Timestamp receiveTime)
EchoServer::onMessage	JKYi/reactor/examples/maxconnection/echo.cc	/^void EchoServer::onMessage(const TcpConnection::ptr& conn,$/;"	f	class:EchoServer	signature:(const TcpConnection::ptr& conn, Buffer* buf, Timestamp receiveTime)
EchoServer::onMessage	JKYi/reactor/examples/maxconnection/echo.h	/^   void onMessage(const JKYi::net::TcpConnection::ptr& conn,$/;"	p	class:EchoServer	access:private	signature:(const JKYi::net::TcpConnection::ptr& conn, JKYi::net::Buffer* buf, JKYi::net::Timestamp receiveTime)
EchoServer::onTimer	JKYi/reactor/examples/idleconnection/echo.cc	/^void EchoServer::onTimer(){$/;"	f	class:EchoServer	signature:()
EchoServer::onTimer	JKYi/reactor/examples/idleconnection/echo.h	/^    void onTimer();$/;"	p	class:EchoServer	access:private	signature:()
EchoServer::server_	JKYi/reactor/examples/idleconnection/echo.h	/^    JKYi::net::TcpServer server_;$/;"	m	class:EchoServer	access:private
EchoServer::server_	JKYi/reactor/examples/maxconnection/echo.h	/^   JKYi::net::TcpServer server_;$/;"	m	class:EchoServer	access:private
EchoServer::start	JKYi/reactor/examples/idleconnection/echo.cc	/^void EchoServer::start(){$/;"	f	class:EchoServer	signature:()
EchoServer::start	JKYi/reactor/examples/idleconnection/echo.h	/^    void start();$/;"	p	class:EchoServer	access:public	signature:()
EchoServer::start	JKYi/reactor/examples/maxconnection/echo.cc	/^void EchoServer::start(){$/;"	f	class:EchoServer	signature:()
EchoServer::start	JKYi/reactor/examples/maxconnection/echo.h	/^    void start();$/;"	p	class:EchoServer	access:public	signature:()
ElapseFormatItem	JKYi/log.cc	/^    ElapseFormatItem(const std::string&str=""){}$/;"	f	class:JKYi::ElapseFormatItem	access:public	signature:(const std::string&str=Ó)
ElapseFormatItem	JKYi/log.cc	/^class ElapseFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
EncodeLen	JKYi/http2/huffman.cc	/^int Huffman::EncodeLen(const char* in, int in_len) {$/;"	f	class:JKYi::http2::Huffman	signature:(const char* in, int in_len)
EncodeLen	JKYi/http2/huffman.cc	/^int Huffman::EncodeLen(const std::string& in) {$/;"	f	class:JKYi::http2::Huffman	signature:(const std::string& in)
EncodeLen	JKYi/http2/huffman.h	/^    static int EncodeLen(const char* in, int in_len);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const char* in, int in_len)
EncodeLen	JKYi/http2/huffman.h	/^    static int EncodeLen(const std::string& in);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const std::string& in)
EncodeString	JKYi/http2/huffman.cc	/^int Huffman::EncodeString(const char* in, int in_len, std::string& out, int prefix) {$/;"	f	class:JKYi::http2::Huffman	signature:(const char* in, int in_len, std::string& out, int prefix)
EncodeString	JKYi/http2/huffman.cc	/^int Huffman::EncodeString(const std::string& in, std::string& out, int prefix) {$/;"	f	class:JKYi::http2::Huffman	signature:(const std::string& in, std::string& out, int prefix)
EncodeString	JKYi/http2/huffman.h	/^    static int EncodeString(const char* in, int in_len, std::string& out, int prefix);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const char* in, int in_len, std::string& out, int prefix)
EncodeString	JKYi/http2/huffman.h	/^    static int EncodeString(const std::string& in, std::string& out, int prefix);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const std::string& in, std::string& out, int prefix)
EncodeZigzag32	JKYi/bytearray.cc	/^static uint32_t EncodeZigzag32(const int32_t &val){$/;"	f	namespace:JKYi	signature:(const int32_t &val)
EncodeZigzag64	JKYi/bytearray.cc	/^static uint64_t EncodeZigzag64(const int64_t &val){$/;"	f	namespace:JKYi	signature:(const int64_t &val)
Entry	JKYi/reactor/examples/idleconnection/echo.h	/^        explicit Entry(const WeakTcpConnectionPtr& weakConn)$/;"	f	struct:EchoServer::Entry	access:public	signature:(const WeakTcpConnectionPtr& weakConn)
Entry	JKYi/reactor/examples/idleconnection/echo.h	/^    struct Entry : public JKYi::Noncopyable{$/;"	s	class:EchoServer	inherits:JKYi::Noncopyable	access:private
Entry	JKYi/reactor/timerQueue.h	/^    typedef std::pair<Timestamp,Timer*> Entry;$/;"	t	class:JKYi::net::TimerQueue	access:private
EntryPtr	JKYi/reactor/examples/idleconnection/echo.h	/^    typedef std::shared_ptr<Entry> EntryPtr;$/;"	t	class:EchoServer	access:private
Env	JKYi/env.h	/^class Env{$/;"	c	namespace:JKYi
EnvMgr	JKYi/env.h	/^typedef JKYi::Singleton<Env> EnvMgr;$/;"	t	namespace:JKYi
EpollPoller	JKYi/reactor/poller/epollPoller.cc	/^EpollPoller::EpollPoller(EventLoop* loop)$/;"	f	class:JKYi::net::EpollPoller	signature:(EventLoop* loop)
EpollPoller	JKYi/reactor/poller/epollPoller.h	/^    EpollPoller(EventLoop* loop);$/;"	p	class:JKYi::net::EpollPoller	access:public	signature:(EventLoop* loop)
EpollPoller	JKYi/reactor/poller/epollPoller.h	/^class EpollPoller:public Poller{$/;"	c	namespace:JKYi::net	inherits:Poller
Error	JKYi/http/http_connection.h	/^    enum class Error{$/;"	c	struct:JKYi::http::HttpResult	access:public
Event	JKYi/iomanager.h	/^   enum Event{$/;"	g	class:JKYi::IOManager	access:public
EventCallback	JKYi/reactor/channel.h	/^    typedef std::function<void ()> EventCallback;$/;"	t	class:JKYi::net::Channel	access:public
EventCb	JKYi/db/redis.cc	/^void FoxRedis::Ctx::EventCb(int fd,short event,void * d){$/;"	f	class:JKYi::FoxRedis::Ctx	signature:(int fd,short event,void * d)
EventCb	JKYi/db/redis.cc	/^void FoxRedisCluster::Ctx::EventCb(int fd,short event,void * d){$/;"	f	class:JKYi::FoxRedisCluster::Ctx	signature:(int fd,short event,void * d)
EventCb	JKYi/db/redis.h	/^        static void EventCb(int fd,short event,void * d);$/;"	p	struct:JKYi::FoxRedis::Ctx	access:public	signature:(int fd,short event,void * d)
EventCb	JKYi/db/redis.h	/^        static void EventCb(int fd,short event,void * d);$/;"	p	struct:JKYi::FoxRedisCluster::Ctx	access:public	signature:(int fd,short event,void * d)
EventContext	JKYi/iomanager.h	/^	 struct EventContext{$/;"	s	struct:JKYi::IOManager::FdContext	access:public
EventList	JKYi/reactor/poller/epollPoller.h	/^    typedef std::vector<struct epoll_event> EventList;$/;"	t	class:JKYi::net::EpollPoller	access:private
EventLoop	JKYi/reactor/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:JKYi::net::EventLoop	signature:()
EventLoop	JKYi/reactor/EventLoop.h	/^    EventLoop();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
EventLoop	JKYi/reactor/EventLoop.h	/^class EventLoop : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
EventLoopThread	JKYi/reactor/EventLoopThread.cc	/^EventLoopThread::EventLoopThread(const ThreadInitCallback& cb,$/;"	f	class:JKYi::net::EventLoopThread	signature:(const ThreadInitCallback& cb, const std::string& name)
EventLoopThread	JKYi/reactor/EventLoopThread.h	/^    EventLoopThread(const ThreadInitCallback& cb = ThreadInitCallback(),$/;"	p	class:JKYi::net::EventLoopThread	access:public	signature:(const ThreadInitCallback& cb = ThreadInitCallback(), const std::string& name = std::string())
EventLoopThread	JKYi/reactor/EventLoopThread.h	/^class EventLoopThread : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
EventLoopThreadPool	JKYi/reactor/EventLoopThreadPool.cc	/^EventLoopThreadPool::EventLoopThreadPool(EventLoop* baseloop,$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:(EventLoop* baseloop, const std::string& nameArg)
EventLoopThreadPool	JKYi/reactor/EventLoopThreadPool.h	/^    EventLoopThreadPool(EventLoop* baseloop,const std::string& nameArg);$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:(EventLoop* baseloop,const std::string& nameArg)
EventLoopThreadPool	JKYi/reactor/EventLoopThreadPool.h	/^class EventLoopThreadPool : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
EventType	JKYi/zk_client.h	/^    class EventType{$/;"	c	class:JKYi::ZKClient	access:public
Excute	JKYi/db/mysql.cc	/^int MySQLUtil::Excute(const std::string& name,const char * format,...){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const char * format,...)
Excute	JKYi/db/mysql.cc	/^int MySQLUtil::Excute(const std::string& name,const char * format,va_list ap){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const char * format,va_list ap)
Excute	JKYi/db/mysql.cc	/^int MySQLUtil::Excute(const std::string& name,const std::string& sql){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const std::string& sql)
Excute	JKYi/db/mysql.h	/^    static int Excute(const std::string& name,const char * format,...);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const char * format,...)
Excute	JKYi/db/mysql.h	/^    static int Excute(const std::string& name,const char * format,va_list ap);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const char * format,va_list ap)
Excute	JKYi/db/mysql.h	/^    static int Excute(const std::string& name,const std::string& sql);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const std::string& sql)
FATAL	JKYi/log.h	/^     FATAL = 5$/;"	e	enum:JKYi::LogLevel::Level
FCtx	JKYi/db/redis.h	/^    struct FCtx{$/;"	s	class:JKYi::FoxRedis	access:private
FCtx	JKYi/db/redis.h	/^    struct FCtx{$/;"	s	class:JKYi::FoxRedisCluster	access:private
FOX_REDIS	JKYi/db/redis.h	/^        FOX_REDIS = 3,$/;"	e	enum:JKYi::IRedis::Type
FOX_REDIS_CLUSTER	JKYi/db/redis.h	/^        FOX_REDIS_CLUSTER = 4$/;"	e	enum:JKYi::IRedis::Type
FSUtil	JKYi/util.h	/^class FSUtil{$/;"	c	namespace:JKYi
Family	JKYi/socket.h	/^    enum Family{$/;"	g	class:JKYi::Socket	access:public
FdContext	JKYi/iomanager.h	/^   struct FdContext{$/;"	s	class:JKYi::IOManager	access:private
FdCtx	JKYi/fdmanager.cc	/^FdCtx::FdCtx(int fd)$/;"	f	class:JKYi::FdCtx	signature:(int fd)
FdCtx	JKYi/fdmanager.h	/^   FdCtx(int fd);$/;"	p	class:JKYi::FdCtx	access:public	signature:(int fd)
FdCtx	JKYi/fdmanager.h	/^class FdCtx:public std::enable_shared_from_this<FdCtx>{	$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this
FdManager	JKYi/fdmanager.cc	/^FdManager::FdManager(){$/;"	f	class:JKYi::FdManager	signature:()
FdManager	JKYi/fdmanager.h	/^	FdManager();$/;"	p	class:JKYi::FdManager	access:public	signature:()
FdManager	JKYi/fdmanager.h	/^class FdManager{$/;"	c	namespace:JKYi
FdMgr	JKYi/fdmanager.h	/^typedef Singleton<FdManager> FdMgr;$/;"	t	namespace:JKYi
Fiber	JKYi/fiber.cc	/^Fiber::Fiber(){$/;"	f	class:JKYi::Fiber	signature:()
Fiber	JKYi/fiber.cc	/^Fiber::Fiber(std::function<void ()>cb,size_t stacksize,bool use_caller)$/;"	f	class:JKYi::Fiber	signature:(std::function<void ()>cb,size_t stacksize,bool use_caller)
Fiber	JKYi/fiber.h	/^	Fiber(std::function<void ()>cb,size_t stacksize = 0,bool use_caller = false);$/;"	p	class:JKYi::Fiber	access:public	signature:(std::function<void ()>cb,size_t stacksize = 0,bool use_caller = false)
Fiber	JKYi/fiber.h	/^    Fiber();$/;"	p	class:JKYi::Fiber	access:public	signature:()
Fiber	JKYi/fiber.h	/^class Fiber:public std::enable_shared_from_this<Fiber>{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this
FiberAndThread	JKYi/scheduler.h	/^	 FiberAndThread()$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:()
FiberAndThread	JKYi/scheduler.h	/^	 FiberAndThread(Fiber::ptr * f,int thr)$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:(Fiber::ptr * f,int thr)
FiberAndThread	JKYi/scheduler.h	/^	 FiberAndThread(Fiber::ptr f,int thr)$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:(Fiber::ptr f,int thr)
FiberAndThread	JKYi/scheduler.h	/^	 FiberAndThread(std::function<void ()>*f,int thr)$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:(std::function<void ()>*f,int thr)
FiberAndThread	JKYi/scheduler.h	/^	 FiberAndThread(std::function<void ()>f,int thr)$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:(std::function<void ()>f,int thr)
FiberAndThread	JKYi/scheduler.h	/^  struct FiberAndThread{$/;"	s	class:JKYi::Scheduler	access:private
FiberIdFormatItem	JKYi/log.cc	/^    FiberIdFormatItem(const std::string&str=""){}$/;"	f	class:JKYi::FiberIdFormatItem	access:public	signature:(const std::string&str=Ó)
FiberIdFormatItem	JKYi/log.cc	/^class FiberIdFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
FiberSemaphore	JKYi/mutex.cc	/^FiberSemaphore::FiberSemaphore(size_t inital_concurrency)$/;"	f	class:JKYi::FiberSemaphore	signature:(size_t inital_concurrency)
FiberSemaphore	JKYi/mutex.h	/^    FiberSemaphore(size_t initial_concurrency = 0);$/;"	p	class:JKYi::FiberSemaphore	access:public	signature:(size_t initial_concurrency = 0)
FiberSemaphore	JKYi/mutex.h	/^class FiberSemaphore{$/;"	c	namespace:JKYi
FileLogAppender	JKYi/log.cc	/^FileLogAppender::FileLogAppender(const std::string&filename)$/;"	f	class:JKYi::FileLogAppender	signature:(const std::string&filename)
FileLogAppender	JKYi/log.h	/^     FileLogAppender(const std::string& filename);$/;"	p	class:JKYi::FileLogAppender	access:public	signature:(const std::string& filename)
FileLogAppender	JKYi/log.h	/^class FileLogAppender:public LogAppender{$/;"	c	namespace:JKYi	inherits:LogAppender
FilenameFormatItem	JKYi/log.cc	/^    FilenameFormatItem(const std::string& str = "") {}$/;"	f	class:JKYi::FilenameFormatItem	access:public	signature:(const std::string& str = Ó)
FilenameFormatItem	JKYi/log.cc	/^class FilenameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
FlagsType	JKYi/zk_client.h	/^    class FlagsType{$/;"	c	class:JKYi::ZKClient	access:public
Format	JKYi/util.cc	/^std::string StringUtil::Format(const char * fmt,...){$/;"	f	class:JKYi::StringUtil	signature:(const char * fmt,...)
Format	JKYi/util.h	/^   static std::string Format(const char * fmt,...);$/;"	p	class:JKYi::StringUtil	access:public	signature:(const char * fmt,...)
FormatItem	JKYi/log.h	/^    class FormatItem{$/;"	c	class:JKYi::LogFormatter	access:public
Formatv	JKYi/util.cc	/^std::string StringUtil::Formatv(const char * fmt,va_list ap){$/;"	f	class:JKYi::StringUtil	signature:(const char * fmt,va_list ap)
Formatv	JKYi/util.h	/^   static std::string Formatv(const char * fmt,va_list ap);$/;"	p	class:JKYi::StringUtil	access:public	signature:(const char * fmt,va_list ap)
FoxRedis	JKYi/db/redis.cc	/^FoxRedis::FoxRedis(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf)$/;"	f	class:JKYi::FoxRedis	signature:(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf)
FoxRedis	JKYi/db/redis.h	/^    FoxRedis(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf);$/;"	p	class:JKYi::FoxRedis	access:public	signature:(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf)
FoxRedis	JKYi/db/redis.h	/^class FoxRedis: public IRedis{$/;"	c	namespace:JKYi	inherits:IRedis
FoxRedisCluster	JKYi/db/redis.cc	/^FoxRedisCluster::FoxRedisCluster(JKYi::FoxThread* thr,const std::map<std::string,$/;"	f	class:JKYi::FoxRedisCluster	signature:(JKYi::FoxThread* thr,const std::map<std::string, std::string>& conf)
FoxRedisCluster	JKYi/db/redis.h	/^    FoxRedisCluster(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf);$/;"	p	class:JKYi::FoxRedisCluster	access:public	signature:(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf)
FoxRedisCluster	JKYi/db/redis.h	/^class FoxRedisCluster:public IRedis{$/;"	c	namespace:JKYi	inherits:IRedis
FoxThread	JKYi/db/fox_thread.cc	/^FoxThread::FoxThread(const std::string& name,struct event_base* base)$/;"	f	class:JKYi::FoxThread	signature:(const std::string& name,struct event_base* base)
FoxThread	JKYi/db/fox_thread.h	/^    FoxThread(const std::string& name,struct event_base* base = nullptr);$/;"	p	class:JKYi::FoxThread	access:public	signature:(const std::string& name,struct event_base* base = nullptr)
FoxThread	JKYi/db/fox_thread.h	/^class FoxThread : public IFoxThread{$/;"	c	namespace:JKYi	inherits:IFoxThread
FoxThreadManager	JKYi/db/fox_thread.h	/^class FoxThreadManager{$/;"	c	namespace:JKYi
FoxThreadMgr	JKYi/db/fox_thread.h	/^typedef Singleton<FoxThreadManager> FoxThreadMgr;$/;"	t	namespace:JKYi
FoxThreadPool	JKYi/db/fox_thread.cc	/^FoxThreadPool::FoxThreadPool(uint32_t size,const std::string& name,bool advance)$/;"	f	class:JKYi::FoxThreadPool	signature:(uint32_t size,const std::string& name,bool advance)
FoxThreadPool	JKYi/db/fox_thread.h	/^    FoxThreadPool(uint32_t size,const std::string& name = "",bool advance = false);$/;"	p	class:JKYi::FoxThreadPool	access:public	signature:(uint32_t size,const std::string& name = Ó,bool advance = false)
FoxThreadPool	JKYi/db/fox_thread.h	/^class FoxThreadPool : public IFoxThread{$/;"	c	namespace:JKYi	inherits:IFoxThread
Frame	JKYi/http2/frame.h	/^struct Frame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
FrameCodec	JKYi/http2/frame.h	/^class FrameCodec{$/;"	c	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public
FrameFlagContinuation	JKYi/http2/frame.h	/^enum class FrameFlagContinuation{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing	access:private
FrameFlagContinuationToString	JKYi/http2/frame.cc	/^std::string FrameFlagContinuationToString(FrameFlagContinuation flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagContinuation flag)
FrameFlagContinuationToString	JKYi/http2/frame.h	/^std::string FrameFlagContinuationToString(FrameFlagContinuation flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagContinuation flag)
FrameFlagData	JKYi/http2/frame.h	/^enum class FrameFlagData{$/;"	c	class:JKYi::http2::FrameType	access:private
FrameFlagDataToString	JKYi/http2/frame.cc	/^std::string FrameFlagDataToString(FrameFlagData flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagData flag)
FrameFlagDataToString	JKYi/http2/frame.h	/^std::string FrameFlagDataToString(FrameFlagData flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagData flag)
FrameFlagHeaders	JKYi/http2/frame.h	/^enum class FrameFlagHeaders{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData	access:private
FrameFlagHeadersToString	JKYi/http2/frame.cc	/^std::string FrameFlagHeadersToString(FrameFlagHeaders flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagHeaders flag)
FrameFlagHeadersToString	JKYi/http2/frame.h	/^std::string FrameFlagHeadersToString(FrameFlagHeaders flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagHeaders flag)
FrameFlagPing	JKYi/http2/frame.h	/^enum class FrameFlagPing{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings	access:private
FrameFlagPingToString	JKYi/http2/frame.cc	/^std::string FrameFlagPingToString(FrameFlagPing flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagPing flag)
FrameFlagPingToString	JKYi/http2/frame.h	/^std::string FrameFlagPingToString(FrameFlagPing flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagPing flag)
FrameFlagPromise	JKYi/http2/frame.h	/^enum class FrameFlagPromise{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation	access:private
FrameFlagPromiseToString	JKYi/http2/frame.cc	/^std::string FrameFlagPromiseToString(FrameFlagPromise flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagPromise flag)
FrameFlagPromiseToString	JKYi/http2/frame.h	/^std::string FrameFlagPromiseToString(FrameFlagPromise flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagPromise flag)
FrameFlagSettings	JKYi/http2/frame.h	/^enum class FrameFlagSettings{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	access:private
FrameFlagSettingsToString	JKYi/http2/frame.cc	/^std::string FrameFlagSettingsToString(FrameFlagSettings flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagSettings flag)
FrameFlagSettingsToString	JKYi/http2/frame.h	/^std::string FrameFlagSettingsToString(FrameFlagSettings flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagSettings flag)
FrameFlagToString	JKYi/http2/frame.cc	/^std::string FrameFlagToString(uint8_t type,uint8_t flag){$/;"	f	namespace:JKYi::http2	signature:(uint8_t type,uint8_t flag)
FrameFlagToString	JKYi/http2/frame.h	/^std::string FrameFlagToString(uint8_t type,uint8_t flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(uint8_t type,uint8_t flag)
FrameHeader	JKYi/http2/frame.h	/^struct FrameHeader{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
FrameR	JKYi/http2/frame.h	/^enum class FrameR{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise	access:private
FrameRToString	JKYi/http2/frame.cc	/^std::string FrameRToString(FrameR r){$/;"	f	namespace:JKYi::http2	signature:(FrameR r)
FrameRToString	JKYi/http2/frame.h	/^std::string FrameRToString(FrameR r);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameR r)
FrameType	JKYi/http2/frame.h	/^enum class FrameType{$/;"	c	namespace:JKYi::http2
FrameTypeToString	JKYi/http2/frame.cc	/^std::string FrameTypeToString(FrameType type){$/;"	f	namespace:JKYi::http2	signature:(FrameType type)
FrameTypeToString	JKYi/http2/frame.h	/^std::string FrameTypeToString(FrameType type);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameType type)
FromString	JKYi/log.cc	/^ LogLevel::Level LogLevel::FromString(const std::string&str){$/;"	f	class:JKYi::LogLevel	signature:(const std::string&str)
FromString	JKYi/log.h	/^   static LogLevel::Level FromString(const std::string&str);$/;"	p	class:JKYi::LogLevel	access:public	signature:(const std::string&str)
FromString	JKYi/util/json_util.cc	/^bool JsonUtil::FromString(Json::Value& json,const std::string& str){$/;"	f	class:JKYi::JsonUtil	signature:(Json::Value& json,const std::string& str)
FromString	JKYi/util/json_util.h	/^    static bool FromString(Json::Value& json,const std::string& str);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(Json::Value& json,const std::string& str)
FunctionServlet	JKYi/http/servlet.cc	/^FunctionServlet::FunctionServlet(callback cb)$/;"	f	class:JKYi::http::FunctionServlet	signature:(callback cb)
FunctionServlet	JKYi/http/servlet.h	/^    FunctionServlet(callback cb);$/;"	p	class:JKYi::http::FunctionServlet	access:public	signature:(callback cb)
FunctionServlet	JKYi/http/servlet.h	/^class FunctionServlet:public Servlet{$/;"	c	namespace:JKYi::http	inherits:Servlet
FunctionWSServlet	JKYi/http/ws_servlet.cc	/^FunctionWSServlet::FunctionWSServlet(callback cb,on_connect_cb connect_cb,$/;"	f	class:JKYi::http::FunctionWSServlet	signature:(callback cb,on_connect_cb connect_cb, on_close_cb close_cb)
FunctionWSServlet	JKYi/http/ws_servlet.h	/^    FunctionWSServlet(callback cb,on_connect_cb connect_cb = nullptr,on_close_cb close_cb = nullptr);$/;"	p	class:JKYi::http::FunctionWSServlet	access:public	signature:(callback cb,on_connect_cb connect_cb = nullptr,on_close_cb close_cb = nullptr)
FunctionWSServlet	JKYi/http/ws_servlet.h	/^class FunctionWSServlet:public WSServlet{$/;"	c	namespace:JKYi::http	inherits:WSServlet
Functor	JKYi/reactor/EventLoop.h	/^    typedef std::function<void()> Functor;$/;"	t	class:JKYi::net::EventLoop	access:public
GOAWAY	JKYi/http2/frame.h	/^    GOAWAY         = 0x7,$/;"	m	class:JKYi::http2::FrameType	access:private
GetAllFoxThreadName	JKYi/db/fox_thread.cc	/^void FoxThread::GetAllFoxThreadName(std::map<uint64_t,std::string>& names){$/;"	f	class:JKYi::FoxThread	signature:(std::map<uint64_t,std::string>& names)
GetAllFoxThreadName	JKYi/db/fox_thread.h	/^    static void GetAllFoxThreadName(std::map<uint64_t,std::string>& names);$/;"	p	class:JKYi::FoxThread	access:public	signature:(std::map<uint64_t,std::string>& names)
GetCurrentMS	JKYi/util.cc	/^uint64_t GetCurrentMS(){$/;"	f	namespace:JKYi	signature:()
GetCurrentMS	JKYi/util.h	/^uint64_t GetCurrentMS();$/;"	p	namespace:JKYi	signature:()
GetCurrentUS	JKYi/util.cc	/^uint64_t GetCurrentUS(){$/;"	f	namespace:JKYi	signature:()
GetCurrentUS	JKYi/util.h	/^uint64_t GetCurrentUS();$/;"	p	namespace:JKYi	signature:()
GetDouble	JKYi/util/json_util.cc	/^double JsonUtil::GetDouble(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, double default_value)
GetDouble	JKYi/util/json_util.h	/^    static double GetDouble(const Json::Value& json,const std::string& name,double default_value = 0);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,double default_value = 0)
GetFiberId	JKYi/fiber.cc	/^uint64_t Fiber::GetFiberId(){$/;"	f	class:JKYi::Fiber	signature:()
GetFiberId	JKYi/fiber.h	/^   static uint64_t GetFiberId();$/;"	p	class:JKYi::Fiber	access:public	signature:()
GetFiberId	JKYi/util.cc	/^uint64_t GetFiberId(){$/;"	f	namespace:JKYi	signature:()
GetFiberId	JKYi/util.h	/^uint64_t GetFiberId();$/;"	p	namespace:JKYi	signature:()
GetFoxThreadName	JKYi/db/fox_thread.cc	/^const std::string& FoxThread::GetFoxThreadName(){$/;"	f	class:JKYi::FoxThread	signature:()
GetFoxThreadName	JKYi/db/fox_thread.h	/^    static const std::string& GetFoxThreadName();$/;"	p	class:JKYi::FoxThread	access:public	signature:()
GetHttpRequestBufferSize	JKYi/http/http_parser.cc	/^uint64_t HttpRequestParser::GetHttpRequestBufferSize(){$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
GetHttpRequestBufferSize	JKYi/http/http_parser.h	/^     static uint64_t GetHttpRequestBufferSize();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
GetHttpRequestMaxBodySize	JKYi/http/http_parser.cc	/^uint64_t HttpRequestParser::GetHttpRequestMaxBodySize(){$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
GetHttpRequestMaxBodySize	JKYi/http/http_parser.h	/^     static uint64_t GetHttpRequestMaxBodySize();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
GetHttpResponseBufferSize	JKYi/http/http_parser.cc	/^uint64_t HttpResponseParser::GetHttpResponseBufferSize(){$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
GetHttpResponseBufferSize	JKYi/http/http_parser.h	/^    static uint64_t GetHttpResponseBufferSize();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
GetHttpResponseMaxBodySize	JKYi/http/http_parser.cc	/^uint64_t HttpResponseParser::GetHttpResponseMaxBodySize(){$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
GetHttpResponseMaxBodySize	JKYi/http/http_parser.h	/^    static uint64_t GetHttpResponseMaxBodySize();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
GetInstance	JKYi/application.h	/^    static Application* GetInstance(){ return m_instance; }$/;"	f	class:JKYi::Application	access:public	signature:()
GetInstance	JKYi/singleton.h	/^   static T* GetInstance(){$/;"	f	class:JKYi::Singleton	access:public	signature:()
GetInt32	JKYi/util/json_util.cc	/^int32_t JsonUtil::GetInt32(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, int32_t default_value)
GetInt32	JKYi/util/json_util.h	/^    static int32_t GetInt32(const Json::Value& json,const std::string& name,int32_t default_value = 0);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,int32_t default_value = 0)
GetInt64	JKYi/util/json_util.cc	/^int64_t JsonUtil::GetInt64(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, int64_t default_value)
GetInt64	JKYi/util/json_util.h	/^    static int64_t GetInt64(const Json::Value& json,const std::string& name,int64_t default_value = 0);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,int64_t default_value = 0)
GetInterfaceAddress	JKYi/address.cc	/^bool Address::GetInterfaceAddress(std::multimap<std::string,std::pair<Address::ptr,uint32_t>>&result,int family){$/;"	f	class:JKYi::Address	signature:(std::multimap<std::string,std::pair<Address::ptr,uint32_t>>&result,int family)
GetInterfaceAddress	JKYi/address.cc	/^bool Address::GetInterfaceAddress(std::vector<std::pair<Address::ptr,uint32_t>>&result,const std::string&iface,int family){$/;"	f	class:JKYi::Address	signature:(std::vector<std::pair<Address::ptr,uint32_t>>&result,const std::string&iface,int family)
GetInterfaceAddress	JKYi/address.h	/^	static bool GetInterfaceAddress(std::multimap<std::string,std::pair<Address::ptr,uint32_t>>&result,int family=AF_INET);$/;"	p	class:JKYi::Address	access:public	signature:(std::multimap<std::string,std::pair<Address::ptr,uint32_t>>&result,int family=AF_INET)
GetInterfaceAddress	JKYi/address.h	/^	static bool GetInterfaceAddress(std::vector<std::pair<Address::ptr,uint32_t>>&result,const std::string&iface,int family=AF_INET);$/;"	p	class:JKYi::Address	access:public	signature:(std::vector<std::pair<Address::ptr,uint32_t>>&result,const std::string&iface,int family=AF_INET)
GetMainFiber	JKYi/scheduler.cc	/^Fiber* Scheduler::GetMainFiber(){$/;"	f	class:JKYi::Scheduler	signature:()
GetMainFiber	JKYi/scheduler.h	/^   static Fiber* GetMainFiber();$/;"	p	class:JKYi::Scheduler	access:public	signature:()
GetModule	JKYi/library.cc	/^Module::ptr Library::GetModule(const std::string& path){$/;"	f	class:JKYi::Library	signature:(const std::string& path)
GetModule	JKYi/library.h	/^    static Module::ptr GetModule(const std::string& path);$/;"	p	class:JKYi::Library	access:public	signature:(const std::string& path)
GetName	JKYi/thread.cc	/^const std::string& Thread::GetName(){$/;"	f	class:JKYi::Thread	signature:()
GetName	JKYi/thread.h	/^   static const std::string& GetName();$/;"	p	class:JKYi::Thread	access:public	signature:()
GetParamValue	JKYi/util.h	/^V GetParamValue(const Map& m,const K& k,const V& def = V()){$/;"	f	namespace:JKYi	signature:(const Map& m,const K& k,const V& def = V())
GetStaticHeaders	JKYi/http2/dynamic_table.cc	/^std::pair<std::string,std::string> DynamicTable::GetStaticHeaders(uint32_t idx){$/;"	f	class:JKYi::http2::DynamicTable	signature:(uint32_t idx)
GetStaticHeaders	JKYi/http2/dynamic_table.h	/^    static std::pair<std::string,std::string> GetStaticHeaders(uint32_t idx);$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(uint32_t idx)
GetStaticHeadersIdx	JKYi/http2/dynamic_table.cc	/^int32_t DynamicTable::GetStaticHeadersIdx(const std::string& name){$/;"	f	class:JKYi::http2::DynamicTable	signature:(const std::string& name)
GetStaticHeadersIdx	JKYi/http2/dynamic_table.h	/^    static int32_t GetStaticHeadersIdx(const std::string& name);$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(const std::string& name)
GetStaticHeadersPair	JKYi/http2/dynamic_table.cc	/^std::pair<int32_t,bool> DynamicTable::GetStaticHeadersPair(const std::string& name, $/;"	f	class:JKYi::http2::DynamicTable	signature:(const std::string& name, const std::string& val)
GetStaticHeadersPair	JKYi/http2/dynamic_table.h	/^    static std::pair<int32_t,bool> GetStaticHeadersPair(const std::string& name,const std::string& val);$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(const std::string& name,const std::string& val)
GetString	JKYi/util/json_util.cc	/^std::string JsonUtil::GetString(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, const std::string& default_value)
GetString	JKYi/util/json_util.h	/^    static std::string GetString(const Json::Value& json,const std::string& name,const std::string& default_value = "");$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,const std::string& default_value = Ó)
GetThis	JKYi/db/fox_thread.cc	/^FoxThread* FoxThread::GetThis(){$/;"	f	class:JKYi::FoxThread	signature:()
GetThis	JKYi/db/fox_thread.h	/^    static FoxThread* GetThis();$/;"	p	class:JKYi::FoxThread	access:public	signature:()
GetThis	JKYi/fiber.cc	/^Fiber::ptr Fiber::GetThis(){$/;"	f	class:JKYi::Fiber	signature:()
GetThis	JKYi/fiber.h	/^   static Fiber::ptr GetThis();$/;"	p	class:JKYi::Fiber	access:public	signature:()
GetThis	JKYi/iomanager.cc	/^IOManager* IOManager::GetThis(){$/;"	f	class:JKYi::IOManager	signature:()
GetThis	JKYi/iomanager.h	/^   static IOManager* GetThis();$/;"	p	class:JKYi::IOManager	access:public	signature:()
GetThis	JKYi/scheduler.cc	/^Scheduler* Scheduler::GetThis(){$/;"	f	class:JKYi::Scheduler	signature:()
GetThis	JKYi/scheduler.h	/^   static Scheduler* GetThis();$/;"	p	class:JKYi::Scheduler	access:public	signature:()
GetThis	JKYi/thread.cc	/^Thread* Thread::GetThis(){$/;"	f	class:JKYi::Thread	signature:()
GetThis	JKYi/thread.h	/^   static Thread* GetThis();$/;"	p	class:JKYi::Thread	access:public	signature:()
GetThreadId	JKYi/util.cc	/^pid_t GetThreadId(){$/;"	f	namespace:JKYi	signature:()
GetThreadId	JKYi/util.h	/^pid_t GetThreadId();  $/;"	p	namespace:JKYi	signature:()
GetUint32	JKYi/util/json_util.cc	/^uint32_t JsonUtil::GetUint32(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, uint32_t default_value)
GetUint32	JKYi/util/json_util.h	/^    static uint32_t GetUint32(const Json::Value& json,const std::string& name,uint32_t default_value = 0);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,uint32_t default_value = 0)
GetUint64	JKYi/util/json_util.cc	/^uint64_t JsonUtil::GetUint64(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, uint64_t default_value)
GetUint64	JKYi/util/json_util.h	/^    static uint64_t GetUint64(const Json::Value& json,const std::string& name,uint64_t default_value = 0);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,uint64_t default_value = 0)
GoAwayFrame	JKYi/http2/frame.h	/^struct GoAwayFrame : public IFrame{$/;"	s	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	inherits:IFrame	access:public
HEADERS	JKYi/http2/frame.h	/^    HEADERS        = 0x1,$/;"	m	class:JKYi::http2::FrameType	access:private
HEADER_TABLE_SIZE	JKYi/http2/frame.h	/^        HEADER_TABLE_SIZE        =  0x1,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
HEX	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	507;"	d	file:
HEX	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	492;"	d	file:
HEX_TO_HF_CODE	JKYi/http2/huffman.cc	10;"	d	file:
HEX_TO_HF_CODE_LEN	JKYi/http2/huffman.cc	11;"	d	file:
HM_RETURN	JKYi/http2/huffman.cc	/^enum HM_RETURN{$/;"	g	namespace:JKYi::http2	file:
HM_RETURN_SUCCESS	JKYi/http2/huffman.cc	/^    HM_RETURN_SUCCESS     = 0,$/;"	e	enum:JKYi::http2::HM_RETURN	file:
HM_RETURN_UNIMPLEMENT	JKYi/http2/huffman.cc	/^    HM_RETURN_UNIMPLEMENT = -100,$/;"	e	enum:JKYi::http2::HM_RETURN	file:
HOLD	JKYi/fiber.h	/^	  HOLD,  \/\/æèµ·æ$/;"	e	enum:JKYi::Fiber::State
HOOK_FUN	JKYi/hook.cc	21;"	d	file:
HPack	JKYi/http2/hpack.cc	/^HPack::HPack(DynamicTable& table)$/;"	f	class:JKYi::http2::HPack	signature:(DynamicTable& table)
HPack	JKYi/http2/hpack.h	/^    HPack(DynamicTable& table);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(DynamicTable& table)
HPack	JKYi/http2/hpack.h	/^class HPack{$/;"	c	class:JKYi::http2::IndexType	access:private
HTTP_METHOD_MAP	JKYi/http/http.h	18;"	d
HTTP_STATUS_MAP	JKYi/http/http.h	63;"	d
HeaderField	JKYi/http2/hpack.h	/^struct HeaderField{$/;"	s	class:JKYi::http2::IndexType	access:private
HeadersFrame	JKYi/http2/frame.h	/^struct HeadersFrame : public IFrame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	inherits:IFrame	access:private
HighWaterMarkCallback	JKYi/reactor/Callbacks.h	/^typedef std::function<void (const TcpConnectionPtr&,size_t)> HighWaterMarkCallback;$/;"	t	namespace:JKYi::net
HttpConnection	JKYi/http/http_connection.cc	/^HttpConnection::HttpConnection(Socket::ptr sock,bool owner)$/;"	f	class:JKYi::http::HttpConnection	signature:(Socket::ptr sock,bool owner)
HttpConnection	JKYi/http/http_connection.h	/^    HttpConnection(Socket::ptr sock,bool owner = true);$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(Socket::ptr sock,bool owner = true)
HttpConnection	JKYi/http/http_connection.h	/^class HttpConnection:public SocketStream{$/;"	c	namespace:JKYi::http	inherits:SocketStream
HttpConnectionPool	JKYi/http/http_connection.cc	/^HttpConnectionPool::HttpConnectionPool(const std::string& host,const std::string& vhost,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(const std::string& host,const std::string& vhost, uint32_t port,uint32_t max_size, uint32_t max_request,uint32_t max_alive_time, bool is_https)
HttpConnectionPool	JKYi/http/http_connection.h	/^    HttpConnectionPool(const std::string& host,$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(const std::string& host, const std::string& vhost, uint32_t port,uint32_t max_size, uint32_t max_alive_size,uint32_t max_request,bool is_https)
HttpConnectionPool	JKYi/http/http_connection.h	/^class HttpConnectionPool{$/;"	c	namespace:JKYi::http
HttpMethod	JKYi/http/http.h	/^enum class HttpMethod{$/;"	c	namespace:JKYi::http
HttpMethodToString	JKYi/http/http.cc	/^const char* HttpMethodToString(const HttpMethod& m){$/;"	f	namespace:JKYi::http	signature:(const HttpMethod& m)
HttpMethodToString	JKYi/http/http.h	/^const char * HttpMethodToString(const HttpMethod&m);$/;"	p	namespace:JKYi::http	signature:(const HttpMethod&m)
HttpRequest	JKYi/http/http.cc	/^HttpRequest::HttpRequest(uint8_t version,bool close)$/;"	f	class:JKYi::http::HttpRequest	signature:(uint8_t version,bool close)
HttpRequest	JKYi/http/http.h	/^   HttpRequest(uint8_t version=0x11,bool close=true);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(uint8_t version=0x11,bool close=true)
HttpRequest	JKYi/http/http.h	/^class HttpRequest{$/;"	c	namespace:JKYi::http
HttpRequestParser	JKYi/http/http_parser.cc	/^HttpRequestParser::HttpRequestParser()$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
HttpRequestParser	JKYi/http/http_parser.h	/^    HttpRequestParser();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
HttpRequestParser	JKYi/http/http_parser.h	/^class HttpRequestParser{$/;"	c	namespace:JKYi::http
HttpResponse	JKYi/http/http.cc	/^HttpResponse::HttpResponse(uint8_t version,bool close)$/;"	f	class:JKYi::http::HttpResponse	signature:(uint8_t version,bool close)
HttpResponse	JKYi/http/http.h	/^    HttpResponse(uint8_t version=0x11,bool close=true);$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(uint8_t version=0x11,bool close=true)
HttpResponse	JKYi/http/http.h	/^class HttpResponse{$/;"	c	namespace:JKYi::http
HttpResponseParser	JKYi/http/http_parser.cc	/^HttpResponseParser::HttpResponseParser()$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
HttpResponseParser	JKYi/http/http_parser.h	/^    HttpResponseParser();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
HttpResponseParser	JKYi/http/http_parser.h	/^class HttpResponseParser{$/;"	c	namespace:JKYi::http
HttpResult	JKYi/http/http_connection.h	/^    HttpResult(int _result,HttpResponse::ptr _rsp,const std::string& _error)$/;"	f	struct:JKYi::http::HttpResult	access:public	signature:(int _result,HttpResponse::ptr _rsp,const std::string& _error)
HttpResult	JKYi/http/http_connection.h	/^struct HttpResult{$/;"	s	namespace:JKYi::http
HttpServer	JKYi/http/http_server.cc	/^HttpServer::HttpServer(bool keepalive,IOManager * worker,IOManager * io_worker,$/;"	f	class:JKYi::http::HttpServer	signature:(bool keepalive,IOManager * worker,IOManager * io_worker, IOManager * accept_worker)
HttpServer	JKYi/http/http_server.h	/^    HttpServer(bool keepalive = false,IOManager * worker = JKYi::IOManager::GetThis()$/;"	p	class:JKYi::http::HttpServer	access:public	signature:(bool keepalive = false,IOManager * worker = JKYi::IOManager::GetThis() ,IOManager * io_worker = JKYi::IOManager::GetThis() ,IOManager * accept_worker = JKYi::IOManager::GetThis())
HttpServer	JKYi/http/http_server.h	/^class HttpServer:public TcpServer{$/;"	c	namespace:JKYi::http	inherits:TcpServer
HttpSession	JKYi/http/http_session.cc	/^HttpSession::HttpSession(Socket::ptr sock,bool owner)$/;"	f	class:JKYi::http::HttpSession	signature:(Socket::ptr sock,bool owner)
HttpSession	JKYi/http/http_session.h	/^    HttpSession(Socket::ptr sock,bool owner = true);$/;"	p	class:JKYi::http::HttpSession	access:public	signature:(Socket::ptr sock,bool owner = true)
HttpSession	JKYi/http/http_session.h	/^class HttpSession:public SocketStream{$/;"	c	namespace:JKYi::http	inherits:SocketStream
HttpStatueToString	JKYi/http/http.h	/^const char * HttpStatueToString(const HttpStatus&s);$/;"	p	namespace:JKYi::http	signature:(const HttpStatus&s)
HttpStatus	JKYi/http/http.h	/^enum class HttpStatus{$/;"	c	namespace:JKYi::http
HttpStatusToString	JKYi/http/http.cc	/^const char* HttpStatusToString(const HttpStatus& s){$/;"	f	namespace:JKYi::http	signature:(const HttpStatus& s)
Huffman	JKYi/http2/huffman.h	/^class Huffman {$/;"	c	namespace:JKYi::http2
IDB	JKYi/db/db.h	/^class IDB:public ISQLUpdate,public ISQLQuery{$/;"	c	namespace:JKYi	inherits:ISQLUpdate,ISQLQuery
ID_VOID_MAIN	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IFoxThread	JKYi/db/fox_thread.h	/^class IFoxThread{$/;"	c	namespace:JKYi
IFrame	JKYi/http2/frame.h	/^class IFrame{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
INDEXED	JKYi/http2/hpack.h	/^    INDEXED                       = 0, \/\/ headersçnameåvalueé½å¨è¡¨ä¸­$/;"	m	class:JKYi::http2::IndexType	access:private
INFO	JKYi/log.h	/^     INFO = 2,$/;"	e	enum:JKYi::LogLevel::Level
INIT	JKYi/fiber.h	/^      INIT,   \/\/åå»ºæ  $/;"	e	enum:JKYi::Fiber::State
INITAL_WINDOW_SIZE	JKYi/http2/frame.h	/^        INITAL_WINDOW_SIZE       =  0x4,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
INIT_ERR	JKYi/db/redis.h	/^        INIT_ERR = 6$/;"	e	enum:JKYi::FoxRedis::RESULT
INIT_ERR	JKYi/db/redis.h	/^        INIT_ERR = 6$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
INVALID_HOST	JKYi/http/http_connection.h	/^        INVALID_HOST = 2,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
INVALID_URL	JKYi/http/http_connection.h	/^        INVALID_URL = 1,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
IOManager	JKYi/iomanager.cc	/^IOManager::IOManager(size_t threads,bool use_caller,const std::string& name)$/;"	f	class:JKYi::IOManager	signature:(size_t threads,bool use_caller,const std::string& name)
IOManager	JKYi/iomanager.h	/^   IOManager(size_t threads = 1,bool use_caller = true,const std::string&name = "");$/;"	p	class:JKYi::IOManager	access:public	signature:(size_t threads = 1,bool use_caller = true,const std::string&name = Ó)
IOManager	JKYi/iomanager.h	/^class IOManager:public Scheduler,public TimerManager{$/;"	c	namespace:JKYi	inherits:Scheduler,TimerManager
IPAddress	JKYi/address.h	/^class IPAddress:public Address{$/;"	c	namespace:JKYi	inherits:Address
IPv4	JKYi/socket.h	/^        IPv4 = AF_INET,$/;"	e	enum:JKYi::Socket::Family
IPv4Address	JKYi/address.cc	/^IPv4Address::IPv4Address(const sockaddr_in&addr){$/;"	f	class:JKYi::IPv4Address	signature:(const sockaddr_in&addr)
IPv4Address	JKYi/address.cc	/^IPv4Address::IPv4Address(uint32_t address,uint16_t port){$/;"	f	class:JKYi::IPv4Address	signature:(uint32_t address,uint16_t port)
IPv4Address	JKYi/address.h	/^	IPv4Address(const sockaddr_in&addr);$/;"	p	class:JKYi::IPv4Address	access:public	signature:(const sockaddr_in&addr)
IPv4Address	JKYi/address.h	/^	IPv4Address(uint32_t address = INADDR_ANY,uint16_t port = 0);$/;"	p	class:JKYi::IPv4Address	access:public	signature:(uint32_t address = INADDR_ANY,uint16_t port = 0)
IPv4Address	JKYi/address.h	/^class IPv4Address:public IPAddress{$/;"	c	namespace:JKYi	inherits:IPAddress
IPv6	JKYi/socket.h	/^        IPv6 = AF_INET6,$/;"	e	enum:JKYi::Socket::Family
IPv6Address	JKYi/address.cc	/^IPv6Address::IPv6Address(){$/;"	f	class:JKYi::IPv6Address	signature:()
IPv6Address	JKYi/address.cc	/^IPv6Address::IPv6Address(const sockaddr_in6&addr){$/;"	f	class:JKYi::IPv6Address	signature:(const sockaddr_in6&addr)
IPv6Address	JKYi/address.cc	/^IPv6Address::IPv6Address(const uint8_t address[16],uint16_t port){$/;"	f	class:JKYi::IPv6Address	signature:(const uint8_t address[16],uint16_t port)
IPv6Address	JKYi/address.h	/^	IPv6Address();$/;"	p	class:JKYi::IPv6Address	access:public	signature:()
IPv6Address	JKYi/address.h	/^	IPv6Address(const sockaddr_in6& address);$/;"	p	class:JKYi::IPv6Address	access:public	signature:(const sockaddr_in6& address)
IPv6Address	JKYi/address.h	/^	IPv6Address(const uint8_t address[16],uint16_t port=0);$/;"	p	class:JKYi::IPv6Address	access:public	signature:(const uint8_t address[16],uint16_t port=0)
IPv6Address	JKYi/address.h	/^class IPv6Address:public IPAddress{$/;"	c	namespace:JKYi	inherits:IPAddress
IRedis	JKYi/db/redis.h	/^    IRedis()$/;"	f	class:JKYi::IRedis	access:public	signature:()
IRedis	JKYi/db/redis.h	/^class IRedis{$/;"	c	namespace:JKYi
ISQLData	JKYi/db/db.h	/^class ISQLData{$/;"	c	namespace:JKYi
ISQLQuery	JKYi/db/db.h	/^class ISQLQuery{$/;"	c	namespace:JKYi
ISQLUpdate	JKYi/db/db.h	/^class ISQLUpdate{$/;"	c	namespace:JKYi
IStmt	JKYi/db/db.h	/^class IStmt{$/;"	c	namespace:JKYi
ISyncRedis	JKYi/db/redis.h	/^class ISyncRedis :public IRedis{$/;"	c	namespace:JKYi	inherits:IRedis
ITransaction	JKYi/db/db.h	/^class ITransaction:public ISQLUpdate{$/;"	c	namespace:JKYi	inherits:ISQLUpdate
IgnoreSigPipe	JKYi/reactor/EventLoop.cc	/^    IgnoreSigPipe(){$/;"	f	class:__anon20::IgnoreSigPipe	access:public	signature:()
IgnoreSigPipe	JKYi/reactor/EventLoop.cc	/^class IgnoreSigPipe{$/;"	c	namespace:__anon20	file:
IndexType	JKYi/http2/hpack.h	/^enum class IndexType{$/;"	c	namespace:JKYi::http2
IndexTypeToString	JKYi/http2/hpack.cc	/^std::string IndexTypeToString(IndexType type){$/;"	f	namespace:JKYi::http2	signature:(IndexType type)
IndexTypeToString	JKYi/http2/hpack.h	/^std::string IndexTypeToString(IndexType type);$/;"	p	class:JKYi::http2::IndexType	access:private	signature:(IndexType type)
IsRunningPidfile	JKYi/util.cc	/^bool FSUtil::IsRunningPidfile(const std::string& pidfile){$/;"	f	class:JKYi::FSUtil	signature:(const std::string& pidfile)
IsRunningPidfile	JKYi/util.h	/^    static bool IsRunningPidfile(const std::string& pidfile);$/;"	p	class:JKYi::FSUtil	access:public	signature:(const std::string& pidfile)
JKYI_ASSERT	JKYi/macro.h	24;"	d
JKYI_ASSERT2	JKYi/macro.h	35;"	d
JKYI_BIG_ENDIAN	JKYi/endian.h	6;"	d
JKYI_BYTE_ORDER	JKYi/endian.h	32;"	d
JKYI_BYTE_ORDER	JKYi/endian.h	34;"	d
JKYI_DYNAMIC_TABLE_H_	JKYi/http2/dynamic_table.h	2;"	d
JKYI_LIKELY	JKYi/macro.h	15;"	d
JKYI_LIKELY	JKYi/macro.h	19;"	d
JKYI_LITTLE_ENDIAN	JKYi/endian.h	5;"	d
JKYI_LOG_DEBUG	JKYi/log.h	28;"	d
JKYI_LOG_ERROR	JKYi/log.h	34;"	d
JKYI_LOG_FATAL	JKYi/log.h	36;"	d
JKYI_LOG_INFO	JKYi/log.h	30;"	d
JKYI_LOG_LEVEL	JKYi/log.h	21;"	d
JKYI_LOG_NAME	JKYi/log.h	40;"	d
JKYI_LOG_ROOT	JKYi/log.h	38;"	d
JKYI_LOG_WARN	JKYi/log.h	32;"	d
JKYI_MAX_HUFFMAN_BUFF_LEN	JKYi/http2/huffman.cc	12;"	d	file:
JKYI_UNLIKELY	JKYi/macro.h	16;"	d
JKYI_UNLIKELY	JKYi/macro.h	20;"	d
JKYi	JKYi/BlockingQueue.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/BoundedBlockingQueue.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/CountDownLatch.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/CountDownLatch.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/Types.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/WeakCallback.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/address.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/address.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/application.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/application.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/atomic.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/bytearray.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/bytearray.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/condition.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/condition.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/config.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/config.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/copyable.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/daemon.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/daemon.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/db/db.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/db/fox_thread.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/db/fox_thread.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/db/mysql.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/db/mysql.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/db/redis.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/db/redis.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/ds/blocking_queue.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/endian.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/env.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/env.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/fdmanager.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/fdmanager.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/fiber.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/fiber.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/hook.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/hook.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http/http.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http/http.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http/http_connection.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http/http_connection.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http/http_parser.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http/http_parser.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http/http_server.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http/http_server.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http/http_session.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http/http_session.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http/servlet.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http/servlet.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http/ws_connection.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http/ws_connection.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http/ws_server.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http/ws_server.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http/ws_servlet.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http/ws_servlet.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http/ws_session.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http/ws_session.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http2/dynamic_table.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http2/dynamic_table.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http2/frame.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http2/frame.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http2/hpack.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/http2/hpack.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http2/huffman.cc	/^namespace JKYi {$/;"	n	file:
JKYi	JKYi/http2/huffman.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/http2/huffman_table.h	/^namespace JKYi {$/;"	n
JKYi	JKYi/iomanager.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/iomanager.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/library.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/library.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/log.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/log.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/module.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/module.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/mutex.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/mutex.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/noncopyable.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/protocol.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/protocol.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/Buffer.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/Buffer.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/Callbacks.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/Connector.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/Connector.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/CurrentThread.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/CurrentThread.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/EventLoop.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/EventLoop.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/EventLoopThread.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/EventLoopThread.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/EventLoopThreadPool.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/EventLoopThreadPool.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/Socket.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/Socket.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/SocketsOps.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/StringPiece.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/TcpClient.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/TcpClient.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/TcpConnection.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/TcpConnection.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/TcpServer.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/TcpServer.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/Thread.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/Thread.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/acceptor.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/acceptor.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/channel.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/channel.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/poller.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/poller.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/poller/epollPoller.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/poller/epollPoller.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/poller/pollPoller.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/poller/pollPoller.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/timer.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/timer.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/timerId.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/reactor/timerQueue.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/reactor/timerQueue.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/scheduler.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/scheduler.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/singleton.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/socket.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/socket.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/stream.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/stream.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/stream/socket_stream.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/stream/socket_stream.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/tcp_server.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/tcp_server.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/thread.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/thread.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/timer.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/timer.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/timestamp.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/timestamp.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/uri.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/uri.rl.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/util.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/util.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/util/hash_util.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/util/hash_util.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/util/json_util.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/util/json_util.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/worker.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/worker.h	/^namespace JKYi{$/;"	n
JKYi	JKYi/zk_client.cc	/^namespace JKYi{$/;"	n	file:
JKYi	JKYi/zk_client.h	/^namespace JKYi{$/;"	n
JKYi	tests/test_config.cc	/^namespace JKYi{$/;"	n	file:
JKYi::Address	JKYi/address.h	/^class Address{$/;"	c	namespace:JKYi
JKYi::Address::Create	JKYi/address.cc	/^Address::ptr Address::Create(const sockaddr*addr,socklen_t addrlen){$/;"	f	class:JKYi::Address	signature:(const sockaddr*addr,socklen_t addrlen)
JKYi::Address::Create	JKYi/address.h	/^	static Address::ptr Create(const sockaddr*addr,socklen_t addrlen);$/;"	p	class:JKYi::Address	access:public	signature:(const sockaddr*addr,socklen_t addrlen)
JKYi::Address::GetInterfaceAddress	JKYi/address.cc	/^bool Address::GetInterfaceAddress(std::multimap<std::string,std::pair<Address::ptr,uint32_t>>&result,int family){$/;"	f	class:JKYi::Address	signature:(std::multimap<std::string,std::pair<Address::ptr,uint32_t>>&result,int family)
JKYi::Address::GetInterfaceAddress	JKYi/address.cc	/^bool Address::GetInterfaceAddress(std::vector<std::pair<Address::ptr,uint32_t>>&result,const std::string&iface,int family){$/;"	f	class:JKYi::Address	signature:(std::vector<std::pair<Address::ptr,uint32_t>>&result,const std::string&iface,int family)
JKYi::Address::GetInterfaceAddress	JKYi/address.h	/^	static bool GetInterfaceAddress(std::multimap<std::string,std::pair<Address::ptr,uint32_t>>&result,int family=AF_INET);$/;"	p	class:JKYi::Address	access:public	signature:(std::multimap<std::string,std::pair<Address::ptr,uint32_t>>&result,int family=AF_INET)
JKYi::Address::GetInterfaceAddress	JKYi/address.h	/^	static bool GetInterfaceAddress(std::vector<std::pair<Address::ptr,uint32_t>>&result,const std::string&iface,int family=AF_INET);$/;"	p	class:JKYi::Address	access:public	signature:(std::vector<std::pair<Address::ptr,uint32_t>>&result,const std::string&iface,int family=AF_INET)
JKYi::Address::Lookup	JKYi/address.cc	/^bool Address::Lookup(std::vector<Address::ptr>&result,const std::string&host,int family,int type,int protocol){$/;"	f	class:JKYi::Address	signature:(std::vector<Address::ptr>&result,const std::string&host,int family,int type,int protocol)
JKYi::Address::Lookup	JKYi/address.h	/^	static bool Lookup(std::vector<Address::ptr>&result,const std::string&host,int family=AF_INET,int type=0,int protocol=0);$/;"	p	class:JKYi::Address	access:public	signature:(std::vector<Address::ptr>&result,const std::string&host,int family=AF_INET,int type=0,int protocol=0)
JKYi::Address::LookupAny	JKYi/address.cc	/^Address::ptr Address::LookupAny(const std::string&host,int family,int type,int protocol){$/;"	f	class:JKYi::Address	signature:(const std::string&host,int family,int type,int protocol)
JKYi::Address::LookupAny	JKYi/address.h	/^	static Address::ptr LookupAny(const std::string&host,int family=AF_INET,int type=0,int protocol=0);$/;"	p	class:JKYi::Address	access:public	signature:(const std::string&host,int family=AF_INET,int type=0,int protocol=0)
JKYi::Address::LookupAnyIPAddress	JKYi/address.cc	/^IPAddress::ptr Address::LookupAnyIPAddress(const std::string&host,int family,int type,int protocol){$/;"	f	class:JKYi::Address	signature:(const std::string&host,int family,int type,int protocol)
JKYi::Address::LookupAnyIPAddress	JKYi/address.h	/^	static std::shared_ptr<IPAddress> LookupAnyIPAddress(const std::string&host,int family=AF_INET,int type=0,int protocol=0);$/;"	p	class:JKYi::Address	access:public	signature:(const std::string&host,int family=AF_INET,int type=0,int protocol=0)
JKYi::Address::getAddr	JKYi/address.h	/^	virtual const sockaddr* getAddr()const=0;$/;"	p	class:JKYi::Address	access:public	signature:() const
JKYi::Address::getAddr	JKYi/address.h	/^	virtual sockaddr* getAddr() = 0;$/;"	p	class:JKYi::Address	access:public	signature:()
JKYi::Address::getAddrLen	JKYi/address.h	/^	virtual socklen_t getAddrLen()const=0;$/;"	p	class:JKYi::Address	access:public	signature:() const
JKYi::Address::getFamily	JKYi/address.cc	/^int Address::getFamily()const{$/;"	f	class:JKYi::Address	signature:() const
JKYi::Address::getFamily	JKYi/address.h	/^	int getFamily()const;$/;"	p	class:JKYi::Address	access:public	signature:() const
JKYi::Address::insert	JKYi/address.h	/^	virtual std::ostream& insert(std::ostream& os)const =0;$/;"	p	class:JKYi::Address	access:public	signature:(std::ostream& os) const
JKYi::Address::operator !=	JKYi/address.cc	/^bool Address::operator!= (const Address&rhv)const{$/;"	f	class:JKYi::Address	signature:(const Address&rhv) const
JKYi::Address::operator !=	JKYi/address.h	/^   bool operator!= (const Address&rhv)const;$/;"	p	class:JKYi::Address	access:public	signature:(const Address&rhv) const
JKYi::Address::operator <	JKYi/address.cc	/^bool Address::operator< (const Address&rhv)const {$/;"	f	class:JKYi::Address	signature:(const Address&rhv) const
JKYi::Address::operator <	JKYi/address.h	/^   bool operator< (const Address&rhv)const;$/;"	p	class:JKYi::Address	access:public	signature:(const Address&rhv) const
JKYi::Address::operator ==	JKYi/address.cc	/^bool Address::operator== (const Address&rhv)const{$/;"	f	class:JKYi::Address	signature:(const Address&rhv) const
JKYi::Address::operator ==	JKYi/address.h	/^   bool operator== (const Address&rhv)const;$/;"	p	class:JKYi::Address	access:public	signature:(const Address&rhv) const
JKYi::Address::ptr	JKYi/address.h	/^	typedef std::shared_ptr<Address> ptr;$/;"	t	class:JKYi::Address	access:public
JKYi::Address::toString	JKYi/address.cc	/^std::string Address::toString()const {$/;"	f	class:JKYi::Address	signature:() const
JKYi::Address::toString	JKYi/address.h	/^	std::string toString()const;$/;"	p	class:JKYi::Address	access:public	signature:() const
JKYi::Address::~Address	JKYi/address.h	/^	virtual ~Address(){}$/;"	f	class:JKYi::Address	access:public	signature:()
JKYi::Application	JKYi/application.h	/^class Application{$/;"	c	namespace:JKYi
JKYi::Application::Application	JKYi/application.cc	/^Application::Application(){$/;"	f	class:JKYi::Application	signature:()
JKYi::Application::Application	JKYi/application.h	/^    Application();$/;"	p	class:JKYi::Application	access:public	signature:()
JKYi::Application::GetInstance	JKYi/application.h	/^    static Application* GetInstance(){ return m_instance; }$/;"	f	class:JKYi::Application	access:public	signature:()
JKYi::Application::getServer	JKYi/application.cc	/^bool Application::getServer(const std::string& type,std::vector<TcpServer::ptr>&svrs){$/;"	f	class:JKYi::Application	signature:(const std::string& type,std::vector<TcpServer::ptr>&svrs)
JKYi::Application::getServer	JKYi/application.h	/^    bool getServer(const std::string& type,std::vector<TcpServer::ptr>&svrs);$/;"	p	class:JKYi::Application	access:public	signature:(const std::string& type,std::vector<TcpServer::ptr>&svrs)
JKYi::Application::init	JKYi/application.cc	/^bool Application::init(int argc,char ** argv){$/;"	f	class:JKYi::Application	signature:(int argc,char ** argv)
JKYi::Application::init	JKYi/application.h	/^    bool init(int argc,char** argv);$/;"	p	class:JKYi::Application	access:public	signature:(int argc,char** argv)
JKYi::Application::listAllServer	JKYi/application.cc	/^void Application::listAllServer(std::map<std::string,std::vector<TcpServer::ptr>>&servers){$/;"	f	class:JKYi::Application	signature:(std::map<std::string,std::vector<TcpServer::ptr>>&servers)
JKYi::Application::listAllServer	JKYi/application.h	/^    void listAllServer(std::map<std::string,$/;"	p	class:JKYi::Application	access:public	signature:(std::map<std::string, std::vector<TcpServer::ptr>> &servers)
JKYi::Application::m_argc	JKYi/application.h	/^    int m_argc = 0;$/;"	m	class:JKYi::Application	access:private
JKYi::Application::m_argv	JKYi/application.h	/^    char ** m_argv = nullptr;$/;"	m	class:JKYi::Application	access:private
JKYi::Application::m_instance	JKYi/application.cc	/^Application* Application::m_instance = nullptr;$/;"	m	class:JKYi::Application	file:
JKYi::Application::m_instance	JKYi/application.h	/^    static Application* m_instance;$/;"	m	class:JKYi::Application	access:private
JKYi::Application::m_mainIOManager	JKYi/application.h	/^    IOManager::ptr m_mainIOManager;$/;"	m	class:JKYi::Application	access:private
JKYi::Application::m_servers	JKYi/application.h	/^    std::map<std::string,std::vector<TcpServer::ptr>>m_servers;$/;"	m	class:JKYi::Application	access:private
JKYi::Application::main	JKYi/application.cc	/^int Application::main(int argc,char ** argv){$/;"	f	class:JKYi::Application	signature:(int argc,char ** argv)
JKYi::Application::main	JKYi/application.h	/^    int main(int argc,char** argv);$/;"	p	class:JKYi::Application	access:private	signature:(int argc,char** argv)
JKYi::Application::run	JKYi/application.cc	/^bool Application::run(){$/;"	f	class:JKYi::Application	signature:()
JKYi::Application::run	JKYi/application.h	/^    bool run();$/;"	p	class:JKYi::Application	access:public	signature:()
JKYi::Application::run_fiber	JKYi/application.cc	/^int Application::run_fiber(){$/;"	f	class:JKYi::Application	signature:()
JKYi::Application::run_fiber	JKYi/application.h	/^    int run_fiber();$/;"	p	class:JKYi::Application	access:private	signature:()
JKYi::AtomicInt32	JKYi/atomic.h	/^typedef AtomicIntegerT<int32_t> AtomicInt32;$/;"	t	namespace:JKYi
JKYi::AtomicInt64	JKYi/atomic.h	/^typedef AtomicIntegerT<int64_t> AtomicInt64;$/;"	t	namespace:JKYi
JKYi::AtomicIntegerT	JKYi/atomic.h	/^class AtomicIntegerT : public Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::AtomicIntegerT::AtomicIntegerT	JKYi/atomic.h	/^    AtomicIntegerT()$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
JKYi::AtomicIntegerT::add	JKYi/atomic.h	/^    void add(T x){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:(T x)
JKYi::AtomicIntegerT::addAndGet	JKYi/atomic.h	/^    T addAndGet(T x){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:(T x)
JKYi::AtomicIntegerT::decrement	JKYi/atomic.h	/^    void decrement(){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
JKYi::AtomicIntegerT::decrementAndGet	JKYi/atomic.h	/^    T decrementAndGet(){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
JKYi::AtomicIntegerT::get	JKYi/atomic.h	/^    T get(){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
JKYi::AtomicIntegerT::getAndAdd	JKYi/atomic.h	/^    T getAndAdd(T x){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:(T x)
JKYi::AtomicIntegerT::getAndSet	JKYi/atomic.h	/^    T getAndSet(T newValue){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:(T newValue)
JKYi::AtomicIntegerT::increment	JKYi/atomic.h	/^    void increment(){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
JKYi::AtomicIntegerT::incrementAndGet	JKYi/atomic.h	/^    T incrementAndGet(){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
JKYi::AtomicIntegerT::value_	JKYi/atomic.h	/^    volatile T value_;$/;"	m	class:JKYi::AtomicIntegerT	access:private
JKYi::Backtrace	JKYi/util.cc	/^void Backtrace(std::vector<std::string>&bt,int size,int skip){$/;"	f	namespace:JKYi	signature:(std::vector<std::string>&bt,int size,int skip)
JKYi::Backtrace	JKYi/util.h	/^void Backtrace(std::vector<std::string>&bt,int size=64,int skip=1);$/;"	p	namespace:JKYi	signature:(std::vector<std::string>&bt,int size=64,int skip=1)
JKYi::BacktraceToString	JKYi/util.cc	/^std::string BacktraceToString(int size,int skip,const std::string&prefix){$/;"	f	namespace:JKYi	signature:(int size,int skip,const std::string&prefix)
JKYi::BacktraceToString	JKYi/util.h	/^std::string BacktraceToString(int size=64,int skip=2,const std::string&prefix="  ");$/;"	p	namespace:JKYi	signature:(int size=64,int skip=2,const std::string&prefix=Ó)
JKYi::BlockingQueue	JKYi/BlockingQueue.h	/^class BlockingQueue : Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::BlockingQueue::BlockingQueue	JKYi/BlockingQueue.h	/^    BlockingQueue()$/;"	f	class:JKYi::BlockingQueue	access:public	signature:()
JKYi::BlockingQueue::condition_	JKYi/BlockingQueue.h	/^    Condition condition_;$/;"	m	class:JKYi::BlockingQueue	access:private
JKYi::BlockingQueue::drain	JKYi/BlockingQueue.h	/^    std::deque<T> drain(){$/;"	f	class:JKYi::BlockingQueue	access:public	signature:()
JKYi::BlockingQueue::mutex_	JKYi/BlockingQueue.h	/^    mutable Mutex mutex_;$/;"	m	class:JKYi::BlockingQueue	access:private
JKYi::BlockingQueue::push	JKYi/BlockingQueue.h	/^    void push(T&& t){$/;"	f	class:JKYi::BlockingQueue	access:public	signature:(T&& t)
JKYi::BlockingQueue::push	JKYi/BlockingQueue.h	/^    void push(const T& t){$/;"	f	class:JKYi::BlockingQueue	access:public	signature:(const T& t)
JKYi::BlockingQueue::queue_	JKYi/BlockingQueue.h	/^    std::deque<T> queue_;$/;"	m	class:JKYi::BlockingQueue	access:private
JKYi::BlockingQueue::size	JKYi/BlockingQueue.h	/^    size_t size()const{$/;"	f	class:JKYi::BlockingQueue	access:public	signature:() const
JKYi::BlockingQueue::take	JKYi/BlockingQueue.h	/^    T take(){$/;"	f	class:JKYi::BlockingQueue	access:public	signature:()
JKYi::BoundedBlockingQueue	JKYi/BoundedBlockingQueue.h	/^class BoundedBlockingQueue : Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::BoundedBlockingQueue::BoundedBlockingQueue	JKYi/BoundedBlockingQueue.h	/^    explicit BoundedBlockingQueue(int maxSize)$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:(int maxSize)
JKYi::BoundedBlockingQueue::capacity	JKYi/BoundedBlockingQueue.h	/^    size_t capacity()const{$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:() const
JKYi::BoundedBlockingQueue::empty	JKYi/BoundedBlockingQueue.h	/^    bool empty()const{$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:() const
JKYi::BoundedBlockingQueue::full	JKYi/BoundedBlockingQueue.h	/^    bool full()const{$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:() const
JKYi::BoundedBlockingQueue::mutex_	JKYi/BoundedBlockingQueue.h	/^    mutable Mutex mutex_;$/;"	m	class:JKYi::BoundedBlockingQueue	access:private
JKYi::BoundedBlockingQueue::notEpmty_	JKYi/BoundedBlockingQueue.h	/^    Condition notEpmty_;$/;"	m	class:JKYi::BoundedBlockingQueue	access:private
JKYi::BoundedBlockingQueue::notFull_	JKYi/BoundedBlockingQueue.h	/^    Condition notFull_;$/;"	m	class:JKYi::BoundedBlockingQueue	access:private
JKYi::BoundedBlockingQueue::push	JKYi/BoundedBlockingQueue.h	/^    void push(T&& t){$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:(T&& t)
JKYi::BoundedBlockingQueue::push	JKYi/BoundedBlockingQueue.h	/^    void push(const T& t){$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:(const T& t)
JKYi::BoundedBlockingQueue::queue_	JKYi/BoundedBlockingQueue.h	/^    boost::circular_buffer<T> queue_;$/;"	m	class:JKYi::BoundedBlockingQueue	access:private
JKYi::BoundedBlockingQueue::size	JKYi/BoundedBlockingQueue.h	/^    size_t size()const{$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:() const
JKYi::BoundedBlockingQueue::take	JKYi/BoundedBlockingQueue.h	/^    T take(){$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:()
JKYi::ByteArray	JKYi/bytearray.h	/^class ByteArray{$/;"	c	namespace:JKYi
JKYi::ByteArray::ByteArray	JKYi/bytearray.cc	/^ByteArray::ByteArray(size_t base_size)$/;"	f	class:JKYi::ByteArray	signature:(size_t base_size)
JKYi::ByteArray::ByteArray	JKYi/bytearray.cc	/^ByteArray::ByteArray(void * data,size_t size,bool owner)$/;"	f	class:JKYi::ByteArray	signature:(void * data,size_t size,bool owner)
JKYi::ByteArray::ByteArray	JKYi/bytearray.h	/^    ByteArray(size_t base_size = 4096);$/;"	p	class:JKYi::ByteArray	access:public	signature:(size_t base_size = 4096)
JKYi::ByteArray::ByteArray	JKYi/bytearray.h	/^    ByteArray(void * data,size_t size,bool owner = false);$/;"	p	class:JKYi::ByteArray	access:public	signature:(void * data,size_t size,bool owner = false)
JKYi::ByteArray::Node	JKYi/bytearray.h	/^    struct Node{$/;"	s	class:JKYi::ByteArray	access:public
JKYi::ByteArray::Node::Node	JKYi/bytearray.cc	/^ByteArray::Node::Node()$/;"	f	class:JKYi::ByteArray::Node	signature:()
JKYi::ByteArray::Node::Node	JKYi/bytearray.cc	/^ByteArray::Node::Node(size_t s)$/;"	f	class:JKYi::ByteArray::Node	signature:(size_t s)
JKYi::ByteArray::Node::Node	JKYi/bytearray.h	/^        Node();$/;"	p	struct:JKYi::ByteArray::Node	access:public	signature:()
JKYi::ByteArray::Node::Node	JKYi/bytearray.h	/^        Node(size_t s);$/;"	p	struct:JKYi::ByteArray::Node	access:public	signature:(size_t s)
JKYi::ByteArray::Node::next	JKYi/bytearray.h	/^        Node* next;$/;"	m	struct:JKYi::ByteArray::Node	access:public
JKYi::ByteArray::Node::ptr	JKYi/bytearray.h	/^        char * ptr;$/;"	m	struct:JKYi::ByteArray::Node	access:public
JKYi::ByteArray::Node::size	JKYi/bytearray.h	/^        size_t size;$/;"	m	struct:JKYi::ByteArray::Node	access:public
JKYi::ByteArray::Node::~Node	JKYi/bytearray.cc	/^ByteArray::Node::~Node(){$/;"	f	class:JKYi::ByteArray::Node	signature:()
JKYi::ByteArray::Node::~Node	JKYi/bytearray.h	/^        ~Node();$/;"	p	struct:JKYi::ByteArray::Node	access:public	signature:()
JKYi::ByteArray::addCapacity	JKYi/bytearray.cc	/^void ByteArray::addCapacity(size_t size){$/;"	f	class:JKYi::ByteArray	signature:(size_t size)
JKYi::ByteArray::addCapacity	JKYi/bytearray.h	/^    void addCapacity(size_t size);$/;"	p	class:JKYi::ByteArray	access:private	signature:(size_t size)
JKYi::ByteArray::clear	JKYi/bytearray.cc	/^void ByteArray::clear(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::clear	JKYi/bytearray.h	/^    void clear();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::getBaseSize	JKYi/bytearray.h	/^    size_t getBaseSize()const { return m_baseSize; };$/;"	f	class:JKYi::ByteArray	access:public	signature:() const
JKYi::ByteArray::getPosition	JKYi/bytearray.h	/^    size_t getPosition()const { return m_position; }$/;"	f	class:JKYi::ByteArray	access:public	signature:() const
JKYi::ByteArray::getReadBuffers	JKYi/bytearray.cc	/^uint64_t ByteArray::getReadBuffers(std::vector<iovec>&buffers,uint64_t len)const{$/;"	f	class:JKYi::ByteArray	signature:(std::vector<iovec>&buffers,uint64_t len) const
JKYi::ByteArray::getReadBuffers	JKYi/bytearray.cc	/^uint64_t ByteArray::getReadBuffers(std::vector<iovec>&buffers,uint64_t len,uint64_t position)const{$/;"	f	class:JKYi::ByteArray	signature:(std::vector<iovec>&buffers,uint64_t len,uint64_t position) const
JKYi::ByteArray::getReadBuffers	JKYi/bytearray.h	/^    uint64_t getReadBuffers(std::vector<iovec>&buffers,uint64_t len,uint64_t position)const;$/;"	p	class:JKYi::ByteArray	access:public	signature:(std::vector<iovec>&buffers,uint64_t len,uint64_t position) const
JKYi::ByteArray::getReadBuffers	JKYi/bytearray.h	/^    uint64_t getReadBuffers(std::vector<iovec>&buffers,uint64_t len= ~011 )const;$/;"	p	class:JKYi::ByteArray	access:public	signature:(std::vector<iovec>&buffers,uint64_t len= ~011 ) const
JKYi::ByteArray::getReadSize	JKYi/bytearray.h	/^    size_t getReadSize()const { return m_size - m_position; }$/;"	f	class:JKYi::ByteArray	access:public	signature:() const
JKYi::ByteArray::getSize	JKYi/bytearray.h	/^    size_t getSize()const { return m_size;}$/;"	f	class:JKYi::ByteArray	access:public	signature:() const
JKYi::ByteArray::getWriteBuffers	JKYi/bytearray.cc	/^uint64_t ByteArray::getWriteBuffers(std::vector<iovec>&buffers,uint64_t len){$/;"	f	class:JKYi::ByteArray	signature:(std::vector<iovec>&buffers,uint64_t len)
JKYi::ByteArray::getWriteBuffers	JKYi/bytearray.h	/^    uint64_t getWriteBuffers(std::vector<iovec>&buffers,uint64_t len);$/;"	p	class:JKYi::ByteArray	access:public	signature:(std::vector<iovec>&buffers,uint64_t len)
JKYi::ByteArray::getWriteSize	JKYi/bytearray.h	/^    size_t getWriteSize()const { return m_capacity-m_position; }$/;"	f	class:JKYi::ByteArray	access:private	signature:() const
JKYi::ByteArray::isLittleEndian	JKYi/bytearray.cc	/^bool ByteArray::isLittleEndian()const{$/;"	f	class:JKYi::ByteArray	signature:() const
JKYi::ByteArray::isLittleEndian	JKYi/bytearray.h	/^    bool isLittleEndian()const;$/;"	p	class:JKYi::ByteArray	access:public	signature:() const
JKYi::ByteArray::m_baseSize	JKYi/bytearray.h	/^    size_t m_baseSize;$/;"	m	class:JKYi::ByteArray	access:private
JKYi::ByteArray::m_capacity	JKYi/bytearray.h	/^    size_t m_capacity;$/;"	m	class:JKYi::ByteArray	access:private
JKYi::ByteArray::m_cur	JKYi/bytearray.h	/^    Node * m_cur;$/;"	m	class:JKYi::ByteArray	access:private
JKYi::ByteArray::m_endian	JKYi/bytearray.h	/^    int8_t m_endian;$/;"	m	class:JKYi::ByteArray	access:private
JKYi::ByteArray::m_owner	JKYi/bytearray.h	/^    bool m_owner;$/;"	m	class:JKYi::ByteArray	access:private
JKYi::ByteArray::m_position	JKYi/bytearray.h	/^    size_t m_position;$/;"	m	class:JKYi::ByteArray	access:private
JKYi::ByteArray::m_root	JKYi/bytearray.h	/^    Node * m_root;$/;"	m	class:JKYi::ByteArray	access:private
JKYi::ByteArray::m_size	JKYi/bytearray.h	/^    size_t m_size;$/;"	m	class:JKYi::ByteArray	access:private
JKYi::ByteArray::ptr	JKYi/bytearray.h	/^    typedef std::shared_ptr<ByteArray> ptr;$/;"	t	class:JKYi::ByteArray	access:public
JKYi::ByteArray::read	JKYi/bytearray.cc	/^void ByteArray::read(void * buf,size_t len){$/;"	f	class:JKYi::ByteArray	signature:(void * buf,size_t len)
JKYi::ByteArray::read	JKYi/bytearray.cc	/^void ByteArray::read(void *buf,size_t len,size_t position)const{$/;"	f	class:JKYi::ByteArray	signature:(void *buf,size_t len,size_t position) const
JKYi::ByteArray::read	JKYi/bytearray.h	/^    void read(void * buf,size_t len);$/;"	p	class:JKYi::ByteArray	access:public	signature:(void * buf,size_t len)
JKYi::ByteArray::read	JKYi/bytearray.h	/^    void read(void * buf,size_t len,size_t position)const;$/;"	p	class:JKYi::ByteArray	access:public	signature:(void * buf,size_t len,size_t position) const
JKYi::ByteArray::readDouble	JKYi/bytearray.cc	/^double ByteArray::readDouble(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readDouble	JKYi/bytearray.h	/^    double  readDouble();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readFint16	JKYi/bytearray.cc	/^int16_t ByteArray::readFint16(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readFint16	JKYi/bytearray.h	/^    int16_t  readFint16();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readFint32	JKYi/bytearray.cc	/^int32_t ByteArray::readFint32(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readFint32	JKYi/bytearray.h	/^    int32_t  readFint32();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readFint64	JKYi/bytearray.cc	/^int64_t ByteArray::readFint64(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readFint64	JKYi/bytearray.h	/^    int64_t  readFint64();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readFint8	JKYi/bytearray.cc	/^int8_t ByteArray::readFint8(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readFint8	JKYi/bytearray.h	/^    int8_t   readFint8();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readFloat	JKYi/bytearray.cc	/^float ByteArray::readFloat(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readFloat	JKYi/bytearray.h	/^    float   readFloat();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readFromFile	JKYi/bytearray.cc	/^bool ByteArray::readFromFile(const std::string& name){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& name)
JKYi::ByteArray::readFromFile	JKYi/bytearray.h	/^    bool readFromFile(const std::string& name);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& name)
JKYi::ByteArray::readFuint16	JKYi/bytearray.cc	/^uint16_t ByteArray::readFuint16(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readFuint16	JKYi/bytearray.h	/^    uint16_t readFuint16();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readFuint32	JKYi/bytearray.cc	/^uint32_t ByteArray::readFuint32(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readFuint32	JKYi/bytearray.h	/^    uint32_t readFuint32();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readFuint64	JKYi/bytearray.cc	/^uint64_t ByteArray::readFuint64(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readFuint64	JKYi/bytearray.h	/^    uint64_t readFuint64();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readFuint8	JKYi/bytearray.cc	/^uint8_t ByteArray::readFuint8(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readFuint8	JKYi/bytearray.h	/^    uint8_t  readFuint8();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readInt32	JKYi/bytearray.cc	/^int32_t ByteArray::readInt32(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readInt32	JKYi/bytearray.h	/^    int32_t  readInt32();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readInt64	JKYi/bytearray.cc	/^int64_t ByteArray::readInt64(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readInt64	JKYi/bytearray.h	/^    int64_t  readInt64();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readStringF16	JKYi/bytearray.cc	/^std::string ByteArray::readStringF16(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readStringF16	JKYi/bytearray.h	/^    std::string readStringF16();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readStringF32	JKYi/bytearray.cc	/^std::string ByteArray::readStringF32(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readStringF32	JKYi/bytearray.h	/^    std::string readStringF32();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readStringF64	JKYi/bytearray.cc	/^std::string ByteArray::readStringF64(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readStringF64	JKYi/bytearray.h	/^    std::string readStringF64();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readStringVint	JKYi/bytearray.cc	/^std::string ByteArray::readStringVint(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readStringVint	JKYi/bytearray.h	/^    std::string readStringVint();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readUint32	JKYi/bytearray.cc	/^uint32_t ByteArray::readUint32(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readUint32	JKYi/bytearray.h	/^    uint32_t readUint32();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::readUint64	JKYi/bytearray.cc	/^uint64_t ByteArray::readUint64(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::readUint64	JKYi/bytearray.h	/^    uint64_t readUint64();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::ByteArray::setIsLittleEndian	JKYi/bytearray.cc	/^void ByteArray::setIsLittleEndian(bool v){$/;"	f	class:JKYi::ByteArray	signature:(bool v)
JKYi::ByteArray::setIsLittleEndian	JKYi/bytearray.h	/^    void setIsLittleEndian(bool val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(bool val)
JKYi::ByteArray::setPosition	JKYi/bytearray.cc	/^void ByteArray::setPosition(size_t v){$/;"	f	class:JKYi::ByteArray	signature:(size_t v)
JKYi::ByteArray::setPosition	JKYi/bytearray.h	/^    void setPosition(size_t v);$/;"	p	class:JKYi::ByteArray	access:public	signature:(size_t v)
JKYi::ByteArray::toHexString	JKYi/bytearray.cc	/^std::string ByteArray::toHexString()const{$/;"	f	class:JKYi::ByteArray	signature:() const
JKYi::ByteArray::toHexString	JKYi/bytearray.h	/^    std::string toHexString()const;$/;"	p	class:JKYi::ByteArray	access:public	signature:() const
JKYi::ByteArray::toString	JKYi/bytearray.cc	/^std::string ByteArray::toString()const{$/;"	f	class:JKYi::ByteArray	signature:() const
JKYi::ByteArray::toString	JKYi/bytearray.h	/^    std::string toString()const;$/;"	p	class:JKYi::ByteArray	access:public	signature:() const
JKYi::ByteArray::write	JKYi/bytearray.cc	/^void ByteArray::write(const void * buf,size_t len){$/;"	f	class:JKYi::ByteArray	signature:(const void * buf,size_t len)
JKYi::ByteArray::write	JKYi/bytearray.h	/^    void write(const void * buf,size_t len);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const void * buf,size_t len)
JKYi::ByteArray::writeDouble	JKYi/bytearray.cc	/^void ByteArray::writeDouble(double value){$/;"	f	class:JKYi::ByteArray	signature:(double value)
JKYi::ByteArray::writeDouble	JKYi/bytearray.h	/^    void writeDouble(double val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(double val)
JKYi::ByteArray::writeFint16	JKYi/bytearray.cc	/^void ByteArray::writeFint16(int16_t val){$/;"	f	class:JKYi::ByteArray	signature:(int16_t val)
JKYi::ByteArray::writeFint16	JKYi/bytearray.h	/^    void writeFint16(int16_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int16_t val)
JKYi::ByteArray::writeFint32	JKYi/bytearray.cc	/^void ByteArray::writeFint32(int32_t val){$/;"	f	class:JKYi::ByteArray	signature:(int32_t val)
JKYi::ByteArray::writeFint32	JKYi/bytearray.h	/^    void writeFint32(int32_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int32_t val)
JKYi::ByteArray::writeFint64	JKYi/bytearray.cc	/^void ByteArray::writeFint64(int64_t val){$/;"	f	class:JKYi::ByteArray	signature:(int64_t val)
JKYi::ByteArray::writeFint64	JKYi/bytearray.h	/^    void writeFint64(int64_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int64_t val)
JKYi::ByteArray::writeFint8	JKYi/bytearray.cc	/^void ByteArray::writeFint8(int8_t val){$/;"	f	class:JKYi::ByteArray	signature:(int8_t val)
JKYi::ByteArray::writeFint8	JKYi/bytearray.h	/^    void writeFint8(int8_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int8_t val)
JKYi::ByteArray::writeFloat	JKYi/bytearray.cc	/^void ByteArray::writeFloat(float value){$/;"	f	class:JKYi::ByteArray	signature:(float value)
JKYi::ByteArray::writeFloat	JKYi/bytearray.h	/^    void writeFloat(float val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(float val)
JKYi::ByteArray::writeFuint16	JKYi/bytearray.cc	/^void ByteArray::writeFuint16(uint16_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint16_t val)
JKYi::ByteArray::writeFuint16	JKYi/bytearray.h	/^    void writeFuint16(uint16_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint16_t val)
JKYi::ByteArray::writeFuint32	JKYi/bytearray.cc	/^void ByteArray::writeFuint32(uint32_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint32_t val)
JKYi::ByteArray::writeFuint32	JKYi/bytearray.h	/^    void writeFuint32(uint32_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint32_t val)
JKYi::ByteArray::writeFuint64	JKYi/bytearray.cc	/^void ByteArray::writeFuint64(uint64_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint64_t val)
JKYi::ByteArray::writeFuint64	JKYi/bytearray.h	/^    void writeFuint64(uint64_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint64_t val)
JKYi::ByteArray::writeFuint8	JKYi/bytearray.cc	/^void ByteArray::writeFuint8(uint8_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint8_t val)
JKYi::ByteArray::writeFuint8	JKYi/bytearray.h	/^    void writeFuint8(uint8_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint8_t val)
JKYi::ByteArray::writeInt32	JKYi/bytearray.cc	/^void ByteArray::writeInt32(int32_t val){$/;"	f	class:JKYi::ByteArray	signature:(int32_t val)
JKYi::ByteArray::writeInt32	JKYi/bytearray.h	/^    void writeInt32(int32_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int32_t val)
JKYi::ByteArray::writeInt64	JKYi/bytearray.cc	/^void ByteArray::writeInt64(int64_t val){$/;"	f	class:JKYi::ByteArray	signature:(int64_t val)
JKYi::ByteArray::writeInt64	JKYi/bytearray.h	/^    void writeInt64(int64_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int64_t val)
JKYi::ByteArray::writeStringF16	JKYi/bytearray.cc	/^void ByteArray::writeStringF16(const std::string& value){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& value)
JKYi::ByteArray::writeStringF16	JKYi/bytearray.h	/^    void writeStringF16(const std::string& val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& val)
JKYi::ByteArray::writeStringF32	JKYi/bytearray.cc	/^void ByteArray::writeStringF32(const std::string& value){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& value)
JKYi::ByteArray::writeStringF32	JKYi/bytearray.h	/^    void writeStringF32(const std::string& val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& val)
JKYi::ByteArray::writeStringF64	JKYi/bytearray.cc	/^void ByteArray::writeStringF64(const std::string& value){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& value)
JKYi::ByteArray::writeStringF64	JKYi/bytearray.h	/^    void writeStringF64(const std::string& val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& val)
JKYi::ByteArray::writeStringVint	JKYi/bytearray.cc	/^void ByteArray::writeStringVint(const std::string& value){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& value)
JKYi::ByteArray::writeStringVint	JKYi/bytearray.h	/^    void writeStringVint(const std::string& val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& val)
JKYi::ByteArray::writeStringWithoutLength	JKYi/bytearray.cc	/^void ByteArray::writeStringWithoutLength(const std::string& value){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& value)
JKYi::ByteArray::writeStringWithoutLength	JKYi/bytearray.h	/^    void writeStringWithoutLength(const std::string& val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& val)
JKYi::ByteArray::writeToFile	JKYi/bytearray.cc	/^bool ByteArray::writeToFile(const std::string& name)const{$/;"	f	class:JKYi::ByteArray	signature:(const std::string& name) const
JKYi::ByteArray::writeToFile	JKYi/bytearray.h	/^    bool writeToFile(const std::string& name)const;$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& name) const
JKYi::ByteArray::writeUint32	JKYi/bytearray.cc	/^void ByteArray::writeUint32(uint32_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint32_t val)
JKYi::ByteArray::writeUint32	JKYi/bytearray.h	/^    void writeUint32(uint32_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint32_t val)
JKYi::ByteArray::writeUint64	JKYi/bytearray.cc	/^void ByteArray::writeUint64(uint64_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint64_t val)
JKYi::ByteArray::writeUint64	JKYi/bytearray.h	/^    void writeUint64(uint64_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint64_t val)
JKYi::ByteArray::~ByteArray	JKYi/bytearray.cc	/^ByteArray::~ByteArray(){$/;"	f	class:JKYi::ByteArray	signature:()
JKYi::ByteArray::~ByteArray	JKYi/bytearray.h	/^    ~ByteArray();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
JKYi::CASLock	JKYi/mutex.h	/^class CASLock:Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::CASLock::CASLock	JKYi/mutex.h	/^   CASLock(){$/;"	f	class:JKYi::CASLock	access:public	signature:()
JKYi::CASLock::lock	JKYi/mutex.h	/^   void lock(){$/;"	f	class:JKYi::CASLock	access:public	signature:()
JKYi::CASLock::m_mutex	JKYi/mutex.h	/^   volatile std::atomic_flag m_mutex;$/;"	m	class:JKYi::CASLock	access:private
JKYi::CASLock::unlock	JKYi/mutex.h	/^   void unlock(){$/;"	f	class:JKYi::CASLock	access:public	signature:()
JKYi::CASLock::~CASLock	JKYi/mutex.h	/^   ~CASLock(){$/;"	f	class:JKYi::CASLock	access:public	signature:()
JKYi::Condition	JKYi/condition.h	/^class Condition : public Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::Condition::Condition	JKYi/condition.h	/^    explicit Condition(Mutex& mutex)$/;"	f	class:JKYi::Condition	access:public	signature:(Mutex& mutex)
JKYi::Condition::mutex_	JKYi/condition.h	/^    Mutex& mutex_;$/;"	m	class:JKYi::Condition	access:private
JKYi::Condition::notify	JKYi/condition.h	/^    void notify(){$/;"	f	class:JKYi::Condition	access:public	signature:()
JKYi::Condition::notifyAll	JKYi/condition.h	/^    void notifyAll(){$/;"	f	class:JKYi::Condition	access:public	signature:()
JKYi::Condition::pcond_	JKYi/condition.h	/^    pthread_cond_t pcond_;$/;"	m	class:JKYi::Condition	access:private
JKYi::Condition::wait	JKYi/condition.h	/^    void wait(){$/;"	f	class:JKYi::Condition	access:public	signature:()
JKYi::Condition::waitForSeconds	JKYi/condition.cc	/^void Condition::waitForSeconds(double seconds){$/;"	f	class:JKYi::Condition	signature:(double seconds)
JKYi::Condition::waitForSeconds	JKYi/condition.h	/^    void waitForSeconds(double seconds);$/;"	p	class:JKYi::Condition	access:public	signature:(double seconds)
JKYi::Condition::~Condition	JKYi/condition.h	/^    ~Condition(){$/;"	f	class:JKYi::Condition	access:public	signature:()
JKYi::Config	JKYi/config.h	/^class Config{$/;"	c	namespace:JKYi
JKYi::Config::ConfigVarMap	JKYi/config.h	/^    typedef std::map<std::string,ConfigVarBase::ptr> ConfigVarMap;$/;"	t	class:JKYi::Config	access:public
JKYi::Config::LoadFromConfDir	JKYi/config.cc	/^void Config::LoadFromConfDir(const std::string& path,bool force){$/;"	f	class:JKYi::Config	signature:(const std::string& path,bool force)
JKYi::Config::LoadFromConfDir	JKYi/config.h	/^    static void LoadFromConfDir(const std::string& path,bool force = false);$/;"	p	class:JKYi::Config	access:public	signature:(const std::string& path,bool force = false)
JKYi::Config::LoadFromYaml	JKYi/config.cc	/^void Config::LoadFromYaml(const YAML::Node& node){$/;"	f	class:JKYi::Config	signature:(const YAML::Node& node)
JKYi::Config::LoadFromYaml	JKYi/config.h	/^    static void LoadFromYaml(const YAML::Node&node);$/;"	p	class:JKYi::Config	access:public	signature:(const YAML::Node&node)
JKYi::Config::Lookup	JKYi/config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string&name){$/;"	f	class:JKYi::Config	access:public	signature:(const std::string&name)
JKYi::Config::Lookup	JKYi/config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string&name,$/;"	f	class:JKYi::Config	access:public	signature:(const std::string&name, const T&default_value,const std::string&description=Ó)
JKYi::Config::LookupBase	JKYi/config.cc	/^ConfigVarBase::ptr Config::LookupBase(const std::string&name){$/;"	f	class:JKYi::Config	signature:(const std::string&name)
JKYi::Config::LookupBase	JKYi/config.h	/^    static ConfigVarBase::ptr LookupBase(const std::string&name);$/;"	p	class:JKYi::Config	access:public	signature:(const std::string&name)
JKYi::Config::RWMutexType	JKYi/config.h	/^	typedef RWMutex RWMutexType;$/;"	t	class:JKYi::Config	access:public
JKYi::Config::Visit	JKYi/config.cc	/^void Config::Visit(std::function<void (ConfigVarBase::ptr)>cb){$/;"	f	class:JKYi::Config	signature:(std::function<void (ConfigVarBase::ptr)>cb)
JKYi::Config::Visit	JKYi/config.h	/^	static void Visit(std::function<void (ConfigVarBase::ptr)>cb); $/;"	p	class:JKYi::Config	access:public	signature:(std::function<void (ConfigVarBase::ptr)>cb)
JKYi::Config::getDatas	JKYi/config.h	/^    static ConfigVarMap& getDatas(){$/;"	f	class:JKYi::Config	access:private	signature:()
JKYi::Config::getMutex	JKYi/config.h	/^	static RWMutexType& getMutex(){$/;"	f	class:JKYi::Config	access:private	signature:()
JKYi::ConfigVar	JKYi/config.h	/^class ConfigVar:public ConfigVarBase{$/;"	c	namespace:JKYi	inherits:ConfigVarBase
JKYi::ConfigVar::ConfigVar	JKYi/config.h	/^   ConfigVar(const std::string&name,const T&default_value,const std::string&description="")$/;"	f	class:JKYi::ConfigVar	access:public	signature:(const std::string&name,const T&default_value,const std::string&description=Ó)
JKYi::ConfigVar::RWMutexType	JKYi/config.h	/^   typedef RWMutex RWMutexType;$/;"	t	class:JKYi::ConfigVar	access:public
JKYi::ConfigVar::addListener	JKYi/config.h	/^   uint64_t addListener(on_change_cb cb){$/;"	f	class:JKYi::ConfigVar	access:public	signature:(on_change_cb cb)
JKYi::ConfigVar::clearListener	JKYi/config.h	/^   void clearListener(){$/;"	f	class:JKYi::ConfigVar	access:public	signature:()
JKYi::ConfigVar::delListener	JKYi/config.h	/^   void delListener(uint64_t key){$/;"	f	class:JKYi::ConfigVar	access:public	signature:(uint64_t key)
JKYi::ConfigVar::getListener	JKYi/config.h	/^   on_change_cb getListener(uint64_t key){$/;"	f	class:JKYi::ConfigVar	access:public	signature:(uint64_t key)
JKYi::ConfigVar::getValue	JKYi/config.h	/^   const T getValue(){$/;"	f	class:JKYi::ConfigVar	access:public	signature:()
JKYi::ConfigVar::m_cbs	JKYi/config.h	/^   std::unordered_map<uint64_t,on_change_cb>m_cbs;$/;"	m	class:JKYi::ConfigVar	access:private
JKYi::ConfigVar::m_mutex	JKYi/config.h	/^   RWMutexType m_mutex;$/;"	m	class:JKYi::ConfigVar	access:private
JKYi::ConfigVar::m_val	JKYi/config.h	/^   T m_val;$/;"	m	class:JKYi::ConfigVar	access:private
JKYi::ConfigVar::on_change_cb	JKYi/config.h	/^   typedef std::function<void (const  T&oldValue,const T&newValue)> on_change_cb;$/;"	t	class:JKYi::ConfigVar	access:public
JKYi::ConfigVar::ptr	JKYi/config.h	/^   typedef std::shared_ptr<ConfigVar<T>> ptr;$/;"	t	class:JKYi::ConfigVar	access:public
JKYi::ConfigVar::setValue	JKYi/config.h	/^   void setValue(const T&t){$/;"	f	class:JKYi::ConfigVar	access:public	signature:(const T&t)
JKYi::ConfigVarBase	JKYi/config.h	/^class ConfigVarBase{$/;"	c	namespace:JKYi
JKYi::ConfigVarBase::ConfigVarBase	JKYi/config.h	/^   ConfigVarBase(const std::string&name,const std::string&description="")$/;"	f	class:JKYi::ConfigVarBase	access:public	signature:(const std::string&name,const std::string&description=Ó)
JKYi::ConfigVarBase::fromString	JKYi/config.h	/^   virtual bool fromString(const std::string&val)=0;$/;"	p	class:JKYi::ConfigVarBase	access:public	signature:(const std::string&val)
JKYi::ConfigVarBase::getDescription	JKYi/config.h	/^   const std::string& getDescription()const {return m_description;}$/;"	f	class:JKYi::ConfigVarBase	access:public	signature:() const
JKYi::ConfigVarBase::getName	JKYi/config.h	/^   const std::string& getName()const {return m_name;}$/;"	f	class:JKYi::ConfigVarBase	access:public	signature:() const
JKYi::ConfigVarBase::getType	JKYi/config.h	/^   virtual std::string getType()const=0;$/;"	p	class:JKYi::ConfigVarBase	access:public	signature:() const
JKYi::ConfigVarBase::m_description	JKYi/config.h	/^   std::string m_description;$/;"	m	class:JKYi::ConfigVarBase	access:private
JKYi::ConfigVarBase::m_name	JKYi/config.h	/^   std::string m_name;$/;"	m	class:JKYi::ConfigVarBase	access:private
JKYi::ConfigVarBase::ptr	JKYi/config.h	/^   typedef std::shared_ptr<ConfigVarBase> ptr;$/;"	t	class:JKYi::ConfigVarBase	access:public
JKYi::ConfigVarBase::toString	JKYi/config.h	/^   virtual std::string toString()=0;$/;"	p	class:JKYi::ConfigVarBase	access:public	signature:()
JKYi::ConfigVarBase::~ConfigVarBase	JKYi/config.h	/^   virtual ~ConfigVarBase(){};\/\/å ä¸ºè¦ä½ä¸ºåºç±»$/;"	f	class:JKYi::ConfigVarBase	access:public	signature:()
JKYi::Copyable	JKYi/copyable.h	/^class Copyable{$/;"	c	namespace:JKYi
JKYi::Copyable::Copyable	JKYi/copyable.h	/^    Copyable() = default;$/;"	p	class:JKYi::Copyable	access:protected	signature:()
JKYi::Copyable::~Copyable	JKYi/copyable.h	/^    ~Copyable() = default;$/;"	p	class:JKYi::Copyable	access:protected	signature:()
JKYi::CountBytes	JKYi/address.cc	/^static uint32_t CountBytes(T value){$/;"	f	namespace:JKYi	signature:(T value)
JKYi::CountDownLatch	JKYi/CountDownLatch.h	/^class CountDownLatch : Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::CountDownLatch::CountDownLatch	JKYi/CountDownLatch.cc	/^CountDownLatch::CountDownLatch(int count)$/;"	f	class:JKYi::CountDownLatch	signature:(int count)
JKYi::CountDownLatch::CountDownLatch	JKYi/CountDownLatch.h	/^    explicit CountDownLatch(int count);$/;"	p	class:JKYi::CountDownLatch	access:public	signature:(int count)
JKYi::CountDownLatch::condition_	JKYi/CountDownLatch.h	/^    Condition condition_;$/;"	m	class:JKYi::CountDownLatch	access:private
JKYi::CountDownLatch::countDown	JKYi/CountDownLatch.cc	/^void CountDownLatch::countDown(){$/;"	f	class:JKYi::CountDownLatch	signature:()
JKYi::CountDownLatch::countDown	JKYi/CountDownLatch.h	/^    void countDown();$/;"	p	class:JKYi::CountDownLatch	access:public	signature:()
JKYi::CountDownLatch::count_	JKYi/CountDownLatch.h	/^    int count_;$/;"	m	class:JKYi::CountDownLatch	access:private
JKYi::CountDownLatch::getCount	JKYi/CountDownLatch.cc	/^int CountDownLatch::getCount()const{$/;"	f	class:JKYi::CountDownLatch	signature:() const
JKYi::CountDownLatch::getCount	JKYi/CountDownLatch.h	/^    int getCount()const;$/;"	p	class:JKYi::CountDownLatch	access:public	signature:() const
JKYi::CountDownLatch::mutex_	JKYi/CountDownLatch.h	/^    mutable Mutex mutex_;$/;"	m	class:JKYi::CountDownLatch	access:private
JKYi::CountDownLatch::wait	JKYi/CountDownLatch.cc	/^void CountDownLatch::wait(){$/;"	f	class:JKYi::CountDownLatch	signature:()
JKYi::CountDownLatch::wait	JKYi/CountDownLatch.h	/^    void wait();$/;"	p	class:JKYi::CountDownLatch	access:public	signature:()
JKYi::CreateMask	JKYi/address.cc	/^static T CreateMask(uint32_t bits){$/;"	f	namespace:JKYi	signature:(uint32_t bits)
JKYi::CurrentThread	JKYi/reactor/CurrentThread.cc	/^namespace CurrentThread{$/;"	n	namespace:JKYi	file:
JKYi::CurrentThread	JKYi/reactor/CurrentThread.h	/^namespace CurrentThread{$/;"	n	namespace:JKYi
JKYi::CurrentThread	JKYi/reactor/Thread.cc	/^namespace CurrentThread{$/;"	n	namespace:JKYi	file:
JKYi::CurrentThread::cacheTid	JKYi/reactor/CurrentThread.h	/^void cacheTid();$/;"	p	namespace:JKYi::CurrentThread	signature:()
JKYi::CurrentThread::cacheTid	JKYi/reactor/Thread.cc	/^void cacheTid(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
JKYi::CurrentThread::isMainThread	JKYi/reactor/CurrentThread.h	/^bool isMainThread();$/;"	p	namespace:JKYi::CurrentThread	signature:()
JKYi::CurrentThread::isMainThread	JKYi/reactor/Thread.cc	/^bool isMainThread(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
JKYi::CurrentThread::name	JKYi/reactor/CurrentThread.h	/^inline const char * name(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
JKYi::CurrentThread::t_cachedTid	JKYi/reactor/CurrentThread.cc	/^__thread int t_cachedTid = 0;$/;"	m	namespace:JKYi::CurrentThread	file:
JKYi::CurrentThread::t_threadName	JKYi/reactor/CurrentThread.cc	/^__thread const char * t_threadName = "unknow";$/;"	m	namespace:JKYi::CurrentThread	file:
JKYi::CurrentThread::t_tidString	JKYi/reactor/CurrentThread.cc	/^__thread char t_tidString[32];$/;"	m	namespace:JKYi::CurrentThread	file:
JKYi::CurrentThread::t_tidStringLength	JKYi/reactor/CurrentThread.cc	/^__thread int t_tidStringLength = 6;$/;"	m	namespace:JKYi::CurrentThread	file:
JKYi::CurrentThread::tid	JKYi/reactor/CurrentThread.h	/^inline int tid(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
JKYi::CurrentThread::tidString	JKYi/reactor/CurrentThread.h	/^inline const char * tidString(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
JKYi::CurrentThread::tidStringLength	JKYi/reactor/CurrentThread.h	/^inline int tidStringLength(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
JKYi::DateTimeFormatItem	JKYi/log.cc	/^class DateTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::DateTimeFormatItem::DateTimeFormatItem	JKYi/log.cc	/^    DateTimeFormatItem(const std::string& format = "%Y-%m-%d %H:%M:%S")$/;"	f	class:JKYi::DateTimeFormatItem	access:public	signature:(const std::string& format = Ó)
JKYi::DateTimeFormatItem::m_format	JKYi/log.cc	/^    std::string m_format;$/;"	m	class:JKYi::DateTimeFormatItem	file:	access:private
JKYi::DecodeZigzag32	JKYi/bytearray.cc	/^static int32_t DecodeZigzag32(const uint32_t&val){$/;"	f	namespace:JKYi	signature:(const uint32_t&val)
JKYi::DecodeZigzag64	JKYi/bytearray.cc	/^static int64_t DecodeZigzag64(const uint64_t &val){$/;"	f	namespace:JKYi	signature:(const uint64_t &val)
JKYi::ElapseFormatItem	JKYi/log.cc	/^class ElapseFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::ElapseFormatItem::ElapseFormatItem	JKYi/log.cc	/^    ElapseFormatItem(const std::string&str=""){}$/;"	f	class:JKYi::ElapseFormatItem	access:public	signature:(const std::string&str=Ó)
JKYi::EncodeZigzag32	JKYi/bytearray.cc	/^static uint32_t EncodeZigzag32(const int32_t &val){$/;"	f	namespace:JKYi	signature:(const int32_t &val)
JKYi::EncodeZigzag64	JKYi/bytearray.cc	/^static uint64_t EncodeZigzag64(const int64_t &val){$/;"	f	namespace:JKYi	signature:(const int64_t &val)
JKYi::Env	JKYi/env.h	/^class Env{$/;"	c	namespace:JKYi
JKYi::Env::RWMutexType	JKYi/env.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:JKYi::Env	access:public
JKYi::Env::add	JKYi/env.cc	/^void Env::add(const std::string& key,const std::string& val){$/;"	f	class:JKYi::Env	signature:(const std::string& key,const std::string& val)
JKYi::Env::add	JKYi/env.h	/^     void add(const std::string& key,const std::string& val);$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key,const std::string& val)
JKYi::Env::addHelp	JKYi/env.cc	/^void Env::addHelp(const std::string& key,const std::string& val){$/;"	f	class:JKYi::Env	signature:(const std::string& key,const std::string& val)
JKYi::Env::addHelp	JKYi/env.h	/^     void addHelp(const std::string& key,const std::string& val);$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key,const std::string& val)
JKYi::Env::del	JKYi/env.cc	/^void Env::del(const std::string& key){$/;"	f	class:JKYi::Env	signature:(const std::string& key)
JKYi::Env::del	JKYi/env.h	/^     void del(const std::string& key); $/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key)
JKYi::Env::get	JKYi/env.cc	/^std::string Env::get(const std::string& key,const std::string& default_val){$/;"	f	class:JKYi::Env	signature:(const std::string& key,const std::string& default_val)
JKYi::Env::get	JKYi/env.h	/^     std::string get(const  std::string& key,const std::string& default_val = "");$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key,const std::string& default_val = Ó)
JKYi::Env::getAbsolutePath	JKYi/env.cc	/^std::string Env::getAbsolutePath(const std::string& path)const{$/;"	f	class:JKYi::Env	signature:(const std::string& path) const
JKYi::Env::getAbsolutePath	JKYi/env.h	/^     std::string getAbsolutePath(const std::string& path)const;$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& path) const
JKYi::Env::getAbsoluteWorkPath	JKYi/env.cc	/^std::string Env::getAbsoluteWorkPath(const std::string& path)const{$/;"	f	class:JKYi::Env	signature:(const std::string& path) const
JKYi::Env::getAbsoluteWorkPath	JKYi/env.h	/^     std::string getAbsoluteWorkPath(const std::string& path)const;$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& path) const
JKYi::Env::getConfigPath	JKYi/env.cc	/^std::string Env::getConfigPath(){$/;"	f	class:JKYi::Env	signature:()
JKYi::Env::getConfigPath	JKYi/env.h	/^     std::string getConfigPath();$/;"	p	class:JKYi::Env	access:public	signature:()
JKYi::Env::getCwd	JKYi/env.h	/^     const std::string& getCwd()const { return m_cwd; }$/;"	f	class:JKYi::Env	access:public	signature:() const
JKYi::Env::getEnv	JKYi/env.cc	/^std::string Env::getEnv(const std::string& key,const std::string& default_val){$/;"	f	class:JKYi::Env	signature:(const std::string& key,const std::string& default_val)
JKYi::Env::getEnv	JKYi/env.h	/^     std::string getEnv(const std::string& key,const std::string& default_val = "");$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key,const std::string& default_val = Ó)
JKYi::Env::getExe	JKYi/env.h	/^     const std::string& getExe()const { return m_exe; }$/;"	f	class:JKYi::Env	access:public	signature:() const
JKYi::Env::has	JKYi/env.cc	/^bool Env::has(const std::string& key){$/;"	f	class:JKYi::Env	signature:(const std::string& key)
JKYi::Env::has	JKYi/env.h	/^     bool has(const std::string& key);$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key)
JKYi::Env::init	JKYi/env.cc	/^bool Env::init(int argc,char ** argv){$/;"	f	class:JKYi::Env	signature:(int argc,char ** argv)
JKYi::Env::init	JKYi/env.h	/^     bool init(int argc,char ** argv);$/;"	p	class:JKYi::Env	access:public	signature:(int argc,char ** argv)
JKYi::Env::m_args	JKYi/env.h	/^    std::map<std::string,std::string> m_args;$/;"	m	class:JKYi::Env	access:private
JKYi::Env::m_cwd	JKYi/env.h	/^    std::string m_cwd;$/;"	m	class:JKYi::Env	access:private
JKYi::Env::m_exe	JKYi/env.h	/^    std::string m_exe;$/;"	m	class:JKYi::Env	access:private
JKYi::Env::m_helps	JKYi/env.h	/^    std::vector<std::pair<std::string,std::string>> m_helps;$/;"	m	class:JKYi::Env	access:private
JKYi::Env::m_mutex	JKYi/env.h	/^    RWMutexType m_mutex;$/;"	m	class:JKYi::Env	access:private
JKYi::Env::m_program	JKYi/env.h	/^    std::string m_program;$/;"	m	class:JKYi::Env	access:private
JKYi::Env::printHelp	JKYi/env.cc	/^void Env::printHelp(){$/;"	f	class:JKYi::Env	signature:()
JKYi::Env::printHelp	JKYi/env.h	/^     void printHelp();$/;"	p	class:JKYi::Env	access:public	signature:()
JKYi::Env::removeHelp	JKYi/env.cc	/^void Env::removeHelp(const std::string& key){$/;"	f	class:JKYi::Env	signature:(const std::string& key)
JKYi::Env::removeHelp	JKYi/env.h	/^     void removeHelp(const std::string& key);$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key)
JKYi::Env::setEnv	JKYi/env.cc	/^bool Env::setEnv(const std::string& key,const std::string& val){$/;"	f	class:JKYi::Env	signature:(const std::string& key,const std::string& val)
JKYi::Env::setEnv	JKYi/env.h	/^     bool setEnv(const std::string& key,const std::string& val);$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key,const std::string& val)
JKYi::EnvMgr	JKYi/env.h	/^typedef JKYi::Singleton<Env> EnvMgr;$/;"	t	namespace:JKYi
JKYi::FSUtil	JKYi/util.h	/^class FSUtil{$/;"	c	namespace:JKYi
JKYi::FSUtil::IsRunningPidfile	JKYi/util.cc	/^bool FSUtil::IsRunningPidfile(const std::string& pidfile){$/;"	f	class:JKYi::FSUtil	signature:(const std::string& pidfile)
JKYi::FSUtil::IsRunningPidfile	JKYi/util.h	/^    static bool IsRunningPidfile(const std::string& pidfile);$/;"	p	class:JKYi::FSUtil	access:public	signature:(const std::string& pidfile)
JKYi::FSUtil::ListAllFile	JKYi/util.cc	/^void FSUtil::ListAllFile(std::vector<std::string>& files,$/;"	f	class:JKYi::FSUtil	signature:(std::vector<std::string>& files, const std::string& path, const std::string& subfix)
JKYi::FSUtil::ListAllFile	JKYi/util.h	/^    static void ListAllFile(std::vector<std::string>& files,$/;"	p	class:JKYi::FSUtil	access:public	signature:(std::vector<std::string>& files, const std::string& path, const std::string& subfix)
JKYi::FSUtil::Mkdir	JKYi/util.cc	/^bool FSUtil::Mkdir(const std::string& dirname){$/;"	f	class:JKYi::FSUtil	signature:(const std::string& dirname)
JKYi::FSUtil::Mkdir	JKYi/util.h	/^    static bool Mkdir(const std::string& dirname);$/;"	p	class:JKYi::FSUtil	access:public	signature:(const std::string& dirname)
JKYi::FdCtx	JKYi/fdmanager.h	/^class FdCtx:public std::enable_shared_from_this<FdCtx>{	$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this
JKYi::FdCtx::FdCtx	JKYi/fdmanager.cc	/^FdCtx::FdCtx(int fd)$/;"	f	class:JKYi::FdCtx	signature:(int fd)
JKYi::FdCtx::FdCtx	JKYi/fdmanager.h	/^   FdCtx(int fd);$/;"	p	class:JKYi::FdCtx	access:public	signature:(int fd)
JKYi::FdCtx::getSysNonblock	JKYi/fdmanager.h	/^   bool getSysNonblock()const {return m_sysNonblock;}$/;"	f	class:JKYi::FdCtx	access:public	signature:() const
JKYi::FdCtx::getTimeout	JKYi/fdmanager.cc	/^uint64_t FdCtx::getTimeout(int type){$/;"	f	class:JKYi::FdCtx	signature:(int type)
JKYi::FdCtx::getTimeout	JKYi/fdmanager.h	/^   uint64_t getTimeout(int type);$/;"	p	class:JKYi::FdCtx	access:public	signature:(int type)
JKYi::FdCtx::getUserNonblock	JKYi/fdmanager.h	/^   bool getUserNonblock()const {return m_userNonblock;}$/;"	f	class:JKYi::FdCtx	access:public	signature:() const
JKYi::FdCtx::init	JKYi/fdmanager.cc	/^bool FdCtx::init(){$/;"	f	class:JKYi::FdCtx	signature:()
JKYi::FdCtx::init	JKYi/fdmanager.h	/^   bool init();$/;"	p	class:JKYi::FdCtx	access:private	signature:()
JKYi::FdCtx::isClose	JKYi/fdmanager.h	/^   bool isClose()const {return m_isClosed;}$/;"	f	class:JKYi::FdCtx	access:public	signature:() const
JKYi::FdCtx::isInit	JKYi/fdmanager.h	/^   bool isInit()const {return m_isInit;}$/;"	f	class:JKYi::FdCtx	access:public	signature:() const
JKYi::FdCtx::isSocket	JKYi/fdmanager.h	/^   bool isSocket()const{return m_isSocket;}$/;"	f	class:JKYi::FdCtx	access:public	signature:() const
JKYi::FdCtx::m_fd	JKYi/fdmanager.h	/^  int m_fd;$/;"	m	class:JKYi::FdCtx	access:private
JKYi::FdCtx::m_recvTimeout	JKYi/fdmanager.h	/^  uint64_t m_recvTimeout;$/;"	m	class:JKYi::FdCtx	access:private
JKYi::FdCtx::m_sendTimeout	JKYi/fdmanager.h	/^  uint64_t m_sendTimeout;$/;"	m	class:JKYi::FdCtx	access:private
JKYi::FdCtx::ptr	JKYi/fdmanager.h	/^   typedef std::shared_ptr<FdCtx> ptr;$/;"	t	class:JKYi::FdCtx	access:public
JKYi::FdCtx::setSysNonblock	JKYi/fdmanager.h	/^   void setSysNonblock(bool flag) {m_sysNonblock=flag;}$/;"	f	class:JKYi::FdCtx	access:public	signature:(bool flag)
JKYi::FdCtx::setTimeout	JKYi/fdmanager.cc	/^void FdCtx::setTimeout(int type,uint64_t t){$/;"	f	class:JKYi::FdCtx	signature:(int type,uint64_t t)
JKYi::FdCtx::setTimeout	JKYi/fdmanager.h	/^   void setTimeout(int type,uint64_t v);$/;"	p	class:JKYi::FdCtx	access:public	signature:(int type,uint64_t v)
JKYi::FdCtx::setUserNonblock	JKYi/fdmanager.h	/^   void setUserNonblock(bool flag){m_userNonblock=flag;}$/;"	f	class:JKYi::FdCtx	access:public	signature:(bool flag)
JKYi::FdCtx::~FdCtx	JKYi/fdmanager.cc	/^FdCtx::~FdCtx(){$/;"	f	class:JKYi::FdCtx	signature:()
JKYi::FdCtx::~FdCtx	JKYi/fdmanager.h	/^   ~FdCtx();$/;"	p	class:JKYi::FdCtx	access:public	signature:()
JKYi::FdManager	JKYi/fdmanager.h	/^class FdManager{$/;"	c	namespace:JKYi
JKYi::FdManager::FdManager	JKYi/fdmanager.cc	/^FdManager::FdManager(){$/;"	f	class:JKYi::FdManager	signature:()
JKYi::FdManager::FdManager	JKYi/fdmanager.h	/^	FdManager();$/;"	p	class:JKYi::FdManager	access:public	signature:()
JKYi::FdManager::RWMutexType	JKYi/fdmanager.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:JKYi::FdManager	access:public
JKYi::FdManager::del	JKYi/fdmanager.cc	/^void FdManager::del(int fd){$/;"	f	class:JKYi::FdManager	signature:(int fd)
JKYi::FdManager::del	JKYi/fdmanager.h	/^	void del(int fd);$/;"	p	class:JKYi::FdManager	access:public	signature:(int fd)
JKYi::FdManager::get	JKYi/fdmanager.cc	/^FdCtx::ptr FdManager::get(int fd,bool auto_create){$/;"	f	class:JKYi::FdManager	signature:(int fd,bool auto_create)
JKYi::FdManager::get	JKYi/fdmanager.h	/^	FdCtx::ptr get(int fd,bool auto_create=false);$/;"	p	class:JKYi::FdManager	access:public	signature:(int fd,bool auto_create=false)
JKYi::FdManager::m_datas	JKYi/fdmanager.h	/^	std::vector<FdCtx::ptr>m_datas;$/;"	m	class:JKYi::FdManager	access:private
JKYi::FdManager::m_mutex	JKYi/fdmanager.h	/^    RWMutexType m_mutex; $/;"	m	class:JKYi::FdManager	access:private
JKYi::FdManager::~FdManager	JKYi/fdmanager.cc	/^FdManager::~FdManager(){$/;"	f	class:JKYi::FdManager	signature:()
JKYi::FdManager::~FdManager	JKYi/fdmanager.h	/^	~FdManager();$/;"	p	class:JKYi::FdManager	access:public	signature:()
JKYi::FdMgr	JKYi/fdmanager.h	/^typedef Singleton<FdManager> FdMgr;$/;"	t	namespace:JKYi
JKYi::Fiber	JKYi/fiber.h	/^class Fiber:public std::enable_shared_from_this<Fiber>{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this
JKYi::Fiber::CallerMainFunc	JKYi/fiber.cc	/^void Fiber::CallerMainFunc(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::CallerMainFunc	JKYi/fiber.h	/^   static void CallerMainFunc();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::EXCEPT	JKYi/fiber.h	/^	  EXCEPT\/\/å¼å¸¸æ$/;"	e	enum:JKYi::Fiber::State
JKYi::Fiber::EXEC	JKYi/fiber.h	/^	  EXEC,  \/\/è¿è¡æ$/;"	e	enum:JKYi::Fiber::State
JKYi::Fiber::Fiber	JKYi/fiber.cc	/^Fiber::Fiber(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::Fiber	JKYi/fiber.cc	/^Fiber::Fiber(std::function<void ()>cb,size_t stacksize,bool use_caller)$/;"	f	class:JKYi::Fiber	signature:(std::function<void ()>cb,size_t stacksize,bool use_caller)
JKYi::Fiber::Fiber	JKYi/fiber.h	/^	Fiber(std::function<void ()>cb,size_t stacksize = 0,bool use_caller = false);$/;"	p	class:JKYi::Fiber	access:public	signature:(std::function<void ()>cb,size_t stacksize = 0,bool use_caller = false)
JKYi::Fiber::Fiber	JKYi/fiber.h	/^    Fiber();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::GetFiberId	JKYi/fiber.cc	/^uint64_t Fiber::GetFiberId(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::GetFiberId	JKYi/fiber.h	/^   static uint64_t GetFiberId();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::GetThis	JKYi/fiber.cc	/^Fiber::ptr Fiber::GetThis(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::GetThis	JKYi/fiber.h	/^   static Fiber::ptr GetThis();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::HOLD	JKYi/fiber.h	/^	  HOLD,  \/\/æèµ·æ$/;"	e	enum:JKYi::Fiber::State
JKYi::Fiber::INIT	JKYi/fiber.h	/^      INIT,   \/\/åå»ºæ  $/;"	e	enum:JKYi::Fiber::State
JKYi::Fiber::MainFunc	JKYi/fiber.cc	/^void Fiber::MainFunc(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::MainFunc	JKYi/fiber.h	/^   static void MainFunc();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::READY	JKYi/fiber.h	/^	  READY, \/\/å°±ç»ªæ$/;"	e	enum:JKYi::Fiber::State
JKYi::Fiber::SetThis	JKYi/fiber.cc	/^void Fiber::SetThis(Fiber*f){$/;"	f	class:JKYi::Fiber	signature:(Fiber*f)
JKYi::Fiber::SetThis	JKYi/fiber.h	/^   static void SetThis(Fiber*f);$/;"	p	class:JKYi::Fiber	access:public	signature:(Fiber*f)
JKYi::Fiber::State	JKYi/fiber.h	/^   enum State{$/;"	g	class:JKYi::Fiber	access:public
JKYi::Fiber::TERM	JKYi/fiber.h	/^	  TERM,  \/\/ç»ææ$/;"	e	enum:JKYi::Fiber::State
JKYi::Fiber::TotalFibers	JKYi/fiber.cc	/^uint64_t Fiber::TotalFibers(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::TotalFibers	JKYi/fiber.h	/^   static uint64_t TotalFibers();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::YieldToHold	JKYi/fiber.cc	/^void Fiber::YieldToHold(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::YieldToHold	JKYi/fiber.h	/^   static void YieldToHold();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::YieldToReady	JKYi/fiber.cc	/^void Fiber::YieldToReady(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::YieldToReady	JKYi/fiber.h	/^   static void YieldToReady();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::back	JKYi/fiber.cc	/^void Fiber::back(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::back	JKYi/fiber.h	/^	void back();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::call	JKYi/fiber.cc	/^void Fiber::call(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::call	JKYi/fiber.h	/^	void call();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::getId	JKYi/fiber.h	/^	uint64_t getId()const {return m_id;}$/;"	f	class:JKYi::Fiber	access:public	signature:() const
JKYi::Fiber::getState	JKYi/fiber.h	/^	State getState()const{return m_state;}$/;"	f	class:JKYi::Fiber	access:public	signature:() const
JKYi::Fiber::m_cb	JKYi/fiber.h	/^   std::function<void ()>m_cb;$/;"	m	class:JKYi::Fiber	access:private
JKYi::Fiber::m_ctx	JKYi/fiber.h	/^   ucontext_t m_ctx;$/;"	m	class:JKYi::Fiber	access:private
JKYi::Fiber::m_id	JKYi/fiber.h	/^   uint64_t m_id = 0;$/;"	m	class:JKYi::Fiber	access:private
JKYi::Fiber::m_stack	JKYi/fiber.h	/^   void *m_stack = nullptr;$/;"	m	class:JKYi::Fiber	access:private
JKYi::Fiber::m_stacksize	JKYi/fiber.h	/^   uint32_t m_stacksize = 0;$/;"	m	class:JKYi::Fiber	access:private
JKYi::Fiber::m_state	JKYi/fiber.h	/^   State m_state = INIT;$/;"	m	class:JKYi::Fiber	access:private
JKYi::Fiber::ptr	JKYi/fiber.h	/^   typedef std::shared_ptr<Fiber> ptr;$/;"	t	class:JKYi::Fiber	access:public
JKYi::Fiber::reset	JKYi/fiber.cc	/^void Fiber::reset(std::function<void()>cb){$/;"	f	class:JKYi::Fiber	signature:(std::function<void()>cb)
JKYi::Fiber::reset	JKYi/fiber.h	/^	void reset(std::function<void ()>cb);$/;"	p	class:JKYi::Fiber	access:public	signature:(std::function<void ()>cb)
JKYi::Fiber::swapIn	JKYi/fiber.cc	/^void Fiber::swapIn(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::swapIn	JKYi/fiber.h	/^	void swapIn();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::swapOut	JKYi/fiber.cc	/^void Fiber::swapOut(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::swapOut	JKYi/fiber.h	/^	void swapOut();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::Fiber::~Fiber	JKYi/fiber.cc	/^Fiber::~Fiber(){$/;"	f	class:JKYi::Fiber	signature:()
JKYi::Fiber::~Fiber	JKYi/fiber.h	/^	~Fiber();$/;"	p	class:JKYi::Fiber	access:public	signature:()
JKYi::FiberIdFormatItem	JKYi/log.cc	/^class FiberIdFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::FiberIdFormatItem::FiberIdFormatItem	JKYi/log.cc	/^    FiberIdFormatItem(const std::string&str=""){}$/;"	f	class:JKYi::FiberIdFormatItem	access:public	signature:(const std::string&str=Ó)
JKYi::FiberSemaphore	JKYi/mutex.h	/^class FiberSemaphore{$/;"	c	namespace:JKYi
JKYi::FiberSemaphore::FiberSemaphore	JKYi/mutex.cc	/^FiberSemaphore::FiberSemaphore(size_t inital_concurrency)$/;"	f	class:JKYi::FiberSemaphore	signature:(size_t inital_concurrency)
JKYi::FiberSemaphore::FiberSemaphore	JKYi/mutex.h	/^    FiberSemaphore(size_t initial_concurrency = 0);$/;"	p	class:JKYi::FiberSemaphore	access:public	signature:(size_t initial_concurrency = 0)
JKYi::FiberSemaphore::MutexType	JKYi/mutex.h	/^    typedef SpinLock MutexType;$/;"	t	class:JKYi::FiberSemaphore	access:public
JKYi::FiberSemaphore::m_concurrency	JKYi/mutex.h	/^    size_t m_concurrency;$/;"	m	class:JKYi::FiberSemaphore	access:private
JKYi::FiberSemaphore::m_mutex	JKYi/mutex.h	/^    MutexType m_mutex;$/;"	m	class:JKYi::FiberSemaphore	access:private
JKYi::FiberSemaphore::m_waiters	JKYi/mutex.h	/^    std::list<std::pair<Scheduler*,Fiber::ptr> >m_waiters;$/;"	m	class:JKYi::FiberSemaphore	access:private
JKYi::FiberSemaphore::notify	JKYi/mutex.cc	/^void FiberSemaphore::notify(){$/;"	f	class:JKYi::FiberSemaphore	signature:()
JKYi::FiberSemaphore::notify	JKYi/mutex.h	/^    void notify();$/;"	p	class:JKYi::FiberSemaphore	access:public	signature:()
JKYi::FiberSemaphore::tryWait	JKYi/mutex.cc	/^bool FiberSemaphore::tryWait(){$/;"	f	class:JKYi::FiberSemaphore	signature:()
JKYi::FiberSemaphore::tryWait	JKYi/mutex.h	/^    bool tryWait();$/;"	p	class:JKYi::FiberSemaphore	access:public	signature:()
JKYi::FiberSemaphore::wait	JKYi/mutex.cc	/^void FiberSemaphore::wait(){$/;"	f	class:JKYi::FiberSemaphore	signature:()
JKYi::FiberSemaphore::wait	JKYi/mutex.h	/^    void wait();$/;"	p	class:JKYi::FiberSemaphore	access:public	signature:()
JKYi::FiberSemaphore::~FiberSemaphore	JKYi/mutex.cc	/^FiberSemaphore::~FiberSemaphore(){$/;"	f	class:JKYi::FiberSemaphore	signature:()
JKYi::FiberSemaphore::~FiberSemaphore	JKYi/mutex.h	/^    ~FiberSemaphore();$/;"	p	class:JKYi::FiberSemaphore	access:public	signature:()
JKYi::FileLogAppender	JKYi/log.h	/^class FileLogAppender:public LogAppender{$/;"	c	namespace:JKYi	inherits:LogAppender
JKYi::FileLogAppender::FileLogAppender	JKYi/log.cc	/^FileLogAppender::FileLogAppender(const std::string&filename)$/;"	f	class:JKYi::FileLogAppender	signature:(const std::string&filename)
JKYi::FileLogAppender::FileLogAppender	JKYi/log.h	/^     FileLogAppender(const std::string& filename);$/;"	p	class:JKYi::FileLogAppender	access:public	signature:(const std::string& filename)
JKYi::FileLogAppender::log	JKYi/log.cc	/^void FileLogAppender::log(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event){$/;"	f	class:JKYi::FileLogAppender	signature:(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event)
JKYi::FileLogAppender::m_filename	JKYi/log.h	/^     std::string m_filename;\/\/æä»¶å$/;"	m	class:JKYi::FileLogAppender	access:private
JKYi::FileLogAppender::m_filestream	JKYi/log.h	/^     std::ofstream m_filestream;$/;"	m	class:JKYi::FileLogAppender	access:private
JKYi::FileLogAppender::m_lastTime	JKYi/log.h	/^	 uint64_t m_lastTime = 0;\/\/è®°å½ä¸ä¸æ¬¡æå¼çæ¶é´$/;"	m	class:JKYi::FileLogAppender	access:private
JKYi::FileLogAppender::override	JKYi/log.h	/^     std::string toYamlString()override;$/;"	m	class:JKYi::FileLogAppender	access:public
JKYi::FileLogAppender::override	JKYi/log.h	/^     void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:JKYi::FileLogAppender	access:public
JKYi::FileLogAppender::ptr	JKYi/log.h	/^     typedef std::shared_ptr<FileLogAppender> ptr;$/;"	t	class:JKYi::FileLogAppender	access:public
JKYi::FileLogAppender::reopen	JKYi/log.cc	/^bool FileLogAppender::reopen(){$/;"	f	class:JKYi::FileLogAppender	signature:()
JKYi::FileLogAppender::reopen	JKYi/log.h	/^     bool reopen();\/\/éæ°å¯¹æä»¶è¿è¡æå¼ï¼æå¼æåè¿åtrue$/;"	p	class:JKYi::FileLogAppender	access:public	signature:()
JKYi::FileLogAppender::toYamlString	JKYi/log.cc	/^std::string FileLogAppender::toYamlString(){$/;"	f	class:JKYi::FileLogAppender	signature:()
JKYi::FilenameFormatItem	JKYi/log.cc	/^class FilenameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::FilenameFormatItem::FilenameFormatItem	JKYi/log.cc	/^    FilenameFormatItem(const std::string& str = "") {}$/;"	f	class:JKYi::FilenameFormatItem	access:public	signature:(const std::string& str = Ó)
JKYi::FoxRedis	JKYi/db/redis.h	/^class FoxRedis: public IRedis{$/;"	c	namespace:JKYi	inherits:IRedis
JKYi::FoxRedis::CMD_ERR	JKYi/db/redis.h	/^        CMD_ERR = 3,$/;"	e	enum:JKYi::FoxRedis::RESULT
JKYi::FoxRedis::CONNECTED	JKYi/db/redis.h	/^        CONNECTED = 2$/;"	e	enum:JKYi::FoxRedis::STATUS
JKYi::FoxRedis::CONNECTING	JKYi/db/redis.h	/^        CONNECTING = 1,$/;"	e	enum:JKYi::FoxRedis::STATUS
JKYi::FoxRedis::CONNECT_ERR	JKYi/db/redis.h	/^        CONNECT_ERR = 2,$/;"	e	enum:JKYi::FoxRedis::RESULT
JKYi::FoxRedis::CmdCb	JKYi/db/redis.cc	/^void FoxRedis::CmdCb(redisAsyncContext* ac,void * r,void * pridata){$/;"	f	class:JKYi::FoxRedis	signature:(redisAsyncContext* ac,void * r,void * pridata)
JKYi::FoxRedis::CmdCb	JKYi/db/redis.h	/^    static void CmdCb(redisAsyncContext* c,void * r,void * privdata);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(redisAsyncContext* c,void * r,void * privdata)
JKYi::FoxRedis::ConnectCb	JKYi/db/redis.cc	/^void FoxRedis::ConnectCb(const redisAsyncContext * c,int status){$/;"	f	class:JKYi::FoxRedis	signature:(const redisAsyncContext * c,int status)
JKYi::FoxRedis::ConnectCb	JKYi/db/redis.h	/^    static void ConnectCb(const redisAsyncContext* c,int status);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(const redisAsyncContext* c,int status)
JKYi::FoxRedis::Ctx	JKYi/db/redis.h	/^    struct Ctx{$/;"	s	class:JKYi::FoxRedis	access:private
JKYi::FoxRedis::Ctx::Ctx	JKYi/db/redis.cc	/^FoxRedis::Ctx::Ctx(FoxRedis* thr)$/;"	f	class:JKYi::FoxRedis::Ctx	signature:(FoxRedis* thr)
JKYi::FoxRedis::Ctx::Ctx	JKYi/db/redis.h	/^        Ctx(FoxRedis* rds);$/;"	p	struct:JKYi::FoxRedis::Ctx	access:public	signature:(FoxRedis* rds)
JKYi::FoxRedis::Ctx::EventCb	JKYi/db/redis.cc	/^void FoxRedis::Ctx::EventCb(int fd,short event,void * d){$/;"	f	class:JKYi::FoxRedis::Ctx	signature:(int fd,short event,void * d)
JKYi::FoxRedis::Ctx::EventCb	JKYi/db/redis.h	/^        static void EventCb(int fd,short event,void * d);$/;"	p	struct:JKYi::FoxRedis::Ctx	access:public	signature:(int fd,short event,void * d)
JKYi::FoxRedis::Ctx::cancelEvent	JKYi/db/redis.cc	/^void FoxRedis::Ctx::cancelEvent(){$/;"	f	class:JKYi::FoxRedis::Ctx	signature:()
JKYi::FoxRedis::Ctx::cancelEvent	JKYi/db/redis.h	/^        void cancelEvent();$/;"	p	struct:JKYi::FoxRedis::Ctx	access:public	signature:()
JKYi::FoxRedis::Ctx::cmd	JKYi/db/redis.h	/^        std::string cmd;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
JKYi::FoxRedis::Ctx::ev	JKYi/db/redis.h	/^        event* ev;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
JKYi::FoxRedis::Ctx::fctx	JKYi/db/redis.h	/^        FCtx* fctx;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
JKYi::FoxRedis::Ctx::init	JKYi/db/redis.cc	/^bool FoxRedis::Ctx::init(){$/;"	f	class:JKYi::FoxRedis::Ctx	signature:()
JKYi::FoxRedis::Ctx::init	JKYi/db/redis.h	/^        bool init();$/;"	p	struct:JKYi::FoxRedis::Ctx	access:public	signature:()
JKYi::FoxRedis::Ctx::ptr	JKYi/db/redis.h	/^        typedef std::shared_ptr<Ctx> ptr;$/;"	t	struct:JKYi::FoxRedis::Ctx	access:public
JKYi::FoxRedis::Ctx::rds	JKYi/db/redis.h	/^        FoxRedis* rds;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
JKYi::FoxRedis::Ctx::thread	JKYi/db/redis.h	/^        FoxThread * thread;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
JKYi::FoxRedis::Ctx::timeout	JKYi/db/redis.h	/^        bool timeout;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
JKYi::FoxRedis::Ctx::~Ctx	JKYi/db/redis.cc	/^FoxRedis::Ctx::~Ctx(){$/;"	f	class:JKYi::FoxRedis::Ctx	signature:()
JKYi::FoxRedis::Ctx::~Ctx	JKYi/db/redis.h	/^        ~Ctx();$/;"	p	struct:JKYi::FoxRedis::Ctx	access:public	signature:()
JKYi::FoxRedis::DisconnectCb	JKYi/db/redis.cc	/^void FoxRedis::DisconnectCb(const redisAsyncContext* c,int status){$/;"	f	class:JKYi::FoxRedis	signature:(const redisAsyncContext* c,int status)
JKYi::FoxRedis::DisconnectCb	JKYi/db/redis.h	/^    static void DisconnectCb(const redisAsyncContext* c,int status);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(const redisAsyncContext* c,int status)
JKYi::FoxRedis::FCtx	JKYi/db/redis.h	/^    struct FCtx{$/;"	s	class:JKYi::FoxRedis	access:private
JKYi::FoxRedis::FCtx::cmd	JKYi/db/redis.h	/^        std::string cmd;$/;"	m	struct:JKYi::FoxRedis::FCtx	access:public
JKYi::FoxRedis::FCtx::fiber	JKYi/db/redis.h	/^        JKYi::Fiber::ptr fiber;$/;"	m	struct:JKYi::FoxRedis::FCtx	access:public
JKYi::FoxRedis::FCtx::rpy	JKYi/db/redis.h	/^        ReplyPtr rpy;$/;"	m	struct:JKYi::FoxRedis::FCtx	access:public
JKYi::FoxRedis::FCtx::scheduler	JKYi/db/redis.h	/^        JKYi::Scheduler * scheduler;$/;"	m	struct:JKYi::FoxRedis::FCtx	access:public
JKYi::FoxRedis::FoxRedis	JKYi/db/redis.cc	/^FoxRedis::FoxRedis(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf)$/;"	f	class:JKYi::FoxRedis	signature:(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf)
JKYi::FoxRedis::FoxRedis	JKYi/db/redis.h	/^    FoxRedis(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf);$/;"	p	class:JKYi::FoxRedis	access:public	signature:(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf)
JKYi::FoxRedis::INIT_ERR	JKYi/db/redis.h	/^        INIT_ERR = 6$/;"	e	enum:JKYi::FoxRedis::RESULT
JKYi::FoxRedis::OK	JKYi/db/redis.h	/^        OK = 0,$/;"	e	enum:JKYi::FoxRedis::RESULT
JKYi::FoxRedis::OnAuthCb	JKYi/db/redis.cc	/^void FoxRedis::OnAuthCb(redisAsyncContext* c,void * rp,void * priv){$/;"	f	class:JKYi::FoxRedis	signature:(redisAsyncContext* c,void * rp,void * priv)
JKYi::FoxRedis::OnAuthCb	JKYi/db/redis.h	/^    static void OnAuthCb(redisAsyncContext* c,void * rp,void * priv);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(redisAsyncContext* c,void * rp,void * priv)
JKYi::FoxRedis::REPLY_ERR	JKYi/db/redis.h	/^        REPLY_ERR = 5,$/;"	e	enum:JKYi::FoxRedis::RESULT
JKYi::FoxRedis::REPLY_NULL	JKYi/db/redis.h	/^        REPLY_NULL = 4,$/;"	e	enum:JKYi::FoxRedis::RESULT
JKYi::FoxRedis::RESULT	JKYi/db/redis.h	/^    enum RESULT{$/;"	g	class:JKYi::FoxRedis	access:public
JKYi::FoxRedis::STATUS	JKYi/db/redis.h	/^    enum STATUS{$/;"	g	class:JKYi::FoxRedis	access:public
JKYi::FoxRedis::TIME_OUT	JKYi/db/redis.h	/^        TIME_OUT = 1,$/;"	e	enum:JKYi::FoxRedis::RESULT
JKYi::FoxRedis::TimeCb	JKYi/db/redis.cc	/^void FoxRedis::TimeCb(int fd,short event,void * d){$/;"	f	class:JKYi::FoxRedis	signature:(int fd,short event,void * d)
JKYi::FoxRedis::TimeCb	JKYi/db/redis.h	/^    static void TimeCb(int fd,short event,void * d);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(int fd,short event,void * d)
JKYi::FoxRedis::UNCONNECTED	JKYi/db/redis.h	/^        UNCONNECTED = 0,$/;"	e	enum:JKYi::FoxRedis::STATUS
JKYi::FoxRedis::cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const char * fmt,...){$/;"	f	class:JKYi::FoxRedis	signature:(const char * fmt,...)
JKYi::FoxRedis::cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::FoxRedis	signature:(const char * fmt,va_list ap)
JKYi::FoxRedis::cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::FoxRedis	signature:(const std::vector<std::string>& argv)
JKYi::FoxRedis::delayDelete	JKYi/db/redis.cc	/^void FoxRedis::delayDelete(redisAsyncContext* c){$/;"	f	class:JKYi::FoxRedis	signature:(redisAsyncContext* c)
JKYi::FoxRedis::delayDelete	JKYi/db/redis.h	/^    void delayDelete(redisAsyncContext* c);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(redisAsyncContext* c)
JKYi::FoxRedis::getCtxCount	JKYi/db/redis.h	/^    int getCtxCount()const { return m_ctxCount; }$/;"	f	class:JKYi::FoxRedis	access:public	signature:() const
JKYi::FoxRedis::init	JKYi/db/redis.cc	/^bool FoxRedis::init(){$/;"	f	class:JKYi::FoxRedis	signature:()
JKYi::FoxRedis::init	JKYi/db/redis.h	/^    bool init();$/;"	p	class:JKYi::FoxRedis	access:public	signature:()
JKYi::FoxRedis::m_cmdTimeout	JKYi/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:JKYi::FoxRedis	typeref:struct:JKYi::FoxRedis::timeval	access:private
JKYi::FoxRedis::m_context	JKYi/db/redis.h	/^    std::shared_ptr<redisAsyncContext> m_context;$/;"	m	class:JKYi::FoxRedis	access:private
JKYi::FoxRedis::m_ctxCount	JKYi/db/redis.h	/^    int m_ctxCount;$/;"	m	class:JKYi::FoxRedis	access:private
JKYi::FoxRedis::m_err	JKYi/db/redis.h	/^    std::string m_err;$/;"	m	class:JKYi::FoxRedis	access:private
JKYi::FoxRedis::m_event	JKYi/db/redis.h	/^    struct event* m_event;$/;"	m	class:JKYi::FoxRedis	typeref:struct:JKYi::FoxRedis::event	access:private
JKYi::FoxRedis::m_host	JKYi/db/redis.h	/^    std::string m_host;$/;"	m	class:JKYi::FoxRedis	access:private
JKYi::FoxRedis::m_port	JKYi/db/redis.h	/^    uint16_t m_port;$/;"	m	class:JKYi::FoxRedis	access:private
JKYi::FoxRedis::m_status	JKYi/db/redis.h	/^    STATUS m_status;$/;"	m	class:JKYi::FoxRedis	access:private
JKYi::FoxRedis::m_thread	JKYi/db/redis.h	/^    JKYi::FoxThread* m_thread;$/;"	m	class:JKYi::FoxRedis	access:private
JKYi::FoxRedis::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,...) override;$/;"	m	class:JKYi::FoxRedis	access:public
JKYi::FoxRedis::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,va_list ap)override ;$/;"	m	class:JKYi::FoxRedis	access:public
JKYi::FoxRedis::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const std::vector<std::string>& argv)override;$/;"	m	class:JKYi::FoxRedis	access:public
JKYi::FoxRedis::pcmd	JKYi/db/redis.cc	/^void FoxRedis::pcmd(FCtx * fctx){$/;"	f	class:JKYi::FoxRedis	signature:(FCtx * fctx)
JKYi::FoxRedis::pcmd	JKYi/db/redis.h	/^    virtual void pcmd(FCtx* ctx);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(FCtx* ctx)
JKYi::FoxRedis::pinit	JKYi/db/redis.cc	/^bool FoxRedis::pinit(){$/;"	f	class:JKYi::FoxRedis	signature:()
JKYi::FoxRedis::pinit	JKYi/db/redis.h	/^    bool pinit();$/;"	p	class:JKYi::FoxRedis	access:private	signature:()
JKYi::FoxRedis::ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr<FoxRedis> ptr;$/;"	t	class:JKYi::FoxRedis	access:public
JKYi::FoxRedis::~FoxRedis	JKYi/db/redis.cc	/^FoxRedis::~FoxRedis(){$/;"	f	class:JKYi::FoxRedis	signature:()
JKYi::FoxRedis::~FoxRedis	JKYi/db/redis.h	/^    ~FoxRedis();$/;"	p	class:JKYi::FoxRedis	access:public	signature:()
JKYi::FoxRedisCluster	JKYi/db/redis.h	/^class FoxRedisCluster:public IRedis{$/;"	c	namespace:JKYi	inherits:IRedis
JKYi::FoxRedisCluster::CMD_ERR	JKYi/db/redis.h	/^        CMD_ERR = 3,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
JKYi::FoxRedisCluster::CONNECTED	JKYi/db/redis.h	/^        CONNECTED = 2$/;"	e	enum:JKYi::FoxRedisCluster::STATUS
JKYi::FoxRedisCluster::CONNECTING	JKYi/db/redis.h	/^        CONNECTING = 1,$/;"	e	enum:JKYi::FoxRedisCluster::STATUS
JKYi::FoxRedisCluster::CONNECT_ERR	JKYi/db/redis.h	/^        CONNECT_ERR = 2,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
JKYi::FoxRedisCluster::CmdCb	JKYi/db/redis.cc	/^void FoxRedisCluster::CmdCb(redisClusterAsyncContext* c,void * r,void * privdata){$/;"	f	class:JKYi::FoxRedisCluster	signature:(redisClusterAsyncContext* c,void * r,void * privdata)
JKYi::FoxRedisCluster::CmdCb	JKYi/db/redis.h	/^    static void CmdCb(redisClusterAsyncContext* c,void * r,void * privdata);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(redisClusterAsyncContext* c,void * r,void * privdata)
JKYi::FoxRedisCluster::ConnectCb	JKYi/db/redis.cc	/^void FoxRedisCluster::ConnectCb(const redisAsyncContext* c,int status){$/;"	f	class:JKYi::FoxRedisCluster	signature:(const redisAsyncContext* c,int status)
JKYi::FoxRedisCluster::ConnectCb	JKYi/db/redis.h	/^    static void ConnectCb(const redisAsyncContext* c,int status);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(const redisAsyncContext* c,int status)
JKYi::FoxRedisCluster::Ctx	JKYi/db/redis.h	/^    struct Ctx{$/;"	s	class:JKYi::FoxRedisCluster	access:private
JKYi::FoxRedisCluster::Ctx::Ctx	JKYi/db/redis.cc	/^FoxRedisCluster::Ctx::Ctx(FoxRedisCluster* r)$/;"	f	class:JKYi::FoxRedisCluster::Ctx	signature:(FoxRedisCluster* r)
JKYi::FoxRedisCluster::Ctx::Ctx	JKYi/db/redis.h	/^        Ctx(FoxRedisCluster* rds);$/;"	p	struct:JKYi::FoxRedisCluster::Ctx	access:public	signature:(FoxRedisCluster* rds)
JKYi::FoxRedisCluster::Ctx::EventCb	JKYi/db/redis.cc	/^void FoxRedisCluster::Ctx::EventCb(int fd,short event,void * d){$/;"	f	class:JKYi::FoxRedisCluster::Ctx	signature:(int fd,short event,void * d)
JKYi::FoxRedisCluster::Ctx::EventCb	JKYi/db/redis.h	/^        static void EventCb(int fd,short event,void * d);$/;"	p	struct:JKYi::FoxRedisCluster::Ctx	access:public	signature:(int fd,short event,void * d)
JKYi::FoxRedisCluster::Ctx::cancelEvent	JKYi/db/redis.cc	/^void FoxRedisCluster::Ctx::cancelEvent(){$/;"	f	class:JKYi::FoxRedisCluster::Ctx	signature:()
JKYi::FoxRedisCluster::Ctx::cancelEvent	JKYi/db/redis.h	/^        void cancelEvent();$/;"	p	struct:JKYi::FoxRedisCluster::Ctx	access:public	signature:()
JKYi::FoxRedisCluster::Ctx::cmd	JKYi/db/redis.h	/^        std::string cmd;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
JKYi::FoxRedisCluster::Ctx::ev	JKYi/db/redis.h	/^        event* ev;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
JKYi::FoxRedisCluster::Ctx::fctx	JKYi/db/redis.h	/^        FCtx* fctx;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
JKYi::FoxRedisCluster::Ctx::init	JKYi/db/redis.cc	/^bool FoxRedisCluster::Ctx::init(){$/;"	f	class:JKYi::FoxRedisCluster::Ctx	signature:()
JKYi::FoxRedisCluster::Ctx::init	JKYi/db/redis.h	/^        bool init();$/;"	p	struct:JKYi::FoxRedisCluster::Ctx	access:public	signature:()
JKYi::FoxRedisCluster::Ctx::ptr	JKYi/db/redis.h	/^        typedef std::shared_ptr<Ctx> ptr;$/;"	t	struct:JKYi::FoxRedisCluster::Ctx	access:public
JKYi::FoxRedisCluster::Ctx::rds	JKYi/db/redis.h	/^        FoxRedisCluster* rds;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
JKYi::FoxRedisCluster::Ctx::thread	JKYi/db/redis.h	/^        FoxThread* thread;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
JKYi::FoxRedisCluster::Ctx::timeout	JKYi/db/redis.h	/^        bool timeout;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
JKYi::FoxRedisCluster::Ctx::~Ctx	JKYi/db/redis.cc	/^FoxRedisCluster::Ctx::~Ctx(){$/;"	f	class:JKYi::FoxRedisCluster::Ctx	signature:()
JKYi::FoxRedisCluster::Ctx::~Ctx	JKYi/db/redis.h	/^        ~Ctx();$/;"	p	struct:JKYi::FoxRedisCluster::Ctx	access:public	signature:()
JKYi::FoxRedisCluster::DisconnectCb	JKYi/db/redis.cc	/^void FoxRedisCluster::DisconnectCb(const redisAsyncContext*c,int status){$/;"	f	class:JKYi::FoxRedisCluster	signature:(const redisAsyncContext*c,int status)
JKYi::FoxRedisCluster::DisconnectCb	JKYi/db/redis.h	/^    static void DisconnectCb(const redisAsyncContext* c,int status);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(const redisAsyncContext* c,int status)
JKYi::FoxRedisCluster::FCtx	JKYi/db/redis.h	/^    struct FCtx{$/;"	s	class:JKYi::FoxRedisCluster	access:private
JKYi::FoxRedisCluster::FCtx::cmd	JKYi/db/redis.h	/^        std::string cmd;$/;"	m	struct:JKYi::FoxRedisCluster::FCtx	access:public
JKYi::FoxRedisCluster::FCtx::fiber	JKYi/db/redis.h	/^        JKYi::Fiber::ptr fiber;$/;"	m	struct:JKYi::FoxRedisCluster::FCtx	access:public
JKYi::FoxRedisCluster::FCtx::rpy	JKYi/db/redis.h	/^        ReplyPtr rpy;$/;"	m	struct:JKYi::FoxRedisCluster::FCtx	access:public
JKYi::FoxRedisCluster::FCtx::scheduler	JKYi/db/redis.h	/^        JKYi::Scheduler* scheduler;$/;"	m	struct:JKYi::FoxRedisCluster::FCtx	access:public
JKYi::FoxRedisCluster::FoxRedisCluster	JKYi/db/redis.cc	/^FoxRedisCluster::FoxRedisCluster(JKYi::FoxThread* thr,const std::map<std::string,$/;"	f	class:JKYi::FoxRedisCluster	signature:(JKYi::FoxThread* thr,const std::map<std::string, std::string>& conf)
JKYi::FoxRedisCluster::FoxRedisCluster	JKYi/db/redis.h	/^    FoxRedisCluster(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf);$/;"	p	class:JKYi::FoxRedisCluster	access:public	signature:(JKYi::FoxThread* thr,const std::map<std::string,std::string>& conf)
JKYi::FoxRedisCluster::INIT_ERR	JKYi/db/redis.h	/^        INIT_ERR = 6$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
JKYi::FoxRedisCluster::OK	JKYi/db/redis.h	/^        OK = 0,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
JKYi::FoxRedisCluster::OnAuthCb	JKYi/db/redis.cc	/^void FoxRedisCluster::OnAuthCb(redisClusterAsyncContext* c,void * rp,void * priv){$/;"	f	class:JKYi::FoxRedisCluster	signature:(redisClusterAsyncContext* c,void * rp,void * priv)
JKYi::FoxRedisCluster::OnAuthCb	JKYi/db/redis.h	/^    static void OnAuthCb(redisClusterAsyncContext* c,void * rp,void * priv);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(redisClusterAsyncContext* c,void * rp,void * priv)
JKYi::FoxRedisCluster::REPLY_ERR	JKYi/db/redis.h	/^        REPLY_ERR = 5,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
JKYi::FoxRedisCluster::REPLY_NULL	JKYi/db/redis.h	/^        REPLY_NULL = 4,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
JKYi::FoxRedisCluster::RESULT	JKYi/db/redis.h	/^    enum RESULT{$/;"	g	class:JKYi::FoxRedisCluster	access:public
JKYi::FoxRedisCluster::STATUS	JKYi/db/redis.h	/^    enum STATUS{$/;"	g	class:JKYi::FoxRedisCluster	access:public
JKYi::FoxRedisCluster::TIME_OUT	JKYi/db/redis.h	/^        TIME_OUT = 1,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
JKYi::FoxRedisCluster::TimeCb	JKYi/db/redis.cc	/^void FoxRedisCluster::TimeCb(int fd,short event,void * d){$/;"	f	class:JKYi::FoxRedisCluster	signature:(int fd,short event,void * d)
JKYi::FoxRedisCluster::TimeCb	JKYi/db/redis.h	/^    static void TimeCb(int fd,short event,void * d);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(int fd,short event,void * d)
JKYi::FoxRedisCluster::UNCONNECTED	JKYi/db/redis.h	/^        UNCONNECTED = 0,$/;"	e	enum:JKYi::FoxRedisCluster::STATUS
JKYi::FoxRedisCluster::cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const char * fmt,...){$/;"	f	class:JKYi::FoxRedisCluster	signature:(const char * fmt,...)
JKYi::FoxRedisCluster::cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::FoxRedisCluster	signature:(const char * fmt,va_list ap)
JKYi::FoxRedisCluster::cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::FoxRedisCluster	signature:(const std::vector<std::string>& argv)
JKYi::FoxRedisCluster::cmd	JKYi/db/redis.h	/^    ReplyPtr cmd(const std::vector<std::string>& argv);$/;"	p	class:JKYi::FoxRedisCluster	access:public	signature:(const std::vector<std::string>& argv)
JKYi::FoxRedisCluster::delayDelete	JKYi/db/redis.cc	/^void FoxRedisCluster::delayDelete(redisClusterAsyncContext* c){$/;"	f	class:JKYi::FoxRedisCluster	signature:(redisClusterAsyncContext* c)
JKYi::FoxRedisCluster::delayDelete	JKYi/db/redis.h	/^    void delayDelete(redisClusterAsyncContext* c);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(redisClusterAsyncContext* c)
JKYi::FoxRedisCluster::getCtxCount	JKYi/db/redis.h	/^    int getCtxCount()const { return m_ctxCount; };$/;"	f	class:JKYi::FoxRedisCluster	access:public	signature:() const
JKYi::FoxRedisCluster::init	JKYi/db/redis.cc	/^bool FoxRedisCluster::init(){$/;"	f	class:JKYi::FoxRedisCluster	signature:()
JKYi::FoxRedisCluster::init	JKYi/db/redis.h	/^    bool init();$/;"	p	class:JKYi::FoxRedisCluster	access:public	signature:()
JKYi::FoxRedisCluster::m_cmdTimeout	JKYi/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:JKYi::FoxRedisCluster	typeref:struct:JKYi::FoxRedisCluster::timeval	access:private
JKYi::FoxRedisCluster::m_context	JKYi/db/redis.h	/^    std::shared_ptr<redisClusterAsyncContext> m_context;$/;"	m	class:JKYi::FoxRedisCluster	access:private
JKYi::FoxRedisCluster::m_ctxCount	JKYi/db/redis.h	/^    int m_ctxCount;$/;"	m	class:JKYi::FoxRedisCluster	access:private
JKYi::FoxRedisCluster::m_err	JKYi/db/redis.h	/^    std::string m_err;$/;"	m	class:JKYi::FoxRedisCluster	access:private
JKYi::FoxRedisCluster::m_event	JKYi/db/redis.h	/^    struct event* m_event;$/;"	m	class:JKYi::FoxRedisCluster	typeref:struct:JKYi::FoxRedisCluster::event	access:private
JKYi::FoxRedisCluster::m_host	JKYi/db/redis.h	/^    std::string m_host;$/;"	m	class:JKYi::FoxRedisCluster	access:private
JKYi::FoxRedisCluster::m_status	JKYi/db/redis.h	/^    STATUS m_status;$/;"	m	class:JKYi::FoxRedisCluster	access:private
JKYi::FoxRedisCluster::m_thread	JKYi/db/redis.h	/^    JKYi::FoxThread* m_thread;$/;"	m	class:JKYi::FoxRedisCluster	access:private
JKYi::FoxRedisCluster::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,...)override;$/;"	m	class:JKYi::FoxRedisCluster	access:public
JKYi::FoxRedisCluster::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,va_list ap)override;$/;"	m	class:JKYi::FoxRedisCluster	access:public
JKYi::FoxRedisCluster::pcmd	JKYi/db/redis.cc	/^void FoxRedisCluster::pcmd(FCtx* fctx){$/;"	f	class:JKYi::FoxRedisCluster	signature:(FCtx* fctx)
JKYi::FoxRedisCluster::pcmd	JKYi/db/redis.h	/^    virtual void pcmd(FCtx* ctx);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(FCtx* ctx)
JKYi::FoxRedisCluster::pinit	JKYi/db/redis.cc	/^bool FoxRedisCluster::pinit(){$/;"	f	class:JKYi::FoxRedisCluster	signature:()
JKYi::FoxRedisCluster::pinit	JKYi/db/redis.h	/^    bool pinit();$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:()
JKYi::FoxRedisCluster::ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr<FoxRedisCluster> ptr;$/;"	t	class:JKYi::FoxRedisCluster	access:public
JKYi::FoxRedisCluster::~FoxRedisCluster	JKYi/db/redis.cc	/^FoxRedisCluster::~FoxRedisCluster(){$/;"	f	class:JKYi::FoxRedisCluster	signature:()
JKYi::FoxRedisCluster::~FoxRedisCluster	JKYi/db/redis.h	/^    ~FoxRedisCluster();$/;"	p	class:JKYi::FoxRedisCluster	access:public	signature:()
JKYi::FoxThread	JKYi/db/fox_thread.h	/^class FoxThread : public IFoxThread{$/;"	c	namespace:JKYi	inherits:IFoxThread
JKYi::FoxThread::FoxThread	JKYi/db/fox_thread.cc	/^FoxThread::FoxThread(const std::string& name,struct event_base* base)$/;"	f	class:JKYi::FoxThread	signature:(const std::string& name,struct event_base* base)
JKYi::FoxThread::FoxThread	JKYi/db/fox_thread.h	/^    FoxThread(const std::string& name,struct event_base* base = nullptr);$/;"	p	class:JKYi::FoxThread	access:public	signature:(const std::string& name,struct event_base* base = nullptr)
JKYi::FoxThread::GetAllFoxThreadName	JKYi/db/fox_thread.cc	/^void FoxThread::GetAllFoxThreadName(std::map<uint64_t,std::string>& names){$/;"	f	class:JKYi::FoxThread	signature:(std::map<uint64_t,std::string>& names)
JKYi::FoxThread::GetAllFoxThreadName	JKYi/db/fox_thread.h	/^    static void GetAllFoxThreadName(std::map<uint64_t,std::string>& names);$/;"	p	class:JKYi::FoxThread	access:public	signature:(std::map<uint64_t,std::string>& names)
JKYi::FoxThread::GetFoxThreadName	JKYi/db/fox_thread.cc	/^const std::string& FoxThread::GetFoxThreadName(){$/;"	f	class:JKYi::FoxThread	signature:()
JKYi::FoxThread::GetFoxThreadName	JKYi/db/fox_thread.h	/^    static const std::string& GetFoxThreadName();$/;"	p	class:JKYi::FoxThread	access:public	signature:()
JKYi::FoxThread::GetThis	JKYi/db/fox_thread.cc	/^FoxThread* FoxThread::GetThis(){$/;"	f	class:JKYi::FoxThread	signature:()
JKYi::FoxThread::GetThis	JKYi/db/fox_thread.h	/^    static FoxThread* GetThis();$/;"	p	class:JKYi::FoxThread	access:public	signature:()
JKYi::FoxThread::batchDispatch	JKYi/db/fox_thread.cc	/^bool FoxThread::batchDispatch(const std::vector<callback>&cbs){$/;"	f	class:JKYi::FoxThread	signature:(const std::vector<callback>&cbs)
JKYi::FoxThread::broadcast	JKYi/db/fox_thread.cc	/^void FoxThread::broadcast(callback cb){$/;"	f	class:JKYi::FoxThread	signature:(callback cb)
JKYi::FoxThread::callback	JKYi/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:JKYi::FoxThread	access:public
JKYi::FoxThread::dispatch	JKYi/db/fox_thread.cc	/^bool FoxThread::dispatch(callback cb){$/;"	f	class:JKYi::FoxThread	signature:(callback cb)
JKYi::FoxThread::dispatch	JKYi/db/fox_thread.cc	/^bool FoxThread::dispatch(uint32_t id,callback cb){$/;"	f	class:JKYi::FoxThread	signature:(uint32_t id,callback cb)
JKYi::FoxThread::dump	JKYi/db/fox_thread.cc	/^void FoxThread::dump(std::ostream& os){$/;"	f	class:JKYi::FoxThread	signature:(std::ostream& os)
JKYi::FoxThread::dump	JKYi/db/fox_thread.h	/^    void dump(std::ostream& os);$/;"	p	class:JKYi::FoxThread	access:public	signature:(std::ostream& os)
JKYi::FoxThread::getBase	JKYi/db/fox_thread.h	/^    struct event_base* getBase(){ return m_base; }$/;"	f	class:JKYi::FoxThread	access:public	signature:()
JKYi::FoxThread::getData	JKYi/db/fox_thread.cc	/^void* FoxThread::getData(const std::string& name){$/;"	f	class:JKYi::FoxThread	signature:(const std::string& name)
JKYi::FoxThread::getData	JKYi/db/fox_thread.h	/^    T* getData(const std::string& name){$/;"	f	class:JKYi::FoxThread	access:public	signature:(const std::string& name)
JKYi::FoxThread::getData	JKYi/db/fox_thread.h	/^    void* getData(const std::string& name);$/;"	p	class:JKYi::FoxThread	access:public	signature:(const std::string& name)
JKYi::FoxThread::getId	JKYi/db/fox_thread.cc	/^std::thread::id FoxThread::getId()const {$/;"	f	class:JKYi::FoxThread	signature:() const
JKYi::FoxThread::getId	JKYi/db/fox_thread.h	/^    std::thread::id getId()const;$/;"	p	class:JKYi::FoxThread	access:public	signature:() const
JKYi::FoxThread::getTotal	JKYi/db/fox_thread.h	/^    uint64_t getTotal() { return m_total; }$/;"	f	class:JKYi::FoxThread	access:public	signature:()
JKYi::FoxThread::init_cb	JKYi/db/fox_thread.h	/^    typedef std::function<void (FoxThread*)> init_cb;$/;"	t	class:JKYi::FoxThread	access:public
JKYi::FoxThread::isStart	JKYi/db/fox_thread.h	/^    bool isStart()const { return m_start; }$/;"	f	class:JKYi::FoxThread	access:public	signature:() const
JKYi::FoxThread::join	JKYi/db/fox_thread.cc	/^void FoxThread::join(){$/;"	f	class:JKYi::FoxThread	signature:()
JKYi::FoxThread::m_base	JKYi/db/fox_thread.h	/^    struct event_base* m_base;$/;"	m	class:JKYi::FoxThread	typeref:struct:JKYi::FoxThread::event_base	access:private
JKYi::FoxThread::m_callbacks	JKYi/db/fox_thread.h	/^    std::list<callback> m_callbacks;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::m_datas	JKYi/db/fox_thread.h	/^    std::map<std::string,void *> m_datas;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::m_event	JKYi/db/fox_thread.h	/^    struct event* m_event;$/;"	m	class:JKYi::FoxThread	typeref:struct:JKYi::FoxThread::event	access:private
JKYi::FoxThread::m_initCb	JKYi/db/fox_thread.h	/^    init_cb m_initCb;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::m_mutex	JKYi/db/fox_thread.h	/^    JKYi::RWMutex m_mutex;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::m_name	JKYi/db/fox_thread.h	/^    std::string m_name;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::m_read	JKYi/db/fox_thread.h	/^    evutil_socket_t m_read;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::m_start	JKYi/db/fox_thread.h	/^    bool m_start;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::m_thread	JKYi/db/fox_thread.h	/^    std::thread* m_thread;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::m_total	JKYi/db/fox_thread.h	/^    uint64_t m_total;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::m_working	JKYi/db/fox_thread.h	/^    bool m_working;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::m_write	JKYi/db/fox_thread.h	/^    evutil_socket_t m_write;$/;"	m	class:JKYi::FoxThread	access:private
JKYi::FoxThread::override	JKYi/db/fox_thread.h	/^    bool batchDispatch(const std::vector<callback>&cbs) override;$/;"	m	class:JKYi::FoxThread	access:public
JKYi::FoxThread::override	JKYi/db/fox_thread.h	/^    bool dispatch(callback cb) override;$/;"	m	class:JKYi::FoxThread	access:public
JKYi::FoxThread::override	JKYi/db/fox_thread.h	/^    bool dispatch(uint32_t id,callback cb) override;$/;"	m	class:JKYi::FoxThread	access:public
JKYi::FoxThread::override	JKYi/db/fox_thread.h	/^    void broadcast(callback cb) override;$/;"	m	class:JKYi::FoxThread	access:public
JKYi::FoxThread::override	JKYi/db/fox_thread.h	/^    void join() override;$/;"	m	class:JKYi::FoxThread	access:public
JKYi::FoxThread::override	JKYi/db/fox_thread.h	/^    void start()override;$/;"	m	class:JKYi::FoxThread	access:public
JKYi::FoxThread::override	JKYi/db/fox_thread.h	/^    void stop() override;$/;"	m	class:JKYi::FoxThread	access:public
JKYi::FoxThread::ptr	JKYi/db/fox_thread.h	/^    typedef std::shared_ptr<FoxThread> ptr;$/;"	t	class:JKYi::FoxThread	access:public
JKYi::FoxThread::read_cb	JKYi/db/fox_thread.cc	/^void FoxThread::read_cb(evutil_socket_t sock,short which,void * args){$/;"	f	class:JKYi::FoxThread	signature:(evutil_socket_t sock,short which,void * args)
JKYi::FoxThread::read_cb	JKYi/db/fox_thread.h	/^    static void read_cb(evutil_socket_t sock,short which,void * args);$/;"	p	class:JKYi::FoxThread	access:private	signature:(evutil_socket_t sock,short which,void * args)
JKYi::FoxThread::setData	JKYi/db/fox_thread.cc	/^void FoxThread::setData(const std::string& name,void * v){$/;"	f	class:JKYi::FoxThread	signature:(const std::string& name,void * v)
JKYi::FoxThread::setData	JKYi/db/fox_thread.h	/^    void setData(const std::string& name,void * v);$/;"	p	class:JKYi::FoxThread	access:public	signature:(const std::string& name,void * v)
JKYi::FoxThread::setInitCb	JKYi/db/fox_thread.h	/^    void setInitCb(init_cb v) { m_initCb = v; };$/;"	f	class:JKYi::FoxThread	access:public	signature:(init_cb v)
JKYi::FoxThread::setThis	JKYi/db/fox_thread.cc	/^void FoxThread::setThis(){$/;"	f	class:JKYi::FoxThread	signature:()
JKYi::FoxThread::setThis	JKYi/db/fox_thread.h	/^    void setThis();$/;"	p	class:JKYi::FoxThread	access:public	signature:()
JKYi::FoxThread::start	JKYi/db/fox_thread.cc	/^void FoxThread::start(){$/;"	f	class:JKYi::FoxThread	signature:()
JKYi::FoxThread::stop	JKYi/db/fox_thread.cc	/^void FoxThread::stop(){$/;"	f	class:JKYi::FoxThread	signature:()
JKYi::FoxThread::thread_cb	JKYi/db/fox_thread.cc	/^void FoxThread::thread_cb(){$/;"	f	class:JKYi::FoxThread	signature:()
JKYi::FoxThread::thread_cb	JKYi/db/fox_thread.h	/^    void thread_cb();$/;"	p	class:JKYi::FoxThread	access:private	signature:()
JKYi::FoxThread::unsetThis	JKYi/db/fox_thread.cc	/^void FoxThread::unsetThis(){$/;"	f	class:JKYi::FoxThread	signature:()
JKYi::FoxThread::unsetThis	JKYi/db/fox_thread.h	/^    void unsetThis();$/;"	p	class:JKYi::FoxThread	access:public	signature:()
JKYi::FoxThread::~FoxThread	JKYi/db/fox_thread.cc	/^FoxThread::~FoxThread(){$/;"	f	class:JKYi::FoxThread	signature:()
JKYi::FoxThread::~FoxThread	JKYi/db/fox_thread.h	/^    ~FoxThread();$/;"	p	class:JKYi::FoxThread	access:public	signature:()
JKYi::FoxThreadManager	JKYi/db/fox_thread.h	/^class FoxThreadManager{$/;"	c	namespace:JKYi
JKYi::FoxThreadManager::add	JKYi/db/fox_thread.cc	/^void FoxThreadManager::add(const std::string& name,IFoxThread::ptr thr){$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name,IFoxThread::ptr thr)
JKYi::FoxThreadManager::add	JKYi/db/fox_thread.h	/^    void add(const std::string& name,IFoxThread::ptr ptr);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name,IFoxThread::ptr ptr)
JKYi::FoxThreadManager::batchDispatch	JKYi/db/fox_thread.cc	/^void FoxThreadManager::batchDispatch(const std::string& name,$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name, const std::vector<callback>& cbs)
JKYi::FoxThreadManager::batchDispatch	JKYi/db/fox_thread.h	/^    void batchDispatch(const std::string& name,const std::vector<callback>& cbs);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name,const std::vector<callback>& cbs)
JKYi::FoxThreadManager::broadcast	JKYi/db/fox_thread.cc	/^void FoxThreadManager::broadcast(const std::string& name,callback cb){$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name,callback cb)
JKYi::FoxThreadManager::broadcast	JKYi/db/fox_thread.h	/^    void broadcast(const std::string& name,callback cb);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name,callback cb)
JKYi::FoxThreadManager::callback	JKYi/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:JKYi::FoxThreadManager	access:public
JKYi::FoxThreadManager::dispatch	JKYi/db/fox_thread.cc	/^void FoxThreadManager::dispatch(const std::string& name,callback cb){$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name,callback cb)
JKYi::FoxThreadManager::dispatch	JKYi/db/fox_thread.cc	/^void FoxThreadManager::dispatch(const std::string& name,uint32_t id,callback cb){$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name,uint32_t id,callback cb)
JKYi::FoxThreadManager::dispatch	JKYi/db/fox_thread.h	/^    void dispatch(const std::string& name,callback cb);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name,callback cb)
JKYi::FoxThreadManager::dispatch	JKYi/db/fox_thread.h	/^    void dispatch(const std::string& name,uint32_t id,callback cb);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name,uint32_t id,callback cb)
JKYi::FoxThreadManager::dumpFoxThreadStatus	JKYi/db/fox_thread.cc	/^void FoxThreadManager::dumpFoxThreadStatus(std::ostream& os){$/;"	f	class:JKYi::FoxThreadManager	signature:(std::ostream& os)
JKYi::FoxThreadManager::dumpFoxThreadStatus	JKYi/db/fox_thread.h	/^    void dumpFoxThreadStatus(std::ostream& os);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(std::ostream& os)
JKYi::FoxThreadManager::get	JKYi/db/fox_thread.cc	/^IFoxThread::ptr FoxThreadManager::get(const std::string& name){$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name)
JKYi::FoxThreadManager::get	JKYi/db/fox_thread.h	/^    IFoxThread::ptr get(const std::string& name);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name)
JKYi::FoxThreadManager::init	JKYi/db/fox_thread.cc	/^void FoxThreadManager::init(){$/;"	f	class:JKYi::FoxThreadManager	signature:()
JKYi::FoxThreadManager::init	JKYi/db/fox_thread.h	/^    void init();$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:()
JKYi::FoxThreadManager::m_threads	JKYi/db/fox_thread.h	/^    std::map<std::string,IFoxThread::ptr> m_threads;$/;"	m	class:JKYi::FoxThreadManager	access:private
JKYi::FoxThreadManager::start	JKYi/db/fox_thread.cc	/^void FoxThreadManager::start(){$/;"	f	class:JKYi::FoxThreadManager	signature:()
JKYi::FoxThreadManager::start	JKYi/db/fox_thread.h	/^    void start();$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:()
JKYi::FoxThreadManager::stop	JKYi/db/fox_thread.cc	/^void FoxThreadManager::stop(){$/;"	f	class:JKYi::FoxThreadManager	signature:()
JKYi::FoxThreadManager::stop	JKYi/db/fox_thread.h	/^    void stop();$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:()
JKYi::FoxThreadMgr	JKYi/db/fox_thread.h	/^typedef Singleton<FoxThreadManager> FoxThreadMgr;$/;"	t	namespace:JKYi
JKYi::FoxThreadPool	JKYi/db/fox_thread.h	/^class FoxThreadPool : public IFoxThread{$/;"	c	namespace:JKYi	inherits:IFoxThread
JKYi::FoxThreadPool::FoxThreadPool	JKYi/db/fox_thread.cc	/^FoxThreadPool::FoxThreadPool(uint32_t size,const std::string& name,bool advance)$/;"	f	class:JKYi::FoxThreadPool	signature:(uint32_t size,const std::string& name,bool advance)
JKYi::FoxThreadPool::FoxThreadPool	JKYi/db/fox_thread.h	/^    FoxThreadPool(uint32_t size,const std::string& name = "",bool advance = false);$/;"	p	class:JKYi::FoxThreadPool	access:public	signature:(uint32_t size,const std::string& name = Ó,bool advance = false)
JKYi::FoxThreadPool::batchDispatch	JKYi/db/fox_thread.cc	/^bool FoxThreadPool::batchDispatch(const std::vector<callback>& cbs){$/;"	f	class:JKYi::FoxThreadPool	signature:(const std::vector<callback>& cbs)
JKYi::FoxThreadPool::broadcast	JKYi/db/fox_thread.cc	/^void FoxThreadPool::broadcast(callback cb){$/;"	f	class:JKYi::FoxThreadPool	signature:(callback cb)
JKYi::FoxThreadPool::callback	JKYi/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:JKYi::FoxThreadPool	access:public
JKYi::FoxThreadPool::check	JKYi/db/fox_thread.cc	/^void FoxThreadPool::check(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
JKYi::FoxThreadPool::check	JKYi/db/fox_thread.h	/^    void check();$/;"	p	class:JKYi::FoxThreadPool	access:private	signature:()
JKYi::FoxThreadPool::dispatch	JKYi/db/fox_thread.cc	/^bool FoxThreadPool::dispatch(callback cb){$/;"	f	class:JKYi::FoxThreadPool	signature:(callback cb)
JKYi::FoxThreadPool::dispatch	JKYi/db/fox_thread.cc	/^bool FoxThreadPool::dispatch(uint32_t id,callback cb){$/;"	f	class:JKYi::FoxThreadPool	signature:(uint32_t id,callback cb)
JKYi::FoxThreadPool::dump	JKYi/db/fox_thread.cc	/^void FoxThreadPool::dump(std::ostream& os){$/;"	f	class:JKYi::FoxThreadPool	signature:(std::ostream& os)
JKYi::FoxThreadPool::getRandFoxThread	JKYi/db/fox_thread.cc	/^FoxThread* FoxThreadPool::getRandFoxThread(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
JKYi::FoxThreadPool::getRandFoxThread	JKYi/db/fox_thread.h	/^    FoxThread* getRandFoxThread();$/;"	p	class:JKYi::FoxThreadPool	access:public	signature:()
JKYi::FoxThreadPool::getTotal	JKYi/db/fox_thread.h	/^    uint64_t getTotal(){ return m_total; }$/;"	f	class:JKYi::FoxThreadPool	access:public	signature:()
JKYi::FoxThreadPool::join	JKYi/db/fox_thread.cc	/^void FoxThreadPool::join(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
JKYi::FoxThreadPool::m_advance	JKYi/db/fox_thread.h	/^    bool m_advance;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::m_callbacks	JKYi/db/fox_thread.h	/^    std::list<callback> m_callbacks;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::m_cur	JKYi/db/fox_thread.h	/^    uint32_t m_cur;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::m_freeFoxThreads	JKYi/db/fox_thread.h	/^    std::list<FoxThread*> m_freeFoxThreads;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::m_initCb	JKYi/db/fox_thread.h	/^    FoxThread::init_cb m_initCb;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::m_mutex	JKYi/db/fox_thread.h	/^    RWMutex m_mutex;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::m_name	JKYi/db/fox_thread.h	/^    std::string m_name;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::m_size	JKYi/db/fox_thread.h	/^    uint32_t m_size;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::m_start	JKYi/db/fox_thread.h	/^    bool m_start;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::m_threads	JKYi/db/fox_thread.h	/^    std::vector<FoxThread*> m_threads;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::m_total	JKYi/db/fox_thread.h	/^    uint64_t m_total;$/;"	m	class:JKYi::FoxThreadPool	access:private
JKYi::FoxThreadPool::override	JKYi/db/fox_thread.h	/^    bool batchDispatch(const std::vector<callback>& cbs)override;$/;"	m	class:JKYi::FoxThreadPool	access:public
JKYi::FoxThreadPool::override	JKYi/db/fox_thread.h	/^    bool dispatch(callback cb)override;$/;"	m	class:JKYi::FoxThreadPool	access:public
JKYi::FoxThreadPool::override	JKYi/db/fox_thread.h	/^    bool dispatch(uint32_t id,callback cb)override;$/;"	m	class:JKYi::FoxThreadPool	access:public
JKYi::FoxThreadPool::override	JKYi/db/fox_thread.h	/^    void broadcast(callback cb)override;$/;"	m	class:JKYi::FoxThreadPool	access:public
JKYi::FoxThreadPool::override	JKYi/db/fox_thread.h	/^    void dump(std::ostream& os)override;$/;"	m	class:JKYi::FoxThreadPool	access:public
JKYi::FoxThreadPool::override	JKYi/db/fox_thread.h	/^    void join()override;$/;"	m	class:JKYi::FoxThreadPool	access:public
JKYi::FoxThreadPool::override	JKYi/db/fox_thread.h	/^    void start()override;$/;"	m	class:JKYi::FoxThreadPool	access:public
JKYi::FoxThreadPool::override	JKYi/db/fox_thread.h	/^    void stop()override;$/;"	m	class:JKYi::FoxThreadPool	access:public
JKYi::FoxThreadPool::ptr	JKYi/db/fox_thread.h	/^    typedef std::shared_ptr<FoxThreadPool> ptr;$/;"	t	class:JKYi::FoxThreadPool	access:public
JKYi::FoxThreadPool::releaseFoxThread	JKYi/db/fox_thread.cc	/^void FoxThreadPool::releaseFoxThread(FoxThread * t){$/;"	f	class:JKYi::FoxThreadPool	signature:(FoxThread * t)
JKYi::FoxThreadPool::releaseFoxThread	JKYi/db/fox_thread.h	/^    void releaseFoxThread(FoxThread * t);$/;"	p	class:JKYi::FoxThreadPool	access:private	signature:(FoxThread * t)
JKYi::FoxThreadPool::setInitCb	JKYi/db/fox_thread.h	/^    void setInitCb(FoxThread::init_cb v){ m_initCb = v; }$/;"	f	class:JKYi::FoxThreadPool	access:public	signature:(FoxThread::init_cb v)
JKYi::FoxThreadPool::start	JKYi/db/fox_thread.cc	/^void FoxThreadPool::start(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
JKYi::FoxThreadPool::stop	JKYi/db/fox_thread.cc	/^void FoxThreadPool::stop(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
JKYi::FoxThreadPool::wrapCb	JKYi/db/fox_thread.cc	/^void FoxThreadPool::wrapCb(std::shared_ptr<FoxThread>thr,callback cb){$/;"	f	class:JKYi::FoxThreadPool	signature:(std::shared_ptr<FoxThread>thr,callback cb)
JKYi::FoxThreadPool::wrapCb	JKYi/db/fox_thread.h	/^    void wrapCb(std::shared_ptr<FoxThread>,callback cb);$/;"	p	class:JKYi::FoxThreadPool	access:private	signature:(std::shared_ptr<FoxThread>,callback cb)
JKYi::FoxThreadPool::~FoxThreadPool	JKYi/db/fox_thread.cc	/^FoxThreadPool::~FoxThreadPool(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
JKYi::FoxThreadPool::~FoxThreadPool	JKYi/db/fox_thread.h	/^    ~FoxThreadPool();$/;"	p	class:JKYi::FoxThreadPool	access:public	signature:()
JKYi::GetCurrentMS	JKYi/util.cc	/^uint64_t GetCurrentMS(){$/;"	f	namespace:JKYi	signature:()
JKYi::GetCurrentMS	JKYi/util.h	/^uint64_t GetCurrentMS();$/;"	p	namespace:JKYi	signature:()
JKYi::GetCurrentUS	JKYi/util.cc	/^uint64_t GetCurrentUS(){$/;"	f	namespace:JKYi	signature:()
JKYi::GetCurrentUS	JKYi/util.h	/^uint64_t GetCurrentUS();$/;"	p	namespace:JKYi	signature:()
JKYi::GetFiberId	JKYi/util.cc	/^uint64_t GetFiberId(){$/;"	f	namespace:JKYi	signature:()
JKYi::GetFiberId	JKYi/util.h	/^uint64_t GetFiberId();$/;"	p	namespace:JKYi	signature:()
JKYi::GetParamValue	JKYi/util.h	/^V GetParamValue(const Map& m,const K& k,const V& def = V()){$/;"	f	namespace:JKYi	signature:(const Map& m,const K& k,const V& def = V())
JKYi::GetThreadId	JKYi/util.cc	/^pid_t GetThreadId(){$/;"	f	namespace:JKYi	signature:()
JKYi::GetThreadId	JKYi/util.h	/^pid_t GetThreadId();  $/;"	p	namespace:JKYi	signature:()
JKYi::IDB	JKYi/db/db.h	/^class IDB:public ISQLUpdate,public ISQLQuery{$/;"	c	namespace:JKYi	inherits:ISQLUpdate,ISQLQuery
JKYi::IDB::getErrStr	JKYi/db/db.h	/^    virtual std::string getErrStr() = 0;$/;"	p	class:JKYi::IDB	access:public	signature:()
JKYi::IDB::getErrno	JKYi/db/db.h	/^    virtual int getErrno() = 0;$/;"	p	class:JKYi::IDB	access:public	signature:()
JKYi::IDB::openTransaction	JKYi/db/db.h	/^    virtual ITransaction::ptr openTransaction(bool auto_commit = false) = 0;$/;"	p	class:JKYi::IDB	access:public	signature:(bool auto_commit = false)
JKYi::IDB::prepare	JKYi/db/db.h	/^    virtual IStmt::ptr prepare(const std::string& stmt) = 0;$/;"	p	class:JKYi::IDB	access:public	signature:(const std::string& stmt)
JKYi::IDB::ptr	JKYi/db/db.h	/^    typedef std::shared_ptr<IDB> ptr;$/;"	t	class:JKYi::IDB	access:public
JKYi::IDB::~IDB	JKYi/db/db.h	/^    virtual ~IDB(){}$/;"	f	class:JKYi::IDB	access:public	signature:()
JKYi::IFoxThread	JKYi/db/fox_thread.h	/^class IFoxThread{$/;"	c	namespace:JKYi
JKYi::IFoxThread::batchDispatch	JKYi/db/fox_thread.h	/^    virtual bool batchDispatch(const std::vector<callback>& cbs) = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:(const std::vector<callback>& cbs)
JKYi::IFoxThread::broadcast	JKYi/db/fox_thread.h	/^    virtual void broadcast(callback cb) = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:(callback cb)
JKYi::IFoxThread::callback	JKYi/db/fox_thread.h	/^    typedef std::function<void ()> callback;$/;"	t	class:JKYi::IFoxThread	access:public
JKYi::IFoxThread::dispatch	JKYi/db/fox_thread.h	/^    virtual bool dispatch(callback cb) = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:(callback cb)
JKYi::IFoxThread::dispatch	JKYi/db/fox_thread.h	/^    virtual bool dispatch(uint32_t id,callback cb) = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:(uint32_t id,callback cb)
JKYi::IFoxThread::dump	JKYi/db/fox_thread.h	/^    virtual void dump(std::ostream& os) = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:(std::ostream& os)
JKYi::IFoxThread::getTotal	JKYi/db/fox_thread.h	/^    virtual uint64_t getTotal() = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:()
JKYi::IFoxThread::join	JKYi/db/fox_thread.h	/^    virtual void join() = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:()
JKYi::IFoxThread::ptr	JKYi/db/fox_thread.h	/^    typedef std::shared_ptr<IFoxThread> ptr;$/;"	t	class:JKYi::IFoxThread	access:public
JKYi::IFoxThread::start	JKYi/db/fox_thread.h	/^    virtual void start() = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:()
JKYi::IFoxThread::stop	JKYi/db/fox_thread.h	/^    virtual void stop() = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:()
JKYi::IFoxThread::~IFoxThread	JKYi/db/fox_thread.h	/^    virtual ~IFoxThread(){}$/;"	f	class:JKYi::IFoxThread	access:public	signature:()
JKYi::IOManager	JKYi/iomanager.h	/^class IOManager:public Scheduler,public TimerManager{$/;"	c	namespace:JKYi	inherits:Scheduler,TimerManager
JKYi::IOManager::Event	JKYi/iomanager.h	/^   enum Event{$/;"	g	class:JKYi::IOManager	access:public
JKYi::IOManager::FdContext	JKYi/iomanager.h	/^   struct FdContext{$/;"	s	class:JKYi::IOManager	access:private
JKYi::IOManager::FdContext::EventContext	JKYi/iomanager.h	/^	 struct EventContext{$/;"	s	struct:JKYi::IOManager::FdContext	access:public
JKYi::IOManager::FdContext::EventContext::cb	JKYi/iomanager.h	/^	   std::function<void ()>cb;$/;"	m	struct:JKYi::IOManager::FdContext::EventContext	access:public
JKYi::IOManager::FdContext::EventContext::fiber	JKYi/iomanager.h	/^	   Fiber::ptr fiber;$/;"	m	struct:JKYi::IOManager::FdContext::EventContext	access:public
JKYi::IOManager::FdContext::EventContext::scheduler	JKYi/iomanager.h	/^       Scheduler* scheduler = nullptr;$/;"	m	struct:JKYi::IOManager::FdContext::EventContext	access:public
JKYi::IOManager::FdContext::MutexType	JKYi/iomanager.h	/^     typedef Mutex MutexType;$/;"	t	struct:JKYi::IOManager::FdContext	access:public
JKYi::IOManager::FdContext::events	JKYi/iomanager.h	/^	 Event events=NONE;$/;"	m	struct:JKYi::IOManager::FdContext	access:public
JKYi::IOManager::FdContext::fd	JKYi/iomanager.h	/^	 int fd=0;$/;"	m	struct:JKYi::IOManager::FdContext	access:public
JKYi::IOManager::FdContext::getContext	JKYi/iomanager.cc	/^IOManager::FdContext::EventContext& IOManager::FdContext::getContext(IOManager::Event event){$/;"	f	class:JKYi::IOManager::FdContext	signature:(IOManager::Event event)
JKYi::IOManager::FdContext::getContext	JKYi/iomanager.h	/^	 EventContext& getContext(Event event);$/;"	p	struct:JKYi::IOManager::FdContext	access:public	signature:(Event event)
JKYi::IOManager::FdContext::mutex	JKYi/iomanager.h	/^	 MutexType mutex;$/;"	m	struct:JKYi::IOManager::FdContext	access:public
JKYi::IOManager::FdContext::read	JKYi/iomanager.h	/^	 EventContext read;$/;"	m	struct:JKYi::IOManager::FdContext	access:public
JKYi::IOManager::FdContext::resetContext	JKYi/iomanager.cc	/^void IOManager::FdContext::resetContext(EventContext&ctx){$/;"	f	class:JKYi::IOManager::FdContext	signature:(EventContext&ctx)
JKYi::IOManager::FdContext::resetContext	JKYi/iomanager.h	/^	 void resetContext(EventContext&ctx);$/;"	p	struct:JKYi::IOManager::FdContext	access:public	signature:(EventContext&ctx)
JKYi::IOManager::FdContext::triggerEvent	JKYi/iomanager.cc	/^void IOManager::FdContext::triggerEvent(IOManager::Event event){$/;"	f	class:JKYi::IOManager::FdContext	signature:(IOManager::Event event)
JKYi::IOManager::FdContext::triggerEvent	JKYi/iomanager.h	/^	 void triggerEvent(Event event);$/;"	p	struct:JKYi::IOManager::FdContext	access:public	signature:(Event event)
JKYi::IOManager::FdContext::write	JKYi/iomanager.h	/^	 EventContext write;$/;"	m	struct:JKYi::IOManager::FdContext	access:public
JKYi::IOManager::GetThis	JKYi/iomanager.cc	/^IOManager* IOManager::GetThis(){$/;"	f	class:JKYi::IOManager	signature:()
JKYi::IOManager::GetThis	JKYi/iomanager.h	/^   static IOManager* GetThis();$/;"	p	class:JKYi::IOManager	access:public	signature:()
JKYi::IOManager::IOManager	JKYi/iomanager.cc	/^IOManager::IOManager(size_t threads,bool use_caller,const std::string& name)$/;"	f	class:JKYi::IOManager	signature:(size_t threads,bool use_caller,const std::string& name)
JKYi::IOManager::IOManager	JKYi/iomanager.h	/^   IOManager(size_t threads = 1,bool use_caller = true,const std::string&name = "");$/;"	p	class:JKYi::IOManager	access:public	signature:(size_t threads = 1,bool use_caller = true,const std::string&name = Ó)
JKYi::IOManager::NONE	JKYi/iomanager.h	/^	   NONE  =  0x0,$/;"	e	enum:JKYi::IOManager::Event
JKYi::IOManager::READ	JKYi/iomanager.h	/^	   READ  =  0x1,$/;"	e	enum:JKYi::IOManager::Event
JKYi::IOManager::RWMutexType	JKYi/iomanager.h	/^   typedef RWMutex RWMutexType;$/;"	t	class:JKYi::IOManager	access:public
JKYi::IOManager::WRITE	JKYi/iomanager.h	/^	   WRITE =  0x4$/;"	e	enum:JKYi::IOManager::Event
JKYi::IOManager::addEvent	JKYi/iomanager.cc	/^int IOManager::addEvent(int fd,Event event,std::function<void()>cb){$/;"	f	class:JKYi::IOManager	signature:(int fd,Event event,std::function<void()>cb)
JKYi::IOManager::addEvent	JKYi/iomanager.h	/^   int addEvent(int fd,Event event,std::function<void ()>cb = nullptr);$/;"	p	class:JKYi::IOManager	access:public	signature:(int fd,Event event,std::function<void ()>cb = nullptr)
JKYi::IOManager::cancelAll	JKYi/iomanager.cc	/^bool IOManager::cancelAll(int fd){$/;"	f	class:JKYi::IOManager	signature:(int fd)
JKYi::IOManager::cancelAll	JKYi/iomanager.h	/^   bool cancelAll(int fd);$/;"	p	class:JKYi::IOManager	access:public	signature:(int fd)
JKYi::IOManager::cancelEvent	JKYi/iomanager.cc	/^bool IOManager::cancelEvent(int fd,Event event){$/;"	f	class:JKYi::IOManager	signature:(int fd,Event event)
JKYi::IOManager::cancelEvent	JKYi/iomanager.h	/^   bool cancelEvent(int fd,Event event);$/;"	p	class:JKYi::IOManager	access:public	signature:(int fd,Event event)
JKYi::IOManager::contextResize	JKYi/iomanager.cc	/^void IOManager::contextResize(size_t size){$/;"	f	class:JKYi::IOManager	signature:(size_t size)
JKYi::IOManager::contextResize	JKYi/iomanager.h	/^   void contextResize(size_t size);$/;"	p	class:JKYi::IOManager	access:protected	signature:(size_t size)
JKYi::IOManager::delEvent	JKYi/iomanager.cc	/^bool IOManager::delEvent(int fd,Event event){$/;"	f	class:JKYi::IOManager	signature:(int fd,Event event)
JKYi::IOManager::delEvent	JKYi/iomanager.h	/^   bool delEvent(int fd,Event event);$/;"	p	class:JKYi::IOManager	access:public	signature:(int fd,Event event)
JKYi::IOManager::idle	JKYi/iomanager.cc	/^void IOManager::idle(){$/;"	f	class:JKYi::IOManager	signature:()
JKYi::IOManager::m_epfd	JKYi/iomanager.h	/^   int m_epfd=0;$/;"	m	class:JKYi::IOManager	access:private
JKYi::IOManager::m_fdContexts	JKYi/iomanager.h	/^   std::vector<FdContext*>m_fdContexts;$/;"	m	class:JKYi::IOManager	access:private
JKYi::IOManager::m_mutex	JKYi/iomanager.h	/^   RWMutexType m_mutex;$/;"	m	class:JKYi::IOManager	access:private
JKYi::IOManager::m_pendingEventCount	JKYi/iomanager.h	/^   std::atomic<size_t>m_pendingEventCount={0};$/;"	m	class:JKYi::IOManager	access:private
JKYi::IOManager::m_tickleFds	JKYi/iomanager.h	/^   int m_tickleFds[2];$/;"	m	class:JKYi::IOManager	access:private
JKYi::IOManager::onTimerInsertedAtFront	JKYi/iomanager.cc	/^void IOManager::onTimerInsertedAtFront(){$/;"	f	class:JKYi::IOManager	signature:()
JKYi::IOManager::override	JKYi/iomanager.h	/^   bool stopping()override;$/;"	m	class:JKYi::IOManager	access:protected
JKYi::IOManager::override	JKYi/iomanager.h	/^   void idle()override;$/;"	m	class:JKYi::IOManager	access:protected
JKYi::IOManager::override	JKYi/iomanager.h	/^   void onTimerInsertedAtFront()override;$/;"	m	class:JKYi::IOManager	access:protected
JKYi::IOManager::override	JKYi/iomanager.h	/^   void tickle()override;$/;"	m	class:JKYi::IOManager	access:protected
JKYi::IOManager::ptr	JKYi/iomanager.h	/^   typedef std::shared_ptr<IOManager> ptr;$/;"	t	class:JKYi::IOManager	access:public
JKYi::IOManager::stopping	JKYi/iomanager.cc	/^bool IOManager::stopping(){$/;"	f	class:JKYi::IOManager	signature:()
JKYi::IOManager::stopping	JKYi/iomanager.cc	/^bool IOManager::stopping(uint64_t &timeout){$/;"	f	class:JKYi::IOManager	signature:(uint64_t &timeout)
JKYi::IOManager::stopping	JKYi/iomanager.h	/^   bool stopping(uint64_t&timeout);$/;"	p	class:JKYi::IOManager	access:protected	signature:(uint64_t&timeout)
JKYi::IOManager::tickle	JKYi/iomanager.cc	/^void IOManager::tickle(){$/;"	f	class:JKYi::IOManager	signature:()
JKYi::IOManager::~IOManager	JKYi/iomanager.cc	/^IOManager::~IOManager(){$/;"	f	class:JKYi::IOManager	signature:()
JKYi::IOManager::~IOManager	JKYi/iomanager.h	/^   ~IOManager();    $/;"	p	class:JKYi::IOManager	access:public	signature:()
JKYi::IPAddress	JKYi/address.h	/^class IPAddress:public Address{$/;"	c	namespace:JKYi	inherits:Address
JKYi::IPAddress::Create	JKYi/address.cc	/^IPAddress::ptr IPAddress::Create(const char * address,uint16_t port){$/;"	f	class:JKYi::IPAddress	signature:(const char * address,uint16_t port)
JKYi::IPAddress::Create	JKYi/address.h	/^	static IPAddress::ptr Create(const char*address,uint16_t port=0);$/;"	p	class:JKYi::IPAddress	access:public	signature:(const char*address,uint16_t port=0)
JKYi::IPAddress::broadcastAddress	JKYi/address.h	/^	virtual IPAddress::ptr broadcastAddress(uint32_t prefix_len)=0;$/;"	p	class:JKYi::IPAddress	access:public	signature:(uint32_t prefix_len)
JKYi::IPAddress::getPort	JKYi/address.h	/^	virtual uint16_t getPort()const = 0;$/;"	p	class:JKYi::IPAddress	access:public	signature:() const
JKYi::IPAddress::networkAddress	JKYi/address.h	/^	virtual IPAddress::ptr networkAddress(uint32_t prefix_len)=0;$/;"	p	class:JKYi::IPAddress	access:public	signature:(uint32_t prefix_len)
JKYi::IPAddress::ptr	JKYi/address.h	/^	typedef std::shared_ptr<IPAddress> ptr;$/;"	t	class:JKYi::IPAddress	access:public
JKYi::IPAddress::setPort	JKYi/address.h	/^	virtual void setPort(uint16_t v) = 0;$/;"	p	class:JKYi::IPAddress	access:public	signature:(uint16_t v)
JKYi::IPAddress::subnetMaskAddress	JKYi/address.h	/^	virtual IPAddress::ptr subnetMaskAddress(uint32_t prefix_len)=0;$/;"	p	class:JKYi::IPAddress	access:public	signature:(uint32_t prefix_len)
JKYi::IPv4Address	JKYi/address.h	/^class IPv4Address:public IPAddress{$/;"	c	namespace:JKYi	inherits:IPAddress
JKYi::IPv4Address::Create	JKYi/address.cc	/^IPv4Address::ptr IPv4Address::Create(const char *addr,uint16_t port){$/;"	f	class:JKYi::IPv4Address	signature:(const char *addr,uint16_t port)
JKYi::IPv4Address::Create	JKYi/address.h	/^	static IPv4Address::ptr Create(const char*addr,uint16_t port=0);$/;"	p	class:JKYi::IPv4Address	access:public	signature:(const char*addr,uint16_t port=0)
JKYi::IPv4Address::IPv4Address	JKYi/address.cc	/^IPv4Address::IPv4Address(const sockaddr_in&addr){$/;"	f	class:JKYi::IPv4Address	signature:(const sockaddr_in&addr)
JKYi::IPv4Address::IPv4Address	JKYi/address.cc	/^IPv4Address::IPv4Address(uint32_t address,uint16_t port){$/;"	f	class:JKYi::IPv4Address	signature:(uint32_t address,uint16_t port)
JKYi::IPv4Address::IPv4Address	JKYi/address.h	/^	IPv4Address(const sockaddr_in&addr);$/;"	p	class:JKYi::IPv4Address	access:public	signature:(const sockaddr_in&addr)
JKYi::IPv4Address::IPv4Address	JKYi/address.h	/^	IPv4Address(uint32_t address = INADDR_ANY,uint16_t port = 0);$/;"	p	class:JKYi::IPv4Address	access:public	signature:(uint32_t address = INADDR_ANY,uint16_t port = 0)
JKYi::IPv4Address::broadcastAddress	JKYi/address.cc	/^IPAddress::ptr IPv4Address::broadcastAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv4Address	signature:(uint32_t prefix_len)
JKYi::IPv4Address::getAddr	JKYi/address.cc	/^const sockaddr* IPv4Address::getAddr()const {$/;"	f	class:JKYi::IPv4Address	signature:() const
JKYi::IPv4Address::getAddr	JKYi/address.cc	/^sockaddr* IPv4Address::getAddr(){$/;"	f	class:JKYi::IPv4Address	signature:()
JKYi::IPv4Address::getAddrLen	JKYi/address.cc	/^socklen_t IPv4Address::getAddrLen()const {$/;"	f	class:JKYi::IPv4Address	signature:() const
JKYi::IPv4Address::getPort	JKYi/address.cc	/^uint16_t IPv4Address::getPort()const{$/;"	f	class:JKYi::IPv4Address	signature:() const
JKYi::IPv4Address::insert	JKYi/address.cc	/^std::ostream& IPv4Address::insert(std::ostream &os)const {$/;"	f	class:JKYi::IPv4Address	signature:(std::ostream &os) const
JKYi::IPv4Address::m_addr	JKYi/address.h	/^	sockaddr_in m_addr;$/;"	m	class:JKYi::IPv4Address	access:private
JKYi::IPv4Address::networkAddress	JKYi/address.cc	/^IPAddress::ptr IPv4Address::networkAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv4Address	signature:(uint32_t prefix_len)
JKYi::IPv4Address::override	JKYi/address.h	/^	IPAddress::ptr broadcastAddress(uint32_t prefix_len)override;$/;"	m	class:JKYi::IPv4Address	access:public
JKYi::IPv4Address::override	JKYi/address.h	/^	IPAddress::ptr networkAddress(uint32_t prefix_len)override;$/;"	m	class:JKYi::IPv4Address	access:public
JKYi::IPv4Address::override	JKYi/address.h	/^	IPAddress::ptr subnetMaskAddress(uint32_t prefix_len)override;$/;"	m	class:JKYi::IPv4Address	access:public
JKYi::IPv4Address::override	JKYi/address.h	/^	const sockaddr* getAddr()const override;$/;"	m	class:JKYi::IPv4Address	access:public
JKYi::IPv4Address::override	JKYi/address.h	/^	sockaddr* getAddr()override;$/;"	m	class:JKYi::IPv4Address	access:public
JKYi::IPv4Address::override	JKYi/address.h	/^	socklen_t getAddrLen()const override;$/;"	m	class:JKYi::IPv4Address	access:public
JKYi::IPv4Address::override	JKYi/address.h	/^	std::ostream& insert(std::ostream&os)const override;$/;"	m	class:JKYi::IPv4Address	access:public
JKYi::IPv4Address::override	JKYi/address.h	/^	uint16_t getPort()const override;$/;"	m	class:JKYi::IPv4Address	access:public
JKYi::IPv4Address::override	JKYi/address.h	/^	void setPort(uint16_t v)override;$/;"	m	class:JKYi::IPv4Address	access:public
JKYi::IPv4Address::ptr	JKYi/address.h	/^	typedef std::shared_ptr<IPv4Address> ptr;$/;"	t	class:JKYi::IPv4Address	access:public
JKYi::IPv4Address::setPort	JKYi/address.cc	/^void IPv4Address::setPort(uint16_t v){$/;"	f	class:JKYi::IPv4Address	signature:(uint16_t v)
JKYi::IPv4Address::subnetMaskAddress	JKYi/address.cc	/^IPAddress::ptr IPv4Address::subnetMaskAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv4Address	signature:(uint32_t prefix_len)
JKYi::IPv6Address	JKYi/address.h	/^class IPv6Address:public IPAddress{$/;"	c	namespace:JKYi	inherits:IPAddress
JKYi::IPv6Address::Create	JKYi/address.cc	/^IPv6Address::ptr IPv6Address::Create(const char*address,uint16_t port){$/;"	f	class:JKYi::IPv6Address	signature:(const char*address,uint16_t port)
JKYi::IPv6Address::Create	JKYi/address.h	/^	static IPv6Address::ptr Create(const char*address,uint16_t port=0);$/;"	p	class:JKYi::IPv6Address	access:public	signature:(const char*address,uint16_t port=0)
JKYi::IPv6Address::IPv6Address	JKYi/address.cc	/^IPv6Address::IPv6Address(){$/;"	f	class:JKYi::IPv6Address	signature:()
JKYi::IPv6Address::IPv6Address	JKYi/address.cc	/^IPv6Address::IPv6Address(const sockaddr_in6&addr){$/;"	f	class:JKYi::IPv6Address	signature:(const sockaddr_in6&addr)
JKYi::IPv6Address::IPv6Address	JKYi/address.cc	/^IPv6Address::IPv6Address(const uint8_t address[16],uint16_t port){$/;"	f	class:JKYi::IPv6Address	signature:(const uint8_t address[16],uint16_t port)
JKYi::IPv6Address::IPv6Address	JKYi/address.h	/^	IPv6Address();$/;"	p	class:JKYi::IPv6Address	access:public	signature:()
JKYi::IPv6Address::IPv6Address	JKYi/address.h	/^	IPv6Address(const sockaddr_in6& address);$/;"	p	class:JKYi::IPv6Address	access:public	signature:(const sockaddr_in6& address)
JKYi::IPv6Address::IPv6Address	JKYi/address.h	/^	IPv6Address(const uint8_t address[16],uint16_t port=0);$/;"	p	class:JKYi::IPv6Address	access:public	signature:(const uint8_t address[16],uint16_t port=0)
JKYi::IPv6Address::broadcastAddress	JKYi/address.cc	/^IPAddress::ptr IPv6Address::broadcastAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv6Address	signature:(uint32_t prefix_len)
JKYi::IPv6Address::getAddr	JKYi/address.cc	/^const sockaddr* IPv6Address::getAddr()const{$/;"	f	class:JKYi::IPv6Address	signature:() const
JKYi::IPv6Address::getAddr	JKYi/address.cc	/^sockaddr* IPv6Address::getAddr(){$/;"	f	class:JKYi::IPv6Address	signature:()
JKYi::IPv6Address::getAddrLen	JKYi/address.cc	/^socklen_t IPv6Address::getAddrLen()const{$/;"	f	class:JKYi::IPv6Address	signature:() const
JKYi::IPv6Address::getPort	JKYi/address.cc	/^uint16_t IPv6Address::getPort()const{$/;"	f	class:JKYi::IPv6Address	signature:() const
JKYi::IPv6Address::insert	JKYi/address.cc	/^std::ostream& IPv6Address::insert(std::ostream&os)const{$/;"	f	class:JKYi::IPv6Address	signature:(std::ostream&os) const
JKYi::IPv6Address::m_addr	JKYi/address.h	/^	sockaddr_in6 m_addr;$/;"	m	class:JKYi::IPv6Address	access:private
JKYi::IPv6Address::networkAddress	JKYi/address.cc	/^IPAddress::ptr IPv6Address::networkAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv6Address	signature:(uint32_t prefix_len)
JKYi::IPv6Address::override	JKYi/address.h	/^	IPAddress::ptr broadcastAddress(uint32_t prefix_len)override;$/;"	m	class:JKYi::IPv6Address	access:public
JKYi::IPv6Address::override	JKYi/address.h	/^	IPAddress::ptr networkAddress(uint32_t prefix_len)override;$/;"	m	class:JKYi::IPv6Address	access:public
JKYi::IPv6Address::override	JKYi/address.h	/^	IPAddress::ptr subnetMaskAddress(uint32_t predix_len)override;$/;"	m	class:JKYi::IPv6Address	access:public
JKYi::IPv6Address::override	JKYi/address.h	/^	const sockaddr* getAddr()const override;$/;"	m	class:JKYi::IPv6Address	access:public
JKYi::IPv6Address::override	JKYi/address.h	/^	sockaddr* getAddr()override;$/;"	m	class:JKYi::IPv6Address	access:public
JKYi::IPv6Address::override	JKYi/address.h	/^	socklen_t getAddrLen()const override;$/;"	m	class:JKYi::IPv6Address	access:public
JKYi::IPv6Address::override	JKYi/address.h	/^	std::ostream& insert(std::ostream&os)const override;$/;"	m	class:JKYi::IPv6Address	access:public
JKYi::IPv6Address::override	JKYi/address.h	/^	void setPort(uint16_t v)override;$/;"	m	class:JKYi::IPv6Address	access:public
JKYi::IPv6Address::override	JKYi/address.h	/^    uint16_t getPort()const override;$/;"	m	class:JKYi::IPv6Address	access:public
JKYi::IPv6Address::ptr	JKYi/address.h	/^	typedef std::shared_ptr<IPv6Address> ptr;$/;"	t	class:JKYi::IPv6Address	access:public
JKYi::IPv6Address::setPort	JKYi/address.cc	/^void IPv6Address::setPort(uint16_t v){$/;"	f	class:JKYi::IPv6Address	signature:(uint16_t v)
JKYi::IPv6Address::subnetMaskAddress	JKYi/address.cc	/^IPAddress::ptr IPv6Address::subnetMaskAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv6Address	signature:(uint32_t prefix_len)
JKYi::IRedis	JKYi/db/redis.h	/^class IRedis{$/;"	c	namespace:JKYi
JKYi::IRedis::FOX_REDIS	JKYi/db/redis.h	/^        FOX_REDIS = 3,$/;"	e	enum:JKYi::IRedis::Type
JKYi::IRedis::FOX_REDIS_CLUSTER	JKYi/db/redis.h	/^        FOX_REDIS_CLUSTER = 4$/;"	e	enum:JKYi::IRedis::Type
JKYi::IRedis::IRedis	JKYi/db/redis.h	/^    IRedis()$/;"	f	class:JKYi::IRedis	access:public	signature:()
JKYi::IRedis::REDIS	JKYi/db/redis.h	/^        REDIS = 1,$/;"	e	enum:JKYi::IRedis::Type
JKYi::IRedis::REDIS_CLUSTER	JKYi/db/redis.h	/^        REDIS_CLUSTER = 2,$/;"	e	enum:JKYi::IRedis::Type
JKYi::IRedis::Type	JKYi/db/redis.h	/^    enum Type{$/;"	g	class:JKYi::IRedis	access:public
JKYi::IRedis::cmd	JKYi/db/redis.h	/^    virtual ReplyPtr cmd(const char * fmt,...) = 0;$/;"	p	class:JKYi::IRedis	access:public	signature:(const char * fmt,...)
JKYi::IRedis::cmd	JKYi/db/redis.h	/^    virtual ReplyPtr cmd(const char * fmt,va_list ap) = 0;$/;"	p	class:JKYi::IRedis	access:public	signature:(const char * fmt,va_list ap)
JKYi::IRedis::cmd	JKYi/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv) = 0;$/;"	p	class:JKYi::IRedis	access:public	signature:(const std::vector<std::string>& argv)
JKYi::IRedis::getName	JKYi/db/redis.h	/^    const std::string& getName()const { return m_name; }$/;"	f	class:JKYi::IRedis	access:public	signature:() const
JKYi::IRedis::getPasswd	JKYi/db/redis.h	/^    const std::string& getPasswd()const { return m_passwd; }$/;"	f	class:JKYi::IRedis	access:public	signature:() const
JKYi::IRedis::getType	JKYi/db/redis.h	/^    Type getType()const { return m_type; }$/;"	f	class:JKYi::IRedis	access:public	signature:() const
JKYi::IRedis::m_logEnable	JKYi/db/redis.h	/^    bool m_logEnable;$/;"	m	class:JKYi::IRedis	access:protected
JKYi::IRedis::m_name	JKYi/db/redis.h	/^    std::string m_name;$/;"	m	class:JKYi::IRedis	access:protected
JKYi::IRedis::m_passwd	JKYi/db/redis.h	/^    std::string m_passwd;$/;"	m	class:JKYi::IRedis	access:protected
JKYi::IRedis::m_type	JKYi/db/redis.h	/^    Type m_type;$/;"	m	class:JKYi::IRedis	access:protected
JKYi::IRedis::ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr<IRedis> ptr;$/;"	t	class:JKYi::IRedis	access:public
JKYi::IRedis::setName	JKYi/db/redis.h	/^    void setName(const std::string& name) { m_name = name; }$/;"	f	class:JKYi::IRedis	access:public	signature:(const std::string& name)
JKYi::IRedis::setPasswd	JKYi/db/redis.h	/^    void setPasswd(const std::string& v) { m_passwd = v; }$/;"	f	class:JKYi::IRedis	access:public	signature:(const std::string& v)
JKYi::IRedis::~IRedis	JKYi/db/redis.h	/^    virtual ~IRedis(){}$/;"	f	class:JKYi::IRedis	access:public	signature:()
JKYi::ISQLData	JKYi/db/db.h	/^class ISQLData{$/;"	c	namespace:JKYi
JKYi::ISQLData::getBlob	JKYi/db/db.h	/^    virtual std::string getBlob(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getColumnBytes	JKYi/db/db.h	/^    virtual int getColumnBytes(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getColumnCount	JKYi/db/db.h	/^    virtual int getColumnCount() = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:()
JKYi::ISQLData::getColumnName	JKYi/db/db.h	/^    virtual std::string getColumnName(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getColumnType	JKYi/db/db.h	/^    virtual int getColumnType(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getDataCount	JKYi/db/db.h	/^    virtual int getDataCount() = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:()
JKYi::ISQLData::getDouble	JKYi/db/db.h	/^    virtual double getDouble(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getErrStr	JKYi/db/db.h	/^    virtual const std::string& getErrStr()const = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:() const
JKYi::ISQLData::getErrno	JKYi/db/db.h	/^    virtual int getErrno()const = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:() const
JKYi::ISQLData::getFloat	JKYi/db/db.h	/^    virtual float getFloat(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getInt16	JKYi/db/db.h	/^    virtual int16_t getInt16(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getInt32	JKYi/db/db.h	/^    virtual int32_t getInt32(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getInt64	JKYi/db/db.h	/^    virtual int64_t getInt64(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getInt8	JKYi/db/db.h	/^    virtual int8_t getInt8(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getString	JKYi/db/db.h	/^    virtual std::string getString(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getTime	JKYi/db/db.h	/^    virtual time_t getTime(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getUint16	JKYi/db/db.h	/^    virtual uint16_t getUint16(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getUint32	JKYi/db/db.h	/^    virtual uint32_t getUint32(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getUint64	JKYi/db/db.h	/^    virtual uint64_t getUint64(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::getUint8	JKYi/db/db.h	/^    virtual uint8_t getUint8(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::isNull	JKYi/db/db.h	/^    virtual bool isNull(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
JKYi::ISQLData::next	JKYi/db/db.h	/^    virtual bool next() = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:()
JKYi::ISQLData::ptr	JKYi/db/db.h	/^    typedef std::shared_ptr<ISQLData> ptr;$/;"	t	class:JKYi::ISQLData	access:public
JKYi::ISQLData::~ISQLData	JKYi/db/db.h	/^    virtual ~ISQLData(){}$/;"	f	class:JKYi::ISQLData	access:public	signature:()
JKYi::ISQLQuery	JKYi/db/db.h	/^class ISQLQuery{$/;"	c	namespace:JKYi
JKYi::ISQLQuery::query	JKYi/db/db.h	/^    virtual ISQLData::ptr query(const char * format,...) = 0;$/;"	p	class:JKYi::ISQLQuery	access:public	signature:(const char * format,...)
JKYi::ISQLQuery::query	JKYi/db/db.h	/^    virtual ISQLData::ptr query(const std::string& sql) = 0;$/;"	p	class:JKYi::ISQLQuery	access:public	signature:(const std::string& sql)
JKYi::ISQLQuery::~ISQLQuery	JKYi/db/db.h	/^    virtual ~ISQLQuery(){}$/;"	f	class:JKYi::ISQLQuery	access:public	signature:()
JKYi::ISQLUpdate	JKYi/db/db.h	/^class ISQLUpdate{$/;"	c	namespace:JKYi
JKYi::ISQLUpdate::execute	JKYi/db/db.h	/^    virtual int execute(const char * format,...) = 0;$/;"	p	class:JKYi::ISQLUpdate	access:public	signature:(const char * format,...)
JKYi::ISQLUpdate::execute	JKYi/db/db.h	/^    virtual int execute(const std::string& sql) = 0;$/;"	p	class:JKYi::ISQLUpdate	access:public	signature:(const std::string& sql)
JKYi::ISQLUpdate::getLastInsertId	JKYi/db/db.h	/^    virtual int64_t getLastInsertId() = 0;$/;"	p	class:JKYi::ISQLUpdate	access:public	signature:()
JKYi::ISQLUpdate::~ISQLUpdate	JKYi/db/db.h	/^    virtual ~ISQLUpdate(){}$/;"	f	class:JKYi::ISQLUpdate	access:public	signature:()
JKYi::IStmt	JKYi/db/db.h	/^class IStmt{$/;"	c	namespace:JKYi
JKYi::IStmt::bindBlob	JKYi/db/db.h	/^    virtual int bindBlob(int idx,const std::string& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const std::string& value)
JKYi::IStmt::bindBlob	JKYi/db/db.h	/^    virtual int bindBlob(int idx,const void * value,int64_t size) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const void * value,int64_t size)
JKYi::IStmt::bindDouble	JKYi/db/db.h	/^    virtual int bindDouble(int idx,const double& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const double& value)
JKYi::IStmt::bindFloat	JKYi/db/db.h	/^    virtual int bindFloat(int idx,const float& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const float& value)
JKYi::IStmt::bindInt16	JKYi/db/db.h	/^    virtual int bindInt16(int idx,const int16_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const int16_t& value)
JKYi::IStmt::bindInt32	JKYi/db/db.h	/^    virtual int bindInt32(int idx,const int32_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const int32_t& value)
JKYi::IStmt::bindInt64	JKYi/db/db.h	/^    virtual int bindInt64(int idx,const int64_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const int64_t& value)
JKYi::IStmt::bindInt8	JKYi/db/db.h	/^    virtual int bindInt8(int idx,const int8_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const int8_t& value)
JKYi::IStmt::bindNull	JKYi/db/db.h	/^    virtual int bindNull(int idx) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx)
JKYi::IStmt::bindString	JKYi/db/db.h	/^    virtual int bindString(int idx,const char * value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const char * value)
JKYi::IStmt::bindString	JKYi/db/db.h	/^    virtual int bindString(int idx,const std::string& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const std::string& value)
JKYi::IStmt::bindTime	JKYi/db/db.h	/^    virtual int bindTime(int idx,const time_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const time_t& value)
JKYi::IStmt::bindUint16	JKYi/db/db.h	/^    virtual int bindUint16(int idx,const uint16_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const uint16_t& value)
JKYi::IStmt::bindUint32	JKYi/db/db.h	/^    virtual int bindUint32(int idx,const uint32_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const uint32_t& value)
JKYi::IStmt::bindUint64	JKYi/db/db.h	/^    virtual int bindUint64(int idx,const uint64_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const uint64_t& value)
JKYi::IStmt::bindUint8	JKYi/db/db.h	/^    virtual int bindUint8(int idx,const uint8_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const uint8_t& value)
JKYi::IStmt::execute	JKYi/db/db.h	/^    virtual int execute() = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:()
JKYi::IStmt::getErrStr	JKYi/db/db.h	/^    virtual std::string getErrStr() = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:()
JKYi::IStmt::getErrno	JKYi/db/db.h	/^    virtual int getErrno() = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:()
JKYi::IStmt::getLastInsertId	JKYi/db/db.h	/^    virtual int64_t getLastInsertId() = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:()
JKYi::IStmt::ptr	JKYi/db/db.h	/^    typedef std::shared_ptr<IStmt> ptr;$/;"	t	class:JKYi::IStmt	access:public
JKYi::IStmt::query	JKYi/db/db.h	/^    virtual ISQLData::ptr query() = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:()
JKYi::IStmt::~IStmt	JKYi/db/db.h	/^    virtual ~IStmt(){}$/;"	f	class:JKYi::IStmt	access:public	signature:()
JKYi::ISyncRedis	JKYi/db/redis.h	/^class ISyncRedis :public IRedis{$/;"	c	namespace:JKYi	inherits:IRedis
JKYi::ISyncRedis::appendCmd	JKYi/db/redis.h	/^    virtual int appendCmd(const char * fmd,...) = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:(const char * fmd,...)
JKYi::ISyncRedis::appendCmd	JKYi/db/redis.h	/^    virtual int appendCmd(const char * fmt,va_list ap) = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:(const char * fmt,va_list ap)
JKYi::ISyncRedis::appendCmd	JKYi/db/redis.h	/^    virtual int appendCmd(const std::vector<std::string>& argv) = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:(const std::vector<std::string>& argv)
JKYi::ISyncRedis::connect	JKYi/db/redis.h	/^    virtual bool connect() = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:()
JKYi::ISyncRedis::connect	JKYi/db/redis.h	/^    virtual bool connect(const std::string& ip,int port ,uint64_t ms = 0) = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:(const std::string& ip,int port ,uint64_t ms = 0)
JKYi::ISyncRedis::getLastActiveTime	JKYi/db/redis.h	/^    uint64_t getLastActiveTime()const { return m_lastActiveTime; }$/;"	f	class:JKYi::ISyncRedis	access:public	signature:() const
JKYi::ISyncRedis::getReply	JKYi/db/redis.h	/^    virtual ReplyPtr getReply() = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:()
JKYi::ISyncRedis::m_lastActiveTime	JKYi/db/redis.h	/^    uint64_t m_lastActiveTime;$/;"	m	class:JKYi::ISyncRedis	access:private
JKYi::ISyncRedis::ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr <ISyncRedis> ptr;$/;"	t	class:JKYi::ISyncRedis	access:public
JKYi::ISyncRedis::reconnect	JKYi/db/redis.h	/^    virtual bool reconnect() = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:()
JKYi::ISyncRedis::setLastActiveTime	JKYi/db/redis.h	/^    void setLastActiveTime(uint64_t v) { m_lastActiveTime = v; }$/;"	f	class:JKYi::ISyncRedis	access:public	signature:(uint64_t v)
JKYi::ISyncRedis::setTimeout	JKYi/db/redis.h	/^    virtual void setTimeout(uint64_t ms) = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:(uint64_t ms)
JKYi::ISyncRedis::~ISyncRedis	JKYi/db/redis.h	/^    virtual ~ISyncRedis(){}$/;"	f	class:JKYi::ISyncRedis	access:public	signature:()
JKYi::ITransaction	JKYi/db/db.h	/^class ITransaction:public ISQLUpdate{$/;"	c	namespace:JKYi	inherits:ISQLUpdate
JKYi::ITransaction::begin	JKYi/db/db.h	/^    virtual bool begin() = 0;$/;"	p	class:JKYi::ITransaction	access:public	signature:()
JKYi::ITransaction::commit	JKYi/db/db.h	/^    virtual bool commit() = 0;$/;"	p	class:JKYi::ITransaction	access:public	signature:()
JKYi::ITransaction::ptr	JKYi/db/db.h	/^    typedef std::shared_ptr<ITransaction> ptr;$/;"	t	class:JKYi::ITransaction	access:public
JKYi::ITransaction::rollback	JKYi/db/db.h	/^    virtual bool rollback() = 0; $/;"	p	class:JKYi::ITransaction	access:public	signature:()
JKYi::ITransaction::~ITransaction	JKYi/db/db.h	/^    virtual ~ITransaction(){}$/;"	f	class:JKYi::ITransaction	access:public	signature:()
JKYi::Join	JKYi/util.h	/^std::string Join(Iter begin,Iter end,const std::string& str){$/;"	f	namespace:JKYi	signature:(Iter begin,Iter end,const std::string& str)
JKYi::JsonUtil	JKYi/util/json_util.h	/^class JsonUtil{$/;"	c	namespace:JKYi
JKYi::JsonUtil::FromString	JKYi/util/json_util.cc	/^bool JsonUtil::FromString(Json::Value& json,const std::string& str){$/;"	f	class:JKYi::JsonUtil	signature:(Json::Value& json,const std::string& str)
JKYi::JsonUtil::FromString	JKYi/util/json_util.h	/^    static bool FromString(Json::Value& json,const std::string& str);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(Json::Value& json,const std::string& str)
JKYi::JsonUtil::GetDouble	JKYi/util/json_util.cc	/^double JsonUtil::GetDouble(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, double default_value)
JKYi::JsonUtil::GetDouble	JKYi/util/json_util.h	/^    static double GetDouble(const Json::Value& json,const std::string& name,double default_value = 0);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,double default_value = 0)
JKYi::JsonUtil::GetInt32	JKYi/util/json_util.cc	/^int32_t JsonUtil::GetInt32(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, int32_t default_value)
JKYi::JsonUtil::GetInt32	JKYi/util/json_util.h	/^    static int32_t GetInt32(const Json::Value& json,const std::string& name,int32_t default_value = 0);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,int32_t default_value = 0)
JKYi::JsonUtil::GetInt64	JKYi/util/json_util.cc	/^int64_t JsonUtil::GetInt64(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, int64_t default_value)
JKYi::JsonUtil::GetInt64	JKYi/util/json_util.h	/^    static int64_t GetInt64(const Json::Value& json,const std::string& name,int64_t default_value = 0);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,int64_t default_value = 0)
JKYi::JsonUtil::GetString	JKYi/util/json_util.cc	/^std::string JsonUtil::GetString(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, const std::string& default_value)
JKYi::JsonUtil::GetString	JKYi/util/json_util.h	/^    static std::string GetString(const Json::Value& json,const std::string& name,const std::string& default_value = "");$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,const std::string& default_value = Ó)
JKYi::JsonUtil::GetUint32	JKYi/util/json_util.cc	/^uint32_t JsonUtil::GetUint32(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, uint32_t default_value)
JKYi::JsonUtil::GetUint32	JKYi/util/json_util.h	/^    static uint32_t GetUint32(const Json::Value& json,const std::string& name,uint32_t default_value = 0);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,uint32_t default_value = 0)
JKYi::JsonUtil::GetUint64	JKYi/util/json_util.cc	/^uint64_t JsonUtil::GetUint64(const Json::Value& json,const std::string& name,$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json,const std::string& name, uint64_t default_value)
JKYi::JsonUtil::GetUint64	JKYi/util/json_util.h	/^    static uint64_t GetUint64(const Json::Value& json,const std::string& name,uint64_t default_value = 0);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json,const std::string& name,uint64_t default_value = 0)
JKYi::JsonUtil::ToString	JKYi/util/json_util.cc	/^std::string JsonUtil::ToString(const Json::Value& json){$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json)
JKYi::JsonUtil::ToString	JKYi/util/json_util.h	/^    static std::string ToString(const Json::Value& json);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json)
JKYi::LevelFormatItem	JKYi/log.cc	/^class LevelFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::LevelFormatItem::LevelFormatItem	JKYi/log.cc	/^    LevelFormatItem(const std::string&str=""){}$/;"	f	class:JKYi::LevelFormatItem	access:public	signature:(const std::string&str=Ó)
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::list<T>,std::string>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::map<std::string, T>, std::string> {$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::set<T>,std::string>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::list<T>>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::map<std::string,T>>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::set<T>>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::unordered_map<std::string,T>>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::unordered_set<T>>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::vector<T>>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::unordered_map<std::string, T>, std::string> {$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::unordered_set<T>,std::string>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast<std::vector<T>,std::string>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/config.h	/^class LexicalCast{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/log.cc	/^class LexicalCast<LogDefine,std::string>{$/;"	c	namespace:JKYi	file:
JKYi::LexicalCast	JKYi/log.cc	/^class LexicalCast<std::string,LogDefine>{$/;"	c	namespace:JKYi	file:
JKYi::LexicalCast	JKYi/tcp_server.h	/^class LexicalCast<TcpServerConf,std::string>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	JKYi/tcp_server.h	/^class LexicalCast<std::string,TcpServerConf>{$/;"	c	namespace:JKYi
JKYi::LexicalCast	tests/test_config.cc	/^class LexicalCast<Person,std::string>{$/;"	c	namespace:JKYi	file:
JKYi::LexicalCast	tests/test_config.cc	/^class LexicalCast<std::string,Person>{$/;"	c	namespace:JKYi	file:
JKYi::LexicalCast::operator ()	JKYi/config.h	/^    std::string operator()(const std::map<std::string, T>& v) {$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::map<std::string, T>& v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^    std::string operator()(const std::unordered_map<std::string, T>& v) {$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::unordered_map<std::string, T>& v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   T operator()(const F&f){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const F&f)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   std::list<T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   std::map<std::string,T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   std::set<T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   std::string operator()(std::list<T>&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(std::list<T>&v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   std::string operator()(std::set<T>&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(std::set<T>&v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   std::string operator()(std::unordered_set<T>&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(std::unordered_set<T>&v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   std::string operator()(std::vector<T>&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(std::vector<T>&v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   std::unordered_map<std::string,T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   std::unordered_set<T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
JKYi::LexicalCast::operator ()	JKYi/config.h	/^   std::vector<T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
JKYi::LexicalCast::operator ()	JKYi/log.cc	/^      LogDefine operator()(const std::string&str){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&str)
JKYi::LexicalCast::operator ()	JKYi/log.cc	/^     std::string operator()(const LogDefine&ld){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const LogDefine&ld)
JKYi::LexicalCast::operator ()	JKYi/tcp_server.h	/^    TcpServerConf operator() (const std::string& v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string& v)
JKYi::LexicalCast::operator ()	JKYi/tcp_server.h	/^    std::string operator() (TcpServerConf& conf){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(TcpServerConf& conf)
JKYi::LexicalCast::operator ()	tests/test_config.cc	/^    Person operator()(const std::string&s){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&s)
JKYi::LexicalCast::operator ()	tests/test_config.cc	/^   std::string operator()(Person&p) {$/;"	f	class:JKYi::LexicalCast	access:public	signature:(Person&p)
JKYi::Library	JKYi/library.h	/^class Library{$/;"	c	namespace:JKYi
JKYi::Library::GetModule	JKYi/library.cc	/^Module::ptr Library::GetModule(const std::string& path){$/;"	f	class:JKYi::Library	signature:(const std::string& path)
JKYi::Library::GetModule	JKYi/library.h	/^    static Module::ptr GetModule(const std::string& path);$/;"	p	class:JKYi::Library	access:public	signature:(const std::string& path)
JKYi::LineFormatItem	JKYi/log.cc	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::LineFormatItem::LineFormatItem	JKYi/log.cc	/^    LineFormatItem(const std::string& str = "") {}$/;"	f	class:JKYi::LineFormatItem	access:public	signature:(const std::string& str = Ó)
JKYi::ListAllMember	JKYi/config.cc	/^static void ListAllMember(const std::string&prefix,const YAML::Node&node,std::list<std::pair<std::string,const YAML::Node>>&output){$/;"	f	namespace:JKYi	signature:(const std::string&prefix,const YAML::Node&node,std::list<std::pair<std::string,const YAML::Node>>&output)
JKYi::LogAppender	JKYi/log.h	/^class LogAppender{$/;"	c	namespace:JKYi
JKYi::LogAppender::MutexType	JKYi/log.h	/^	typedef SpinLock MutexType;$/;"	t	class:JKYi::LogAppender	access:public
JKYi::LogAppender::getFormatter	JKYi/log.cc	/^LogFormatter::ptr LogAppender::getFormatter(){$/;"	f	class:JKYi::LogAppender	signature:()
JKYi::LogAppender::getFormatter	JKYi/log.h	/^    LogFormatter::ptr getFormatter(); $/;"	p	class:JKYi::LogAppender	access:public	signature:()
JKYi::LogAppender::getLevel	JKYi/log.h	/^    LogLevel::Level getLevel(LogLevel::Level level){return m_level;}$/;"	f	class:JKYi::LogAppender	access:public	signature:(LogLevel::Level level)
JKYi::LogAppender::log	JKYi/log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) = 0;$/;"	p	class:JKYi::LogAppender	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
JKYi::LogAppender::m_formatter	JKYi/log.h	/^    LogFormatter::ptr m_formatter;\/\/å®ä¹æ¥å¿è¾åºçæ ¼å¼$/;"	m	class:JKYi::LogAppender	access:protected
JKYi::LogAppender::m_hasFormatter	JKYi/log.h	/^    bool m_hasFormatter = false;$/;"	m	class:JKYi::LogAppender	access:protected
JKYi::LogAppender::m_level	JKYi/log.h	/^    LogLevel::Level m_level = LogLevel::DEBUG;\/\/é»è®¤ä¸ºdebugæ¨¡å¼$/;"	m	class:JKYi::LogAppender	access:protected
JKYi::LogAppender::m_mutex	JKYi/log.h	/^	MutexType m_mutex;$/;"	m	class:JKYi::LogAppender	access:protected
JKYi::LogAppender::ptr	JKYi/log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:JKYi::LogAppender	access:public
JKYi::LogAppender::setFormatter	JKYi/log.cc	/^void LogAppender::setFormatter(LogFormatter::ptr formatter){$/;"	f	class:JKYi::LogAppender	signature:(LogFormatter::ptr formatter)
JKYi::LogAppender::setFormatter	JKYi/log.h	/^    void setFormatter(LogFormatter::ptr formatter);$/;"	p	class:JKYi::LogAppender	access:public	signature:(LogFormatter::ptr formatter)
JKYi::LogAppender::setLevel	JKYi/log.h	/^    void setLevel(LogLevel::Level level){m_level = level;}$/;"	f	class:JKYi::LogAppender	access:public	signature:(LogLevel::Level level)
JKYi::LogAppender::toYamlString	JKYi/log.h	/^    virtual std::string toYamlString() = 0;$/;"	p	class:JKYi::LogAppender	access:public	signature:()
JKYi::LogAppender::~LogAppender	JKYi/log.h	/^    virtual ~LogAppender(){};\/\/ç±äºè¯¥ç±»éè¦ä½ä¸ºåºç±»ï¼æä»¥è¿éçè¯å°±ææå½æ°ç³æä¸ºèå½æ°ï¼é¿ååå­æ³æ¼$/;"	f	class:JKYi::LogAppender	access:public	signature:()
JKYi::LogAppenderDefine	JKYi/log.cc	/^struct LogAppenderDefine{$/;"	s	namespace:JKYi	file:
JKYi::LogAppenderDefine::file	JKYi/log.cc	/^    std::string file;$/;"	m	struct:JKYi::LogAppenderDefine	file:	access:public
JKYi::LogAppenderDefine::formatter	JKYi/log.cc	/^    std::string formatter;$/;"	m	struct:JKYi::LogAppenderDefine	file:	access:public
JKYi::LogAppenderDefine::level	JKYi/log.cc	/^    LogLevel::Level level=LogLevel::UNKNOW;$/;"	m	struct:JKYi::LogAppenderDefine	file:	access:public
JKYi::LogAppenderDefine::operator ==	JKYi/log.cc	/^    bool operator== (const LogAppenderDefine&rhv)const {$/;"	f	struct:JKYi::LogAppenderDefine	access:public	signature:(const LogAppenderDefine&rhv) const
JKYi::LogAppenderDefine::type	JKYi/log.cc	/^    int type=0;\/\/2è¡¨ç¤ºStdoutï¼1è¡¨ç¤ºfile$/;"	m	struct:JKYi::LogAppenderDefine	file:	access:public
JKYi::LogDefine	JKYi/log.cc	/^struct LogDefine{$/;"	s	namespace:JKYi	file:
JKYi::LogDefine::appenders	JKYi/log.cc	/^   std::vector<LogAppenderDefine>appenders;$/;"	m	struct:JKYi::LogDefine	file:	access:public
JKYi::LogDefine::formatter	JKYi/log.cc	/^   std::string formatter;$/;"	m	struct:JKYi::LogDefine	file:	access:public
JKYi::LogDefine::level	JKYi/log.cc	/^   LogLevel::Level level=LogLevel::UNKNOW;$/;"	m	struct:JKYi::LogDefine	file:	access:public
JKYi::LogDefine::name	JKYi/log.cc	/^   std::string name;$/;"	m	struct:JKYi::LogDefine	file:	access:public
JKYi::LogDefine::operator <	JKYi/log.cc	/^   bool operator< (const LogDefine&rhv)const{$/;"	f	struct:JKYi::LogDefine	access:public	signature:(const LogDefine&rhv) const
JKYi::LogDefine::operator ==	JKYi/log.cc	/^   bool operator== (const LogDefine&rhv)const {$/;"	f	struct:JKYi::LogDefine	access:public	signature:(const LogDefine&rhv) const
JKYi::LogEvent	JKYi/log.h	/^class LogEvent{$/;"	c	namespace:JKYi
JKYi::LogEvent::LogEvent	JKYi/log.cc	/^LogEvent::LogEvent(std::shared_ptr<Logger>logger$/;"	f	class:JKYi::LogEvent	signature:(std::shared_ptr<Logger>logger ,JKYi::LogLevel::Level level ,const char*file ,int32_t line ,uint32_t elapse ,uint32_t thread_id ,uint32_t fiber_id ,uint32_t time ,const std::string& threadName)
JKYi::LogEvent::LogEvent	JKYi/log.h	/^   LogEvent(std::shared_ptr<Logger>logger$/;"	p	class:JKYi::LogEvent	access:public	signature:(std::shared_ptr<Logger>logger ,LogLevel::Level level ,const char*file ,int32_t line ,uint32_t elapse ,uint32_t thread_id ,uint32_t fiber_id ,uint32_t time ,const std::string&threadName)
JKYi::LogEvent::getContent	JKYi/log.h	/^   std::string getContent() const{return m_ss.str();}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
JKYi::LogEvent::getElapse	JKYi/log.h	/^   uint32_t getElapse()const {return m_elapse;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
JKYi::LogEvent::getFiberId	JKYi/log.h	/^   uint32_t getFiberId()const {return m_fiberId;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
JKYi::LogEvent::getFile	JKYi/log.h	/^   const char* getFile()const {return m_file;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
JKYi::LogEvent::getLevel	JKYi/log.h	/^   LogLevel::Level getLevel() const {return m_level;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
JKYi::LogEvent::getLine	JKYi/log.h	/^   int32_t getLine()const {return m_line;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
JKYi::LogEvent::getLogger	JKYi/log.h	/^   std::shared_ptr<Logger> getLogger()const {return m_logger;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
JKYi::LogEvent::getSS	JKYi/log.h	/^   std::stringstream& getSS() { return m_ss;}$/;"	f	class:JKYi::LogEvent	access:public	signature:()
JKYi::LogEvent::getThreadId	JKYi/log.h	/^   uint32_t getThreadId()const {return m_threadId;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
JKYi::LogEvent::getThreadName	JKYi/log.h	/^   const std::string& getThreadName()const {return m_threadName;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
JKYi::LogEvent::getTime	JKYi/log.h	/^   uint32_t getTime()const{return m_time;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
JKYi::LogEvent::m_elapse	JKYi/log.h	/^   uint32_t m_elapse = 0;\/\/ç¨åºå¯å¨å¼å§å°ç°å¨çæ¯«ç§æ°$/;"	m	class:JKYi::LogEvent	access:private
JKYi::LogEvent::m_fiberId	JKYi/log.h	/^   uint32_t m_fiberId = 0;\/\/åç¨ID$/;"	m	class:JKYi::LogEvent	access:private
JKYi::LogEvent::m_file	JKYi/log.h	/^   const char* m_file = nullptr;\/\/ç®æ æ¥å¿æä»¶çåç§°$/;"	m	class:JKYi::LogEvent	access:private
JKYi::LogEvent::m_level	JKYi/log.h	/^   LogLevel::Level m_level;$/;"	m	class:JKYi::LogEvent	access:private
JKYi::LogEvent::m_line	JKYi/log.h	/^   int32_t m_line = 0;\/\/è¡å·$/;"	m	class:JKYi::LogEvent	access:private
JKYi::LogEvent::m_logger	JKYi/log.h	/^   std::shared_ptr<Logger>m_logger;$/;"	m	class:JKYi::LogEvent	access:private
JKYi::LogEvent::m_ss	JKYi/log.h	/^   std::stringstream m_ss;\/\/æµï¼ç¨æ¥å­å¨è¦è¾åºçæ¥å¿$/;"	m	class:JKYi::LogEvent	access:private
JKYi::LogEvent::m_threadId	JKYi/log.h	/^   uint32_t m_threadId = 0;\/\/çº¿ç¨ID$/;"	m	class:JKYi::LogEvent	access:private
JKYi::LogEvent::m_threadName	JKYi/log.h	/^   std::string m_threadName;$/;"	m	class:JKYi::LogEvent	access:private
JKYi::LogEvent::m_time	JKYi/log.h	/^   uint32_t m_time = 0;\/\/æ¶é´æ³$/;"	m	class:JKYi::LogEvent	access:private
JKYi::LogEvent::ptr	JKYi/log.h	/^   typedef std::shared_ptr<LogEvent> ptr; $/;"	t	class:JKYi::LogEvent	access:public
JKYi::LogEventWrap	JKYi/log.h	/^class LogEventWrap{$/;"	c	namespace:JKYi
JKYi::LogEventWrap::LogEventWrap	JKYi/log.cc	/^LogEventWrap::LogEventWrap(LogEvent::ptr event)$/;"	f	class:JKYi::LogEventWrap	signature:(LogEvent::ptr event)
JKYi::LogEventWrap::LogEventWrap	JKYi/log.h	/^   LogEventWrap(LogEvent::ptr event);$/;"	p	class:JKYi::LogEventWrap	access:public	signature:(LogEvent::ptr event)
JKYi::LogEventWrap::getEvent	JKYi/log.h	/^   LogEvent::ptr getEvent()const {return m_event;}$/;"	f	class:JKYi::LogEventWrap	access:public	signature:() const
JKYi::LogEventWrap::getSS	JKYi/log.cc	/^std::stringstream& LogEventWrap::getSS(){$/;"	f	class:JKYi::LogEventWrap	signature:()
JKYi::LogEventWrap::getSS	JKYi/log.h	/^   std::stringstream& getSS();$/;"	p	class:JKYi::LogEventWrap	access:public	signature:()
JKYi::LogEventWrap::m_event	JKYi/log.h	/^   LogEvent::ptr m_event;$/;"	m	class:JKYi::LogEventWrap	access:private
JKYi::LogEventWrap::~LogEventWrap	JKYi/log.cc	/^LogEventWrap::~LogEventWrap(){$/;"	f	class:JKYi::LogEventWrap	signature:()
JKYi::LogEventWrap::~LogEventWrap	JKYi/log.h	/^   ~LogEventWrap();$/;"	p	class:JKYi::LogEventWrap	access:public	signature:()
JKYi::LogFormatter	JKYi/log.h	/^class LogFormatter{$/;"	c	namespace:JKYi
JKYi::LogFormatter::FormatItem	JKYi/log.h	/^    class FormatItem{$/;"	c	class:JKYi::LogFormatter	access:public
JKYi::LogFormatter::FormatItem::format	JKYi/log.h	/^       virtual void format(std::ostream&os,std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event) = 0;$/;"	p	class:JKYi::LogFormatter::FormatItem	access:public	signature:(std::ostream&os,std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event)
JKYi::LogFormatter::FormatItem::ptr	JKYi/log.h	/^       typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:JKYi::LogFormatter::FormatItem	access:public
JKYi::LogFormatter::FormatItem::~FormatItem	JKYi/log.h	/^       virtual ~FormatItem(){}$/;"	f	class:JKYi::LogFormatter::FormatItem	access:public	signature:()
JKYi::LogFormatter::LogFormatter	JKYi/log.cc	/^LogFormatter::LogFormatter(const std::string&pattern)$/;"	f	class:JKYi::LogFormatter	signature:(const std::string&pattern)
JKYi::LogFormatter::LogFormatter	JKYi/log.h	/^    LogFormatter(const std::string&pattern);$/;"	p	class:JKYi::LogFormatter	access:public	signature:(const std::string&pattern)
JKYi::LogFormatter::format	JKYi/log.cc	/^std::string LogFormatter::format(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event){$/;"	f	class:JKYi::LogFormatter	signature:(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event)
JKYi::LogFormatter::format	JKYi/log.h	/^    std::string format(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event);$/;"	p	class:JKYi::LogFormatter	access:public	signature:(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event)
JKYi::LogFormatter::getPattern	JKYi/log.h	/^    const std::string& getPattern()const{$/;"	f	class:JKYi::LogFormatter	access:public	signature:() const
JKYi::LogFormatter::init	JKYi/log.cc	/^void LogFormatter::init(){$/;"	f	class:JKYi::LogFormatter	signature:()
JKYi::LogFormatter::init	JKYi/log.h	/^    void init();$/;"	p	class:JKYi::LogFormatter	access:public	signature:()
JKYi::LogFormatter::isError	JKYi/log.h	/^    bool isError()const{return m_error;}$/;"	f	class:JKYi::LogFormatter	access:public	signature:() const
JKYi::LogFormatter::m_error	JKYi/log.h	/^    bool m_error = false;$/;"	m	class:JKYi::LogFormatter	access:private
JKYi::LogFormatter::m_items	JKYi/log.h	/^    std::vector<FormatItem::ptr>m_items;$/;"	m	class:JKYi::LogFormatter	access:private
JKYi::LogFormatter::m_pattern	JKYi/log.h	/^    std::string m_pattern;$/;"	m	class:JKYi::LogFormatter	access:private
JKYi::LogFormatter::ptr	JKYi/log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:JKYi::LogFormatter	access:public
JKYi::LogIniter	JKYi/log.cc	/^struct LogIniter{$/;"	s	namespace:JKYi	file:
JKYi::LogIniter::LogIniter	JKYi/log.cc	/^    LogIniter(){$/;"	f	struct:JKYi::LogIniter	access:public	signature:()
JKYi::LogLevel	JKYi/log.h	/^class LogLevel{$/;"	c	namespace:JKYi
JKYi::LogLevel::DEBUG	JKYi/log.h	/^     DEBUG = 1,$/;"	e	enum:JKYi::LogLevel::Level
JKYi::LogLevel::ERROR	JKYi/log.h	/^     ERROR = 4,$/;"	e	enum:JKYi::LogLevel::Level
JKYi::LogLevel::FATAL	JKYi/log.h	/^     FATAL = 5$/;"	e	enum:JKYi::LogLevel::Level
JKYi::LogLevel::FromString	JKYi/log.cc	/^ LogLevel::Level LogLevel::FromString(const std::string&str){$/;"	f	class:JKYi::LogLevel	signature:(const std::string&str)
JKYi::LogLevel::FromString	JKYi/log.h	/^   static LogLevel::Level FromString(const std::string&str);$/;"	p	class:JKYi::LogLevel	access:public	signature:(const std::string&str)
JKYi::LogLevel::INFO	JKYi/log.h	/^     INFO = 2,$/;"	e	enum:JKYi::LogLevel::Level
JKYi::LogLevel::Level	JKYi/log.h	/^   enum Level{$/;"	g	class:JKYi::LogLevel	access:public
JKYi::LogLevel::ToString	JKYi/log.cc	/^ const char* LogLevel::ToString(LogLevel::Level level){$/;"	f	class:JKYi::LogLevel	signature:(LogLevel::Level level)
JKYi::LogLevel::ToString	JKYi/log.h	/^   static const char* ToString(LogLevel::Level level);$/;"	p	class:JKYi::LogLevel	access:public	signature:(LogLevel::Level level)
JKYi::LogLevel::UNKNOW	JKYi/log.h	/^     UNKNOW = 0,$/;"	e	enum:JKYi::LogLevel::Level
JKYi::LogLevel::WARN	JKYi/log.h	/^     WARN = 3,$/;"	e	enum:JKYi::LogLevel::Level
JKYi::Logger	JKYi/log.h	/^class Logger:public std::enable_shared_from_this<Logger>{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this
JKYi::Logger::Logger	JKYi/log.cc	/^Logger::Logger(const std::string& name)$/;"	f	class:JKYi::Logger	signature:(const std::string& name)
JKYi::Logger::Logger	JKYi/log.h	/^    Logger(const std::string& name="root");$/;"	p	class:JKYi::Logger	access:public	signature:(const std::string& name=Ó)
JKYi::Logger::MutexType	JKYi/log.h	/^	typedef SpinLock MutexType;$/;"	t	class:JKYi::Logger	access:public
JKYi::Logger::addAppender	JKYi/log.cc	/^void Logger::addAppender(LogAppender::ptr appender){$/;"	f	class:JKYi::Logger	signature:(LogAppender::ptr appender)
JKYi::Logger::addAppender	JKYi/log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:JKYi::Logger	access:public	signature:(LogAppender::ptr appender)
JKYi::Logger::clearAppender	JKYi/log.cc	/^void Logger::clearAppender(){$/;"	f	class:JKYi::Logger	signature:()
JKYi::Logger::clearAppender	JKYi/log.h	/^    void clearAppender();$/;"	p	class:JKYi::Logger	access:public	signature:()
JKYi::Logger::debug	JKYi/log.cc	/^void Logger::debug(LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogEvent::ptr event)
JKYi::Logger::debug	JKYi/log.h	/^    void debug(LogEvent::ptr event);\/\/è¾åºdebugçº§å«çæ¥å¿$/;"	p	class:JKYi::Logger	access:public	signature:(LogEvent::ptr event)
JKYi::Logger::delAppender	JKYi/log.cc	/^void Logger::delAppender(LogAppender::ptr appender){$/;"	f	class:JKYi::Logger	signature:(LogAppender::ptr appender)
JKYi::Logger::delAppender	JKYi/log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:JKYi::Logger	access:public	signature:(LogAppender::ptr appender)
JKYi::Logger::error	JKYi/log.cc	/^void Logger::error(LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogEvent::ptr event)
JKYi::Logger::error	JKYi/log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:JKYi::Logger	access:public	signature:(LogEvent::ptr event)
JKYi::Logger::fatal	JKYi/log.cc	/^void Logger::fatal(LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogEvent::ptr event)
JKYi::Logger::fatal	JKYi/log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:JKYi::Logger	access:public	signature:(LogEvent::ptr event)
JKYi::Logger::getFormatter	JKYi/log.cc	/^LogFormatter::ptr Logger::getFormatter(){$/;"	f	class:JKYi::Logger	signature:()
JKYi::Logger::getFormatter	JKYi/log.h	/^    LogFormatter::ptr getFormatter();$/;"	p	class:JKYi::Logger	access:public	signature:()
JKYi::Logger::getLevel	JKYi/log.h	/^    LogLevel::Level getLevel()const {return m_level;}$/;"	f	class:JKYi::Logger	access:public	signature:() const
JKYi::Logger::getName	JKYi/log.h	/^    std::string getName()const {return m_name;}$/;"	f	class:JKYi::Logger	access:public	signature:() const
JKYi::Logger::info	JKYi/log.cc	/^void Logger::info(LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogEvent::ptr event)
JKYi::Logger::info	JKYi/log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:JKYi::Logger	access:public	signature:(LogEvent::ptr event)
JKYi::Logger::log	JKYi/log.cc	/^void Logger::log(LogLevel::Level level,LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogLevel::Level level,LogEvent::ptr event)
JKYi::Logger::log	JKYi/log.h	/^    void log(LogLevel::Level level,LogEvent::ptr event);$/;"	p	class:JKYi::Logger	access:public	signature:(LogLevel::Level level,LogEvent::ptr event)
JKYi::Logger::m_appenders	JKYi/log.h	/^    std::list<LogAppender::ptr>m_appenders;\/\/Appenderéå$/;"	m	class:JKYi::Logger	access:private
JKYi::Logger::m_formatter	JKYi/log.h	/^    LogFormatter::ptr m_formatter;\/\/æ¥å¿çè¾åºæ ¼å¼$/;"	m	class:JKYi::Logger	access:private
JKYi::Logger::m_level	JKYi/log.h	/^    LogLevel::Level m_level;  \/\/æ¥å¿ççº§å«ï¼åªææ»¡è¶³çº§å«çæ¥å¿æä¼è¢«è¾åº$/;"	m	class:JKYi::Logger	access:private
JKYi::Logger::m_mutex	JKYi/log.h	/^	MutexType m_mutex;$/;"	m	class:JKYi::Logger	access:private
JKYi::Logger::m_name	JKYi/log.h	/^    std::string m_name;       \/\/æ¥å¿çåç§°$/;"	m	class:JKYi::Logger	access:private
JKYi::Logger::m_root	JKYi/log.h	/^    Logger::ptr m_root;$/;"	m	class:JKYi::Logger	access:private
JKYi::Logger::ptr	JKYi/log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:JKYi::Logger	access:public
JKYi::Logger::setFormatter	JKYi/log.cc	/^void Logger::setFormatter(LogFormatter::ptr formatter){$/;"	f	class:JKYi::Logger	signature:(LogFormatter::ptr formatter)
JKYi::Logger::setFormatter	JKYi/log.cc	/^void Logger::setFormatter(const std::string&str){$/;"	f	class:JKYi::Logger	signature:(const std::string&str)
JKYi::Logger::setFormatter	JKYi/log.h	/^    void setFormatter(LogFormatter::ptr formatter);$/;"	p	class:JKYi::Logger	access:public	signature:(LogFormatter::ptr formatter)
JKYi::Logger::setFormatter	JKYi/log.h	/^    void setFormatter(const std::string &str);$/;"	p	class:JKYi::Logger	access:public	signature:(const std::string &str)
JKYi::Logger::setLevel	JKYi/log.h	/^    void setLevel(LogLevel::Level level){m_level=level;}$/;"	f	class:JKYi::Logger	access:public	signature:(LogLevel::Level level)
JKYi::Logger::toYamlString	JKYi/log.cc	/^std::string Logger::toYamlString(){$/;"	f	class:JKYi::Logger	signature:()
JKYi::Logger::toYamlString	JKYi/log.h	/^    std::string toYamlString();$/;"	p	class:JKYi::Logger	access:public	signature:()
JKYi::Logger::warn	JKYi/log.cc	/^void Logger::warn(LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogEvent::ptr event)
JKYi::Logger::warn	JKYi/log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:JKYi::Logger	access:public	signature:(LogEvent::ptr event)
JKYi::LoggerManager	JKYi/log.h	/^class LoggerManager{$/;"	c	namespace:JKYi
JKYi::LoggerManager::LoggerManager	JKYi/log.cc	/^LoggerManager::LoggerManager(){$/;"	f	class:JKYi::LoggerManager	signature:()
JKYi::LoggerManager::LoggerManager	JKYi/log.h	/^     LoggerManager();$/;"	p	class:JKYi::LoggerManager	access:public	signature:()
JKYi::LoggerManager::MutexType	JKYi/log.h	/^     typedef SpinLock MutexType;$/;"	t	class:JKYi::LoggerManager	access:public
JKYi::LoggerManager::getLogger	JKYi/log.cc	/^Logger::ptr LoggerManager::getLogger(const std::string&name){$/;"	f	class:JKYi::LoggerManager	signature:(const std::string&name)
JKYi::LoggerManager::getLogger	JKYi/log.h	/^     Logger::ptr getLogger(const std::string&name);$/;"	p	class:JKYi::LoggerManager	access:public	signature:(const std::string&name)
JKYi::LoggerManager::getRoot	JKYi/log.h	/^     Logger::ptr getRoot()const {return m_root;}$/;"	f	class:JKYi::LoggerManager	access:public	signature:() const
JKYi::LoggerManager::init	JKYi/log.cc	/^void LoggerManager::init(){$/;"	f	class:JKYi::LoggerManager	signature:()
JKYi::LoggerManager::init	JKYi/log.h	/^     void init();$/;"	p	class:JKYi::LoggerManager	access:public	signature:()
JKYi::LoggerManager::m_loggers	JKYi/log.h	/^    std::map<std::string,Logger::ptr>m_loggers;$/;"	m	class:JKYi::LoggerManager	access:private
JKYi::LoggerManager::m_mutex	JKYi/log.h	/^	MutexType m_mutex;$/;"	m	class:JKYi::LoggerManager	access:private
JKYi::LoggerManager::m_root	JKYi/log.h	/^    Logger::ptr m_root;$/;"	m	class:JKYi::LoggerManager	access:private
JKYi::LoggerManager::toYamlString	JKYi/log.cc	/^std::string LoggerManager::toYamlString(){$/;"	f	class:JKYi::LoggerManager	signature:()
JKYi::LoggerManager::toYamlString	JKYi/log.h	/^     std::string toYamlString();$/;"	p	class:JKYi::LoggerManager	access:public	signature:()
JKYi::LoggerMgr	JKYi/log.h	/^typedef JKYi::Singleton<LoggerManager> LoggerMgr;$/;"	t	namespace:JKYi
JKYi::MAX_PATH_LEN	JKYi/address.cc	/^static const size_t MAX_PATH_LEN=sizeof(((sockaddr_un*)0)->sun_path)-1;$/;"	m	namespace:JKYi	file:
JKYi::MallocStackAllocator	JKYi/fiber.cc	/^class MallocStackAllocator{$/;"	c	namespace:JKYi	file:
JKYi::MallocStackAllocator::Alloc	JKYi/fiber.cc	/^   static void* Alloc(size_t size){$/;"	f	class:JKYi::MallocStackAllocator	access:public	signature:(size_t size)
JKYi::MallocStackAllocator::Dealloc	JKYi/fiber.cc	/^   static void Dealloc(void *ptr,size_t size){$/;"	f	class:JKYi::MallocStackAllocator	access:public	signature:(void *ptr,size_t size)
JKYi::Message	JKYi/protocol.h	/^class Message{$/;"	c	namespace:JKYi
JKYi::Message::MessageType	JKYi/protocol.h	/^    enum MessageType{$/;"	g	class:JKYi::Message	access:public
JKYi::Message::NOTIFY	JKYi/protocol.h	/^        NOTIFY = 3,$/;"	e	enum:JKYi::Message::MessageType
JKYi::Message::REQUEST	JKYi/protocol.h	/^        REQUEST = 1,$/;"	e	enum:JKYi::Message::MessageType
JKYi::Message::RESPONSE	JKYi/protocol.h	/^        RESPONSE = 2,$/;"	e	enum:JKYi::Message::MessageType
JKYi::Message::getName	JKYi/protocol.h	/^    virtual const std::string& getName()const = 0;$/;"	p	class:JKYi::Message	access:public	signature:() const
JKYi::Message::getType	JKYi/protocol.h	/^    virtual int32_t getType()const = 0;$/;"	p	class:JKYi::Message	access:public	signature:() const
JKYi::Message::parseFromByteArray	JKYi/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) = 0;$/;"	p	class:JKYi::Message	access:public	signature:(ByteArray::ptr bytearray)
JKYi::Message::ptr	JKYi/protocol.h	/^    typedef std::shared_ptr<Message> ptr;$/;"	t	class:JKYi::Message	access:public
JKYi::Message::serializeToByteArray	JKYi/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) = 0;$/;"	p	class:JKYi::Message	access:public	signature:(ByteArray::ptr bytearray)
JKYi::Message::toByteArray	JKYi/protocol.cc	/^ByteArray::ptr Message::toByteArray(){$/;"	f	class:JKYi::Message	signature:()
JKYi::Message::toByteArray	JKYi/protocol.h	/^    virtual ByteArray::ptr toByteArray();$/;"	p	class:JKYi::Message	access:public	signature:()
JKYi::Message::toString	JKYi/protocol.h	/^    virtual std::string toString()const = 0;$/;"	p	class:JKYi::Message	access:public	signature:() const
JKYi::Message::~Message	JKYi/protocol.h	/^    virtual ~Message() {}$/;"	f	class:JKYi::Message	access:public	signature:()
JKYi::MessageDecoder	JKYi/protocol.h	/^class MessageDecoder{$/;"	c	namespace:JKYi
JKYi::MessageDecoder::parseFrom	JKYi/protocol.h	/^    virtual Message::ptr parseFrom(Stream::ptr stream) = 0;$/;"	p	class:JKYi::MessageDecoder	access:public	signature:(Stream::ptr stream)
JKYi::MessageDecoder::ptr	JKYi/protocol.h	/^    typedef std::shared_ptr<MessageDecoder> ptr;$/;"	t	class:JKYi::MessageDecoder	access:public
JKYi::MessageDecoder::serializeTo	JKYi/protocol.h	/^    virtual int32_t serializeTo(Stream::ptr stream,Message::ptr msg) = 0;$/;"	p	class:JKYi::MessageDecoder	access:public	signature:(Stream::ptr stream,Message::ptr msg)
JKYi::MessageDecoder::~MessageDecoder	JKYi/protocol.h	/^    virtual ~MessageDecoder(){}$/;"	f	class:JKYi::MessageDecoder	access:public	signature:()
JKYi::MessageFormatItem	JKYi/log.cc	/^class MessageFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::MessageFormatItem::MessageFormatItem	JKYi/log.cc	/^   MessageFormatItem(const std::string& str = ""){}$/;"	f	class:JKYi::MessageFormatItem	access:public	signature:(const std::string& str = Ó)
JKYi::Module	JKYi/module.h	/^class Module{$/;"	c	namespace:JKYi
JKYi::Module::MODULE	JKYi/module.h	/^        MODULE = 0,$/;"	e	enum:JKYi::Module::Type
JKYi::Module::Module	JKYi/module.cc	/^Module::Module(const std::string& name,$/;"	f	class:JKYi::Module	signature:(const std::string& name, const std::string& version, const std::string& filename, uint32_t type)
JKYi::Module::Module	JKYi/module.h	/^    Module(const std::string& name,$/;"	p	class:JKYi::Module	access:public	signature:(const std::string& name, const std::string& version, const std::string& filename, uint32_t type = MODULE)
JKYi::Module::Type	JKYi/module.h	/^    enum Type{$/;"	g	class:JKYi::Module	access:public
JKYi::Module::getFilename	JKYi/module.h	/^    const std::string& getFilename()const { return m_filename; }$/;"	f	class:JKYi::Module	access:public	signature:() const
JKYi::Module::getId	JKYi/module.h	/^    const std::string& getId()const { return m_id; }$/;"	f	class:JKYi::Module	access:public	signature:() const
JKYi::Module::getName	JKYi/module.h	/^    const std::string& getName()const { return m_name; }$/;"	f	class:JKYi::Module	access:public	signature:() const
JKYi::Module::getType	JKYi/module.h	/^    uint32_t getType()const { return m_type; }$/;"	f	class:JKYi::Module	access:public	signature:() const
JKYi::Module::getVersion	JKYi/module.h	/^    const std::string& getVersion()const { return m_version; }$/;"	f	class:JKYi::Module	access:public	signature:() const
JKYi::Module::handleNotify	JKYi/module.cc	/^bool Module::handleNotify(JKYi::Message::ptr notify,JKYi::Stream::ptr stream){$/;"	f	class:JKYi::Module	signature:(JKYi::Message::ptr notify,JKYi::Stream::ptr stream)
JKYi::Module::handleNotify	JKYi/module.h	/^    virtual bool handleNotify(JKYi::Message::ptr notify,JKYi::Stream::ptr stream);$/;"	p	class:JKYi::Module	access:public	signature:(JKYi::Message::ptr notify,JKYi::Stream::ptr stream)
JKYi::Module::handleRequest	JKYi/module.cc	/^bool Module::handleRequest(JKYi::Message::ptr req,JKYi::Message::ptr rsp,JKYi::Stream::ptr stream){$/;"	f	class:JKYi::Module	signature:(JKYi::Message::ptr req,JKYi::Message::ptr rsp,JKYi::Stream::ptr stream)
JKYi::Module::handleRequest	JKYi/module.h	/^    virtual bool handleRequest(JKYi::Message::ptr req,JKYi::Message::ptr rsp,JKYi::Stream::ptr stream);$/;"	p	class:JKYi::Module	access:public	signature:(JKYi::Message::ptr req,JKYi::Message::ptr rsp,JKYi::Stream::ptr stream)
JKYi::Module::m_filename	JKYi/module.h	/^   std::string m_filename;$/;"	m	class:JKYi::Module	access:protected
JKYi::Module::m_id	JKYi/module.h	/^   std::string m_id;$/;"	m	class:JKYi::Module	access:protected
JKYi::Module::m_name	JKYi/module.h	/^   std::string m_name;$/;"	m	class:JKYi::Module	access:protected
JKYi::Module::m_type	JKYi/module.h	/^   uint32_t m_type;$/;"	m	class:JKYi::Module	access:protected
JKYi::Module::m_version	JKYi/module.h	/^   std::string m_version;$/;"	m	class:JKYi::Module	access:protected
JKYi::Module::onAfterArgsParse	JKYi/module.cc	/^void Module::onAfterArgsParse(int argc,char ** argv){$/;"	f	class:JKYi::Module	signature:(int argc,char ** argv)
JKYi::Module::onAfterArgsParse	JKYi/module.h	/^    virtual void onAfterArgsParse(int argc,char ** argv);$/;"	p	class:JKYi::Module	access:public	signature:(int argc,char ** argv)
JKYi::Module::onBeforeArgsParse	JKYi/module.cc	/^void Module::onBeforeArgsParse(int argc,char ** argv){$/;"	f	class:JKYi::Module	signature:(int argc,char ** argv)
JKYi::Module::onBeforeArgsParse	JKYi/module.h	/^    virtual void onBeforeArgsParse(int argc,char ** argv);$/;"	p	class:JKYi::Module	access:public	signature:(int argc,char ** argv)
JKYi::Module::onConnect	JKYi/module.cc	/^bool Module::onConnect(JKYi::Stream::ptr stream){$/;"	f	class:JKYi::Module	signature:(JKYi::Stream::ptr stream)
JKYi::Module::onConnect	JKYi/module.h	/^    virtual bool onConnect(JKYi::Stream::ptr stream);$/;"	p	class:JKYi::Module	access:public	signature:(JKYi::Stream::ptr stream)
JKYi::Module::onDisconnect	JKYi/module.cc	/^bool Module::onDisconnect(JKYi::Stream::ptr stream){$/;"	f	class:JKYi::Module	signature:(JKYi::Stream::ptr stream)
JKYi::Module::onDisconnect	JKYi/module.h	/^    virtual bool onDisconnect(JKYi::Stream::ptr stream);$/;"	p	class:JKYi::Module	access:public	signature:(JKYi::Stream::ptr stream)
JKYi::Module::onLoad	JKYi/module.cc	/^bool Module::onLoad(){$/;"	f	class:JKYi::Module	signature:()
JKYi::Module::onLoad	JKYi/module.h	/^    virtual bool onLoad();$/;"	p	class:JKYi::Module	access:public	signature:()
JKYi::Module::onServerReady	JKYi/module.cc	/^bool Module::onServerReady(){$/;"	f	class:JKYi::Module	signature:()
JKYi::Module::onServerReady	JKYi/module.h	/^    virtual bool onServerReady();$/;"	p	class:JKYi::Module	access:public	signature:()
JKYi::Module::onServerUp	JKYi/module.cc	/^bool Module::onServerUp(){$/;"	f	class:JKYi::Module	signature:()
JKYi::Module::onServerUp	JKYi/module.h	/^    virtual bool onServerUp();$/;"	p	class:JKYi::Module	access:public	signature:()
JKYi::Module::onUnload	JKYi/module.cc	/^bool Module::onUnload(){$/;"	f	class:JKYi::Module	signature:()
JKYi::Module::onUnload	JKYi/module.h	/^    virtual bool onUnload();$/;"	p	class:JKYi::Module	access:public	signature:()
JKYi::Module::ptr	JKYi/module.h	/^    typedef std::shared_ptr<Module> ptr;$/;"	t	class:JKYi::Module	access:public
JKYi::Module::setFilename	JKYi/module.h	/^    void setFilename(const std::string& v) { m_filename = v; }$/;"	f	class:JKYi::Module	access:public	signature:(const std::string& v)
JKYi::Module::statusString	JKYi/module.cc	/^std::string Module::statusString(){$/;"	f	class:JKYi::Module	signature:()
JKYi::Module::statusString	JKYi/module.h	/^    virtual std::string statusString();$/;"	p	class:JKYi::Module	access:public	signature:()
JKYi::Module::~Module	JKYi/module.h	/^    virtual ~Module(){}$/;"	f	class:JKYi::Module	access:public	signature:()
JKYi::ModuleCloser	JKYi/library.cc	/^class ModuleCloser{$/;"	c	namespace:JKYi	file:
JKYi::ModuleCloser::ModuleCloser	JKYi/library.cc	/^    ModuleCloser(void * handle,destroy_module d)$/;"	f	class:JKYi::ModuleCloser	access:public	signature:(void * handle,destroy_module d)
JKYi::ModuleCloser::m_destroy	JKYi/library.cc	/^    destroy_module m_destroy;$/;"	m	class:JKYi::ModuleCloser	file:	access:private
JKYi::ModuleCloser::m_handle	JKYi/library.cc	/^    void * m_handle;$/;"	m	class:JKYi::ModuleCloser	file:	access:private
JKYi::ModuleCloser::operator ()	JKYi/library.cc	/^    void operator()(Module * module){$/;"	f	class:JKYi::ModuleCloser	access:public	signature:(Module * module)
JKYi::ModuleManager	JKYi/module.h	/^class ModuleManager{$/;"	c	namespace:JKYi
JKYi::ModuleManager::ModuleManager	JKYi/module.cc	/^ModuleManager::ModuleManager(){$/;"	f	class:JKYi::ModuleManager	signature:()
JKYi::ModuleManager::ModuleManager	JKYi/module.h	/^    ModuleManager();$/;"	p	class:JKYi::ModuleManager	access:public	signature:()
JKYi::ModuleManager::RWMutexType	JKYi/module.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:JKYi::ModuleManager	access:public
JKYi::ModuleManager::add	JKYi/module.cc	/^void ModuleManager::add(Module::ptr m){$/;"	f	class:JKYi::ModuleManager	signature:(Module::ptr m)
JKYi::ModuleManager::add	JKYi/module.h	/^    void add(Module::ptr m);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(Module::ptr m)
JKYi::ModuleManager::del	JKYi/module.cc	/^void ModuleManager::del(const std::string& name){$/;"	f	class:JKYi::ModuleManager	signature:(const std::string& name)
JKYi::ModuleManager::del	JKYi/module.h	/^    void del(const std::string& name);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(const std::string& name)
JKYi::ModuleManager::delAll	JKYi/module.cc	/^void ModuleManager::delAll(){$/;"	f	class:JKYi::ModuleManager	signature:()
JKYi::ModuleManager::delAll	JKYi/module.h	/^    void delAll();$/;"	p	class:JKYi::ModuleManager	access:public	signature:()
JKYi::ModuleManager::foreach	JKYi/module.cc	/^void ModuleManager::foreach(uint32_t type,std::function<void(Module::ptr)>cb){$/;"	f	class:JKYi::ModuleManager	signature:(uint32_t type,std::function<void(Module::ptr)>cb)
JKYi::ModuleManager::foreach	JKYi/module.h	/^    void foreach(uint32_t type,std::function<void (Module::ptr)>cb);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(uint32_t type,std::function<void (Module::ptr)>cb)
JKYi::ModuleManager::get	JKYi/module.cc	/^Module::ptr ModuleManager::get(const std::string& name){$/;"	f	class:JKYi::ModuleManager	signature:(const std::string& name)
JKYi::ModuleManager::get	JKYi/module.h	/^    Module::ptr get(const std::string& name);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(const std::string& name)
JKYi::ModuleManager::init	JKYi/module.cc	/^void ModuleManager::init(){$/;"	f	class:JKYi::ModuleManager	signature:()
JKYi::ModuleManager::init	JKYi/module.h	/^    void init();$/;"	p	class:JKYi::ModuleManager	access:public	signature:()
JKYi::ModuleManager::initModule	JKYi/module.cc	/^void ModuleManager::initModule(const std::string& path){$/;"	f	class:JKYi::ModuleManager	signature:(const std::string& path)
JKYi::ModuleManager::initModule	JKYi/module.h	/^    void initModule(const std::string& path);$/;"	p	class:JKYi::ModuleManager	access:private	signature:(const std::string& path)
JKYi::ModuleManager::listAll	JKYi/module.cc	/^void ModuleManager::listAll(std::vector<Module::ptr>& ms){$/;"	f	class:JKYi::ModuleManager	signature:(std::vector<Module::ptr>& ms)
JKYi::ModuleManager::listAll	JKYi/module.h	/^    void listAll(std::vector<Module::ptr>& ms);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(std::vector<Module::ptr>& ms)
JKYi::ModuleManager::listByType	JKYi/module.cc	/^void ModuleManager::listByType(uint32_t type,std::vector<Module::ptr>& ms){$/;"	f	class:JKYi::ModuleManager	signature:(uint32_t type,std::vector<Module::ptr>& ms)
JKYi::ModuleManager::listByType	JKYi/module.h	/^    void listByType(uint32_t type,std::vector<Module::ptr>& ms);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(uint32_t type,std::vector<Module::ptr>& ms)
JKYi::ModuleManager::m_modules	JKYi/module.h	/^    std::unordered_map<std::string,Module::ptr> m_modules;$/;"	m	class:JKYi::ModuleManager	access:private
JKYi::ModuleManager::m_mutex	JKYi/module.h	/^    RWMutexType m_mutex; $/;"	m	class:JKYi::ModuleManager	access:private
JKYi::ModuleManager::m_type2Modules	JKYi/module.h	/^    std::unordered_map<uint32_t,std::unordered_map<std::string,Module::ptr> > m_type2Modules;$/;"	m	class:JKYi::ModuleManager	access:private
JKYi::ModuleManager::onConnect	JKYi/module.cc	/^void ModuleManager::onConnect(Stream::ptr stream){$/;"	f	class:JKYi::ModuleManager	signature:(Stream::ptr stream)
JKYi::ModuleManager::onConnect	JKYi/module.h	/^    void onConnect(Stream::ptr stream);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(Stream::ptr stream)
JKYi::ModuleManager::onDisconnect	JKYi/module.cc	/^void ModuleManager::onDisconnect(Stream::ptr stream){$/;"	f	class:JKYi::ModuleManager	signature:(Stream::ptr stream)
JKYi::ModuleManager::onDisconnect	JKYi/module.h	/^    void onDisconnect(Stream::ptr stream);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(Stream::ptr stream)
JKYi::ModuleMgr	JKYi/module.h	/^typedef JKYi::Singleton<ModuleManager> ModuleMgr;$/;"	t	namespace:JKYi
JKYi::Mutex	JKYi/mutex.h	/^class Mutex: Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::Mutex::Lock	JKYi/mutex.h	/^    typedef ScopedLockImpl<Mutex>  Lock;$/;"	t	class:JKYi::Mutex	access:public
JKYi::Mutex::Mutex	JKYi/mutex.h	/^   Mutex(){$/;"	f	class:JKYi::Mutex	access:public	signature:()
JKYi::Mutex::getPthreadMutex	JKYi/mutex.h	/^   pthread_mutex_t* getPthreadMutex(){$/;"	f	class:JKYi::Mutex	access:public	signature:()
JKYi::Mutex::lock	JKYi/mutex.h	/^   void lock(){$/;"	f	class:JKYi::Mutex	access:public	signature:()
JKYi::Mutex::m_mutex	JKYi/mutex.h	/^   pthread_mutex_t m_mutex;$/;"	m	class:JKYi::Mutex	access:private
JKYi::Mutex::unlock	JKYi/mutex.h	/^   void unlock(){$/;"	f	class:JKYi::Mutex	access:public	signature:()
JKYi::Mutex::~Mutex	JKYi/mutex.h	/^   ~Mutex(){$/;"	f	class:JKYi::Mutex	access:public	signature:()
JKYi::MySQL	JKYi/db/mysql.h	/^class MySQL:public IDB,public std::enable_shared_from_this<MySQL>{$/;"	c	namespace:JKYi	inherits:IDB,std::enable_shared_from_this
JKYi::MySQL::MySQL	JKYi/db/mysql.cc	/^MySQL::MySQL(const std::map<std::string,std::string>& args)$/;"	f	class:JKYi::MySQL	signature:(const std::map<std::string,std::string>& args)
JKYi::MySQL::MySQL	JKYi/db/mysql.h	/^    MySQL(const std::map<std::string,std::string>& args);$/;"	p	class:JKYi::MySQL	access:public	signature:(const std::map<std::string,std::string>& args)
JKYi::MySQL::cmd	JKYi/db/mysql.cc	/^const char * MySQL::cmd(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::cmd	JKYi/db/mysql.h	/^    const char * cmd();$/;"	p	class:JKYi::MySQL	access:public	signature:()
JKYi::MySQL::connect	JKYi/db/mysql.cc	/^bool MySQL::connect(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::connect	JKYi/db/mysql.h	/^    bool connect();$/;"	p	class:JKYi::MySQL	access:public	signature:()
JKYi::MySQL::execute	JKYi/db/mysql.cc	/^int MySQL::execute(const char * format,...){$/;"	f	class:JKYi::MySQL	signature:(const char * format,...)
JKYi::MySQL::execute	JKYi/db/mysql.cc	/^int MySQL::execute(const char * format,va_list ap){$/;"	f	class:JKYi::MySQL	signature:(const char * format,va_list ap)
JKYi::MySQL::execute	JKYi/db/mysql.cc	/^int MySQL::execute(const std::string& sql){$/;"	f	class:JKYi::MySQL	signature:(const std::string& sql)
JKYi::MySQL::execute	JKYi/db/mysql.h	/^    int execute(const char * format,va_list ap);$/;"	p	class:JKYi::MySQL	access:public	signature:(const char * format,va_list ap)
JKYi::MySQL::getAffectedRows	JKYi/db/mysql.cc	/^uint64_t MySQL::getAffectedRows(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::getAffectedRows	JKYi/db/mysql.h	/^    uint64_t getAffectedRows();$/;"	p	class:JKYi::MySQL	access:public	signature:()
JKYi::MySQL::getErrStr	JKYi/db/mysql.cc	/^std::string MySQL::getErrStr(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::getErrno	JKYi/db/mysql.cc	/^int MySQL::getErrno(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::getInsertId	JKYi/db/mysql.cc	/^uint64_t MySQL::getInsertId(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::getInsertId	JKYi/db/mysql.h	/^    uint64_t getInsertId();$/;"	p	class:JKYi::MySQL	access:public	signature:()
JKYi::MySQL::getLastInsertId	JKYi/db/mysql.cc	/^int64_t MySQL::getLastInsertId(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::getMySQL	JKYi/db/mysql.cc	/^std::shared_ptr<MySQL> MySQL::getMySQL(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::getMySQL	JKYi/db/mysql.h	/^    std::shared_ptr<MySQL> getMySQL();$/;"	p	class:JKYi::MySQL	access:public	signature:()
JKYi::MySQL::getRaw	JKYi/db/mysql.cc	/^std::shared_ptr<MYSQL> MySQL::getRaw(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::getRaw	JKYi/db/mysql.h	/^    std::shared_ptr<MYSQL> getRaw();$/;"	p	class:JKYi::MySQL	access:public	signature:()
JKYi::MySQL::isNeedCheck	JKYi/db/mysql.cc	/^bool MySQL::isNeedCheck(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::isNeedCheck	JKYi/db/mysql.h	/^    bool isNeedCheck();$/;"	p	class:JKYi::MySQL	access:private	signature:()
JKYi::MySQL::m_cmd	JKYi/db/mysql.h	/^    std::string m_cmd;$/;"	m	class:JKYi::MySQL	access:private
JKYi::MySQL::m_dbname	JKYi/db/mysql.h	/^    std::string m_dbname;$/;"	m	class:JKYi::MySQL	access:private
JKYi::MySQL::m_hasError	JKYi/db/mysql.h	/^    bool m_hasError;$/;"	m	class:JKYi::MySQL	access:private
JKYi::MySQL::m_lastUsedTime	JKYi/db/mysql.h	/^    uint64_t m_lastUsedTime;$/;"	m	class:JKYi::MySQL	access:private
JKYi::MySQL::m_mysql	JKYi/db/mysql.h	/^    std::shared_ptr<MYSQL> m_mysql;$/;"	m	class:JKYi::MySQL	access:private
JKYi::MySQL::m_params	JKYi/db/mysql.h	/^    std::map<std::string,std::string> m_params;$/;"	m	class:JKYi::MySQL	access:private
JKYi::MySQL::m_poolSize	JKYi/db/mysql.h	/^    int32_t m_poolSize;$/;"	m	class:JKYi::MySQL	access:private
JKYi::MySQL::openTransaction	JKYi/db/mysql.cc	/^ITransaction::ptr MySQL::openTransaction(bool auto_commit){$/;"	f	class:JKYi::MySQL	signature:(bool auto_commit)
JKYi::MySQL::override	JKYi/db/mysql.h	/^    ISQLData::ptr query(const char * format,...)override;$/;"	m	class:JKYi::MySQL	access:public
JKYi::MySQL::override	JKYi/db/mysql.h	/^    ISQLData::ptr query(const std::string& sql)override;$/;"	m	class:JKYi::MySQL	access:public
JKYi::MySQL::override	JKYi/db/mysql.h	/^    ITransaction::ptr openTransaction(bool auto_commit)override;$/;"	m	class:JKYi::MySQL	access:public
JKYi::MySQL::override	JKYi/db/mysql.h	/^    JKYi::IStmt::ptr prepare(const std::string& sql)override;$/;"	m	class:JKYi::MySQL	access:public
JKYi::MySQL::override	JKYi/db/mysql.h	/^    int getErrno()override;$/;"	m	class:JKYi::MySQL	access:public
JKYi::MySQL::override	JKYi/db/mysql.h	/^    int64_t getLastInsertId()override;$/;"	m	class:JKYi::MySQL	access:public
JKYi::MySQL::override	JKYi/db/mysql.h	/^    std::string getErrStr()override;$/;"	m	class:JKYi::MySQL	access:public
JKYi::MySQL::override	JKYi/db/mysql.h	/^    virtual int execute(const char * format,...)override;$/;"	m	class:JKYi::MySQL	access:public
JKYi::MySQL::override	JKYi/db/mysql.h	/^    virtual int execute(const std::string& sql)override;$/;"	m	class:JKYi::MySQL	access:public
JKYi::MySQL::ping	JKYi/db/mysql.cc	/^bool MySQL::ping(){$/;"	f	class:JKYi::MySQL	signature:()
JKYi::MySQL::ping	JKYi/db/mysql.h	/^    bool ping();$/;"	p	class:JKYi::MySQL	access:public	signature:()
JKYi::MySQL::prepare	JKYi/db/mysql.cc	/^JKYi::IStmt::ptr MySQL::prepare(const std::string& sql){$/;"	f	class:JKYi::MySQL	signature:(const std::string& sql)
JKYi::MySQL::ptr	JKYi/db/mysql.h	/^    typedef std::shared_ptr<MySQL> ptr;$/;"	t	class:JKYi::MySQL	access:public
JKYi::MySQL::query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQL::query(const char * format,...){$/;"	f	class:JKYi::MySQL	signature:(const char * format,...)
JKYi::MySQL::query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQL::query(const char * format,va_list ap){$/;"	f	class:JKYi::MySQL	signature:(const char * format,va_list ap)
JKYi::MySQL::query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQL::query(const std::string& sql){$/;"	f	class:JKYi::MySQL	signature:(const std::string& sql)
JKYi::MySQL::query	JKYi/db/mysql.h	/^    ISQLData::ptr query(const char * format,va_list ap);$/;"	p	class:JKYi::MySQL	access:public	signature:(const char * format,va_list ap)
JKYi::MySQL::use	JKYi/db/mysql.cc	/^bool MySQL::use(const std::string& dbname){$/;"	f	class:JKYi::MySQL	signature:(const std::string& dbname)
JKYi::MySQL::use	JKYi/db/mysql.h	/^    bool use(const std::string& dbname);$/;"	p	class:JKYi::MySQL	access:public	signature:(const std::string& dbname)
JKYi::MySQLManager	JKYi/db/mysql.h	/^class MySQLManager{$/;"	c	namespace:JKYi
JKYi::MySQLManager::MutexType	JKYi/db/mysql.h	/^    typedef Mutex MutexType;$/;"	t	class:JKYi::MySQLManager	access:public
JKYi::MySQLManager::MySQLManager	JKYi/db/mysql.cc	/^MySQLManager::MySQLManager()$/;"	f	class:JKYi::MySQLManager	signature:()
JKYi::MySQLManager::MySQLManager	JKYi/db/mysql.h	/^    MySQLManager();$/;"	p	class:JKYi::MySQLManager	access:public	signature:()
JKYi::MySQLManager::checkConnection	JKYi/db/mysql.cc	/^void MySQLManager::checkConnection(int sec){$/;"	f	class:JKYi::MySQLManager	signature:(int sec)
JKYi::MySQLManager::checkConnection	JKYi/db/mysql.h	/^    void checkConnection(int sec = 30);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(int sec = 30)
JKYi::MySQLManager::execute	JKYi/db/mysql.cc	/^int MySQLManager::execute(const std::string& name,const char * format,...){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const char * format,...)
JKYi::MySQLManager::execute	JKYi/db/mysql.cc	/^int MySQLManager::execute(const std::string& name,const char * format,va_list ap){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const char * format,va_list ap)
JKYi::MySQLManager::execute	JKYi/db/mysql.cc	/^int MySQLManager::execute(const std::string& name,const std::string& sql){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const std::string& sql)
JKYi::MySQLManager::execute	JKYi/db/mysql.h	/^    int execute(const std::string& name,const char * format,...);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const char * format,...)
JKYi::MySQLManager::execute	JKYi/db/mysql.h	/^    int execute(const std::string& name,const char * format,va_list ap);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const char * format,va_list ap)
JKYi::MySQLManager::execute	JKYi/db/mysql.h	/^    int execute(const std::string& name,const std::string& sql);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const std::string& sql)
JKYi::MySQLManager::freeMySQL	JKYi/db/mysql.cc	/^void MySQLManager::freeMySQL(const std::string& name,MySQL * m){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,MySQL * m)
JKYi::MySQLManager::freeMySQL	JKYi/db/mysql.h	/^    void freeMySQL(const std::string& name,MySQL* m);$/;"	p	class:JKYi::MySQLManager	access:private	signature:(const std::string& name,MySQL* m)
JKYi::MySQLManager::get	JKYi/db/mysql.cc	/^MySQL::ptr MySQLManager::get(const std::string& name){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name)
JKYi::MySQLManager::get	JKYi/db/mysql.h	/^    MySQL::ptr get(const std::string& name);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name)
JKYi::MySQLManager::getMaxConn	JKYi/db/mysql.h	/^    uint32_t getMaxConn()const { return m_maxConn; }$/;"	f	class:JKYi::MySQLManager	access:public	signature:() const
JKYi::MySQLManager::m_conns	JKYi/db/mysql.h	/^    std::map<std::string,std::list<MySQL*>> m_conns;$/;"	m	class:JKYi::MySQLManager	access:private
JKYi::MySQLManager::m_dbDefines	JKYi/db/mysql.h	/^    std::map<std::string,std::map<std::string,std::string> >m_dbDefines;$/;"	m	class:JKYi::MySQLManager	access:private
JKYi::MySQLManager::m_maxConn	JKYi/db/mysql.h	/^    uint32_t m_maxConn;$/;"	m	class:JKYi::MySQLManager	access:private
JKYi::MySQLManager::m_mutex	JKYi/db/mysql.h	/^    MutexType m_mutex;$/;"	m	class:JKYi::MySQLManager	access:private
JKYi::MySQLManager::openTransaction	JKYi/db/mysql.cc	/^MySQLTransaction::ptr MySQLManager::openTransaction(const std::string& name,$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name, bool auto_commit)
JKYi::MySQLManager::openTransaction	JKYi/db/mysql.h	/^    MySQLTransaction::ptr openTransaction(const std::string& name,bool auto_commit);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,bool auto_commit)
JKYi::MySQLManager::query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name,const char * format,$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const char * format, va_list ap)
JKYi::MySQLManager::query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name,const char * format,...){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const char * format,...)
JKYi::MySQLManager::query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name,const std::string& sql){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const std::string& sql)
JKYi::MySQLManager::query	JKYi/db/mysql.h	/^    ISQLData::ptr query(const std::string& name,const char * format,...);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const char * format,...)
JKYi::MySQLManager::query	JKYi/db/mysql.h	/^    ISQLData::ptr query(const std::string& name,const char * format,va_list ap);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const char * format,va_list ap)
JKYi::MySQLManager::query	JKYi/db/mysql.h	/^    ISQLData::ptr query(const std::string& name,const std::string& sql);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const std::string& sql)
JKYi::MySQLManager::registerMySQL	JKYi/db/mysql.cc	/^void MySQLManager::registerMySQL(const std::string& name,const std::map<std::string,$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const std::map<std::string, std::string>& params)
JKYi::MySQLManager::registerMySQL	JKYi/db/mysql.h	/^    void registerMySQL(const std::string& name,const std::map<std::string,$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const std::map<std::string, std::string>& params)
JKYi::MySQLManager::setMaxConn	JKYi/db/mysql.h	/^    void setMaxConn(uint32_t v) { m_maxConn = v; }$/;"	f	class:JKYi::MySQLManager	access:public	signature:(uint32_t v)
JKYi::MySQLManager::~MySQLManager	JKYi/db/mysql.cc	/^MySQLManager::~MySQLManager(){$/;"	f	class:JKYi::MySQLManager	signature:()
JKYi::MySQLManager::~MySQLManager	JKYi/db/mysql.h	/^    ~MySQLManager();$/;"	p	class:JKYi::MySQLManager	access:public	signature:()
JKYi::MySQLMgr	JKYi/db/mysql.h	/^typedef JKYi::Singleton<MySQLManager> MySQLMgr;$/;"	t	namespace:JKYi
JKYi::MySQLRes	JKYi/db/mysql.h	/^class MySQLRes:public ISQLData{$/;"	c	namespace:JKYi	inherits:ISQLData
JKYi::MySQLRes::MySQLRes	JKYi/db/mysql.cc	/^MySQLRes::MySQLRes(MYSQL_RES * res,int eno,const char * estr)$/;"	f	class:JKYi::MySQLRes	signature:(MYSQL_RES * res,int eno,const char * estr)
JKYi::MySQLRes::MySQLRes	JKYi/db/mysql.h	/^    MySQLRes(MYSQL_RES * res,int eno,const char * estr);$/;"	p	class:JKYi::MySQLRes	access:public	signature:(MYSQL_RES * res,int eno,const char * estr)
JKYi::MySQLRes::data_cb	JKYi/db/mysql.h	/^    typedef std::function<bool(MYSQL_ROW row,int field_count,int row_no)> data_cb;$/;"	t	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::foreach	JKYi/db/mysql.cc	/^bool MySQLRes::foreach(data_cb cb){$/;"	f	class:JKYi::MySQLRes	signature:(data_cb cb)
JKYi::MySQLRes::foreach	JKYi/db/mysql.h	/^    bool foreach(data_cb cb);$/;"	p	class:JKYi::MySQLRes	access:public	signature:(data_cb cb)
JKYi::MySQLRes::get	JKYi/db/mysql.h	/^    MYSQL_RES* get()const { return m_data.get(); }$/;"	f	class:JKYi::MySQLRes	access:public	signature:() const
JKYi::MySQLRes::getBlob	JKYi/db/mysql.cc	/^std::string MySQLRes::getBlob(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getColumnBytes	JKYi/db/mysql.cc	/^int MySQLRes::getColumnBytes(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getColumnCount	JKYi/db/mysql.cc	/^int MySQLRes::getColumnCount(){$/;"	f	class:JKYi::MySQLRes	signature:()
JKYi::MySQLRes::getColumnName	JKYi/db/mysql.cc	/^std::string MySQLRes::getColumnName(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getColumnType	JKYi/db/mysql.cc	/^int MySQLRes::getColumnType(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getDataCount	JKYi/db/mysql.cc	/^int MySQLRes::getDataCount(){$/;"	f	class:JKYi::MySQLRes	signature:()
JKYi::MySQLRes::getDouble	JKYi/db/mysql.cc	/^double MySQLRes::getDouble(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getErrStr	JKYi/db/mysql.h	/^    const std::string& getErrStr()const { return m_errstr; }$/;"	f	class:JKYi::MySQLRes	access:public	signature:() const
JKYi::MySQLRes::getErrno	JKYi/db/mysql.h	/^    int getErrno()const { return m_errno; }$/;"	f	class:JKYi::MySQLRes	access:public	signature:() const
JKYi::MySQLRes::getFloat	JKYi/db/mysql.cc	/^float MySQLRes::getFloat(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getInt16	JKYi/db/mysql.cc	/^int16_t MySQLRes::getInt16(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getInt32	JKYi/db/mysql.cc	/^int32_t MySQLRes::getInt32(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getInt64	JKYi/db/mysql.cc	/^int64_t MySQLRes::getInt64(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getInt8	JKYi/db/mysql.cc	/^int8_t MySQLRes::getInt8(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getString	JKYi/db/mysql.cc	/^std::string MySQLRes::getString(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getTime	JKYi/db/mysql.cc	/^time_t MySQLRes::getTime(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getUint16	JKYi/db/mysql.cc	/^uint16_t MySQLRes::getUint16(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getUint32	JKYi/db/mysql.cc	/^uint32_t MySQLRes::getUint32(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getUint64	JKYi/db/mysql.cc	/^uint64_t MySQLRes::getUint64(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::getUint8	JKYi/db/mysql.cc	/^uint8_t MySQLRes::getUint8(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::isNull	JKYi/db/mysql.cc	/^bool MySQLRes::isNull(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
JKYi::MySQLRes::m_cur	JKYi/db/mysql.h	/^    MYSQL_ROW m_cur;$/;"	m	class:JKYi::MySQLRes	access:private
JKYi::MySQLRes::m_curLength	JKYi/db/mysql.h	/^    unsigned long * m_curLength;$/;"	m	class:JKYi::MySQLRes	access:private
JKYi::MySQLRes::m_data	JKYi/db/mysql.h	/^    std::shared_ptr<MYSQL_RES> m_data;$/;"	m	class:JKYi::MySQLRes	access:private
JKYi::MySQLRes::m_errno	JKYi/db/mysql.h	/^    int m_errno;$/;"	m	class:JKYi::MySQLRes	access:private
JKYi::MySQLRes::m_errstr	JKYi/db/mysql.h	/^    std::string m_errstr;$/;"	m	class:JKYi::MySQLRes	access:private
JKYi::MySQLRes::next	JKYi/db/mysql.cc	/^bool MySQLRes::next(){$/;"	f	class:JKYi::MySQLRes	signature:()
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    bool isNull(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    bool next()override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    double getDouble(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    float getFloat(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    int getColumnBytes(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    int getColumnCount()override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    int getColumnType(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    int getDataCount()override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    int16_t getInt16(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    int32_t getInt32(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    int64_t getInt64(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    int8_t getInt8(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    std::string getBlob(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    std::string getColumnName(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    std::string getString(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    time_t getTime(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    uint16_t getUint16(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    uint32_t getUint32(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    uint64_t getUint64(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::override	JKYi/db/mysql.h	/^    uint8_t getUint8(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
JKYi::MySQLRes::ptr	JKYi/db/mysql.h	/^    typedef std::shared_ptr<MySQLRes> ptr;$/;"	t	class:JKYi::MySQLRes	access:public
JKYi::MySQLStmt	JKYi/db/mysql.h	/^class MySQLStmt:public IStmt,public std::enable_shared_from_this<MySQLStmt>{$/;"	c	namespace:JKYi	inherits:IStmt,std::enable_shared_from_this
JKYi::MySQLStmt::Create	JKYi/db/mysql.cc	/^MySQLStmt::ptr MySQLStmt::Create(MySQL::ptr db,const std::string& stmt){$/;"	f	class:JKYi::MySQLStmt	signature:(MySQL::ptr db,const std::string& stmt)
JKYi::MySQLStmt::Create	JKYi/db/mysql.h	/^    static MySQLStmt::ptr Create(MySQL::ptr mysql,const std::string& stmt);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(MySQL::ptr mysql,const std::string& stmt)
JKYi::MySQLStmt::MySQLStmt	JKYi/db/mysql.cc	/^MySQLStmt::MySQLStmt(MySQL::ptr db,MYSQL_STMT* stmt)$/;"	f	class:JKYi::MySQLStmt	signature:(MySQL::ptr db,MYSQL_STMT* stmt)
JKYi::MySQLStmt::MySQLStmt	JKYi/db/mysql.h	/^    MySQLStmt(MySQL::ptr mysql,MYSQL_STMT * stmt);$/;"	p	class:JKYi::MySQLStmt	access:private	signature:(MySQL::ptr mysql,MYSQL_STMT * stmt)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const char * value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const char * value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const double& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const double& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const float& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const float& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const int16_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int16_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const int32_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int32_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const int64_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int64_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const int8_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int8_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const std::string& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const std::string& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const uint16_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint16_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const uint32_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint32_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const uint64_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint64_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const uint8_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint8_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const void * value,int len){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const void * value,int len)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const char * value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const char * value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const double& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const double& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const float& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const float& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const int16_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const int16_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const int32_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const int32_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const int64_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const int64_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const int8_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const int8_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const std::string& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const std::string& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const uint16_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const uint16_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const uint32_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const uint32_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const uint64_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const uint64_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const uint8_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const uint8_t& value)
JKYi::MySQLStmt::bind	JKYi/db/mysql.h	/^    int bind(int idx,const void * value,int len);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const void * value,int len)
JKYi::MySQLStmt::bindBlob	JKYi/db/mysql.cc	/^int MySQLStmt::bindBlob(int idx,const std::string& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const std::string& value)
JKYi::MySQLStmt::bindBlob	JKYi/db/mysql.cc	/^int MySQLStmt::bindBlob(int idx,const void * value,int64_t size){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const void * value,int64_t size)
JKYi::MySQLStmt::bindDouble	JKYi/db/mysql.cc	/^int MySQLStmt::bindDouble(int idx,const double& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const double& value)
JKYi::MySQLStmt::bindFloat	JKYi/db/mysql.cc	/^int MySQLStmt::bindFloat(int idx,const float& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const float& value)
JKYi::MySQLStmt::bindInt16	JKYi/db/mysql.cc	/^int MySQLStmt::bindInt16(int idx,const int16_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int16_t& value)
JKYi::MySQLStmt::bindInt32	JKYi/db/mysql.cc	/^int MySQLStmt::bindInt32(int idx,const int32_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int32_t& value)
JKYi::MySQLStmt::bindInt64	JKYi/db/mysql.cc	/^int MySQLStmt::bindInt64(int idx,const int64_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int64_t& value)
JKYi::MySQLStmt::bindInt8	JKYi/db/mysql.cc	/^int MySQLStmt::bindInt8(int idx,const int8_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int8_t& value)
JKYi::MySQLStmt::bindNull	JKYi/db/mysql.cc	/^int MySQLStmt::bindNull(int idx){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx)
JKYi::MySQLStmt::bindString	JKYi/db/mysql.cc	/^int MySQLStmt::bindString(int idx,const char * value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const char * value)
JKYi::MySQLStmt::bindString	JKYi/db/mysql.cc	/^int MySQLStmt::bindString(int idx,const std::string& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const std::string& value)
JKYi::MySQLStmt::bindTime	JKYi/db/mysql.cc	/^int MySQLStmt::bindTime(int idx,const time_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const time_t& value)
JKYi::MySQLStmt::bindUint16	JKYi/db/mysql.cc	/^int MySQLStmt::bindUint16(int idx,const uint16_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint16_t& value)
JKYi::MySQLStmt::bindUint32	JKYi/db/mysql.cc	/^int MySQLStmt::bindUint32(int idx,const uint32_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint32_t& value)
JKYi::MySQLStmt::bindUint64	JKYi/db/mysql.cc	/^int MySQLStmt::bindUint64(int idx,const uint64_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint64_t& value)
JKYi::MySQLStmt::bindUint8	JKYi/db/mysql.cc	/^int MySQLStmt::bindUint8(int idx,const uint8_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint8_t& value)
JKYi::MySQLStmt::execute	JKYi/db/mysql.cc	/^int MySQLStmt::execute(){$/;"	f	class:JKYi::MySQLStmt	signature:()
JKYi::MySQLStmt::getErrStr	JKYi/db/mysql.cc	/^std::string MySQLStmt::getErrStr(){$/;"	f	class:JKYi::MySQLStmt	signature:()
JKYi::MySQLStmt::getErrno	JKYi/db/mysql.cc	/^int MySQLStmt::getErrno(){$/;"	f	class:JKYi::MySQLStmt	signature:()
JKYi::MySQLStmt::getLastInsertId	JKYi/db/mysql.cc	/^int64_t MySQLStmt::getLastInsertId(){$/;"	f	class:JKYi::MySQLStmt	signature:()
JKYi::MySQLStmt::getRaw	JKYi/db/mysql.h	/^    MYSQL_STMT* getRaw()const { return m_stmt; }$/;"	f	class:JKYi::MySQLStmt	access:public	signature:() const
JKYi::MySQLStmt::m_binds	JKYi/db/mysql.h	/^    std::vector<MYSQL_BIND> m_binds;$/;"	m	class:JKYi::MySQLStmt	access:private
JKYi::MySQLStmt::m_mysql	JKYi/db/mysql.h	/^    MySQL::ptr m_mysql;$/;"	m	class:JKYi::MySQLStmt	access:private
JKYi::MySQLStmt::m_stmt	JKYi/db/mysql.h	/^    MYSQL_STMT * m_stmt;$/;"	m	class:JKYi::MySQLStmt	access:private
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    ISQLData::ptr query()override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    int execute()override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    int getErrno()override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    int64_t getLastInsertId()override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    std::string getErrStr()override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindBlob(int idx,const std::string& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindBlob(int idx,const void * value,int64_t size)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindDouble(int idx,const double& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindFloat(int idx,const float& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindInt16(int idx,const int16_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindInt32(int idx,const int32_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindInt64(int idx,const int64_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindInt8(int idx,const int8_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindNull(int idx)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindString(int idx,const char * value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindString(int idx,const std::string& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindTime(int idx,const time_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindUint16(int idx,const uint16_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindUint32(int idx,const uint32_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindUint64(int idx,const uint64_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::override	JKYi/db/mysql.h	/^    virtual int bindUint8(int idx,const uint8_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::ptr	JKYi/db/mysql.h	/^    typedef std::shared_ptr<MySQLStmt> ptr;$/;"	t	class:JKYi::MySQLStmt	access:public
JKYi::MySQLStmt::query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLStmt::query(){$/;"	f	class:JKYi::MySQLStmt	signature:()
JKYi::MySQLStmt::~MySQLStmt	JKYi/db/mysql.cc	/^MySQLStmt::~MySQLStmt(){$/;"	f	class:JKYi::MySQLStmt	signature:()
JKYi::MySQLStmt::~MySQLStmt	JKYi/db/mysql.h	/^    ~MySQLStmt();$/;"	p	class:JKYi::MySQLStmt	access:public	signature:()
JKYi::MySQLStmtRes	JKYi/db/mysql.h	/^class MySQLStmtRes:public ISQLData{$/;"	c	namespace:JKYi	inherits:ISQLData
JKYi::MySQLStmtRes::Create	JKYi/db/mysql.cc	/^MySQLStmtRes::ptr MySQLStmtRes::Create(std::shared_ptr<MySQLStmt>stmt){$/;"	f	class:JKYi::MySQLStmtRes	signature:(std::shared_ptr<MySQLStmt>stmt)
JKYi::MySQLStmtRes::Create	JKYi/db/mysql.h	/^    static MySQLStmtRes::ptr Create(std::shared_ptr<MySQLStmt> stmt);$/;"	p	class:JKYi::MySQLStmtRes	access:public	signature:(std::shared_ptr<MySQLStmt> stmt)
JKYi::MySQLStmtRes::Data	JKYi/db/mysql.h	/^    struct Data{$/;"	s	class:JKYi::MySQLStmtRes	access:private
JKYi::MySQLStmtRes::Data::Data	JKYi/db/mysql.cc	/^MySQLStmtRes::Data::Data()$/;"	f	class:JKYi::MySQLStmtRes::Data	signature:()
JKYi::MySQLStmtRes::Data::Data	JKYi/db/mysql.h	/^        Data();$/;"	p	struct:JKYi::MySQLStmtRes::Data	access:public	signature:()
JKYi::MySQLStmtRes::Data::alloc	JKYi/db/mysql.cc	/^void MySQLStmtRes::Data::alloc(size_t size){$/;"	f	class:JKYi::MySQLStmtRes::Data	signature:(size_t size)
JKYi::MySQLStmtRes::Data::alloc	JKYi/db/mysql.h	/^        void alloc(size_t size);$/;"	p	struct:JKYi::MySQLStmtRes::Data	access:public	signature:(size_t size)
JKYi::MySQLStmtRes::Data::data	JKYi/db/mysql.h	/^        char * data;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
JKYi::MySQLStmtRes::Data::data_length	JKYi/db/mysql.h	/^        int32_t data_length;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
JKYi::MySQLStmtRes::Data::error	JKYi/db/mysql.h	/^        my_bool error;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
JKYi::MySQLStmtRes::Data::is_null	JKYi/db/mysql.h	/^        my_bool is_null;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
JKYi::MySQLStmtRes::Data::length	JKYi/db/mysql.h	/^        unsigned long length;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
JKYi::MySQLStmtRes::Data::type	JKYi/db/mysql.h	/^        enum_field_types type;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
JKYi::MySQLStmtRes::Data::~Data	JKYi/db/mysql.cc	/^MySQLStmtRes::Data::~Data(){$/;"	f	class:JKYi::MySQLStmtRes::Data	signature:()
JKYi::MySQLStmtRes::Data::~Data	JKYi/db/mysql.h	/^        ~Data();$/;"	p	struct:JKYi::MySQLStmtRes::Data	access:public	signature:()
JKYi::MySQLStmtRes::MySQLStmtRes	JKYi/db/mysql.cc	/^MySQLStmtRes::MySQLStmtRes(std::shared_ptr<MySQLStmt>stmt,int eno,$/;"	f	class:JKYi::MySQLStmtRes	signature:(std::shared_ptr<MySQLStmt>stmt,int eno, const std::string& estr)
JKYi::MySQLStmtRes::MySQLStmtRes	JKYi/db/mysql.h	/^    MySQLStmtRes(std::shared_ptr<MySQLStmt> stmt,int eno,const std::string& estr);$/;"	p	class:JKYi::MySQLStmtRes	access:private	signature:(std::shared_ptr<MySQLStmt> stmt,int eno,const std::string& estr)
JKYi::MySQLStmtRes::getBlob	JKYi/db/mysql.cc	/^std::string MySQLStmtRes::getBlob(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getColumnBytes	JKYi/db/mysql.cc	/^int MySQLStmtRes::getColumnBytes(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getColumnCount	JKYi/db/mysql.cc	/^int MySQLStmtRes::getColumnCount(){$/;"	f	class:JKYi::MySQLStmtRes	signature:()
JKYi::MySQLStmtRes::getColumnName	JKYi/db/mysql.cc	/^std::string MySQLStmtRes::getColumnName(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getColumnType	JKYi/db/mysql.cc	/^int MySQLStmtRes::getColumnType(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getDataCount	JKYi/db/mysql.cc	/^int MySQLStmtRes::getDataCount(){$/;"	f	class:JKYi::MySQLStmtRes	signature:()
JKYi::MySQLStmtRes::getDouble	JKYi/db/mysql.cc	/^double MySQLStmtRes::getDouble(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getErrStr	JKYi/db/mysql.h	/^    const std::string& getErrStr()const { return m_errstr; }$/;"	f	class:JKYi::MySQLStmtRes	access:public	signature:() const
JKYi::MySQLStmtRes::getErrno	JKYi/db/mysql.h	/^    int getErrno()const { return m_errno; };$/;"	f	class:JKYi::MySQLStmtRes	access:public	signature:() const
JKYi::MySQLStmtRes::getFloat	JKYi/db/mysql.cc	/^float MySQLStmtRes::getFloat(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getInt16	JKYi/db/mysql.cc	/^int16_t MySQLStmtRes::getInt16(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getInt32	JKYi/db/mysql.cc	/^int32_t MySQLStmtRes::getInt32(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getInt64	JKYi/db/mysql.cc	/^int64_t MySQLStmtRes::getInt64(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getInt8	JKYi/db/mysql.cc	/^int8_t MySQLStmtRes::getInt8(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getString	JKYi/db/mysql.cc	/^std::string MySQLStmtRes::getString(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getTime	JKYi/db/mysql.cc	/^time_t MySQLStmtRes::getTime(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getUint16	JKYi/db/mysql.cc	/^uint16_t MySQLStmtRes::getUint16(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getUint32	JKYi/db/mysql.cc	/^uint32_t MySQLStmtRes::getUint32(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getUint64	JKYi/db/mysql.cc	/^uint64_t MySQLStmtRes::getUint64(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::getUint8	JKYi/db/mysql.cc	/^uint8_t MySQLStmtRes::getUint8(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::isNull	JKYi/db/mysql.cc	/^bool MySQLStmtRes::isNull(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
JKYi::MySQLStmtRes::m_binds	JKYi/db/mysql.h	/^    std::vector<MYSQL_BIND> m_binds;$/;"	m	class:JKYi::MySQLStmtRes	access:private
JKYi::MySQLStmtRes::m_datas	JKYi/db/mysql.h	/^    std::vector<Data> m_datas;$/;"	m	class:JKYi::MySQLStmtRes	access:private
JKYi::MySQLStmtRes::m_errno	JKYi/db/mysql.h	/^    int m_errno;$/;"	m	class:JKYi::MySQLStmtRes	access:private
JKYi::MySQLStmtRes::m_errstr	JKYi/db/mysql.h	/^    std::string m_errstr;$/;"	m	class:JKYi::MySQLStmtRes	access:private
JKYi::MySQLStmtRes::m_stmt	JKYi/db/mysql.h	/^    std::shared_ptr<MySQLStmt> m_stmt;$/;"	m	class:JKYi::MySQLStmtRes	access:private
JKYi::MySQLStmtRes::next	JKYi/db/mysql.cc	/^bool MySQLStmtRes::next(){$/;"	f	class:JKYi::MySQLStmtRes	signature:()
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    bool isNull(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    bool next()override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    double getDouble(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    float getFloat(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    int getColumnBytes(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    int getColumnCount()override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    int getColumnType(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    int getDataCount()override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    int16_t getInt16(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    int32_t getInt32(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    int64_t getInt64(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    int8_t getInt8(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    std::string getBlob(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    std::string getColumnName(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    std::string getString(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    time_t getTime(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    uint16_t getUint16(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    uint32_t getUint32(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    uint64_t getUint64(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::override	JKYi/db/mysql.h	/^    uint8_t getUint8(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::ptr	JKYi/db/mysql.h	/^    typedef std::shared_ptr<MySQLStmtRes> ptr;$/;"	t	class:JKYi::MySQLStmtRes	access:public
JKYi::MySQLStmtRes::~MySQLStmtRes	JKYi/db/mysql.cc	/^MySQLStmtRes::~MySQLStmtRes(){$/;"	f	class:JKYi::MySQLStmtRes	signature:()
JKYi::MySQLStmtRes::~MySQLStmtRes	JKYi/db/mysql.h	/^    ~MySQLStmtRes();$/;"	p	class:JKYi::MySQLStmtRes	access:public	signature:()
JKYi::MySQLTime	JKYi/db/mysql.h	/^struct MySQLTime{$/;"	s	namespace:JKYi
JKYi::MySQLTime::MySQLTime	JKYi/db/mysql.h	/^    MySQLTime(time_t t)$/;"	f	struct:JKYi::MySQLTime	access:public	signature:(time_t t)
JKYi::MySQLTime::ts	JKYi/db/mysql.h	/^    time_t ts;$/;"	m	struct:JKYi::MySQLTime	access:public
JKYi::MySQLTransaction	JKYi/db/mysql.h	/^class MySQLTransaction:public ITransaction{$/;"	c	namespace:JKYi	inherits:ITransaction
JKYi::MySQLTransaction::Create	JKYi/db/mysql.cc	/^MySQLTransaction::ptr MySQLTransaction::Create(MySQL::ptr mysql,bool auto_commit){$/;"	f	class:JKYi::MySQLTransaction	signature:(MySQL::ptr mysql,bool auto_commit)
JKYi::MySQLTransaction::Create	JKYi/db/mysql.h	/^   static MySQLTransaction::ptr Create(MySQL::ptr mysql,bool auto_commit);$/;"	p	class:JKYi::MySQLTransaction	access:public	signature:(MySQL::ptr mysql,bool auto_commit)
JKYi::MySQLTransaction::MySQLTransaction	JKYi/db/mysql.cc	/^MySQLTransaction::MySQLTransaction(MySQL::ptr mysql,bool auto_commit)$/;"	f	class:JKYi::MySQLTransaction	signature:(MySQL::ptr mysql,bool auto_commit)
JKYi::MySQLTransaction::MySQLTransaction	JKYi/db/mysql.h	/^   MySQLTransaction(MySQL::ptr mysql,bool auto_commit);$/;"	p	class:JKYi::MySQLTransaction	access:private	signature:(MySQL::ptr mysql,bool auto_commit)
JKYi::MySQLTransaction::begin	JKYi/db/mysql.cc	/^bool MySQLTransaction::begin(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
JKYi::MySQLTransaction::commit	JKYi/db/mysql.cc	/^bool MySQLTransaction::commit(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
JKYi::MySQLTransaction::execute	JKYi/db/mysql.cc	/^int MySQLTransaction::execute(const char * format,...){$/;"	f	class:JKYi::MySQLTransaction	signature:(const char * format,...)
JKYi::MySQLTransaction::execute	JKYi/db/mysql.cc	/^int MySQLTransaction::execute(const char * format,va_list ap){$/;"	f	class:JKYi::MySQLTransaction	signature:(const char * format,va_list ap)
JKYi::MySQLTransaction::execute	JKYi/db/mysql.cc	/^int MySQLTransaction::execute(const std::string& sql){$/;"	f	class:JKYi::MySQLTransaction	signature:(const std::string& sql)
JKYi::MySQLTransaction::execute	JKYi/db/mysql.h	/^   int execute(const char * format,va_list ap);$/;"	p	class:JKYi::MySQLTransaction	access:public	signature:(const char * format,va_list ap)
JKYi::MySQLTransaction::getLastInsertId	JKYi/db/mysql.cc	/^int64_t MySQLTransaction::getLastInsertId(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
JKYi::MySQLTransaction::getMySQL	JKYi/db/mysql.cc	/^std::shared_ptr<MySQL> MySQLTransaction::getMySQL(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
JKYi::MySQLTransaction::getMySQL	JKYi/db/mysql.h	/^   std::shared_ptr<MySQL> getMySQL();$/;"	p	class:JKYi::MySQLTransaction	access:public	signature:()
JKYi::MySQLTransaction::isAutoCommit	JKYi/db/mysql.h	/^   bool isAutoCommit()const { return m_autoCommit; };$/;"	f	class:JKYi::MySQLTransaction	access:public	signature:() const
JKYi::MySQLTransaction::isError	JKYi/db/mysql.h	/^   bool isError()const { return m_hasError; }$/;"	f	class:JKYi::MySQLTransaction	access:public	signature:() const
JKYi::MySQLTransaction::isFinished	JKYi/db/mysql.h	/^   bool isFinished()const { return m_isFinished; }$/;"	f	class:JKYi::MySQLTransaction	access:public	signature:() const
JKYi::MySQLTransaction::m_autoCommit	JKYi/db/mysql.h	/^   bool m_autoCommit;$/;"	m	class:JKYi::MySQLTransaction	access:private
JKYi::MySQLTransaction::m_hasError	JKYi/db/mysql.h	/^   bool m_hasError;$/;"	m	class:JKYi::MySQLTransaction	access:private
JKYi::MySQLTransaction::m_isFinished	JKYi/db/mysql.h	/^   bool m_isFinished;$/;"	m	class:JKYi::MySQLTransaction	access:private
JKYi::MySQLTransaction::m_mysql	JKYi/db/mysql.h	/^   MySQL::ptr m_mysql;$/;"	m	class:JKYi::MySQLTransaction	access:private
JKYi::MySQLTransaction::override	JKYi/db/mysql.h	/^   bool begin()override;$/;"	m	class:JKYi::MySQLTransaction	access:public
JKYi::MySQLTransaction::override	JKYi/db/mysql.h	/^   bool commit()override;$/;"	m	class:JKYi::MySQLTransaction	access:public
JKYi::MySQLTransaction::override	JKYi/db/mysql.h	/^   bool rollback()override;$/;"	m	class:JKYi::MySQLTransaction	access:public
JKYi::MySQLTransaction::override	JKYi/db/mysql.h	/^   int64_t getLastInsertId()override;$/;"	m	class:JKYi::MySQLTransaction	access:public
JKYi::MySQLTransaction::override	JKYi/db/mysql.h	/^   virtual int execute(const char * format,...)override;$/;"	m	class:JKYi::MySQLTransaction	access:public
JKYi::MySQLTransaction::override	JKYi/db/mysql.h	/^   virtual int execute(const std::string& sql)override;$/;"	m	class:JKYi::MySQLTransaction	access:public
JKYi::MySQLTransaction::ptr	JKYi/db/mysql.h	/^   typedef std::shared_ptr<MySQLTransaction> ptr;$/;"	t	class:JKYi::MySQLTransaction	access:public
JKYi::MySQLTransaction::rollback	JKYi/db/mysql.cc	/^bool MySQLTransaction::rollback(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
JKYi::MySQLTransaction::~MySQLTransaction	JKYi/db/mysql.cc	/^MySQLTransaction::~MySQLTransaction(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
JKYi::MySQLTransaction::~MySQLTransaction	JKYi/db/mysql.h	/^   ~MySQLTransaction();$/;"	p	class:JKYi::MySQLTransaction	access:public	signature:()
JKYi::MySQLUtil	JKYi/db/mysql.h	/^class MySQLUtil{$/;"	c	namespace:JKYi
JKYi::MySQLUtil::Excute	JKYi/db/mysql.cc	/^int MySQLUtil::Excute(const std::string& name,const char * format,...){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const char * format,...)
JKYi::MySQLUtil::Excute	JKYi/db/mysql.cc	/^int MySQLUtil::Excute(const std::string& name,const char * format,va_list ap){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const char * format,va_list ap)
JKYi::MySQLUtil::Excute	JKYi/db/mysql.cc	/^int MySQLUtil::Excute(const std::string& name,const std::string& sql){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const std::string& sql)
JKYi::MySQLUtil::Excute	JKYi/db/mysql.h	/^    static int Excute(const std::string& name,const char * format,...);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const char * format,...)
JKYi::MySQLUtil::Excute	JKYi/db/mysql.h	/^    static int Excute(const std::string& name,const char * format,va_list ap);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const char * format,va_list ap)
JKYi::MySQLUtil::Excute	JKYi/db/mysql.h	/^    static int Excute(const std::string& name,const std::string& sql);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const std::string& sql)
JKYi::MySQLUtil::Query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name,const char * format,...){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const char * format,...)
JKYi::MySQLUtil::Query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name,const char * format,va_list ap){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const char * format,va_list ap)
JKYi::MySQLUtil::Query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name,const std::string& sql){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const std::string& sql)
JKYi::MySQLUtil::Query	JKYi/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name,const char * format,...);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const char * format,...)
JKYi::MySQLUtil::Query	JKYi/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name,const char * format,va_list ap);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const char * format,va_list ap)
JKYi::MySQLUtil::Query	JKYi/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name,const std::string& sql);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const std::string& sql)
JKYi::MySQLUtil::TryExcute	JKYi/db/mysql.cc	/^int MySQLUtil::TryExcute(const std::string& name,uint32_t count,const char * format,$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,uint32_t count,const char * format, ...)
JKYi::MySQLUtil::TryExcute	JKYi/db/mysql.cc	/^int MySQLUtil::TryExcute(const std::string& name,uint32_t count,const std::string& sql){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,uint32_t count,const std::string& sql)
JKYi::MySQLUtil::TryExcute	JKYi/db/mysql.h	/^    static int TryExcute(const std::string& name,uint32_t count,const char * format,...);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,uint32_t count,const char * format,...)
JKYi::MySQLUtil::TryExcute	JKYi/db/mysql.h	/^    static int TryExcute(const std::string& name,uint32_t count,const std::string& sql);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,uint32_t count,const std::string& sql)
JKYi::MySQLUtil::TryQuery	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLUtil::TryQuery(const std::string& name,uint32_t count,$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,uint32_t count, const char * format,...)
JKYi::MySQLUtil::TryQuery	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLUtil::TryQuery(const std::string& name,uint32_t count,$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,uint32_t count, const std::string& sql)
JKYi::MySQLUtil::TryQuery	JKYi/db/mysql.h	/^    static ISQLData::ptr TryQuery(const std::string& name,uint32_t count,const char * format,...);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,uint32_t count,const char * format,...)
JKYi::MySQLUtil::TryQuery	JKYi/db/mysql.h	/^    static ISQLData::ptr TryQuery(const std::string& name,uint32_t count,const std::string& sql);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,uint32_t count,const std::string& sql)
JKYi::NameFormatItem	JKYi/log.cc	/^class NameFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::NameFormatItem::NameFormatItem	JKYi/log.cc	/^    NameFormatItem(const std::string&str=""){}$/;"	f	class:JKYi::NameFormatItem	access:public	signature:(const std::string&str=Ó)
JKYi::NewLineFormatItem	JKYi/log.cc	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::NewLineFormatItem::NewLineFormatItem	JKYi/log.cc	/^    NewLineFormatItem(const std::string& str = "") {}$/;"	f	class:JKYi::NewLineFormatItem	access:public	signature:(const std::string& str = Ó)
JKYi::Noncopyable	JKYi/noncopyable.h	/^class Noncopyable{$/;"	c	namespace:JKYi
JKYi::Noncopyable::Noncopyable	JKYi/noncopyable.h	/^  Noncopyable() = default; $/;"	p	class:JKYi::Noncopyable	access:public	signature:()
JKYi::Noncopyable::Noncopyable	JKYi/noncopyable.h	/^  Noncopyable(const Noncopyable&) = delete;$/;"	p	class:JKYi::Noncopyable	access:public	signature:(const Noncopyable&)
JKYi::Noncopyable::operator =	JKYi/noncopyable.h	/^  Noncopyable& operator= (const Noncopyable&) = delete;$/;"	p	class:JKYi::Noncopyable	access:public	signature:(const Noncopyable&)
JKYi::Noncopyable::~Noncopyable	JKYi/noncopyable.h	/^  ~Noncopyable() = default;$/;"	p	class:JKYi::Noncopyable	access:public	signature:()
JKYi::Notify	JKYi/protocol.h	/^class Notify:public Message{$/;"	c	namespace:JKYi	inherits:Message
JKYi::Notify::Notify	JKYi/protocol.cc	/^Notify::Notify()$/;"	f	class:JKYi::Notify	signature:()
JKYi::Notify::Notify	JKYi/protocol.h	/^    Notify();$/;"	p	class:JKYi::Notify	access:public	signature:()
JKYi::Notify::getNotify	JKYi/protocol.h	/^    uint32_t getNotify()const { return m_notify; }$/;"	f	class:JKYi::Notify	access:public	signature:() const
JKYi::Notify::m_notify	JKYi/protocol.h	/^    uint32_t m_notify;$/;"	m	class:JKYi::Notify	access:protected
JKYi::Notify::override	JKYi/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray)override;$/;"	m	class:JKYi::Notify	access:public
JKYi::Notify::override	JKYi/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	m	class:JKYi::Notify	access:public
JKYi::Notify::parseFromByteArray	JKYi/protocol.cc	/^bool Notify::parseFromByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Notify	signature:(ByteArray::ptr bytearray)
JKYi::Notify::ptr	JKYi/protocol.h	/^    typedef std::shared_ptr<Notify> ptr;$/;"	t	class:JKYi::Notify	access:public
JKYi::Notify::serializeToByteArray	JKYi/protocol.cc	/^bool Notify::serializeToByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Notify	signature:(ByteArray::ptr bytearray)
JKYi::Notify::setNotify	JKYi/protocol.h	/^    void setNotify(uint32_t v) { m_notify = v; }$/;"	f	class:JKYi::Notify	access:public	signature:(uint32_t v)
JKYi::OnTimer	JKYi/timer.cc	/^static void OnTimer(std::weak_ptr<void>weak_cond,std::function<void()>cb){$/;"	f	namespace:JKYi	signature:(std::weak_ptr<void>weak_cond,std::function<void()>cb)
JKYi::ProcessInfo	JKYi/daemon.h	/^struct ProcessInfo{$/;"	s	namespace:JKYi
JKYi::ProcessInfo::main_id	JKYi/daemon.h	/^   pid_t main_id = 0;$/;"	m	struct:JKYi::ProcessInfo	access:public
JKYi::ProcessInfo::main_start_time	JKYi/daemon.h	/^   uint64_t main_start_time = 0;$/;"	m	struct:JKYi::ProcessInfo	access:public
JKYi::ProcessInfo::parent_id	JKYi/daemon.h	/^   pid_t parent_id = 0;$/;"	m	struct:JKYi::ProcessInfo	access:public
JKYi::ProcessInfo::parent_start_time	JKYi/daemon.h	/^   uint64_t parent_start_time = 0;$/;"	m	struct:JKYi::ProcessInfo	access:public
JKYi::ProcessInfo::restart_count	JKYi/daemon.h	/^   uint32_t restart_count = 0;$/;"	m	struct:JKYi::ProcessInfo	access:public
JKYi::ProcessInfo::toString	JKYi/daemon.cc	/^std::string ProcessInfo::toString()const{$/;"	f	class:JKYi::ProcessInfo	signature:() const
JKYi::ProcessInfo::toString	JKYi/daemon.h	/^   std::string toString()const;$/;"	p	struct:JKYi::ProcessInfo	access:public	signature:() const
JKYi::ProcessInfoMgr	JKYi/daemon.h	/^typedef JKYi::Singleton<ProcessInfo> ProcessInfoMgr;$/;"	t	namespace:JKYi
JKYi::RWMutex	JKYi/mutex.h	/^class RWMutex:Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::RWMutex::RWMutex	JKYi/mutex.h	/^    RWMutex(){$/;"	f	class:JKYi::RWMutex	access:public	signature:()
JKYi::RWMutex::ReadLock	JKYi/mutex.h	/^    typedef ReadScopedLockImpl<RWMutex> ReadLock;$/;"	t	class:JKYi::RWMutex	access:public
JKYi::RWMutex::WriteLock	JKYi/mutex.h	/^	typedef WriteScopedLockImpl<RWMutex> WriteLock;$/;"	t	class:JKYi::RWMutex	access:public
JKYi::RWMutex::m_lock	JKYi/mutex.h	/^   pthread_rwlock_t m_lock;$/;"	m	class:JKYi::RWMutex	access:private
JKYi::RWMutex::rdlock	JKYi/mutex.h	/^	void rdlock(){$/;"	f	class:JKYi::RWMutex	access:public	signature:()
JKYi::RWMutex::unlock	JKYi/mutex.h	/^	void unlock(){$/;"	f	class:JKYi::RWMutex	access:public	signature:()
JKYi::RWMutex::wrlock	JKYi/mutex.h	/^	void wrlock(){$/;"	f	class:JKYi::RWMutex	access:public	signature:()
JKYi::RWMutex::~RWMutex	JKYi/mutex.h	/^	~RWMutex(){$/;"	f	class:JKYi::RWMutex	access:public	signature:()
JKYi::ReadScopedLockImpl	JKYi/mutex.h	/^class ReadScopedLockImpl{$/;"	c	namespace:JKYi
JKYi::ReadScopedLockImpl::ReadScopedLockImpl	JKYi/mutex.h	/^  ReadScopedLockImpl(T&mutex)$/;"	f	class:JKYi::ReadScopedLockImpl	access:public	signature:(T&mutex)
JKYi::ReadScopedLockImpl::lock	JKYi/mutex.h	/^  void lock(){$/;"	f	class:JKYi::ReadScopedLockImpl	access:public	signature:()
JKYi::ReadScopedLockImpl::m_locked	JKYi/mutex.h	/^  bool m_locked;$/;"	m	class:JKYi::ReadScopedLockImpl	access:private
JKYi::ReadScopedLockImpl::m_mutex	JKYi/mutex.h	/^  T& m_mutex;$/;"	m	class:JKYi::ReadScopedLockImpl	access:private
JKYi::ReadScopedLockImpl::unlock	JKYi/mutex.h	/^  void unlock(){$/;"	f	class:JKYi::ReadScopedLockImpl	access:public	signature:()
JKYi::ReadScopedLockImpl::~ReadScopedLockImpl	JKYi/mutex.h	/^  ~ReadScopedLockImpl(){$/;"	f	class:JKYi::ReadScopedLockImpl	access:public	signature:()
JKYi::Redis	JKYi/db/redis.h	/^class Redis:public ISyncRedis{$/;"	c	namespace:JKYi	inherits:ISyncRedis
JKYi::Redis::Redis	JKYi/db/redis.cc	/^Redis::Redis(){$/;"	f	class:JKYi::Redis	signature:()
JKYi::Redis::Redis	JKYi/db/redis.cc	/^Redis::Redis(const std::map<std::string,std::string>&conf){$/;"	f	class:JKYi::Redis	signature:(const std::map<std::string,std::string>&conf)
JKYi::Redis::Redis	JKYi/db/redis.h	/^    Redis();$/;"	p	class:JKYi::Redis	access:public	signature:()
JKYi::Redis::Redis	JKYi/db/redis.h	/^    Redis(const std::map<std::string,std::string>& conf);$/;"	p	class:JKYi::Redis	access:public	signature:(const std::map<std::string,std::string>& conf)
JKYi::Redis::appendCmd	JKYi/db/redis.cc	/^int Redis::appendCmd(const char * fmt,...){$/;"	f	class:JKYi::Redis	signature:(const char * fmt,...)
JKYi::Redis::appendCmd	JKYi/db/redis.cc	/^int Redis::appendCmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::Redis	signature:(const char * fmt,va_list ap)
JKYi::Redis::appendCmd	JKYi/db/redis.cc	/^int Redis::appendCmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::Redis	signature:(const std::vector<std::string>& argv)
JKYi::Redis::cmd	JKYi/db/redis.cc	/^ReplyPtr Redis::cmd(const char * fmt,...){$/;"	f	class:JKYi::Redis	signature:(const char * fmt,...)
JKYi::Redis::cmd	JKYi/db/redis.cc	/^ReplyPtr Redis::cmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::Redis	signature:(const char * fmt,va_list ap)
JKYi::Redis::cmd	JKYi/db/redis.cc	/^ReplyPtr Redis::cmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::Redis	signature:(const std::vector<std::string>& argv)
JKYi::Redis::connect	JKYi/db/redis.cc	/^bool Redis::connect(){$/;"	f	class:JKYi::Redis	signature:()
JKYi::Redis::connect	JKYi/db/redis.cc	/^bool Redis::connect(const std::string& ip,int port ,uint64_t ms){$/;"	f	class:JKYi::Redis	signature:(const std::string& ip,int port ,uint64_t ms)
JKYi::Redis::getReply	JKYi/db/redis.cc	/^ReplyPtr Redis::getReply(){$/;"	f	class:JKYi::Redis	signature:()
JKYi::Redis::m_cmdTimeout	JKYi/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:JKYi::Redis	typeref:struct:JKYi::Redis::timeval	access:private
JKYi::Redis::m_connectMs	JKYi/db/redis.h	/^    uint32_t m_connectMs;$/;"	m	class:JKYi::Redis	access:private
JKYi::Redis::m_context	JKYi/db/redis.h	/^    std::shared_ptr<redisContext> m_context;$/;"	m	class:JKYi::Redis	access:private
JKYi::Redis::m_host	JKYi/db/redis.h	/^    std::string m_host;$/;"	m	class:JKYi::Redis	access:private
JKYi::Redis::m_port	JKYi/db/redis.h	/^    uint32_t m_port;$/;"	m	class:JKYi::Redis	access:private
JKYi::Redis::override	JKYi/db/redis.h	/^     ReplyPtr getReply()override;$/;"	m	class:JKYi::Redis	access:public
JKYi::Redis::override	JKYi/db/redis.h	/^     int appendCmd(const char * fmd,...)override;$/;"	m	class:JKYi::Redis	access:public
JKYi::Redis::override	JKYi/db/redis.h	/^     int appendCmd(const char * fmt,va_list ap)override;$/;"	m	class:JKYi::Redis	access:public
JKYi::Redis::override	JKYi/db/redis.h	/^     int appendCmd(const std::vector<std::string>& argv)override ;$/;"	m	class:JKYi::Redis	access:public
JKYi::Redis::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,...) override;$/;"	m	class:JKYi::Redis	access:public
JKYi::Redis::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,va_list ap) override;$/;"	m	class:JKYi::Redis	access:public
JKYi::Redis::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const std::vector<std::string>& argv) override;;$/;"	m	class:JKYi::Redis	access:public
JKYi::Redis::override	JKYi/db/redis.h	/^    bool connect()override;$/;"	m	class:JKYi::Redis	access:public
JKYi::Redis::override	JKYi/db/redis.h	/^    bool connect(const std::string& ip,int port,uint64_t ms = 0)override;$/;"	m	class:JKYi::Redis	access:public
JKYi::Redis::override	JKYi/db/redis.h	/^    bool reconnect() override;$/;"	m	class:JKYi::Redis	access:public
JKYi::Redis::ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr<Redis> ptr;$/;"	t	class:JKYi::Redis	access:public
JKYi::Redis::reconnect	JKYi/db/redis.cc	/^bool Redis::reconnect(){$/;"	f	class:JKYi::Redis	signature:()
JKYi::Redis::setTimeout	JKYi/db/redis.cc	/^void Redis::setTimeout(uint64_t v){$/;"	f	class:JKYi::Redis	signature:(uint64_t v)
JKYi::Redis::setTimeout	JKYi/db/redis.h	/^    void setTimeout(uint64_t ms); $/;"	p	class:JKYi::Redis	access:public	signature:(uint64_t ms)
JKYi::RedisCluster	JKYi/db/redis.h	/^class RedisCluster: public ISyncRedis{$/;"	c	namespace:JKYi	inherits:ISyncRedis
JKYi::RedisCluster::RedisCluster	JKYi/db/redis.cc	/^RedisCluster::RedisCluster(){$/;"	f	class:JKYi::RedisCluster	signature:()
JKYi::RedisCluster::RedisCluster	JKYi/db/redis.cc	/^RedisCluster::RedisCluster(const std::map<std::string,std::string>&conf){$/;"	f	class:JKYi::RedisCluster	signature:(const std::map<std::string,std::string>&conf)
JKYi::RedisCluster::RedisCluster	JKYi/db/redis.h	/^    RedisCluster();$/;"	p	class:JKYi::RedisCluster	access:public	signature:()
JKYi::RedisCluster::RedisCluster	JKYi/db/redis.h	/^    RedisCluster(const std::map<std::string,std::string>& conf);$/;"	p	class:JKYi::RedisCluster	access:public	signature:(const std::map<std::string,std::string>& conf)
JKYi::RedisCluster::appendCmd	JKYi/db/redis.cc	/^int RedisCluster::appendCmd(const char * fmt,...){$/;"	f	class:JKYi::RedisCluster	signature:(const char * fmt,...)
JKYi::RedisCluster::appendCmd	JKYi/db/redis.cc	/^int RedisCluster::appendCmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::RedisCluster	signature:(const char * fmt,va_list ap)
JKYi::RedisCluster::appendCmd	JKYi/db/redis.cc	/^int RedisCluster::appendCmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::RedisCluster	signature:(const std::vector<std::string>& argv)
JKYi::RedisCluster::cmd	JKYi/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const char * fmt,...){$/;"	f	class:JKYi::RedisCluster	signature:(const char * fmt,...)
JKYi::RedisCluster::cmd	JKYi/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::RedisCluster	signature:(const char * fmt,va_list ap)
JKYi::RedisCluster::cmd	JKYi/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::RedisCluster	signature:(const std::vector<std::string>& argv)
JKYi::RedisCluster::connect	JKYi/db/redis.cc	/^bool RedisCluster::connect(){$/;"	f	class:JKYi::RedisCluster	signature:()
JKYi::RedisCluster::connect	JKYi/db/redis.cc	/^bool RedisCluster::connect(const std::string& ip,int port,uint64_t ms){$/;"	f	class:JKYi::RedisCluster	signature:(const std::string& ip,int port,uint64_t ms)
JKYi::RedisCluster::getReply	JKYi/db/redis.cc	/^ReplyPtr RedisCluster::getReply(){$/;"	f	class:JKYi::RedisCluster	signature:()
JKYi::RedisCluster::m_cmdTimeout	JKYi/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:JKYi::RedisCluster	typeref:struct:JKYi::RedisCluster::timeval	access:private
JKYi::RedisCluster::m_connectMs	JKYi/db/redis.h	/^    uint32_t m_connectMs;$/;"	m	class:JKYi::RedisCluster	access:private
JKYi::RedisCluster::m_context	JKYi/db/redis.h	/^    std::shared_ptr<redisClusterContext> m_context;$/;"	m	class:JKYi::RedisCluster	access:private
JKYi::RedisCluster::m_host	JKYi/db/redis.h	/^    std::string m_host;$/;"	m	class:JKYi::RedisCluster	access:private
JKYi::RedisCluster::m_port	JKYi/db/redis.h	/^    uint32_t m_port;$/;"	m	class:JKYi::RedisCluster	access:private
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,...)override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,va_list ap) override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    ReplyPtr cmd(const std::vector<std::string>& argv)override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    ReplyPtr getReply()override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    bool connect()override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    bool connect(const std::string& ip,int port ,uint64_t ms = 0)override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    bool reconnect()override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    int appendCmd(const char * fmd,...)override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    int appendCmd(const char * fmt,va_list ap)override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    int appendCmd(const std::vector<std::string>& argv)override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::override	JKYi/db/redis.h	/^    void setTimeout(uint64_t ms)override;$/;"	m	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr<RedisCluster> ptr;$/;"	t	class:JKYi::RedisCluster	access:public
JKYi::RedisCluster::reconnect	JKYi/db/redis.cc	/^bool RedisCluster::reconnect(){$/;"	f	class:JKYi::RedisCluster	signature:()
JKYi::RedisCluster::setTimeout	JKYi/db/redis.cc	/^void RedisCluster::setTimeout(uint64_t ms){$/;"	f	class:JKYi::RedisCluster	signature:(uint64_t ms)
JKYi::RedisManager	JKYi/db/redis.h	/^class RedisManager{$/;"	c	namespace:JKYi
JKYi::RedisManager::RedisManager	JKYi/db/redis.cc	/^RedisManager::RedisManager(){$/;"	f	class:JKYi::RedisManager	signature:()
JKYi::RedisManager::RedisManager	JKYi/db/redis.h	/^    RedisManager();$/;"	p	class:JKYi::RedisManager	access:public	signature:()
JKYi::RedisManager::dump	JKYi/db/redis.cc	/^std::ostream& RedisManager::dump(std::ostream& os){$/;"	f	class:JKYi::RedisManager	signature:(std::ostream& os)
JKYi::RedisManager::dump	JKYi/db/redis.h	/^    std::ostream& dump(std::ostream& os);$/;"	p	class:JKYi::RedisManager	access:public	signature:(std::ostream& os)
JKYi::RedisManager::freeRedis	JKYi/db/redis.cc	/^void RedisManager::freeRedis(IRedis* r){$/;"	f	class:JKYi::RedisManager	signature:(IRedis* r)
JKYi::RedisManager::freeRedis	JKYi/db/redis.h	/^    void freeRedis(IRedis * r);$/;"	p	class:JKYi::RedisManager	access:private	signature:(IRedis * r)
JKYi::RedisManager::get	JKYi/db/redis.cc	/^IRedis::ptr RedisManager::get(const std::string& name){$/;"	f	class:JKYi::RedisManager	signature:(const std::string& name)
JKYi::RedisManager::get	JKYi/db/redis.h	/^    IRedis::ptr get(const std::string& name);$/;"	p	class:JKYi::RedisManager	access:public	signature:(const std::string& name)
JKYi::RedisManager::init	JKYi/db/redis.cc	/^void RedisManager::init(){$/;"	f	class:JKYi::RedisManager	signature:()
JKYi::RedisManager::init	JKYi/db/redis.h	/^    void init();$/;"	p	class:JKYi::RedisManager	access:private	signature:()
JKYi::RedisManager::m_config	JKYi/db/redis.h	/^    std::map<std::string,std::map<std::string,std::string>> m_config;$/;"	m	class:JKYi::RedisManager	access:private
JKYi::RedisManager::m_datas	JKYi/db/redis.h	/^    std::map<std::string,std::list<IRedis*>> m_datas;$/;"	m	class:JKYi::RedisManager	access:private
JKYi::RedisManager::m_mutex	JKYi/db/redis.h	/^    JKYi::RWMutex m_mutex;$/;"	m	class:JKYi::RedisManager	access:private
JKYi::RedisMgr	JKYi/db/redis.h	/^typedef JKYi::Singleton<RedisManager> RedisMgr;$/;"	t	namespace:JKYi
JKYi::RedisReplyClone	JKYi/db/redis.cc	/^redisReply* RedisReplyClone(redisReply* r){$/;"	f	namespace:JKYi	signature:(redisReply* r)
JKYi::RedisUtil	JKYi/db/redis.h	/^class RedisUtil{$/;"	c	namespace:JKYi
JKYi::RedisUtil::Cmd	JKYi/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name,const char * fmt,...){$/;"	f	class:JKYi::RedisUtil	signature:(const std::string& name,const char * fmt,...)
JKYi::RedisUtil::Cmd	JKYi/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name,const char * fmt,va_list ap){$/;"	f	class:JKYi::RedisUtil	signature:(const std::string& name,const char * fmt,va_list ap)
JKYi::RedisUtil::Cmd	JKYi/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name,const std::vector<std::string>& args){$/;"	f	class:JKYi::RedisUtil	signature:(const std::string& name,const std::vector<std::string>& args)
JKYi::RedisUtil::Cmd	JKYi/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name,const char * fmt,...);$/;"	p	class:JKYi::RedisUtil	access:public	signature:(const std::string& name,const char * fmt,...)
JKYi::RedisUtil::Cmd	JKYi/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name,const char * fmt,va_list ap);$/;"	p	class:JKYi::RedisUtil	access:public	signature:(const std::string& name,const char * fmt,va_list ap)
JKYi::RedisUtil::Cmd	JKYi/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name,const std::vector<std::string>& args);$/;"	p	class:JKYi::RedisUtil	access:public	signature:(const std::string& name,const std::vector<std::string>& args)
JKYi::RedisUtil::TryCmd	JKYi/db/redis.cc	/^ReplyPtr RedisUtil::TryCmd(const std::string& name,uint64_t count,$/;"	f	class:JKYi::RedisUtil	signature:(const std::string& name,uint64_t count, const std::vector<std::string>& args)
JKYi::RedisUtil::TryCmd	JKYi/db/redis.cc	/^ReplyPtr RedisUtil::TryCmd(const std::string& name,uint64_t count,const char * fmt,...){$/;"	f	class:JKYi::RedisUtil	signature:(const std::string& name,uint64_t count,const char * fmt,...)
JKYi::RedisUtil::TryCmd	JKYi/db/redis.h	/^    static ReplyPtr TryCmd(const std::string& name,uint64_t count,const char * fmt,...);$/;"	p	class:JKYi::RedisUtil	access:public	signature:(const std::string& name,uint64_t count,const char * fmt,...)
JKYi::RedisUtil::TryCmd	JKYi/db/redis.h	/^    static ReplyPtr TryCmd(const std::string& name,uint64_t count,const std::vector<std::string>& args);$/;"	p	class:JKYi::RedisUtil	access:public	signature:(const std::string& name,uint64_t count,const std::vector<std::string>& args)
JKYi::ReplyPtr	JKYi/db/redis.h	/^typedef std::shared_ptr<redisReply> ReplyPtr;$/;"	t	namespace:JKYi
JKYi::Request	JKYi/protocol.h	/^class Request:public Message{$/;"	c	namespace:JKYi	inherits:Message
JKYi::Request::Request	JKYi/protocol.cc	/^Request::Request()$/;"	f	class:JKYi::Request	signature:()
JKYi::Request::Request	JKYi/protocol.h	/^    Request();$/;"	p	class:JKYi::Request	access:public	signature:()
JKYi::Request::getCmd	JKYi/protocol.h	/^    uint32_t getCmd()const { return m_cmd; }$/;"	f	class:JKYi::Request	access:public	signature:() const
JKYi::Request::getSn	JKYi/protocol.h	/^    uint32_t getSn()const { return m_sn; }$/;"	f	class:JKYi::Request	access:public	signature:() const
JKYi::Request::m_cmd	JKYi/protocol.h	/^    uint32_t m_cmd;$/;"	m	class:JKYi::Request	access:protected
JKYi::Request::m_sn	JKYi/protocol.h	/^    uint32_t m_sn;$/;"	m	class:JKYi::Request	access:protected
JKYi::Request::override	JKYi/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray)override;$/;"	m	class:JKYi::Request	access:public
JKYi::Request::override	JKYi/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr byetarray)override;$/;"	m	class:JKYi::Request	access:public
JKYi::Request::parseFromByteArray	JKYi/protocol.cc	/^bool Request::parseFromByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Request	signature:(ByteArray::ptr bytearray)
JKYi::Request::ptr	JKYi/protocol.h	/^    typedef std::shared_ptr<Request> ptr;$/;"	t	class:JKYi::Request	access:public
JKYi::Request::serializeToByteArray	JKYi/protocol.cc	/^bool Request::serializeToByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Request	signature:(ByteArray::ptr bytearray)
JKYi::Request::setCmd	JKYi/protocol.h	/^    void setCmd(uint32_t v) { m_cmd = v; }$/;"	f	class:JKYi::Request	access:public	signature:(uint32_t v)
JKYi::Request::setSn	JKYi/protocol.h	/^    void setSn(uint32_t v) { m_sn = v; }$/;"	f	class:JKYi::Request	access:public	signature:(uint32_t v)
JKYi::Response	JKYi/protocol.h	/^class Response:public Message{$/;"	c	namespace:JKYi	inherits:Message
JKYi::Response::Response	JKYi/protocol.cc	/^Response::Response()$/;"	f	class:JKYi::Response	signature:()
JKYi::Response::Response	JKYi/protocol.h	/^    Response();$/;"	p	class:JKYi::Response	access:public	signature:()
JKYi::Response::getCmd	JKYi/protocol.h	/^    uint32_t getCmd()const { return m_cmd; }$/;"	f	class:JKYi::Response	access:public	signature:() const
JKYi::Response::getResult	JKYi/protocol.h	/^    uint32_t getResult()const { return m_result; }$/;"	f	class:JKYi::Response	access:public	signature:() const
JKYi::Response::getResultStr	JKYi/protocol.h	/^    const std::string& getResultStr()const { return m_resultStr; }$/;"	f	class:JKYi::Response	access:public	signature:() const
JKYi::Response::getSn	JKYi/protocol.h	/^    uint32_t getSn()const { return m_sn; }$/;"	f	class:JKYi::Response	access:public	signature:() const
JKYi::Response::m_cmd	JKYi/protocol.h	/^    uint32_t m_cmd;$/;"	m	class:JKYi::Response	access:protected
JKYi::Response::m_result	JKYi/protocol.h	/^    uint32_t m_result;$/;"	m	class:JKYi::Response	access:protected
JKYi::Response::m_resultStr	JKYi/protocol.h	/^    std::string m_resultStr;$/;"	m	class:JKYi::Response	access:protected
JKYi::Response::m_sn	JKYi/protocol.h	/^    uint32_t m_sn;$/;"	m	class:JKYi::Response	access:protected
JKYi::Response::override	JKYi/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	m	class:JKYi::Response	access:public
JKYi::Response::override	JKYi/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray)override;$/;"	m	class:JKYi::Response	access:public
JKYi::Response::parseFromByteArray	JKYi/protocol.cc	/^bool Response::parseFromByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Response	signature:(ByteArray::ptr bytearray)
JKYi::Response::ptr	JKYi/protocol.h	/^    typedef std::shared_ptr<Response> ptr;$/;"	t	class:JKYi::Response	access:public
JKYi::Response::serializeToByteArray	JKYi/protocol.cc	/^bool Response::serializeToByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Response	signature:(ByteArray::ptr bytearray)
JKYi::Response::setCmd	JKYi/protocol.h	/^    void setCmd(uint32_t v) { m_cmd = v; }$/;"	f	class:JKYi::Response	access:public	signature:(uint32_t v)
JKYi::Response::setResult	JKYi/protocol.h	/^    void setResult(uint32_t v) { m_result = v; }$/;"	f	class:JKYi::Response	access:public	signature:(uint32_t v)
JKYi::Response::setResultStr	JKYi/protocol.h	/^    void setResultStr(const std::string& str) { m_resultStr = str; }$/;"	f	class:JKYi::Response	access:public	signature:(const std::string& str)
JKYi::Response::setSn	JKYi/protocol.h	/^    void setSn(uint32_t v) { m_sn = v; }$/;"	f	class:JKYi::Response	access:public	signature:(uint32_t v)
JKYi::SSLSocket	JKYi/socket.h	/^class SSLSocket:public Socket{$/;"	c	namespace:JKYi	inherits:Socket
JKYi::SSLSocket::CreateTCP	JKYi/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCP(JKYi::Address::ptr address){$/;"	f	class:JKYi::SSLSocket	signature:(JKYi::Address::ptr address)
JKYi::SSLSocket::CreateTCP	JKYi/socket.h	/^    static SSLSocket::ptr CreateTCP(JKYi::Address::ptr addr);$/;"	p	class:JKYi::SSLSocket	access:public	signature:(JKYi::Address::ptr addr)
JKYi::SSLSocket::CreateTCPSocket	JKYi/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCPSocket(){$/;"	f	class:JKYi::SSLSocket	signature:()
JKYi::SSLSocket::CreateTCPSocket	JKYi/socket.h	/^    static SSLSocket::ptr CreateTCPSocket();$/;"	p	class:JKYi::SSLSocket	access:public	signature:()
JKYi::SSLSocket::CreateTCPSocket6	JKYi/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCPSocket6(){$/;"	f	class:JKYi::SSLSocket	signature:()
JKYi::SSLSocket::CreateTCPSocket6	JKYi/socket.h	/^    static SSLSocket::ptr CreateTCPSocket6();$/;"	p	class:JKYi::SSLSocket	access:public	signature:()
JKYi::SSLSocket::SSLSocket	JKYi/socket.cc	/^SSLSocket::SSLSocket(int family,int type,int protocol)$/;"	f	class:JKYi::SSLSocket	signature:(int family,int type,int protocol)
JKYi::SSLSocket::SSLSocket	JKYi/socket.h	/^    SSLSocket(int family,int type,int protocol = 0);$/;"	p	class:JKYi::SSLSocket	access:public	signature:(int family,int type,int protocol = 0)
JKYi::SSLSocket::accept	JKYi/socket.cc	/^Socket::ptr SSLSocket::accept(){$/;"	f	class:JKYi::SSLSocket	signature:()
JKYi::SSLSocket::bind	JKYi/socket.cc	/^bool SSLSocket::bind(const Address::ptr addr){$/;"	f	class:JKYi::SSLSocket	signature:(const Address::ptr addr)
JKYi::SSLSocket::close	JKYi/socket.cc	/^bool SSLSocket::close(){$/;"	f	class:JKYi::SSLSocket	signature:()
JKYi::SSLSocket::connect	JKYi/socket.cc	/^bool SSLSocket::connect(const Address::ptr addr,int64_t timeout_ms){$/;"	f	class:JKYi::SSLSocket	signature:(const Address::ptr addr,int64_t timeout_ms)
JKYi::SSLSocket::dump	JKYi/socket.cc	/^std::ostream& SSLSocket::dump(std::ostream& os)const{$/;"	f	class:JKYi::SSLSocket	signature:(std::ostream& os) const
JKYi::SSLSocket::init	JKYi/socket.cc	/^bool SSLSocket::init(int sock){$/;"	f	class:JKYi::SSLSocket	signature:(int sock)
JKYi::SSLSocket::listen	JKYi/socket.cc	/^bool SSLSocket::listen(int backlog){$/;"	f	class:JKYi::SSLSocket	signature:(int backlog)
JKYi::SSLSocket::loadCertificates	JKYi/socket.cc	/^bool SSLSocket::loadCertificates(const std::string& cert_file,$/;"	f	class:JKYi::SSLSocket	signature:(const std::string& cert_file, const std::string& key_file)
JKYi::SSLSocket::loadCertificates	JKYi/socket.h	/^    bool loadCertificates(const std::string& cert_file,const std::string& key_file);$/;"	p	class:JKYi::SSLSocket	access:public	signature:(const std::string& cert_file,const std::string& key_file)
JKYi::SSLSocket::m_ctx	JKYi/socket.h	/^    std::shared_ptr<SSL_CTX> m_ctx;$/;"	m	class:JKYi::SSLSocket	access:private
JKYi::SSLSocket::m_ssl	JKYi/socket.h	/^    std::shared_ptr<SSL> m_ssl;$/;"	m	class:JKYi::SSLSocket	access:private
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual Socket::ptr accept()override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual bool bind(const Address::ptr addr)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual bool close()override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual bool connect(const Address::ptr addr,int64_t timeout_ms = -1)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual bool init(int sock)override;$/;"	m	class:JKYi::SSLSocket	access:protected
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual bool listen(int backlog = SOMAXCONN)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual int recv(iovec * buffers,size_t length,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual int recv(void * buffer,size_t length,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual int recvFrom(iovec * buffers,size_t length,Address::ptr from,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual int recvFrom(void * buffer,size_t length,Address::ptr from,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual int send(const iovec* buffers,size_t length,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual int send(const void * buffer,size_t length,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual int sendTo(const iovec * buffers,size_t length,const Address::ptr to,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual int sendTo(const void * buffer,size_t length,const Address::ptr to,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::override	JKYi/socket.h	/^    virtual std::ostream& dump(std::ostream& os)const override;$/;"	m	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::ptr	JKYi/socket.h	/^    typedef std::shared_ptr<SSLSocket> ptr;$/;"	t	class:JKYi::SSLSocket	access:public
JKYi::SSLSocket::recv	JKYi/socket.cc	/^int SSLSocket::recv(iovec * buffers,size_t length,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(iovec * buffers,size_t length,int flags)
JKYi::SSLSocket::recv	JKYi/socket.cc	/^int SSLSocket::recv(void * buffer,size_t length,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(void * buffer,size_t length,int flags)
JKYi::SSLSocket::recvFrom	JKYi/socket.cc	/^int SSLSocket::recvFrom(iovec * buffers,size_t length,Address::ptr from,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(iovec * buffers,size_t length,Address::ptr from,int flags)
JKYi::SSLSocket::recvFrom	JKYi/socket.cc	/^int SSLSocket::recvFrom(void * buffer,size_t length,Address::ptr from,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(void * buffer,size_t length,Address::ptr from,int flags)
JKYi::SSLSocket::send	JKYi/socket.cc	/^int SSLSocket::send(const iovec * buffers,size_t length,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(const iovec * buffers,size_t length,int flags)
JKYi::SSLSocket::send	JKYi/socket.cc	/^int SSLSocket::send(const void * buffer,size_t length,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(const void * buffer,size_t length,int flags)
JKYi::SSLSocket::sendTo	JKYi/socket.cc	/^int SSLSocket::sendTo(const iovec * buffers,size_t length,const Address::ptr to$/;"	f	class:JKYi::SSLSocket	signature:(const iovec * buffers,size_t length,const Address::ptr to ,int flags)
JKYi::SSLSocket::sendTo	JKYi/socket.cc	/^int SSLSocket::sendTo(const void * buffer,size_t length,const Address::ptr to,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(const void * buffer,size_t length,const Address::ptr to,int flags)
JKYi::Scheduler	JKYi/scheduler.h	/^class Scheduler{$/;"	c	namespace:JKYi
JKYi::Scheduler::FiberAndThread	JKYi/scheduler.h	/^  struct FiberAndThread{$/;"	s	class:JKYi::Scheduler	access:private
JKYi::Scheduler::FiberAndThread::FiberAndThread	JKYi/scheduler.h	/^	 FiberAndThread()$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:()
JKYi::Scheduler::FiberAndThread::FiberAndThread	JKYi/scheduler.h	/^	 FiberAndThread(Fiber::ptr * f,int thr)$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:(Fiber::ptr * f,int thr)
JKYi::Scheduler::FiberAndThread::FiberAndThread	JKYi/scheduler.h	/^	 FiberAndThread(Fiber::ptr f,int thr)$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:(Fiber::ptr f,int thr)
JKYi::Scheduler::FiberAndThread::FiberAndThread	JKYi/scheduler.h	/^	 FiberAndThread(std::function<void ()>*f,int thr)$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:(std::function<void ()>*f,int thr)
JKYi::Scheduler::FiberAndThread::FiberAndThread	JKYi/scheduler.h	/^	 FiberAndThread(std::function<void ()>f,int thr)$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:(std::function<void ()>f,int thr)
JKYi::Scheduler::FiberAndThread::cb	JKYi/scheduler.h	/^	 std::function<void ()> cb;$/;"	m	struct:JKYi::Scheduler::FiberAndThread	access:public
JKYi::Scheduler::FiberAndThread::fiber	JKYi/scheduler.h	/^     Fiber::ptr fiber; $/;"	m	struct:JKYi::Scheduler::FiberAndThread	access:public
JKYi::Scheduler::FiberAndThread::reset	JKYi/scheduler.h	/^	 void reset(){$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:()
JKYi::Scheduler::FiberAndThread::thread	JKYi/scheduler.h	/^	 int thread;$/;"	m	struct:JKYi::Scheduler::FiberAndThread	access:public
JKYi::Scheduler::GetMainFiber	JKYi/scheduler.cc	/^Fiber* Scheduler::GetMainFiber(){$/;"	f	class:JKYi::Scheduler	signature:()
JKYi::Scheduler::GetMainFiber	JKYi/scheduler.h	/^   static Fiber* GetMainFiber();$/;"	p	class:JKYi::Scheduler	access:public	signature:()
JKYi::Scheduler::GetThis	JKYi/scheduler.cc	/^Scheduler* Scheduler::GetThis(){$/;"	f	class:JKYi::Scheduler	signature:()
JKYi::Scheduler::GetThis	JKYi/scheduler.h	/^   static Scheduler* GetThis();$/;"	p	class:JKYi::Scheduler	access:public	signature:()
JKYi::Scheduler::MutexType	JKYi/scheduler.h	/^   typedef Mutex MutexType;$/;"	t	class:JKYi::Scheduler	access:public
JKYi::Scheduler::Scheduler	JKYi/scheduler.cc	/^Scheduler::Scheduler(size_t threads,bool use_caller,const std::string&name)$/;"	f	class:JKYi::Scheduler	signature:(size_t threads,bool use_caller,const std::string&name)
JKYi::Scheduler::Scheduler	JKYi/scheduler.h	/^   Scheduler(size_t threads = 1,bool use_caller = true,const std::string& name = "");$/;"	p	class:JKYi::Scheduler	access:public	signature:(size_t threads = 1,bool use_caller = true,const std::string& name = Ó)
JKYi::Scheduler::dump	JKYi/scheduler.cc	/^std::ostream& Scheduler::dump(std::ostream& os){$/;"	f	class:JKYi::Scheduler	signature:(std::ostream& os)
JKYi::Scheduler::dump	JKYi/scheduler.h	/^   std::ostream& dump(std::ostream& os);$/;"	p	class:JKYi::Scheduler	access:public	signature:(std::ostream& os)
JKYi::Scheduler::getName	JKYi/scheduler.h	/^   const std::string& getName()const { return m_name; }$/;"	f	class:JKYi::Scheduler	access:public	signature:() const
JKYi::Scheduler::hasIdleThreads	JKYi/scheduler.h	/^   bool hasIdleThreads(){return m_idleThreadCount>0;}$/;"	f	class:JKYi::Scheduler	access:protected	signature:()
JKYi::Scheduler::idle	JKYi/scheduler.cc	/^void Scheduler::idle(){$/;"	f	class:JKYi::Scheduler	signature:()
JKYi::Scheduler::idle	JKYi/scheduler.h	/^   virtual void idle();$/;"	p	class:JKYi::Scheduler	access:protected	signature:()
JKYi::Scheduler::m_activeThreadCount	JKYi/scheduler.h	/^   std::atomic<size_t> m_activeThreadCount={0};$/;"	m	class:JKYi::Scheduler	access:protected
JKYi::Scheduler::m_autoStop	JKYi/scheduler.h	/^   bool m_autoStop=false;$/;"	m	class:JKYi::Scheduler	access:protected
JKYi::Scheduler::m_fibers	JKYi/scheduler.h	/^  std::list<FiberAndThread> m_fibers;$/;"	m	class:JKYi::Scheduler	access:private
JKYi::Scheduler::m_idleThreadCount	JKYi/scheduler.h	/^   std::atomic<size_t> m_idleThreadCount={0};$/;"	m	class:JKYi::Scheduler	access:protected
JKYi::Scheduler::m_mutex	JKYi/scheduler.h	/^   MutexType m_mutex;$/;"	m	class:JKYi::Scheduler	access:private
JKYi::Scheduler::m_name	JKYi/scheduler.h	/^  std::string m_name;$/;"	m	class:JKYi::Scheduler	access:private
JKYi::Scheduler::m_rootFiber	JKYi/scheduler.h	/^  Fiber::ptr m_rootFiber;$/;"	m	class:JKYi::Scheduler	access:private
JKYi::Scheduler::m_rootThread	JKYi/scheduler.h	/^   int m_rootThread=0;$/;"	m	class:JKYi::Scheduler	access:protected
JKYi::Scheduler::m_stopping	JKYi/scheduler.h	/^   bool m_stopping=true;$/;"	m	class:JKYi::Scheduler	access:protected
JKYi::Scheduler::m_threadCount	JKYi/scheduler.h	/^   size_t m_threadCount=0;$/;"	m	class:JKYi::Scheduler	access:protected
JKYi::Scheduler::m_threadIds	JKYi/scheduler.h	/^   std::vector<int> m_threadIds;$/;"	m	class:JKYi::Scheduler	access:protected
JKYi::Scheduler::m_threads	JKYi/scheduler.h	/^  std::vector<Thread::ptr> m_threads;$/;"	m	class:JKYi::Scheduler	access:private
JKYi::Scheduler::ptr	JKYi/scheduler.h	/^   typedef std::shared_ptr<Scheduler> ptr;$/;"	t	class:JKYi::Scheduler	access:public
JKYi::Scheduler::run	JKYi/scheduler.cc	/^void Scheduler::run(){$/;"	f	class:JKYi::Scheduler	signature:()
JKYi::Scheduler::run	JKYi/scheduler.h	/^   void run();$/;"	p	class:JKYi::Scheduler	access:protected	signature:()
JKYi::Scheduler::schedule	JKYi/scheduler.h	/^   void schedule(FiberOrCb fc,int thread = -1){$/;"	f	class:JKYi::Scheduler	access:public	signature:(FiberOrCb fc,int thread = -1)
JKYi::Scheduler::schedule	JKYi/scheduler.h	/^   void schedule(InputIterator begin,InputIterator end){$/;"	f	class:JKYi::Scheduler	access:public	signature:(InputIterator begin,InputIterator end)
JKYi::Scheduler::scheduleNoLock	JKYi/scheduler.h	/^   bool scheduleNoLock(FiberOrCb fc,int thread){$/;"	f	class:JKYi::Scheduler	access:private	signature:(FiberOrCb fc,int thread)
JKYi::Scheduler::setThis	JKYi/scheduler.cc	/^void Scheduler::setThis(){$/;"	f	class:JKYi::Scheduler	signature:()
JKYi::Scheduler::setThis	JKYi/scheduler.h	/^   void setThis();$/;"	p	class:JKYi::Scheduler	access:protected	signature:()
JKYi::Scheduler::start	JKYi/scheduler.cc	/^void Scheduler::start(){$/;"	f	class:JKYi::Scheduler	signature:()
JKYi::Scheduler::start	JKYi/scheduler.h	/^   void start();$/;"	p	class:JKYi::Scheduler	access:public	signature:()
JKYi::Scheduler::stop	JKYi/scheduler.cc	/^void Scheduler::stop(){$/;"	f	class:JKYi::Scheduler	signature:()
JKYi::Scheduler::stop	JKYi/scheduler.h	/^   void stop();$/;"	p	class:JKYi::Scheduler	access:public	signature:()
JKYi::Scheduler::stopping	JKYi/scheduler.cc	/^bool Scheduler::stopping(){$/;"	f	class:JKYi::Scheduler	signature:()
JKYi::Scheduler::stopping	JKYi/scheduler.h	/^   virtual bool stopping();$/;"	p	class:JKYi::Scheduler	access:protected	signature:()
JKYi::Scheduler::tickle	JKYi/scheduler.cc	/^void Scheduler::tickle(){$/;"	f	class:JKYi::Scheduler	signature:()
JKYi::Scheduler::tickle	JKYi/scheduler.h	/^   virtual void tickle();$/;"	p	class:JKYi::Scheduler	access:protected	signature:()
JKYi::Scheduler::~Scheduler	JKYi/scheduler.cc	/^Scheduler::~Scheduler(){$/;"	f	class:JKYi::Scheduler	signature:()
JKYi::Scheduler::~Scheduler	JKYi/scheduler.h	/^   virtual ~Scheduler();$/;"	p	class:JKYi::Scheduler	access:public	signature:()
JKYi::ScopedLockImpl	JKYi/mutex.h	/^class ScopedLockImpl{$/;"	c	namespace:JKYi
JKYi::ScopedLockImpl::ScopedLockImpl	JKYi/mutex.h	/^  ScopedLockImpl(T& mutex)$/;"	f	class:JKYi::ScopedLockImpl	access:public	signature:(T& mutex)
JKYi::ScopedLockImpl::lock	JKYi/mutex.h	/^  void lock(){$/;"	f	class:JKYi::ScopedLockImpl	access:public	signature:()
JKYi::ScopedLockImpl::m_locked	JKYi/mutex.h	/^  bool m_locked;$/;"	m	class:JKYi::ScopedLockImpl	access:private
JKYi::ScopedLockImpl::m_mutex	JKYi/mutex.h	/^  T& m_mutex;$/;"	m	class:JKYi::ScopedLockImpl	access:private
JKYi::ScopedLockImpl::unlock	JKYi/mutex.h	/^  void unlock(){$/;"	f	class:JKYi::ScopedLockImpl	access:public	signature:()
JKYi::ScopedLockImpl::~ScopedLockImpl	JKYi/mutex.h	/^  ~ScopedLockImpl(){$/;"	f	class:JKYi::ScopedLockImpl	access:public	signature:()
JKYi::Semaphore	JKYi/mutex.h	/^class Semaphore:Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::Semaphore::Semaphore	JKYi/mutex.cc	/^Semaphore::Semaphore(uint32_t count){$/;"	f	class:JKYi::Semaphore	signature:(uint32_t count)
JKYi::Semaphore::Semaphore	JKYi/mutex.h	/^   Semaphore(uint32_t count=0);$/;"	p	class:JKYi::Semaphore	access:public	signature:(uint32_t count=0)
JKYi::Semaphore::m_semaphore	JKYi/mutex.h	/^   sem_t m_semaphore; $/;"	m	class:JKYi::Semaphore	access:private
JKYi::Semaphore::notify	JKYi/mutex.cc	/^void Semaphore::notify(){$/;"	f	class:JKYi::Semaphore	signature:()
JKYi::Semaphore::notify	JKYi/mutex.h	/^   void notify();$/;"	p	class:JKYi::Semaphore	access:public	signature:()
JKYi::Semaphore::wait	JKYi/mutex.cc	/^void Semaphore::wait(){$/;"	f	class:JKYi::Semaphore	signature:()
JKYi::Semaphore::wait	JKYi/mutex.h	/^   void wait();$/;"	p	class:JKYi::Semaphore	access:public	signature:()
JKYi::Semaphore::~Semaphore	JKYi/mutex.cc	/^Semaphore::~Semaphore(){$/;"	f	class:JKYi::Semaphore	signature:()
JKYi::Semaphore::~Semaphore	JKYi/mutex.h	/^   ~Semaphore();$/;"	p	class:JKYi::Semaphore	access:public	signature:()
JKYi::Singleton	JKYi/singleton.h	/^class Singleton{$/;"	c	namespace:JKYi
JKYi::Singleton::GetInstance	JKYi/singleton.h	/^   static T* GetInstance(){$/;"	f	class:JKYi::Singleton	access:public	signature:()
JKYi::SingletonPtr	JKYi/singleton.h	/^class SingletonPtr{$/;"	c	namespace:JKYi
JKYi::SingletonPtr::getInstance	JKYi/singleton.h	/^    static std::shared_ptr<T> getInstance(){$/;"	f	class:JKYi::SingletonPtr	access:public	signature:()
JKYi::Socket	JKYi/socket.h	/^class Socket:public std::enable_shared_from_this<Socket>,Noncopyable{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this,Noncopyable
JKYi::Socket::CreateTCP	JKYi/socket.cc	/^Socket::ptr Socket::CreateTCP(Address::ptr address){$/;"	f	class:JKYi::Socket	signature:(Address::ptr address)
JKYi::Socket::CreateTCP	JKYi/socket.h	/^    static Socket::ptr CreateTCP(Address::ptr address);$/;"	p	class:JKYi::Socket	access:public	signature:(Address::ptr address)
JKYi::Socket::CreateTCPSocket	JKYi/socket.cc	/^Socket::ptr Socket::CreateTCPSocket(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::CreateTCPSocket	JKYi/socket.h	/^    static Socket::ptr CreateTCPSocket();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::CreateTCPSocket6	JKYi/socket.cc	/^Socket::ptr Socket::CreateTCPSocket6(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::CreateTCPSocket6	JKYi/socket.h	/^    static Socket::ptr CreateTCPSocket6();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::CreateUDP	JKYi/socket.cc	/^Socket::ptr Socket::CreateUDP(Address::ptr address){$/;"	f	class:JKYi::Socket	signature:(Address::ptr address)
JKYi::Socket::CreateUDP	JKYi/socket.h	/^    static Socket::ptr CreateUDP(Address::ptr address);$/;"	p	class:JKYi::Socket	access:public	signature:(Address::ptr address)
JKYi::Socket::CreateUDPSocket	JKYi/socket.cc	/^Socket::ptr Socket::CreateUDPSocket(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::CreateUDPSocket	JKYi/socket.h	/^    static Socket::ptr CreateUDPSocket();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::CreateUDPSocket6	JKYi/socket.cc	/^Socket::ptr Socket::CreateUDPSocket6(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::CreateUDPSocket6	JKYi/socket.h	/^    static Socket::ptr CreateUDPSocket6();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::CreateUnixTCPSocket	JKYi/socket.cc	/^Socket::ptr Socket::CreateUnixTCPSocket(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::CreateUnixTCPSocket	JKYi/socket.h	/^    static Socket::ptr CreateUnixTCPSocket();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::CreateUnixUDPSocket	JKYi/socket.cc	/^Socket::ptr Socket::CreateUnixUDPSocket(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::CreateUnixUDPSocket	JKYi/socket.h	/^    static Socket::ptr CreateUnixUDPSocket();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::Family	JKYi/socket.h	/^    enum Family{$/;"	g	class:JKYi::Socket	access:public
JKYi::Socket::IPv4	JKYi/socket.h	/^        IPv4 = AF_INET,$/;"	e	enum:JKYi::Socket::Family
JKYi::Socket::IPv6	JKYi/socket.h	/^        IPv6 = AF_INET6,$/;"	e	enum:JKYi::Socket::Family
JKYi::Socket::Socket	JKYi/socket.cc	/^Socket::Socket(int family,int type,int protocol)$/;"	f	class:JKYi::Socket	signature:(int family,int type,int protocol)
JKYi::Socket::Socket	JKYi/socket.h	/^    Socket(int family,int type,int protocol = 0);$/;"	p	class:JKYi::Socket	access:public	signature:(int family,int type,int protocol = 0)
JKYi::Socket::TCP	JKYi/socket.h	/^        TCP = SOCK_STREAM,$/;"	e	enum:JKYi::Socket::Type
JKYi::Socket::Type	JKYi/socket.h	/^    enum Type{$/;"	g	class:JKYi::Socket	access:public
JKYi::Socket::UDP	JKYi/socket.h	/^        UDP = SOCK_DGRAM$/;"	e	enum:JKYi::Socket::Type
JKYi::Socket::Unix	JKYi/socket.h	/^        Unix = AF_UNIX$/;"	e	enum:JKYi::Socket::Family
JKYi::Socket::accept	JKYi/socket.cc	/^Socket::ptr Socket::accept(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::accept	JKYi/socket.h	/^    virtual Socket::ptr accept();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::bind	JKYi/socket.cc	/^bool Socket::bind(Address::ptr address){$/;"	f	class:JKYi::Socket	signature:(Address::ptr address)
JKYi::Socket::bind	JKYi/socket.h	/^    virtual bool bind(const Address::ptr addr);$/;"	p	class:JKYi::Socket	access:public	signature:(const Address::ptr addr)
JKYi::Socket::cancelAccept	JKYi/socket.cc	/^bool Socket::cancelAccept(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::cancelAccept	JKYi/socket.h	/^    bool cancelAccept();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::cancelAll	JKYi/socket.cc	/^bool Socket::cancelAll(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::cancelAll	JKYi/socket.h	/^    bool cancelAll();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::cancelRead	JKYi/socket.cc	/^bool Socket::cancelRead(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::cancelRead	JKYi/socket.h	/^    bool cancelRead();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::cancelWrite	JKYi/socket.cc	/^bool Socket::cancelWrite(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::cancelWrite	JKYi/socket.h	/^    bool cancelWrite();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::close	JKYi/socket.cc	/^bool Socket::close(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::close	JKYi/socket.h	/^    virtual bool close();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::connect	JKYi/socket.cc	/^bool Socket::connect(const Address::ptr addr,int64_t timeout_ms){$/;"	f	class:JKYi::Socket	signature:(const Address::ptr addr,int64_t timeout_ms)
JKYi::Socket::connect	JKYi/socket.h	/^    virtual bool connect(const Address::ptr addr,int64_t timeout_ms = -1);$/;"	p	class:JKYi::Socket	access:public	signature:(const Address::ptr addr,int64_t timeout_ms = -1)
JKYi::Socket::dump	JKYi/socket.cc	/^std::ostream& Socket::dump(std::ostream&os)const{$/;"	f	class:JKYi::Socket	signature:(std::ostream&os) const
JKYi::Socket::dump	JKYi/socket.h	/^    virtual std::ostream& dump(std::ostream&os)const;$/;"	p	class:JKYi::Socket	access:public	signature:(std::ostream&os) const
JKYi::Socket::getError	JKYi/socket.cc	/^int Socket::getError(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::getError	JKYi/socket.h	/^    int getError();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::getFamily	JKYi/socket.h	/^    int getFamily()const { return m_family ;};$/;"	f	class:JKYi::Socket	access:public	signature:() const
JKYi::Socket::getLocalAddress	JKYi/socket.cc	/^Address::ptr Socket::getLocalAddress(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::getLocalAddress	JKYi/socket.h	/^    Address::ptr getLocalAddress();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::getOption	JKYi/socket.cc	/^bool Socket::getOption(int level,int option,void *result,socklen_t *len){$/;"	f	class:JKYi::Socket	signature:(int level,int option,void *result,socklen_t *len)
JKYi::Socket::getOption	JKYi/socket.h	/^    bool getOption(int level,int option,T&result){$/;"	f	class:JKYi::Socket	access:public	signature:(int level,int option,T&result)
JKYi::Socket::getOption	JKYi/socket.h	/^    bool getOption(int level,int option,void *result,socklen_t *len);$/;"	p	class:JKYi::Socket	access:public	signature:(int level,int option,void *result,socklen_t *len)
JKYi::Socket::getProtocol	JKYi/socket.h	/^    int getProtocol()const { return m_protocol; }$/;"	f	class:JKYi::Socket	access:public	signature:() const
JKYi::Socket::getRcvTimeout	JKYi/socket.cc	/^int64_t Socket::getRcvTimeout(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::getRcvTimeout	JKYi/socket.h	/^    int64_t getRcvTimeout();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::getRemoteAddress	JKYi/socket.cc	/^Address::ptr Socket::getRemoteAddress(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::getRemoteAddress	JKYi/socket.h	/^    Address::ptr getRemoteAddress();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::getSendTimeout	JKYi/socket.cc	/^int64_t Socket::getSendTimeout(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::getSendTimeout	JKYi/socket.h	/^    int64_t getSendTimeout();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::Socket::getSocket	JKYi/socket.h	/^    int getSocket()const{ return m_sock; }$/;"	f	class:JKYi::Socket	access:public	signature:() const
JKYi::Socket::getType	JKYi/socket.h	/^    int getType()const { return m_type; }$/;"	f	class:JKYi::Socket	access:public	signature:() const
JKYi::Socket::init	JKYi/socket.cc	/^bool Socket::init(int sock){$/;"	f	class:JKYi::Socket	signature:(int sock)
JKYi::Socket::init	JKYi/socket.h	/^    virtual bool init(int sock);$/;"	p	class:JKYi::Socket	access:protected	signature:(int sock)
JKYi::Socket::initSock	JKYi/socket.cc	/^void Socket::initSock(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::initSock	JKYi/socket.h	/^    void initSock();$/;"	p	class:JKYi::Socket	access:protected	signature:()
JKYi::Socket::isConnected	JKYi/socket.h	/^    bool isConnected()const { return m_isConnected; }$/;"	f	class:JKYi::Socket	access:public	signature:() const
JKYi::Socket::isValid	JKYi/socket.h	/^    bool isValid()const  { return m_sock != -1; }$/;"	f	class:JKYi::Socket	access:public	signature:() const
JKYi::Socket::listen	JKYi/socket.cc	/^bool Socket::listen(int backlog){$/;"	f	class:JKYi::Socket	signature:(int backlog)
JKYi::Socket::listen	JKYi/socket.h	/^    virtual bool listen(int backlog = SOMAXCONN);$/;"	p	class:JKYi::Socket	access:public	signature:(int backlog = SOMAXCONN)
JKYi::Socket::m_family	JKYi/socket.h	/^    int m_family;$/;"	m	class:JKYi::Socket	access:protected
JKYi::Socket::m_isConnected	JKYi/socket.h	/^    bool m_isConnected;$/;"	m	class:JKYi::Socket	access:protected
JKYi::Socket::m_localAddress	JKYi/socket.h	/^    Address::ptr m_localAddress;$/;"	m	class:JKYi::Socket	access:protected
JKYi::Socket::m_protocol	JKYi/socket.h	/^    int m_protocol;$/;"	m	class:JKYi::Socket	access:protected
JKYi::Socket::m_remoteAddress	JKYi/socket.h	/^    Address::ptr m_remoteAddress;$/;"	m	class:JKYi::Socket	access:protected
JKYi::Socket::m_sock	JKYi/socket.h	/^    int m_sock;$/;"	m	class:JKYi::Socket	access:protected
JKYi::Socket::m_type	JKYi/socket.h	/^    int m_type;$/;"	m	class:JKYi::Socket	access:protected
JKYi::Socket::newSock	JKYi/socket.cc	/^void Socket::newSock(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::newSock	JKYi/socket.h	/^    void newSock();$/;"	p	class:JKYi::Socket	access:protected	signature:()
JKYi::Socket::ptr	JKYi/socket.h	/^    typedef std::shared_ptr<Socket> ptr;$/;"	t	class:JKYi::Socket	access:public
JKYi::Socket::reconnect	JKYi/socket.cc	/^bool Socket::reconnect(int64_t timeout_ms){$/;"	f	class:JKYi::Socket	signature:(int64_t timeout_ms)
JKYi::Socket::reconnect	JKYi/socket.h	/^    virtual bool reconnect(int64_t timeout_ms=-1);$/;"	p	class:JKYi::Socket	access:public	signature:(int64_t timeout_ms=-1)
JKYi::Socket::recv	JKYi/socket.cc	/^int Socket::recv(struct iovec*buffers,size_t len,int flags){$/;"	f	class:JKYi::Socket	signature:(struct iovec*buffers,size_t len,int flags)
JKYi::Socket::recv	JKYi/socket.cc	/^int Socket::recv(void *buffer,size_t len,int flags){$/;"	f	class:JKYi::Socket	signature:(void *buffer,size_t len,int flags)
JKYi::Socket::recv	JKYi/socket.h	/^    virtual int recv(iovec*buffers,size_t len,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(iovec*buffers,size_t len,int flags=0)
JKYi::Socket::recv	JKYi/socket.h	/^    virtual int recv(void * buffer,size_t len,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(void * buffer,size_t len,int flags=0)
JKYi::Socket::recvFrom	JKYi/socket.cc	/^int Socket::recvFrom(iovec*buffers,size_t len,Address::ptr from,int flags){$/;"	f	class:JKYi::Socket	signature:(iovec*buffers,size_t len,Address::ptr from,int flags)
JKYi::Socket::recvFrom	JKYi/socket.cc	/^int Socket::recvFrom(void *buffer,size_t len,Address::ptr from,int flags){$/;"	f	class:JKYi::Socket	signature:(void *buffer,size_t len,Address::ptr from,int flags)
JKYi::Socket::recvFrom	JKYi/socket.h	/^    virtual int recvFrom(iovec*buffers,size_t len,Address::ptr from,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(iovec*buffers,size_t len,Address::ptr from,int flags=0)
JKYi::Socket::recvFrom	JKYi/socket.h	/^    virtual int recvFrom(void *buffer,size_t len,Address::ptr from,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(void *buffer,size_t len,Address::ptr from,int flags=0)
JKYi::Socket::send	JKYi/socket.cc	/^int Socket::send(const iovec*buffers,size_t len,int flags){$/;"	f	class:JKYi::Socket	signature:(const iovec*buffers,size_t len,int flags)
JKYi::Socket::send	JKYi/socket.cc	/^int Socket::send(const void *buffer,size_t len,int flags){$/;"	f	class:JKYi::Socket	signature:(const void *buffer,size_t len,int flags)
JKYi::Socket::send	JKYi/socket.h	/^    virtual int send(const iovec*buffers,size_t len,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(const iovec*buffers,size_t len,int flags=0)
JKYi::Socket::send	JKYi/socket.h	/^    virtual int send(const void *buffer,size_t len,int flag=0);$/;"	p	class:JKYi::Socket	access:public	signature:(const void *buffer,size_t len,int flag=0)
JKYi::Socket::sendTo	JKYi/socket.cc	/^int Socket::sendTo(const struct iovec*buffers,size_t len,const Address::ptr to,int flags){$/;"	f	class:JKYi::Socket	signature:(const struct iovec*buffers,size_t len,const Address::ptr to,int flags)
JKYi::Socket::sendTo	JKYi/socket.cc	/^int Socket::sendTo(const void *buffer,size_t len,const Address::ptr to,int flags){$/;"	f	class:JKYi::Socket	signature:(const void *buffer,size_t len,const Address::ptr to,int flags)
JKYi::Socket::sendTo	JKYi/socket.h	/^    virtual int sendTo(const iovec*buffers,size_t len,const Address::ptr to,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(const iovec*buffers,size_t len,const Address::ptr to,int flags=0)
JKYi::Socket::sendTo	JKYi/socket.h	/^    virtual int sendTo(const void * buffer,size_t len,const Address::ptr to,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(const void * buffer,size_t len,const Address::ptr to,int flags=0)
JKYi::Socket::setOption	JKYi/socket.cc	/^bool Socket::setOption(int level,int option,const void * result,socklen_t len){$/;"	f	class:JKYi::Socket	signature:(int level,int option,const void * result,socklen_t len)
JKYi::Socket::setOption	JKYi/socket.h	/^    bool setOption(int level,int option,const T&result){$/;"	f	class:JKYi::Socket	access:public	signature:(int level,int option,const T&result)
JKYi::Socket::setOption	JKYi/socket.h	/^    bool setOption(int level,int option,const void *result,socklen_t len);$/;"	p	class:JKYi::Socket	access:public	signature:(int level,int option,const void *result,socklen_t len)
JKYi::Socket::setRcvTimeout	JKYi/socket.cc	/^void Socket::setRcvTimeout(int64_t v){$/;"	f	class:JKYi::Socket	signature:(int64_t v)
JKYi::Socket::setRcvTimeout	JKYi/socket.h	/^    void setRcvTimeout(int64_t v);$/;"	p	class:JKYi::Socket	access:public	signature:(int64_t v)
JKYi::Socket::setSendTimeout	JKYi/socket.cc	/^void Socket::setSendTimeout(int64_t v){$/;"	f	class:JKYi::Socket	signature:(int64_t v)
JKYi::Socket::setSendTimeout	JKYi/socket.h	/^    void setSendTimeout(int64_t v);$/;"	p	class:JKYi::Socket	access:public	signature:(int64_t v)
JKYi::Socket::toString	JKYi/socket.cc	/^std::string Socket::toString()const{$/;"	f	class:JKYi::Socket	signature:() const
JKYi::Socket::toString	JKYi/socket.h	/^    virtual std::string toString()const;$/;"	p	class:JKYi::Socket	access:public	signature:() const
JKYi::Socket::weak_ptr	JKYi/socket.h	/^    typedef std::weak_ptr<Socket> weak_ptr;$/;"	t	class:JKYi::Socket	access:public
JKYi::Socket::~Socket	JKYi/socket.cc	/^Socket::~Socket(){$/;"	f	class:JKYi::Socket	signature:()
JKYi::Socket::~Socket	JKYi/socket.h	/^    virtual ~Socket();$/;"	p	class:JKYi::Socket	access:public	signature:()
JKYi::SocketStream	JKYi/stream/socket_stream.h	/^class SocketStream:public Stream{$/;"	c	namespace:JKYi	inherits:Stream
JKYi::SocketStream::SocketStream	JKYi/stream/socket_stream.cc	/^SocketStream::SocketStream(Socket::ptr sock,bool owner)$/;"	f	class:JKYi::SocketStream	signature:(Socket::ptr sock,bool owner)
JKYi::SocketStream::SocketStream	JKYi/stream/socket_stream.h	/^     SocketStream(Socket::ptr sock,bool owner = true);$/;"	p	class:JKYi::SocketStream	access:public	signature:(Socket::ptr sock,bool owner = true)
JKYi::SocketStream::close	JKYi/stream/socket_stream.cc	/^void SocketStream::close(){$/;"	f	class:JKYi::SocketStream	signature:()
JKYi::SocketStream::getLocalAddress	JKYi/stream/socket_stream.cc	/^Address::ptr SocketStream::getLocalAddress(){$/;"	f	class:JKYi::SocketStream	signature:()
JKYi::SocketStream::getLocalAddress	JKYi/stream/socket_stream.h	/^     Address::ptr getLocalAddress();$/;"	p	class:JKYi::SocketStream	access:public	signature:()
JKYi::SocketStream::getLocalAddressString	JKYi/stream/socket_stream.cc	/^std::string SocketStream::getLocalAddressString(){$/;"	f	class:JKYi::SocketStream	signature:()
JKYi::SocketStream::getLocalAddressString	JKYi/stream/socket_stream.h	/^     std::string getLocalAddressString();$/;"	p	class:JKYi::SocketStream	access:public	signature:()
JKYi::SocketStream::getRemoteAddress	JKYi/stream/socket_stream.cc	/^Address::ptr SocketStream::getRemoteAddress(){$/;"	f	class:JKYi::SocketStream	signature:()
JKYi::SocketStream::getRemoteAddress	JKYi/stream/socket_stream.h	/^     Address::ptr getRemoteAddress();$/;"	p	class:JKYi::SocketStream	access:public	signature:()
JKYi::SocketStream::getRemoteAddressString	JKYi/stream/socket_stream.cc	/^std::string SocketStream::getRemoteAddressString(){$/;"	f	class:JKYi::SocketStream	signature:()
JKYi::SocketStream::getRemoteAddressString	JKYi/stream/socket_stream.h	/^     std::string getRemoteAddressString();$/;"	p	class:JKYi::SocketStream	access:public	signature:()
JKYi::SocketStream::getSocket	JKYi/stream/socket_stream.h	/^     Socket::ptr getSocket() const { return m_socket; }$/;"	f	class:JKYi::SocketStream	access:public	signature:() const
JKYi::SocketStream::isConnected	JKYi/stream/socket_stream.cc	/^bool SocketStream::isConnected()const{$/;"	f	class:JKYi::SocketStream	signature:() const
JKYi::SocketStream::isConnected	JKYi/stream/socket_stream.h	/^     bool isConnected()const;$/;"	p	class:JKYi::SocketStream	access:public	signature:() const
JKYi::SocketStream::m_owner	JKYi/stream/socket_stream.h	/^     bool m_owner;$/;"	m	class:JKYi::SocketStream	access:private
JKYi::SocketStream::m_socket	JKYi/stream/socket_stream.h	/^     Socket::ptr m_socket;$/;"	m	class:JKYi::SocketStream	access:private
JKYi::SocketStream::override	JKYi/stream/socket_stream.h	/^     virtual int read(ByteArray::ptr ba,size_t length) override;$/;"	m	class:JKYi::SocketStream	access:public
JKYi::SocketStream::override	JKYi/stream/socket_stream.h	/^     virtual int read(void * buffer,size_t length) override;$/;"	m	class:JKYi::SocketStream	access:public
JKYi::SocketStream::override	JKYi/stream/socket_stream.h	/^     virtual int write(ByteArray::ptr ba,size_t length) override;$/;"	m	class:JKYi::SocketStream	access:public
JKYi::SocketStream::override	JKYi/stream/socket_stream.h	/^     virtual int write(const void * buffer,size_t length) override;$/;"	m	class:JKYi::SocketStream	access:public
JKYi::SocketStream::override	JKYi/stream/socket_stream.h	/^     virtual void close() override;$/;"	m	class:JKYi::SocketStream	access:public
JKYi::SocketStream::ptr	JKYi/stream/socket_stream.h	/^     typedef std::shared_ptr<SocketStream> ptr;$/;"	t	class:JKYi::SocketStream	access:public
JKYi::SocketStream::read	JKYi/stream/socket_stream.cc	/^int SocketStream::read(ByteArray::ptr ba,size_t length){$/;"	f	class:JKYi::SocketStream	signature:(ByteArray::ptr ba,size_t length)
JKYi::SocketStream::read	JKYi/stream/socket_stream.cc	/^int SocketStream::read(void * buffer,size_t length){$/;"	f	class:JKYi::SocketStream	signature:(void * buffer,size_t length)
JKYi::SocketStream::write	JKYi/stream/socket_stream.cc	/^int SocketStream::write(ByteArray::ptr ba,size_t length){$/;"	f	class:JKYi::SocketStream	signature:(ByteArray::ptr ba,size_t length)
JKYi::SocketStream::write	JKYi/stream/socket_stream.cc	/^int SocketStream::write(const void * buffer,size_t length){$/;"	f	class:JKYi::SocketStream	signature:(const void * buffer,size_t length)
JKYi::SocketStream::~SocketStream	JKYi/stream/socket_stream.cc	/^SocketStream::~SocketStream(){$/;"	f	class:JKYi::SocketStream	signature:()
JKYi::SocketStream::~SocketStream	JKYi/stream/socket_stream.h	/^     ~SocketStream();$/;"	p	class:JKYi::SocketStream	access:public	signature:()
JKYi::SpinLock	JKYi/mutex.h	/^class SpinLock:Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::SpinLock::Lock	JKYi/mutex.h	/^   typedef ScopedLockImpl<SpinLock>   Lock;$/;"	t	class:JKYi::SpinLock	access:public
JKYi::SpinLock::SpinLock	JKYi/mutex.h	/^   SpinLock(){$/;"	f	class:JKYi::SpinLock	access:public	signature:()
JKYi::SpinLock::lock	JKYi/mutex.h	/^   void lock(){$/;"	f	class:JKYi::SpinLock	access:public	signature:()
JKYi::SpinLock::m_mutex	JKYi/mutex.h	/^   pthread_spinlock_t m_mutex;$/;"	m	class:JKYi::SpinLock	access:private
JKYi::SpinLock::unlock	JKYi/mutex.h	/^   void unlock(){$/;"	f	class:JKYi::SpinLock	access:public	signature:()
JKYi::SpinLock::~SpinLock	JKYi/mutex.h	/^   ~SpinLock(){$/;"	f	class:JKYi::SpinLock	access:public	signature:()
JKYi::StdoutLogAppender	JKYi/log.h	/^class StdoutLogAppender:public LogAppender{$/;"	c	namespace:JKYi	inherits:LogAppender
JKYi::StdoutLogAppender::log	JKYi/log.cc	/^void StdoutLogAppender::log(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event){$/;"	f	class:JKYi::StdoutLogAppender	signature:(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event)
JKYi::StdoutLogAppender::override	JKYi/log.h	/^    std::string toYamlString()override;$/;"	m	class:JKYi::StdoutLogAppender	access:public
JKYi::StdoutLogAppender::override	JKYi/log.h	/^    void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:JKYi::StdoutLogAppender	access:public
JKYi::StdoutLogAppender::ptr	JKYi/log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:JKYi::StdoutLogAppender	access:public
JKYi::StdoutLogAppender::toYamlString	JKYi/log.cc	/^std::string StdoutLogAppender::toYamlString(){$/;"	f	class:JKYi::StdoutLogAppender	signature:()
JKYi::Str2Time	JKYi/util.cc	/^time_t Str2Time(const char * str,const char * format){$/;"	f	namespace:JKYi	signature:(const char * str,const char * format)
JKYi::Str2Time	JKYi/util.h	/^time_t Str2Time(const char * str,const char * format = "%Y-%m-%d %H:%M:%S");$/;"	p	namespace:JKYi	signature:(const char * str,const char * format = Ó)
JKYi::Stream	JKYi/stream.h	/^class Stream{$/;"	c	namespace:JKYi
JKYi::Stream::close	JKYi/stream.h	/^    virtual void close() = 0;$/;"	p	class:JKYi::Stream	access:public	signature:()
JKYi::Stream::ptr	JKYi/stream.h	/^    typedef std::shared_ptr<Stream> ptr;$/;"	t	class:JKYi::Stream	access:public
JKYi::Stream::read	JKYi/stream.h	/^    virtual int read(ByteArray::ptr ba,size_t length) = 0;$/;"	p	class:JKYi::Stream	access:public	signature:(ByteArray::ptr ba,size_t length)
JKYi::Stream::read	JKYi/stream.h	/^    virtual int read(void * buffer,size_t length) = 0;$/;"	p	class:JKYi::Stream	access:public	signature:(void * buffer,size_t length)
JKYi::Stream::readFixSize	JKYi/stream.cc	/^int Stream::readFixSize(ByteArray::ptr ba,size_t length){$/;"	f	class:JKYi::Stream	signature:(ByteArray::ptr ba,size_t length)
JKYi::Stream::readFixSize	JKYi/stream.cc	/^int Stream::readFixSize(void * buffer,size_t length){$/;"	f	class:JKYi::Stream	signature:(void * buffer,size_t length)
JKYi::Stream::readFixSize	JKYi/stream.h	/^    virtual int readFixSize(ByteArray::ptr ba,size_t length);$/;"	p	class:JKYi::Stream	access:public	signature:(ByteArray::ptr ba,size_t length)
JKYi::Stream::readFixSize	JKYi/stream.h	/^    virtual int readFixSize(void * buffer,size_t length);$/;"	p	class:JKYi::Stream	access:public	signature:(void * buffer,size_t length)
JKYi::Stream::write	JKYi/stream.h	/^    virtual int write(ByteArray::ptr ba,size_t length) = 0;$/;"	p	class:JKYi::Stream	access:public	signature:(ByteArray::ptr ba,size_t length)
JKYi::Stream::write	JKYi/stream.h	/^    virtual int write(const void * buffer,size_t length) = 0;$/;"	p	class:JKYi::Stream	access:public	signature:(const void * buffer,size_t length)
JKYi::Stream::writeFixSize	JKYi/stream.cc	/^int Stream::writeFixSize(ByteArray::ptr ba,size_t length){$/;"	f	class:JKYi::Stream	signature:(ByteArray::ptr ba,size_t length)
JKYi::Stream::writeFixSize	JKYi/stream.cc	/^int Stream::writeFixSize(const void * buffer,size_t length){$/;"	f	class:JKYi::Stream	signature:(const void * buffer,size_t length)
JKYi::Stream::writeFixSize	JKYi/stream.h	/^    virtual int writeFixSize(ByteArray::ptr ba,size_t length);$/;"	p	class:JKYi::Stream	access:public	signature:(ByteArray::ptr ba,size_t length)
JKYi::Stream::writeFixSize	JKYi/stream.h	/^    virtual int writeFixSize(const void * buffer,size_t length);$/;"	p	class:JKYi::Stream	access:public	signature:(const void * buffer,size_t length)
JKYi::Stream::~Stream	JKYi/stream.h	/^    virtual ~Stream(){}$/;"	f	class:JKYi::Stream	access:public	signature:()
JKYi::StringFormatItem	JKYi/log.cc	/^class StringFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::StringFormatItem::StringFormatItem	JKYi/log.cc	/^   StringFormatItem(const std::string&str)$/;"	f	class:JKYi::StringFormatItem	access:public	signature:(const std::string&str)
JKYi::StringFormatItem::m_string	JKYi/log.cc	/^   std::string m_string;$/;"	m	class:JKYi::StringFormatItem	file:	access:private
JKYi::StringUtil	JKYi/util.h	/^class StringUtil{$/;"	c	namespace:JKYi
JKYi::StringUtil::Format	JKYi/util.cc	/^std::string StringUtil::Format(const char * fmt,...){$/;"	f	class:JKYi::StringUtil	signature:(const char * fmt,...)
JKYi::StringUtil::Format	JKYi/util.h	/^   static std::string Format(const char * fmt,...);$/;"	p	class:JKYi::StringUtil	access:public	signature:(const char * fmt,...)
JKYi::StringUtil::Formatv	JKYi/util.cc	/^std::string StringUtil::Formatv(const char * fmt,va_list ap){$/;"	f	class:JKYi::StringUtil	signature:(const char * fmt,va_list ap)
JKYi::StringUtil::Formatv	JKYi/util.h	/^   static std::string Formatv(const char * fmt,va_list ap);$/;"	p	class:JKYi::StringUtil	access:public	signature:(const char * fmt,va_list ap)
JKYi::StringUtil::Trim	JKYi/util.cc	/^std::string StringUtil::Trim(const std::string& str,const std::string& delimit){$/;"	f	class:JKYi::StringUtil	signature:(const std::string& str,const std::string& delimit)
JKYi::StringUtil::Trim	JKYi/util.h	/^   static std::string Trim(const std::string& str,const std::string& delimit = " \\t\\r\\n");$/;"	p	class:JKYi::StringUtil	access:public	signature:(const std::string& str,const std::string& delimit = Ó)
JKYi::TabFormatItem	JKYi/log.cc	/^class TabFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::TabFormatItem::TabFormatItem	JKYi/log.cc	/^   TabFormatItem(const std::string str = ""){}$/;"	f	class:JKYi::TabFormatItem	access:public	signature:(const std::string str = Ó)
JKYi::TabFormatItem::m_string	JKYi/log.cc	/^   std::string m_string;$/;"	m	class:JKYi::TabFormatItem	file:	access:private
JKYi::TcpServer	JKYi/tcp_server.h	/^class TcpServer:public std::enable_shared_from_this<TcpServer>,Noncopyable{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this,Noncopyable
JKYi::TcpServer::TcpServer	JKYi/tcp_server.cc	/^TcpServer::TcpServer(IOManager * worker,IOManager * io_worker,IOManager * accept_worker)$/;"	f	class:JKYi::TcpServer	signature:(IOManager * worker,IOManager * io_worker,IOManager * accept_worker)
JKYi::TcpServer::TcpServer	JKYi/tcp_server.h	/^    TcpServer(IOManager * worker = IOManager::GetThis(),IOManager * io_worker = IOManager::GetThis(),$/;"	p	class:JKYi::TcpServer	access:public	signature:(IOManager * worker = IOManager::GetThis(),IOManager * io_worker = IOManager::GetThis(), IOManager * accept_worker = IOManager::GetThis())
JKYi::TcpServer::bind	JKYi/tcp_server.cc	/^bool TcpServer::bind(Address::ptr addr,bool ssl){$/;"	f	class:JKYi::TcpServer	signature:(Address::ptr addr,bool ssl)
JKYi::TcpServer::bind	JKYi/tcp_server.cc	/^bool TcpServer::bind(const std::vector<Address::ptr>& addrs,$/;"	f	class:JKYi::TcpServer	signature:(const std::vector<Address::ptr>& addrs, std::vector<Address::ptr>&fails,bool ssl)
JKYi::TcpServer::bind	JKYi/tcp_server.h	/^    virtual bool bind(Address::ptr addr,bool ssl = false);$/;"	p	class:JKYi::TcpServer	access:public	signature:(Address::ptr addr,bool ssl = false)
JKYi::TcpServer::bind	JKYi/tcp_server.h	/^    virtual bool bind(const std::vector<Address::ptr>& addrs,std::vector<Address::ptr>& fails,bool ssl = false);$/;"	p	class:JKYi::TcpServer	access:public	signature:(const std::vector<Address::ptr>& addrs,std::vector<Address::ptr>& fails,bool ssl = false)
JKYi::TcpServer::getName	JKYi/tcp_server.h	/^    std::string getName()const { return m_name; }$/;"	f	class:JKYi::TcpServer	access:public	signature:() const
JKYi::TcpServer::getRecvTimeout	JKYi/tcp_server.h	/^    uint64_t getRecvTimeout()const { return m_recvTimeout; }$/;"	f	class:JKYi::TcpServer	access:public	signature:() const
JKYi::TcpServer::getSocks	JKYi/tcp_server.h	/^    std::vector<JKYi::Socket::ptr> getSocks()const { return m_socks; }$/;"	f	class:JKYi::TcpServer	access:public	signature:() const
JKYi::TcpServer::handleClient	JKYi/tcp_server.cc	/^void TcpServer::handleClient(Socket::ptr client){$/;"	f	class:JKYi::TcpServer	signature:(Socket::ptr client)
JKYi::TcpServer::handleClient	JKYi/tcp_server.h	/^    virtual void handleClient(Socket::ptr client);$/;"	p	class:JKYi::TcpServer	access:protected	signature:(Socket::ptr client)
JKYi::TcpServer::isHttps	JKYi/tcp_server.h	/^    bool isHttps()const { return m_ssl == true; }$/;"	f	class:JKYi::TcpServer	access:public	signature:() const
JKYi::TcpServer::isStop	JKYi/tcp_server.h	/^    bool isStop()const { return m_isStop; }$/;"	f	class:JKYi::TcpServer	access:public	signature:() const
JKYi::TcpServer::loadCertificates	JKYi/tcp_server.cc	/^bool TcpServer::loadCertificates(const std::string& cert_file,const std::string& key_file){$/;"	f	class:JKYi::TcpServer	signature:(const std::string& cert_file,const std::string& key_file)
JKYi::TcpServer::loadCertificates	JKYi/tcp_server.h	/^    bool loadCertificates(const std::string& cert_file,const std::string& key_file);$/;"	p	class:JKYi::TcpServer	access:public	signature:(const std::string& cert_file,const std::string& key_file)
JKYi::TcpServer::m_acceptWorker	JKYi/tcp_server.h	/^    IOManager * m_acceptWorker;$/;"	m	class:JKYi::TcpServer	access:protected
JKYi::TcpServer::m_conf	JKYi/tcp_server.h	/^    TcpServerConf::ptr m_conf;$/;"	m	class:JKYi::TcpServer	access:protected
JKYi::TcpServer::m_ioWorker	JKYi/tcp_server.h	/^    IOManager * m_ioWorker;$/;"	m	class:JKYi::TcpServer	access:protected
JKYi::TcpServer::m_isStop	JKYi/tcp_server.h	/^    bool m_isStop;$/;"	m	class:JKYi::TcpServer	access:protected
JKYi::TcpServer::m_name	JKYi/tcp_server.h	/^    std::string m_name;$/;"	m	class:JKYi::TcpServer	access:protected
JKYi::TcpServer::m_recvTimeout	JKYi/tcp_server.h	/^    uint64_t m_recvTimeout;$/;"	m	class:JKYi::TcpServer	access:protected
JKYi::TcpServer::m_socks	JKYi/tcp_server.h	/^    std::vector<Socket::ptr> m_socks;$/;"	m	class:JKYi::TcpServer	access:protected
JKYi::TcpServer::m_ssl	JKYi/tcp_server.h	/^    bool m_ssl = false;$/;"	m	class:JKYi::TcpServer	access:protected
JKYi::TcpServer::m_type	JKYi/tcp_server.h	/^    std::string m_type = "tcp";$/;"	m	class:JKYi::TcpServer	access:protected
JKYi::TcpServer::m_worker	JKYi/tcp_server.h	/^    IOManager * m_worker;$/;"	m	class:JKYi::TcpServer	access:protected
JKYi::TcpServer::ptr	JKYi/tcp_server.h	/^    typedef std::shared_ptr<TcpServer> ptr;$/;"	t	class:JKYi::TcpServer	access:public
JKYi::TcpServer::setConf	JKYi/tcp_server.cc	/^void TcpServer::setConf(const TcpServerConf& v){$/;"	f	class:JKYi::TcpServer	signature:(const TcpServerConf& v)
JKYi::TcpServer::setConf	JKYi/tcp_server.h	/^    void setConf(TcpServerConf::ptr v) { m_conf = v; }$/;"	f	class:JKYi::TcpServer	access:public	signature:(TcpServerConf::ptr v)
JKYi::TcpServer::setConf	JKYi/tcp_server.h	/^    void setConf(const TcpServerConf& v);$/;"	p	class:JKYi::TcpServer	access:public	signature:(const TcpServerConf& v)
JKYi::TcpServer::setName	JKYi/tcp_server.h	/^    virtual void setName(const std::string& name){ m_name = name; }$/;"	f	class:JKYi::TcpServer	access:public	signature:(const std::string& name)
JKYi::TcpServer::setRecvTimeout	JKYi/tcp_server.h	/^    void setRecvTimeout(uint64_t v){ m_recvTimeout = v; }$/;"	f	class:JKYi::TcpServer	access:public	signature:(uint64_t v)
JKYi::TcpServer::start	JKYi/tcp_server.cc	/^bool TcpServer::start(){$/;"	f	class:JKYi::TcpServer	signature:()
JKYi::TcpServer::start	JKYi/tcp_server.h	/^    virtual bool start();$/;"	p	class:JKYi::TcpServer	access:public	signature:()
JKYi::TcpServer::startAccept	JKYi/tcp_server.cc	/^void TcpServer::startAccept(Socket::ptr sock){$/;"	f	class:JKYi::TcpServer	signature:(Socket::ptr sock)
JKYi::TcpServer::startAccept	JKYi/tcp_server.h	/^    virtual void startAccept(Socket::ptr sock);$/;"	p	class:JKYi::TcpServer	access:protected	signature:(Socket::ptr sock)
JKYi::TcpServer::stop	JKYi/tcp_server.cc	/^void TcpServer::stop(){$/;"	f	class:JKYi::TcpServer	signature:()
JKYi::TcpServer::stop	JKYi/tcp_server.h	/^    virtual void stop();$/;"	p	class:JKYi::TcpServer	access:public	signature:()
JKYi::TcpServer::toString	JKYi/tcp_server.cc	/^std::string TcpServer::toString(const std::string &prefix){$/;"	f	class:JKYi::TcpServer	signature:(const std::string &prefix)
JKYi::TcpServer::toString	JKYi/tcp_server.h	/^    virtual std::string toString(const std::string& prefix = "");$/;"	p	class:JKYi::TcpServer	access:public	signature:(const std::string& prefix = Ó)
JKYi::TcpServer::~TcpServer	JKYi/tcp_server.cc	/^TcpServer::~TcpServer(){$/;"	f	class:JKYi::TcpServer	signature:()
JKYi::TcpServer::~TcpServer	JKYi/tcp_server.h	/^    virtual ~TcpServer();$/;"	p	class:JKYi::TcpServer	access:public	signature:()
JKYi::TcpServerConf	JKYi/tcp_server.h	/^struct TcpServerConf{$/;"	s	namespace:JKYi
JKYi::TcpServerConf::accept_worker	JKYi/tcp_server.h	/^    std::string accept_worker;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::address	JKYi/tcp_server.h	/^    std::vector<std::string> address;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::args	JKYi/tcp_server.h	/^    std::map<std::string,std::string> args;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::cert_file	JKYi/tcp_server.h	/^    std::string cert_file;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::id	JKYi/tcp_server.h	/^    std::string id;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::io_worker	JKYi/tcp_server.h	/^    std::string io_worker;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::isValid	JKYi/tcp_server.h	/^    bool isValid()const{$/;"	f	struct:JKYi::TcpServerConf	access:public	signature:() const
JKYi::TcpServerConf::keepalive	JKYi/tcp_server.h	/^    int keepalive = 0;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::key_file	JKYi/tcp_server.h	/^    std::string key_file;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::name	JKYi/tcp_server.h	/^    std::string name ;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::operator ==	JKYi/tcp_server.h	/^    bool operator == (const TcpServerConf& rhv)const {$/;"	f	struct:JKYi::TcpServerConf	access:public	signature:(const TcpServerConf& rhv) const
JKYi::TcpServerConf::process_worker	JKYi/tcp_server.h	/^    std::string process_worker;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::ptr	JKYi/tcp_server.h	/^    typedef std::shared_ptr<TcpServerConf> ptr;$/;"	t	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::ssl	JKYi/tcp_server.h	/^    int ssl = 0;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::timeout	JKYi/tcp_server.h	/^    int timeout = 1000 * 2 * 60;$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::TcpServerConf::type	JKYi/tcp_server.h	/^    std::string type = "http";$/;"	m	struct:JKYi::TcpServerConf	access:public
JKYi::Thread	JKYi/thread.h	/^class Thread:Noncopyable {$/;"	c	namespace:JKYi	inherits:Noncopyable
JKYi::Thread::GetName	JKYi/thread.cc	/^const std::string& Thread::GetName(){$/;"	f	class:JKYi::Thread	signature:()
JKYi::Thread::GetName	JKYi/thread.h	/^   static const std::string& GetName();$/;"	p	class:JKYi::Thread	access:public	signature:()
JKYi::Thread::GetThis	JKYi/thread.cc	/^Thread* Thread::GetThis(){$/;"	f	class:JKYi::Thread	signature:()
JKYi::Thread::GetThis	JKYi/thread.h	/^   static Thread* GetThis();$/;"	p	class:JKYi::Thread	access:public	signature:()
JKYi::Thread::Thread	JKYi/thread.cc	/^Thread::Thread(std::function<void()> cb,const std::string &name)$/;"	f	class:JKYi::Thread	signature:(std::function<void()> cb,const std::string &name)
JKYi::Thread::Thread	JKYi/thread.h	/^   Thread(std::function<void()> cb,const std::string &name); $/;"	p	class:JKYi::Thread	access:public	signature:(std::function<void()> cb,const std::string &name)
JKYi::Thread::getId	JKYi/thread.h	/^   pid_t getId()const{return m_id;}$/;"	f	class:JKYi::Thread	access:public	signature:() const
JKYi::Thread::getName	JKYi/thread.h	/^   const std::string& getName()const{return m_name;} $/;"	f	class:JKYi::Thread	access:public	signature:() const
JKYi::Thread::join	JKYi/thread.cc	/^void Thread::join(){$/;"	f	class:JKYi::Thread	signature:()
JKYi::Thread::join	JKYi/thread.h	/^   void join();$/;"	p	class:JKYi::Thread	access:public	signature:()
JKYi::Thread::m_cb	JKYi/thread.h	/^   std::function<void()>m_cb;$/;"	m	class:JKYi::Thread	access:private
JKYi::Thread::m_id	JKYi/thread.h	/^   pid_t m_id = -1;$/;"	m	class:JKYi::Thread	access:private
JKYi::Thread::m_name	JKYi/thread.h	/^   std::string m_name;$/;"	m	class:JKYi::Thread	access:private
JKYi::Thread::m_semaphore	JKYi/thread.h	/^   Semaphore m_semaphore;$/;"	m	class:JKYi::Thread	access:private
JKYi::Thread::m_thread	JKYi/thread.h	/^   pthread_t m_thread = 0;$/;"	m	class:JKYi::Thread	access:private
JKYi::Thread::ptr	JKYi/thread.h	/^   typedef std::shared_ptr<Thread> ptr;$/;"	t	class:JKYi::Thread	access:public
JKYi::Thread::run	JKYi/thread.cc	/^void * Thread::run(void*arg){$/;"	f	class:JKYi::Thread	signature:(void*arg)
JKYi::Thread::run	JKYi/thread.h	/^   static void * run(void*arg);$/;"	p	class:JKYi::Thread	access:private	signature:(void*arg)
JKYi::Thread::setName	JKYi/thread.cc	/^void Thread::setName(const std::string&name){$/;"	f	class:JKYi::Thread	signature:(const std::string&name)
JKYi::Thread::setName	JKYi/thread.h	/^   static void setName(const std::string&name);$/;"	p	class:JKYi::Thread	access:public	signature:(const std::string&name)
JKYi::Thread::~Thread	JKYi/thread.cc	/^Thread::~Thread(){$/;"	f	class:JKYi::Thread	signature:()
JKYi::Thread::~Thread	JKYi/thread.h	/^   ~Thread(); $/;"	p	class:JKYi::Thread	access:public	signature:()
JKYi::ThreadIdFormatItem	JKYi/log.cc	/^class ThreadIdFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::ThreadIdFormatItem::ThreadIdFormatItem	JKYi/log.cc	/^    ThreadIdFormatItem(const std::string&str=""){}$/;"	f	class:JKYi::ThreadIdFormatItem	access:public	signature:(const std::string&str=Ó)
JKYi::ThreadNameFormatItem	JKYi/log.cc	/^class ThreadNameFormatItem: public LogFormatter::FormatItem {$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
JKYi::ThreadNameFormatItem::ThreadNameFormatItem	JKYi/log.cc	/^    ThreadNameFormatItem(const std::string& str = "") {}$/;"	f	class:JKYi::ThreadNameFormatItem	access:public	signature:(const std::string& str = Ó)
JKYi::Time2Str	JKYi/util.cc	/^std::string Time2Str(time_t ts,const std::string& format){$/;"	f	namespace:JKYi	signature:(time_t ts,const std::string& format)
JKYi::Time2Str	JKYi/util.h	/^std::string Time2Str(time_t ts = time(0),const std::string& format $/;"	p	namespace:JKYi	signature:(time_t ts = time(0),const std::string& format = Ó)
JKYi::Timer	JKYi/timer.h	/^class Timer:public std::enable_shared_from_this<Timer>{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this
JKYi::Timer::Comparator	JKYi/timer.h	/^   struct Comparator{$/;"	s	class:JKYi::Timer	access:private
JKYi::Timer::Comparator::operator ()	JKYi/timer.cc	/^bool Timer::Comparator::operator()(const Timer::ptr &lhv,$/;"	f	class:JKYi::Timer::Comparator	signature:(const Timer::ptr &lhv, const Timer::ptr&rhv) const
JKYi::Timer::Comparator::operator ()	JKYi/timer.h	/^     bool operator()(const Timer::ptr&lhv,const Timer::ptr &rhv)const;$/;"	p	struct:JKYi::Timer::Comparator	access:public	signature:(const Timer::ptr&lhv,const Timer::ptr &rhv) const
JKYi::Timer::Timer	JKYi/timer.cc	/^Timer::Timer(uint64_t ms,std::function<void ()>cb,bool recurring,TimerManager*manager)$/;"	f	class:JKYi::Timer	signature:(uint64_t ms,std::function<void ()>cb,bool recurring,TimerManager*manager)
JKYi::Timer::Timer	JKYi/timer.cc	/^Timer::Timer(uint64_t next)$/;"	f	class:JKYi::Timer	signature:(uint64_t next)
JKYi::Timer::Timer	JKYi/timer.h	/^   Timer(uint64_t ms,std::function<void ()>cb,bool recurring,TimerManager*manager);$/;"	p	class:JKYi::Timer	access:private	signature:(uint64_t ms,std::function<void ()>cb,bool recurring,TimerManager*manager)
JKYi::Timer::Timer	JKYi/timer.h	/^   Timer(uint64_t next);$/;"	p	class:JKYi::Timer	access:private	signature:(uint64_t next)
JKYi::Timer::cancel	JKYi/timer.cc	/^bool Timer::cancel(){$/;"	f	class:JKYi::Timer	signature:()
JKYi::Timer::cancel	JKYi/timer.h	/^   bool cancel();$/;"	p	class:JKYi::Timer	access:public	signature:()
JKYi::Timer::m_cb	JKYi/timer.h	/^   std::function<void()>m_cb;$/;"	m	class:JKYi::Timer	access:private
JKYi::Timer::m_manager	JKYi/timer.h	/^   TimerManager* m_manager=nullptr;$/;"	m	class:JKYi::Timer	access:private
JKYi::Timer::m_ms	JKYi/timer.h	/^   uint64_t m_ms=0;$/;"	m	class:JKYi::Timer	access:private
JKYi::Timer::m_next	JKYi/timer.h	/^   uint64_t m_next=0;$/;"	m	class:JKYi::Timer	access:private
JKYi::Timer::m_recurring	JKYi/timer.h	/^   bool m_recurring=false;$/;"	m	class:JKYi::Timer	access:private
JKYi::Timer::ptr	JKYi/timer.h	/^   typedef std::shared_ptr<Timer> ptr;$/;"	t	class:JKYi::Timer	access:public
JKYi::Timer::refresh	JKYi/timer.cc	/^bool Timer::refresh(){$/;"	f	class:JKYi::Timer	signature:()
JKYi::Timer::refresh	JKYi/timer.h	/^   bool refresh();$/;"	p	class:JKYi::Timer	access:public	signature:()
JKYi::Timer::reset	JKYi/timer.cc	/^bool Timer::reset(uint64_t ms,bool from_now){$/;"	f	class:JKYi::Timer	signature:(uint64_t ms,bool from_now)
JKYi::Timer::reset	JKYi/timer.h	/^   bool reset(uint64_t ms,bool from_now);$/;"	p	class:JKYi::Timer	access:public	signature:(uint64_t ms,bool from_now)
JKYi::TimerManager	JKYi/timer.h	/^class TimerManager{$/;"	c	namespace:JKYi
JKYi::TimerManager::RWMutexType	JKYi/timer.h	/^   typedef RWMutex RWMutexType;$/;"	t	class:JKYi::TimerManager	access:public
JKYi::TimerManager::TimerManager	JKYi/timer.cc	/^TimerManager::TimerManager(){$/;"	f	class:JKYi::TimerManager	signature:()
JKYi::TimerManager::TimerManager	JKYi/timer.h	/^   TimerManager();$/;"	p	class:JKYi::TimerManager	access:public	signature:()
JKYi::TimerManager::addConditionTimer	JKYi/timer.cc	/^Timer::ptr TimerManager::addConditionTimer(uint64_t ms,std::function<void()>cb,std::weak_ptr<void>weak_cond,bool recurring){$/;"	f	class:JKYi::TimerManager	signature:(uint64_t ms,std::function<void()>cb,std::weak_ptr<void>weak_cond,bool recurring)
JKYi::TimerManager::addConditionTimer	JKYi/timer.h	/^   Timer::ptr addConditionTimer(uint64_t ms,std::function<void()>cb,std::weak_ptr<void>weak_cond,bool recurring = false);$/;"	p	class:JKYi::TimerManager	access:public	signature:(uint64_t ms,std::function<void()>cb,std::weak_ptr<void>weak_cond,bool recurring = false)
JKYi::TimerManager::addTimer	JKYi/timer.cc	/^Timer::ptr TimerManager::addTimer(uint64_t ms,std::function<void ()> cb,bool recurring){$/;"	f	class:JKYi::TimerManager	signature:(uint64_t ms,std::function<void ()> cb,bool recurring)
JKYi::TimerManager::addTimer	JKYi/timer.cc	/^void TimerManager::addTimer(Timer::ptr val,RWMutexType::WriteLock& lock){$/;"	f	class:JKYi::TimerManager	signature:(Timer::ptr val,RWMutexType::WriteLock& lock)
JKYi::TimerManager::addTimer	JKYi/timer.h	/^   Timer::ptr addTimer(uint64_t ms,std::function<void ()>cb,bool recurring = false);$/;"	p	class:JKYi::TimerManager	access:public	signature:(uint64_t ms,std::function<void ()>cb,bool recurring = false)
JKYi::TimerManager::addTimer	JKYi/timer.h	/^   void addTimer(Timer::ptr val,RWMutexType::WriteLock &lock);$/;"	p	class:JKYi::TimerManager	access:protected	signature:(Timer::ptr val,RWMutexType::WriteLock &lock)
JKYi::TimerManager::deleteClockRollover	JKYi/timer.cc	/^bool TimerManager::deleteClockRollover(uint64_t now_ms){$/;"	f	class:JKYi::TimerManager	signature:(uint64_t now_ms)
JKYi::TimerManager::deleteClockRollover	JKYi/timer.h	/^   bool deleteClockRollover(uint64_t now_ms);$/;"	p	class:JKYi::TimerManager	access:private	signature:(uint64_t now_ms)
JKYi::TimerManager::getNextTimer	JKYi/timer.cc	/^uint64_t TimerManager::getNextTimer(){$/;"	f	class:JKYi::TimerManager	signature:()
JKYi::TimerManager::getNextTimer	JKYi/timer.h	/^   uint64_t getNextTimer();$/;"	p	class:JKYi::TimerManager	access:public	signature:()
JKYi::TimerManager::hasTimer	JKYi/timer.cc	/^bool TimerManager::hasTimer(){$/;"	f	class:JKYi::TimerManager	signature:()
JKYi::TimerManager::hasTimer	JKYi/timer.h	/^   bool hasTimer();$/;"	p	class:JKYi::TimerManager	access:public	signature:()
JKYi::TimerManager::listExpiredCb	JKYi/timer.cc	/^void TimerManager::listExpiredCb(std::vector<std::function<void ()>>&cbs){$/;"	f	class:JKYi::TimerManager	signature:(std::vector<std::function<void ()>>&cbs)
JKYi::TimerManager::listExpiredCb	JKYi/timer.h	/^   void listExpiredCb(std::vector<std::function<void ()>>&cbs);$/;"	p	class:JKYi::TimerManager	access:public	signature:(std::vector<std::function<void ()>>&cbs)
JKYi::TimerManager::m_mutex	JKYi/timer.h	/^   RWMutexType m_mutex;$/;"	m	class:JKYi::TimerManager	access:private
JKYi::TimerManager::m_previouseTime	JKYi/timer.h	/^   uint64_t m_previouseTime = 0;$/;"	m	class:JKYi::TimerManager	access:private
JKYi::TimerManager::m_tickled	JKYi/timer.h	/^   bool m_tickled = false;$/;"	m	class:JKYi::TimerManager	access:private
JKYi::TimerManager::m_timers	JKYi/timer.h	/^   std::set<Timer::ptr,Timer::Comparator>m_timers;$/;"	m	class:JKYi::TimerManager	access:private
JKYi::TimerManager::onTimerInsertedAtFront	JKYi/timer.h	/^   virtual void onTimerInsertedAtFront() = 0;$/;"	p	class:JKYi::TimerManager	access:protected	signature:()
JKYi::TimerManager::~TimerManager	JKYi/timer.cc	/^TimerManager::~TimerManager(){$/;"	f	class:JKYi::TimerManager	signature:()
JKYi::TimerManager::~TimerManager	JKYi/timer.h	/^   virtual ~TimerManager(); $/;"	p	class:JKYi::TimerManager	access:public	signature:()
JKYi::TypeUtil	JKYi/util.h	/^class TypeUtil{$/;"	c	namespace:JKYi
JKYi::TypeUtil::Atof	JKYi/util.cc	/^double TypeUtil::Atof(const char * str){$/;"	f	class:JKYi::TypeUtil	signature:(const char * str)
JKYi::TypeUtil::Atof	JKYi/util.cc	/^double TypeUtil::Atof(const std::string& str){$/;"	f	class:JKYi::TypeUtil	signature:(const std::string& str)
JKYi::TypeUtil::Atof	JKYi/util.h	/^    static double Atof(const char * str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const char * str)
JKYi::TypeUtil::Atof	JKYi/util.h	/^    static double Atof(const std::string& str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const std::string& str)
JKYi::TypeUtil::Atoi	JKYi/util.cc	/^int64_t TypeUtil::Atoi(const char * str){$/;"	f	class:JKYi::TypeUtil	signature:(const char * str)
JKYi::TypeUtil::Atoi	JKYi/util.cc	/^int64_t TypeUtil::Atoi(const std::string& str){$/;"	f	class:JKYi::TypeUtil	signature:(const std::string& str)
JKYi::TypeUtil::Atoi	JKYi/util.h	/^    static int64_t Atoi(const char * str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const char * str)
JKYi::TypeUtil::Atoi	JKYi/util.h	/^    static int64_t Atoi(const std::string& str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const std::string& str)
JKYi::TypeUtil::ToChar	JKYi/util.cc	/^int8_t TypeUtil::ToChar(const char * str){$/;"	f	class:JKYi::TypeUtil	signature:(const char * str)
JKYi::TypeUtil::ToChar	JKYi/util.cc	/^int8_t TypeUtil::ToChar(const std::string& str){$/;"	f	class:JKYi::TypeUtil	signature:(const std::string& str)
JKYi::TypeUtil::ToChar	JKYi/util.h	/^    static int8_t ToChar(const char * str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const char * str)
JKYi::TypeUtil::ToChar	JKYi/util.h	/^    static int8_t ToChar(const std::string& str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const std::string& str)
JKYi::UnixAddress	JKYi/address.h	/^class UnixAddress:public Address{$/;"	c	namespace:JKYi	inherits:Address
JKYi::UnixAddress::UnixAddress	JKYi/address.cc	/^UnixAddress::UnixAddress(){$/;"	f	class:JKYi::UnixAddress	signature:()
JKYi::UnixAddress::UnixAddress	JKYi/address.cc	/^UnixAddress::UnixAddress(const std::string&path){$/;"	f	class:JKYi::UnixAddress	signature:(const std::string&path)
JKYi::UnixAddress::UnixAddress	JKYi/address.h	/^	UnixAddress();$/;"	p	class:JKYi::UnixAddress	access:public	signature:()
JKYi::UnixAddress::UnixAddress	JKYi/address.h	/^	UnixAddress(const std::string& path);$/;"	p	class:JKYi::UnixAddress	access:public	signature:(const std::string& path)
JKYi::UnixAddress::getAddr	JKYi/address.cc	/^const sockaddr* UnixAddress::getAddr()const {$/;"	f	class:JKYi::UnixAddress	signature:() const
JKYi::UnixAddress::getAddr	JKYi/address.cc	/^sockaddr* UnixAddress::getAddr(){$/;"	f	class:JKYi::UnixAddress	signature:()
JKYi::UnixAddress::getAddrLen	JKYi/address.cc	/^socklen_t UnixAddress::getAddrLen()const{$/;"	f	class:JKYi::UnixAddress	signature:() const
JKYi::UnixAddress::getPath	JKYi/address.cc	/^std::string UnixAddress::getPath()const{$/;"	f	class:JKYi::UnixAddress	signature:() const
JKYi::UnixAddress::getPath	JKYi/address.h	/^	std::string getPath()const;$/;"	p	class:JKYi::UnixAddress	access:public	signature:() const
JKYi::UnixAddress::insert	JKYi/address.cc	/^std::ostream& UnixAddress::insert(std::ostream&os)const {$/;"	f	class:JKYi::UnixAddress	signature:(std::ostream&os) const
JKYi::UnixAddress::m_addr	JKYi/address.h	/^	sockaddr_un m_addr;$/;"	m	class:JKYi::UnixAddress	access:private
JKYi::UnixAddress::m_length	JKYi/address.h	/^	socklen_t m_length;$/;"	m	class:JKYi::UnixAddress	access:private
JKYi::UnixAddress::override	JKYi/address.h	/^	const sockaddr* getAddr()const override;$/;"	m	class:JKYi::UnixAddress	access:public
JKYi::UnixAddress::override	JKYi/address.h	/^	sockaddr* getAddr()override;$/;"	m	class:JKYi::UnixAddress	access:public
JKYi::UnixAddress::override	JKYi/address.h	/^	socklen_t getAddrLen()const override;$/;"	m	class:JKYi::UnixAddress	access:public
JKYi::UnixAddress::override	JKYi/address.h	/^	std::ostream& insert(std::ostream&os)const override;$/;"	m	class:JKYi::UnixAddress	access:public
JKYi::UnixAddress::ptr	JKYi/address.h	/^	typedef std::shared_ptr<UnixAddress> ptr;$/;"	t	class:JKYi::UnixAddress	access:public
JKYi::UnixAddress::setAddrLen	JKYi/address.cc	/^void UnixAddress::setAddrLen(uint32_t len){$/;"	f	class:JKYi::UnixAddress	signature:(uint32_t len)
JKYi::UnixAddress::setAddrLen	JKYi/address.h	/^	void setAddrLen(uint32_t v);$/;"	p	class:JKYi::UnixAddress	access:public	signature:(uint32_t v)
JKYi::UnknowAddress	JKYi/address.h	/^class UnknowAddress:public Address{$/;"	c	namespace:JKYi	inherits:Address
JKYi::UnknowAddress::UnknowAddress	JKYi/address.cc	/^UnknowAddress::UnknowAddress(const sockaddr&addr){$/;"	f	class:JKYi::UnknowAddress	signature:(const sockaddr&addr)
JKYi::UnknowAddress::UnknowAddress	JKYi/address.cc	/^UnknowAddress::UnknowAddress(int family){$/;"	f	class:JKYi::UnknowAddress	signature:(int family)
JKYi::UnknowAddress::UnknowAddress	JKYi/address.h	/^	UnknowAddress(const sockaddr&addr);$/;"	p	class:JKYi::UnknowAddress	access:public	signature:(const sockaddr&addr)
JKYi::UnknowAddress::UnknowAddress	JKYi/address.h	/^	UnknowAddress(int family);$/;"	p	class:JKYi::UnknowAddress	access:public	signature:(int family)
JKYi::UnknowAddress::getAddr	JKYi/address.cc	/^const sockaddr* UnknowAddress::getAddr()const {$/;"	f	class:JKYi::UnknowAddress	signature:() const
JKYi::UnknowAddress::getAddr	JKYi/address.cc	/^sockaddr* UnknowAddress::getAddr(){$/;"	f	class:JKYi::UnknowAddress	signature:()
JKYi::UnknowAddress::getAddrLen	JKYi/address.cc	/^socklen_t UnknowAddress::getAddrLen()const {$/;"	f	class:JKYi::UnknowAddress	signature:() const
JKYi::UnknowAddress::insert	JKYi/address.cc	/^std::ostream& UnknowAddress::insert(std::ostream&os)const{$/;"	f	class:JKYi::UnknowAddress	signature:(std::ostream&os) const
JKYi::UnknowAddress::m_addr	JKYi/address.h	/^	sockaddr m_addr;$/;"	m	class:JKYi::UnknowAddress	access:private
JKYi::UnknowAddress::override	JKYi/address.h	/^	const sockaddr* getAddr()const override;$/;"	m	class:JKYi::UnknowAddress	access:public
JKYi::UnknowAddress::override	JKYi/address.h	/^	sockaddr* getAddr()override;$/;"	m	class:JKYi::UnknowAddress	access:public
JKYi::UnknowAddress::override	JKYi/address.h	/^	std::ostream& insert(std::ostream&os)const override;$/;"	m	class:JKYi::UnknowAddress	access:public
JKYi::UnknowAddress::override	JKYi/address.h	/^    socklen_t getAddrLen()const override;$/;"	m	class:JKYi::UnknowAddress	access:public
JKYi::UnknowAddress::ptr	JKYi/address.h	/^	typedef std::shared_ptr<UnknowAddress> ptr;$/;"	t	class:JKYi::UnknowAddress	access:public
JKYi::Uri	JKYi/uri.h	/^class Uri{$/;"	c	namespace:JKYi
JKYi::Uri::Create	JKYi/uri.h	/^    static Uri::ptr Create(const std::string& uri);$/;"	p	class:JKYi::Uri	access:public	signature:(const std::string& uri)
JKYi::Uri::Create	JKYi/uri.rl.cc	/^Uri::ptr Uri::Create(const std::string& uristr) {$/;"	f	class:JKYi::Uri	signature:(const std::string& uristr)
JKYi::Uri::Uri	JKYi/uri.h	/^    Uri();$/;"	p	class:JKYi::Uri	access:public	signature:()
JKYi::Uri::Uri	JKYi/uri.rl.cc	/^Uri::Uri()$/;"	f	class:JKYi::Uri	signature:()
JKYi::Uri::createAddress	JKYi/uri.h	/^    Address::ptr createAddress()const;$/;"	p	class:JKYi::Uri	access:public	signature:() const
JKYi::Uri::createAddress	JKYi/uri.rl.cc	/^Address::ptr Uri::createAddress() const {$/;"	f	class:JKYi::Uri	signature:() const
JKYi::Uri::dump	JKYi/uri.h	/^    std::ostream& dump(std::ostream& os)const ;$/;"	p	class:JKYi::Uri	access:public	signature:(std::ostream& os) const
JKYi::Uri::dump	JKYi/uri.rl.cc	/^std::ostream& Uri::dump(std::ostream& os) const {$/;"	f	class:JKYi::Uri	signature:(std::ostream& os) const
JKYi::Uri::getFragment	JKYi/uri.h	/^    const std::string& getFragment()const { return m_fragment; }$/;"	f	class:JKYi::Uri	access:public	signature:() const
JKYi::Uri::getHost	JKYi/uri.h	/^    const std::string& getHost()const { return m_host; }$/;"	f	class:JKYi::Uri	access:public	signature:() const
JKYi::Uri::getPath	JKYi/uri.h	/^    const std::string  getPath()const;$/;"	p	class:JKYi::Uri	access:public	signature:() const
JKYi::Uri::getPath	JKYi/uri.rl.cc	/^const std::string Uri::getPath() const {$/;"	f	class:JKYi::Uri	signature:() const
JKYi::Uri::getPort	JKYi/uri.h	/^    int32_t getPort()const;$/;"	p	class:JKYi::Uri	access:public	signature:() const
JKYi::Uri::getPort	JKYi/uri.rl.cc	/^int32_t Uri::getPort() const {$/;"	f	class:JKYi::Uri	signature:() const
JKYi::Uri::getQuery	JKYi/uri.h	/^    const std::string& getQuery()const { return m_query; }$/;"	f	class:JKYi::Uri	access:public	signature:() const
JKYi::Uri::getScheme	JKYi/uri.h	/^    const std::string& getScheme()const { return m_scheme; }$/;"	f	class:JKYi::Uri	access:public	signature:() const
JKYi::Uri::getUserinfo	JKYi/uri.h	/^    const std::string& getUserinfo()const { return m_userinfo; }$/;"	f	class:JKYi::Uri	access:public	signature:() const
JKYi::Uri::isDefaultPort	JKYi/uri.h	/^    bool isDefaultPort()const;$/;"	p	class:JKYi::Uri	access:private	signature:() const
JKYi::Uri::isDefaultPort	JKYi/uri.rl.cc	/^bool Uri::isDefaultPort() const {$/;"	f	class:JKYi::Uri	signature:() const
JKYi::Uri::m_fragment	JKYi/uri.h	/^    std::string m_fragment;$/;"	m	class:JKYi::Uri	access:private
JKYi::Uri::m_host	JKYi/uri.h	/^    std::string m_host;$/;"	m	class:JKYi::Uri	access:private
JKYi::Uri::m_path	JKYi/uri.h	/^    std::string m_path;$/;"	m	class:JKYi::Uri	access:private
JKYi::Uri::m_port	JKYi/uri.h	/^    int32_t m_port;$/;"	m	class:JKYi::Uri	access:private
JKYi::Uri::m_query	JKYi/uri.h	/^    std::string m_query;$/;"	m	class:JKYi::Uri	access:private
JKYi::Uri::m_scheme	JKYi/uri.h	/^    std::string m_scheme;$/;"	m	class:JKYi::Uri	access:private
JKYi::Uri::m_userinfo	JKYi/uri.h	/^    std::string m_userinfo;$/;"	m	class:JKYi::Uri	access:private
JKYi::Uri::ptr	JKYi/uri.h	/^    typedef std::shared_ptr<Uri> ptr;$/;"	t	class:JKYi::Uri	access:public
JKYi::Uri::setFragment	JKYi/uri.h	/^    void setFragment(const std::string& v) { m_fragment = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
JKYi::Uri::setHost	JKYi/uri.h	/^    void setHost(const std::string& v) { m_host = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
JKYi::Uri::setPath	JKYi/uri.h	/^    void setPath(const std::string& v) { m_path = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
JKYi::Uri::setPort	JKYi/uri.h	/^    void setPort(int32_t v) { m_port = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(int32_t v)
JKYi::Uri::setQuery	JKYi/uri.h	/^    void setQuery(const std::string& v) { m_query = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
JKYi::Uri::setScheme	JKYi/uri.h	/^    void setScheme(const std::string& v){ m_scheme = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
JKYi::Uri::setUserinfo	JKYi/uri.h	/^    void setUserinfo(const std::string& v) { m_userinfo = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
JKYi::Uri::toString	JKYi/uri.h	/^    std::string toString()const;$/;"	p	class:JKYi::Uri	access:public	signature:() const
JKYi::Uri::toString	JKYi/uri.rl.cc	/^std::string Uri::toString() const {$/;"	f	class:JKYi::Uri	signature:() const
JKYi::WeakCallback	JKYi/WeakCallback.h	/^class WeakCallback{$/;"	c	namespace:JKYi
JKYi::WeakCallback::WeakCallback	JKYi/WeakCallback.h	/^    WeakCallback(const std::weak_ptr<CLASS>& object,$/;"	f	class:JKYi::WeakCallback	access:public	signature:(const std::weak_ptr<CLASS>& object, const std::function<void (CLASS*,ARGS...)>& function)
JKYi::WeakCallback::function_	JKYi/WeakCallback.h	/^    std::function<void (CLASS*,ARGS...)> function_;$/;"	m	class:JKYi::WeakCallback	access:private
JKYi::WeakCallback::object_	JKYi/WeakCallback.h	/^    std::weak_ptr<CLASS> object_;$/;"	m	class:JKYi::WeakCallback	access:private
JKYi::WeakCallback::operator ()	JKYi/WeakCallback.h	/^    void operator() (ARGS&&... args)const{$/;"	f	class:JKYi::WeakCallback	access:public	signature:(ARGS&&.... args) const
JKYi::WorkerManager	JKYi/worker.h	/^class WorkerManager{$/;"	c	namespace:JKYi
JKYi::WorkerManager::WorkerManager	JKYi/worker.cc	/^WorkerManager::WorkerManager()$/;"	f	class:JKYi::WorkerManager	signature:()
JKYi::WorkerManager::WorkerManager	JKYi/worker.h	/^    WorkerManager();$/;"	p	class:JKYi::WorkerManager	access:public	signature:()
JKYi::WorkerManager::add	JKYi/worker.cc	/^void WorkerManager::add(Scheduler::ptr s){$/;"	f	class:JKYi::WorkerManager	signature:(Scheduler::ptr s)
JKYi::WorkerManager::add	JKYi/worker.h	/^    void add(Scheduler::ptr s);$/;"	p	class:JKYi::WorkerManager	access:public	signature:(Scheduler::ptr s)
JKYi::WorkerManager::dump	JKYi/worker.cc	/^std::ostream& WorkerManager::dump(std::ostream& os){$/;"	f	class:JKYi::WorkerManager	signature:(std::ostream& os)
JKYi::WorkerManager::dump	JKYi/worker.h	/^    std::ostream& dump(std::ostream& os);$/;"	p	class:JKYi::WorkerManager	access:public	signature:(std::ostream& os)
JKYi::WorkerManager::get	JKYi/worker.cc	/^Scheduler::ptr WorkerManager::get(const std::string& name){$/;"	f	class:JKYi::WorkerManager	signature:(const std::string& name)
JKYi::WorkerManager::get	JKYi/worker.h	/^    Scheduler::ptr get(const std::string& name);$/;"	p	class:JKYi::WorkerManager	access:public	signature:(const std::string& name)
JKYi::WorkerManager::getAsIOManager	JKYi/worker.cc	/^IOManager::ptr WorkerManager::getAsIOManager(const std::string& name){$/;"	f	class:JKYi::WorkerManager	signature:(const std::string& name)
JKYi::WorkerManager::getAsIOManager	JKYi/worker.h	/^    IOManager::ptr getAsIOManager(const std::string& name); $/;"	p	class:JKYi::WorkerManager	access:public	signature:(const std::string& name)
JKYi::WorkerManager::getCount	JKYi/worker.cc	/^uint32_t WorkerManager::getCount(){$/;"	f	class:JKYi::WorkerManager	signature:()
JKYi::WorkerManager::getCount	JKYi/worker.h	/^    uint32_t getCount();$/;"	p	class:JKYi::WorkerManager	access:public	signature:()
JKYi::WorkerManager::init	JKYi/worker.cc	/^bool WorkerManager::init(){$/;"	f	class:JKYi::WorkerManager	signature:()
JKYi::WorkerManager::init	JKYi/worker.cc	/^bool WorkerManager::init(const std::unordered_map<std::string,$/;"	f	class:JKYi::WorkerManager	signature:(const std::unordered_map<std::string, std::unordered_map<std::string,std::string>>& v)
JKYi::WorkerManager::init	JKYi/worker.h	/^    bool init();$/;"	p	class:JKYi::WorkerManager	access:public	signature:()
JKYi::WorkerManager::init	JKYi/worker.h	/^    bool init(const std::unordered_map<std::string,std::unordered_map<std::string,std::string> >& v);$/;"	p	class:JKYi::WorkerManager	access:public	signature:(const std::unordered_map<std::string,std::unordered_map<std::string,std::string> >& v)
JKYi::WorkerManager::isStop	JKYi/worker.h	/^    bool isStop()const { return m_stop; }$/;"	f	class:JKYi::WorkerManager	access:public	signature:() const
JKYi::WorkerManager::m_datas	JKYi/worker.h	/^    std::map<std::string,std::vector<Scheduler::ptr> >m_datas;$/;"	m	class:JKYi::WorkerManager	access:private
JKYi::WorkerManager::m_stop	JKYi/worker.h	/^    bool m_stop;$/;"	m	class:JKYi::WorkerManager	access:private
JKYi::WorkerManager::ptr	JKYi/worker.h	/^    typedef std::shared_ptr<WorkerManager> ptr;$/;"	t	class:JKYi::WorkerManager	access:public
JKYi::WorkerManager::schedule	JKYi/worker.h	/^    void schedule(const std::string& name,FiberOrCb fc,int thread = -1){$/;"	f	class:JKYi::WorkerManager	access:public	signature:(const std::string& name,FiberOrCb fc,int thread = -1)
JKYi::WorkerManager::schedule	JKYi/worker.h	/^    void schedule(const std::string& name,Iter begin,Iter end){$/;"	f	class:JKYi::WorkerManager	access:public	signature:(const std::string& name,Iter begin,Iter end)
JKYi::WorkerManager::stop	JKYi/worker.cc	/^void WorkerManager::stop(){$/;"	f	class:JKYi::WorkerManager	signature:()
JKYi::WorkerManager::stop	JKYi/worker.h	/^    void stop();$/;"	p	class:JKYi::WorkerManager	access:public	signature:()
JKYi::WorkerMgr	JKYi/worker.h	/^typedef JKYi::Singleton<WorkerManager> WorkerMgr;$/;"	t	namespace:JKYi
JKYi::WriteScopedLockImpl	JKYi/mutex.h	/^class WriteScopedLockImpl{$/;"	c	namespace:JKYi
JKYi::WriteScopedLockImpl::WriteScopedLockImpl	JKYi/mutex.h	/^  WriteScopedLockImpl(T&mutex)$/;"	f	class:JKYi::WriteScopedLockImpl	access:public	signature:(T&mutex)
JKYi::WriteScopedLockImpl::lock	JKYi/mutex.h	/^  void lock(){$/;"	f	class:JKYi::WriteScopedLockImpl	access:public	signature:()
JKYi::WriteScopedLockImpl::m_locked	JKYi/mutex.h	/^  bool m_locked;$/;"	m	class:JKYi::WriteScopedLockImpl	access:private
JKYi::WriteScopedLockImpl::m_mutex	JKYi/mutex.h	/^  T& m_mutex;$/;"	m	class:JKYi::WriteScopedLockImpl	access:private
JKYi::WriteScopedLockImpl::unlock	JKYi/mutex.h	/^  void unlock(){$/;"	f	class:JKYi::WriteScopedLockImpl	access:public	signature:()
JKYi::WriteScopedLockImpl::~WriteScopedLockImpl	JKYi/mutex.h	/^  ~WriteScopedLockImpl(){$/;"	f	class:JKYi::WriteScopedLockImpl	access:public	signature:()
JKYi::ZKClient	JKYi/zk_client.h	/^class ZKClient : public std::enable_shared_from_this<ZKClient>{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this
JKYi::ZKClient::EventType	JKYi/zk_client.h	/^    class EventType{$/;"	c	class:JKYi::ZKClient	access:public
JKYi::ZKClient::EventType::CHANGED	JKYi/zk_client.cc	/^const int ZKClient::EventType::CHANGED = ZOO_CHANGED_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
JKYi::ZKClient::EventType::CHANGED	JKYi/zk_client.h	/^        static const int CHANGED;$/;"	m	class:JKYi::ZKClient::EventType	access:public
JKYi::ZKClient::EventType::CHILD	JKYi/zk_client.cc	/^const int ZKClient::EventType::CHILD = ZOO_CHILD_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
JKYi::ZKClient::EventType::CHILD	JKYi/zk_client.h	/^        static const int CHILD;$/;"	m	class:JKYi::ZKClient::EventType	access:public
JKYi::ZKClient::EventType::CREATED	JKYi/zk_client.cc	/^const int ZKClient::EventType::CREATED = ZOO_CREATED_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
JKYi::ZKClient::EventType::CREATED	JKYi/zk_client.h	/^        static const int CREATED;$/;"	m	class:JKYi::ZKClient::EventType	access:public
JKYi::ZKClient::EventType::DELETED	JKYi/zk_client.cc	/^const int ZKClient::EventType::DELETED = ZOO_DELETED_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
JKYi::ZKClient::EventType::DELETED	JKYi/zk_client.h	/^        static const int DELETED;$/;"	m	class:JKYi::ZKClient::EventType	access:public
JKYi::ZKClient::EventType::NOWATCHING	JKYi/zk_client.cc	/^const int ZKClient::EventType::NOWATCHING = ZOO_NOTWATCHING_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
JKYi::ZKClient::EventType::NOWATCHING	JKYi/zk_client.h	/^        static const int NOWATCHING;$/;"	m	class:JKYi::ZKClient::EventType	access:public
JKYi::ZKClient::EventType::SESSION	JKYi/zk_client.cc	/^const int ZKClient::EventType::SESSION = ZOO_SESSION_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
JKYi::ZKClient::EventType::SESSION	JKYi/zk_client.h	/^        static const int SESSION;$/;"	m	class:JKYi::ZKClient::EventType	access:public
JKYi::ZKClient::FlagsType	JKYi/zk_client.h	/^    class FlagsType{$/;"	c	class:JKYi::ZKClient	access:public
JKYi::ZKClient::FlagsType::EPHEMERAL	JKYi/zk_client.cc	/^const int ZKClient::FlagsType::EPHEMERAL = ZOO_EPHEMERAL;$/;"	m	class:JKYi::ZKClient::FlagsType	file:
JKYi::ZKClient::FlagsType::EPHEMERAL	JKYi/zk_client.h	/^        static const int EPHEMERAL;$/;"	m	class:JKYi::ZKClient::FlagsType	access:public
JKYi::ZKClient::FlagsType::SEQUENCE	JKYi/zk_client.cc	/^const int ZKClient::FlagsType::SEQUENCE = ZOO_SEQUENCE;$/;"	m	class:JKYi::ZKClient::FlagsType	file:
JKYi::ZKClient::FlagsType::SEQUENCE	JKYi/zk_client.h	/^        static const int SEQUENCE;$/;"	m	class:JKYi::ZKClient::FlagsType	access:public
JKYi::ZKClient::OnWatcher	JKYi/zk_client.cc	/^void ZKClient::OnWatcher(zhandle_t* zk,int type,int stat,const char * path,$/;"	f	class:JKYi::ZKClient	signature:(zhandle_t* zk,int type,int stat,const char * path, void * watcherCtx)
JKYi::ZKClient::OnWatcher	JKYi/zk_client.h	/^    static void OnWatcher(zhandle_t * zh,int type,int stat,const char * path,void * watcherCtx);$/;"	p	class:JKYi::ZKClient	access:private	signature:(zhandle_t * zh,int type,int stat,const char * path,void * watcherCtx)
JKYi::ZKClient::StateType	JKYi/zk_client.h	/^    class StateType{$/;"	c	class:JKYi::ZKClient	access:public
JKYi::ZKClient::StateType::ASSOCIATING	JKYi/zk_client.cc	/^const int ZKClient::StateType::ASSOCIATING = ZOO_ASSOCIATING_STATE;$/;"	m	class:JKYi::ZKClient::StateType	file:
JKYi::ZKClient::StateType::ASSOCIATING	JKYi/zk_client.h	/^        static const int ASSOCIATING;$/;"	m	class:JKYi::ZKClient::StateType	access:public
JKYi::ZKClient::StateType::AUTH_FAILED	JKYi/zk_client.cc	/^const int ZKClient::StateType::AUTH_FAILED = ZOO_AUTH_FAILED_STATE;$/;"	m	class:JKYi::ZKClient::StateType	file:
JKYi::ZKClient::StateType::AUTH_FAILED	JKYi/zk_client.h	/^        static const int AUTH_FAILED;$/;"	m	class:JKYi::ZKClient::StateType	access:public
JKYi::ZKClient::StateType::CONNECTED	JKYi/zk_client.cc	/^const int ZKClient::StateType::CONNECTED = ZOO_CONNECTED_STATE;$/;"	m	class:JKYi::ZKClient::StateType	file:
JKYi::ZKClient::StateType::CONNECTED	JKYi/zk_client.h	/^        static const int CONNECTED;$/;"	m	class:JKYi::ZKClient::StateType	access:public
JKYi::ZKClient::StateType::CONNECTING	JKYi/zk_client.cc	/^const int ZKClient::StateType::CONNECTING = ZOO_CONNECTING_STATE;$/;"	m	class:JKYi::ZKClient::StateType	file:
JKYi::ZKClient::StateType::CONNECTING	JKYi/zk_client.h	/^        static const int CONNECTING;$/;"	m	class:JKYi::ZKClient::StateType	access:public
JKYi::ZKClient::StateType::EXPIRED_SESSION	JKYi/zk_client.cc	/^const int ZKClient::StateType::EXPIRED_SESSION = ZOO_EXPIRED_SESSION_STATE;$/;"	m	class:JKYi::ZKClient::StateType	file:
JKYi::ZKClient::StateType::EXPIRED_SESSION	JKYi/zk_client.h	/^        static const int EXPIRED_SESSION;$/;"	m	class:JKYi::ZKClient::StateType	access:public
JKYi::ZKClient::ZKClient	JKYi/zk_client.cc	/^ZKClient::ZKClient()$/;"	f	class:JKYi::ZKClient	signature:()
JKYi::ZKClient::ZKClient	JKYi/zk_client.h	/^    ZKClient();$/;"	p	class:JKYi::ZKClient	access:public	signature:()
JKYi::ZKClient::close	JKYi/zk_client.cc	/^int32_t ZKClient::close(){$/;"	f	class:JKYi::ZKClient	signature:()
JKYi::ZKClient::close	JKYi/zk_client.h	/^    int32_t close();$/;"	p	class:JKYi::ZKClient	access:public	signature:()
JKYi::ZKClient::create	JKYi/zk_client.cc	/^int32_t ZKClient::create(const std::string& path,const std::string& val,$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,const std::string& val, std::string& new_path,const struct ACL_vector * acl, int flags)
JKYi::ZKClient::create	JKYi/zk_client.h	/^    int32_t create(const std::string& path,const std::string& val,std::string& new_path,const struct ACL_vector* acl = &ZOO_OPEN_ACL_UNSAFE,int flags = 0);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,const std::string& val,std::string& new_path,const struct ACL_vector* acl = &ZOO_OPEN_ACL_UNSAFE,int flags = 0)
JKYi::ZKClient::del	JKYi/zk_client.cc	/^int32_t ZKClient::del(const std::string& path,int version){$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,int version)
JKYi::ZKClient::del	JKYi/zk_client.h	/^    int32_t del(const std::string& path,int version = -1);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,int version = -1)
JKYi::ZKClient::exists	JKYi/zk_client.cc	/^int32_t ZKClient::exists(const std::string& path,bool watch,Stat * stat ){$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,bool watch,Stat * stat )
JKYi::ZKClient::exists	JKYi/zk_client.h	/^    int32_t exists(const std::string& path,bool watch,Stat * stat = nullptr);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,bool watch,Stat * stat = nullptr)
JKYi::ZKClient::get	JKYi/zk_client.cc	/^int32_t ZKClient::get(const std::string& path,std::string& val,bool watch,$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,std::string& val,bool watch, Stat * stat)
JKYi::ZKClient::get	JKYi/zk_client.h	/^    int32_t get(const std::string& path,std::string& val,bool watch,Stat * stat = nullptr);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,std::string& val,bool watch,Stat * stat = nullptr)
JKYi::ZKClient::getChildren	JKYi/zk_client.cc	/^int32_t ZKClient::getChildren(const std::string& path,std::vector<std::string>&val,$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,std::vector<std::string>&val, bool watch,Stat * stat)
JKYi::ZKClient::getChildren	JKYi/zk_client.h	/^    int32_t getChildren(const std::string& path,std::vector<std::string>& val,bool watch,Stat * stat = nullptr);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,std::vector<std::string>& val,bool watch,Stat * stat = nullptr)
JKYi::ZKClient::getState	JKYi/zk_client.cc	/^int32_t ZKClient::getState(){$/;"	f	class:JKYi::ZKClient	signature:()
JKYi::ZKClient::getState	JKYi/zk_client.h	/^    int32_t getState();$/;"	p	class:JKYi::ZKClient	access:public	signature:()
JKYi::ZKClient::init	JKYi/zk_client.cc	/^bool ZKClient::init(const std::string& hosts,int recv_timeout,watcher_callback cb$/;"	f	class:JKYi::ZKClient	signature:(const std::string& hosts,int recv_timeout,watcher_callback cb )
JKYi::ZKClient::init	JKYi/zk_client.h	/^    bool init(const std::string& hosts,int recv_timeout,watcher_callback cb);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& hosts,int recv_timeout,watcher_callback cb)
JKYi::ZKClient::m_handle	JKYi/zk_client.h	/^    zhandle_t * m_handle;$/;"	m	class:JKYi::ZKClient	access:private
JKYi::ZKClient::m_hosts	JKYi/zk_client.h	/^    std::string m_hosts;$/;"	m	class:JKYi::ZKClient	access:private
JKYi::ZKClient::m_recvTimeout	JKYi/zk_client.h	/^    int32_t m_recvTimeout;$/;"	m	class:JKYi::ZKClient	access:private
JKYi::ZKClient::m_watcherCb	JKYi/zk_client.h	/^    watcher_callback2 m_watcherCb;$/;"	m	class:JKYi::ZKClient	access:private
JKYi::ZKClient::ptr	JKYi/zk_client.h	/^    typedef std::shared_ptr<ZKClient> ptr;$/;"	t	class:JKYi::ZKClient	access:public
JKYi::ZKClient::reconnect	JKYi/zk_client.cc	/^bool ZKClient::reconnect(){$/;"	f	class:JKYi::ZKClient	signature:()
JKYi::ZKClient::reconnect	JKYi/zk_client.h	/^    bool reconnect();$/;"	p	class:JKYi::ZKClient	access:public	signature:()
JKYi::ZKClient::set	JKYi/zk_client.cc	/^int32_t ZKClient::set(const std::string& path,const std::string& val,int version,$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,const std::string& val,int version, Stat * stat)
JKYi::ZKClient::set	JKYi/zk_client.h	/^    int32_t set(const std::string& path,const std::string& val,int version = -1,Stat * stat = nullptr);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,const std::string& val,int version = -1,Stat * stat = nullptr)
JKYi::ZKClient::watcher_callback	JKYi/zk_client.h	/^    typedef std::function<void (int type,int stat,const std::string& path,ZKClient::ptr)>watcher_callback;$/;"	t	class:JKYi::ZKClient	access:public
JKYi::ZKClient::watcher_callback2	JKYi/zk_client.h	/^    typedef std::function<void (int type,int stat,const std::string& path)> watcher_callback2;$/;"	t	class:JKYi::ZKClient	access:private
JKYi::ZKClient::~ZKClient	JKYi/zk_client.cc	/^ZKClient::~ZKClient(){$/;"	f	class:JKYi::ZKClient	signature:()
JKYi::ZKClient::~ZKClient	JKYi/zk_client.h	/^    ~ZKClient();$/;"	p	class:JKYi::ZKClient	access:public	signature:()
JKYi::_HookIniter	JKYi/hook.cc	/^struct _HookIniter{$/;"	s	namespace:JKYi	file:
JKYi::_HookIniter::_HookIniter	JKYi/hook.cc	/^   _HookIniter(){$/;"	f	struct:JKYi::_HookIniter	access:public	signature:()
JKYi::__anon21::MySQLThreadIniter	JKYi/db/mysql.cc	/^    struct MySQLThreadIniter{$/;"	s	namespace:JKYi::__anon21	file:
JKYi::__anon21::MySQLThreadIniter::MySQLThreadIniter	JKYi/db/mysql.cc	/^        MySQLThreadIniter(){$/;"	f	struct:JKYi::__anon21::MySQLThreadIniter	access:public	signature:()
JKYi::__anon21::MySQLThreadIniter::~MySQLThreadIniter	JKYi/db/mysql.cc	/^        ~MySQLThreadIniter(){$/;"	f	struct:JKYi::__anon21::MySQLThreadIniter	access:public	signature:()
JKYi::__anon2::_SSLInit	JKYi/socket.cc	/^struct _SSLInit{$/;"	s	namespace:JKYi::__anon2	file:
JKYi::__anon2::_SSLInit::_SSLInit	JKYi/socket.cc	/^    _SSLInit(){$/;"	f	struct:JKYi::__anon2::_SSLInit	access:public	signature:()
JKYi::__anon2::s_init	JKYi/socket.cc	/^static _SSLInit s_init;$/;"	m	namespace:JKYi::__anon2	file:
JKYi::__lstat	JKYi/util.cc	/^static int __lstat(const char* file,struct stat* st = nullptr){$/;"	f	namespace:JKYi	signature:(const char* file,struct stat* st = nullptr)
JKYi::__mkdir	JKYi/util.cc	/^static int __mkdir(const char * dirname){$/;"	f	namespace:JKYi	signature:(const char * dirname)
JKYi::_log_init	JKYi/log.cc	/^static LogIniter _log_init;\/\/å¨å±å¯¹è±¡$/;"	m	namespace:JKYi	file:
JKYi::base64decode	JKYi/util/hash_util.cc	/^std::string base64decode(const std::string &src) {$/;"	f	namespace:JKYi	signature:(const std::string &src)
JKYi::base64decode	JKYi/util/hash_util.h	/^std::string base64decode(const std::string& src);$/;"	p	namespace:JKYi	signature:(const std::string& src)
JKYi::base64encode	JKYi/util/hash_util.cc	/^std::string base64encode(const std::string& data) {$/;"	f	namespace:JKYi	signature:(const std::string& data)
JKYi::base64encode	JKYi/util/hash_util.cc	/^std::string base64encode(const void* data, size_t len) {$/;"	f	namespace:JKYi	signature:(const void* data, size_t len)
JKYi::base64encode	JKYi/util/hash_util.h	/^std::string base64encode(const std::string& data);$/;"	p	namespace:JKYi	signature:(const std::string& data)
JKYi::base64encode	JKYi/util/hash_util.h	/^std::string base64encode(const void * data,size_t len);$/;"	p	namespace:JKYi	signature:(const void * data,size_t len)
JKYi::byteswap	JKYi/endian.h	/^typename std::enable_if<sizeof(T) == sizeof(uint16_t),T>::type byteswap(T value){$/;"	f	namespace:JKYi	signature:(T value)
JKYi::byteswap	JKYi/endian.h	/^typename std::enable_if<sizeof(T) == sizeof(uint32_t),T>::type byteswap(T value){$/;"	f	namespace:JKYi	signature:(T value)
JKYi::byteswap	JKYi/endian.h	/^typename std::enable_if<sizeof(T) == sizeof(uint64_t),T>::type byteswap(T value){$/;"	f	namespace:JKYi	signature:(T value)
JKYi::create_module	JKYi/library.cc	/^typedef Module* (*create_module)();$/;"	t	namespace:JKYi	file:
JKYi::destroy_module	JKYi/library.cc	/^typedef void (*destroy_module)(Module*);$/;"	t	namespace:JKYi	file:
JKYi::detail	JKYi/reactor/Thread.cc	/^namespace detail{$/;"	n	namespace:JKYi	file:
JKYi::detail::ThreadData	JKYi/reactor/Thread.cc	/^struct ThreadData{$/;"	s	namespace:JKYi::detail	file:
JKYi::detail::ThreadData::ThreadData	JKYi/reactor/Thread.cc	/^    ThreadData(ThreadFunc func,const std::string& name,pid_t* tid,$/;"	f	struct:JKYi::detail::ThreadData	access:public	signature:(ThreadFunc func,const std::string& name,pid_t* tid, CountDownLatch* latch)
JKYi::detail::ThreadData::ThreadFunc	JKYi/reactor/Thread.cc	/^    typedef JKYi::net::Thread::ThreadFunc ThreadFunc;$/;"	t	struct:JKYi::detail::ThreadData	file:	access:public
JKYi::detail::ThreadData::func_	JKYi/reactor/Thread.cc	/^    ThreadFunc func_;$/;"	m	struct:JKYi::detail::ThreadData	file:	access:public
JKYi::detail::ThreadData::latch_	JKYi/reactor/Thread.cc	/^    CountDownLatch* latch_;$/;"	m	struct:JKYi::detail::ThreadData	file:	access:public
JKYi::detail::ThreadData::name_	JKYi/reactor/Thread.cc	/^    std::string name_;$/;"	m	struct:JKYi::detail::ThreadData	file:	access:public
JKYi::detail::ThreadData::runInThread	JKYi/reactor/Thread.cc	/^    void runInThread(){$/;"	f	struct:JKYi::detail::ThreadData	access:public	signature:()
JKYi::detail::ThreadData::tid_	JKYi/reactor/Thread.cc	/^    pid_t* tid_;$/;"	m	struct:JKYi::detail::ThreadData	file:	access:public
JKYi::detail::ThreadNameInitializer	JKYi/reactor/Thread.cc	/^class ThreadNameInitializer{$/;"	c	namespace:JKYi::detail	file:
JKYi::detail::ThreadNameInitializer::ThreadNameInitializer	JKYi/reactor/Thread.cc	/^    ThreadNameInitializer(){$/;"	f	class:JKYi::detail::ThreadNameInitializer	access:public	signature:()
JKYi::detail::afterFork	JKYi/reactor/Thread.cc	/^void afterFork(){$/;"	f	namespace:JKYi::detail	signature:()
JKYi::detail::gettid	JKYi/reactor/Thread.cc	/^pid_t gettid(){$/;"	f	namespace:JKYi::detail	signature:()
JKYi::detail::init	JKYi/reactor/Thread.cc	/^ThreadNameInitializer init;$/;"	m	namespace:JKYi::detail	file:
JKYi::detail::startThread	JKYi/reactor/Thread.cc	/^void * startThread(void * obj){$/;"	f	namespace:JKYi::detail	signature:(void * obj)
JKYi::down_cast	JKYi/Types.h	/^inline To down_cast(From* f){$/;"	f	namespace:JKYi	signature:(From* f)
JKYi::ds	JKYi/ds/blocking_queue.h	/^namespace ds{$/;"	n	namespace:JKYi
JKYi::ds::BlockingQueue	JKYi/ds/blocking_queue.h	/^class BlockingQueue{$/;"	c	namespace:JKYi::ds
JKYi::ds::BlockingQueue::MutexType	JKYi/ds/blocking_queue.h	/^    typedef JKYi::SpinLock MutexType;$/;"	t	class:JKYi::ds::BlockingQueue	access:public
JKYi::ds::BlockingQueue::data_type	JKYi/ds/blocking_queue.h	/^    typedef std::shared_ptr<T> data_type;$/;"	t	class:JKYi::ds::BlockingQueue	access:public
JKYi::ds::BlockingQueue::empty	JKYi/ds/blocking_queue.h	/^    bool empty(){$/;"	f	class:JKYi::ds::BlockingQueue	access:public	signature:()
JKYi::ds::BlockingQueue::m_datas	JKYi/ds/blocking_queue.h	/^    std::list<data_type> m_datas;$/;"	m	class:JKYi::ds::BlockingQueue	access:private
JKYi::ds::BlockingQueue::m_mutex	JKYi/ds/blocking_queue.h	/^    MutexType m_mutex;$/;"	m	class:JKYi::ds::BlockingQueue	access:private
JKYi::ds::BlockingQueue::m_sem	JKYi/ds/blocking_queue.h	/^    JKYi::FiberSemaphore m_sem;$/;"	m	class:JKYi::ds::BlockingQueue	access:private
JKYi::ds::BlockingQueue::pop	JKYi/ds/blocking_queue.h	/^    data_type pop(){$/;"	f	class:JKYi::ds::BlockingQueue	access:public	signature:()
JKYi::ds::BlockingQueue::ptr	JKYi/ds/blocking_queue.h	/^    typedef std::shared_ptr<BlockingQueue> ptr;$/;"	t	class:JKYi::ds::BlockingQueue	access:public
JKYi::ds::BlockingQueue::push	JKYi/ds/blocking_queue.h	/^    size_t push(const data_type& data){$/;"	f	class:JKYi::ds::BlockingQueue	access:public	signature:(const data_type& data)
JKYi::ds::BlockingQueue::size	JKYi/ds/blocking_queue.h	/^    size_t size(){$/;"	f	class:JKYi::ds::BlockingQueue	access:public	signature:()
JKYi::g_daemon_restart_interval	JKYi/daemon.cc	/^static ConfigVar<uint32_t>::ptr g_daemon_restart_interval = $/;"	m	namespace:JKYi	file:
JKYi::g_fiber_stack_size	JKYi/fiber.cc	/^ static ConfigVar<uint32_t>::ptr g_fiber_stack_size=JKYi::Config::Lookup<uint32_t>("fiber.stack_size",1024*1024,"fiber stack size");$/;"	m	namespace:JKYi	file:
JKYi::g_log_defines	JKYi/log.cc	/^JKYi::ConfigVar<std::set<LogDefine>>::ptr g_log_defines = JKYi::Config::Lookup("logs",std::set<LogDefine>(),"logs config");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/address.cc	/^static JKYi::Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/application.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/bytearray.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/config.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/daemon.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/db/fox_thread.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/db/mysql.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/db/redis.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/env.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/fiber.cc	/^ static JKYi::Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/iomanager.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/library.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/module.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/reactor/Thread.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/scheduler.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system"); $/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/socket.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/tcp_server.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/thread.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/timer.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/util.cc	/^static JKYi::Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_logger	JKYi/worker.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
JKYi::g_module_path	JKYi/module.cc	/^static JKYi::ConfigVar<std::string>::ptr g_module_path = $/;"	m	namespace:JKYi	file:
JKYi::g_mysql_dbs	JKYi/db/mysql.cc	/^                        g_mysql_dbs = JKYi::Config::Lookup("mysql.dbs",std::map<std::string,std::map<std::string,std::string>>(),"mysql dbs");$/;"	m	namespace:JKYi	file:
JKYi::g_redis	JKYi/db/redis.cc	/^         g_redis = JKYi::Config::Lookup("redis.config",$/;"	m	namespace:JKYi	file:
JKYi::g_server_pid_file	JKYi/application.cc	/^static JKYi::ConfigVar<std::string>::ptr g_server_pid_file = $/;"	m	namespace:JKYi	file:
JKYi::g_server_work_path	JKYi/application.cc	/^static JKYi::ConfigVar<std::string>::ptr g_server_work_path = $/;"	m	namespace:JKYi	file:
JKYi::g_servers_conf	JKYi/application.cc	/^static JKYi::ConfigVar<std::vector<TcpServerConf>>::ptr g_servers_conf = $/;"	m	namespace:JKYi	file:
JKYi::g_tcp_connect_timeout	JKYi/hook.cc	/^static ConfigVar<int>::ptr g_tcp_connect_timeout=Config::Lookup("tcp.connect.timeout",5000,"tcp connect timeout");$/;"	m	namespace:JKYi	file:
JKYi::g_tcp_server_read_timeout	JKYi/tcp_server.cc	/^static ConfigVar<uint64_t>::ptr g_tcp_server_read_timeout = $/;"	m	namespace:JKYi	file:
JKYi::g_thread_info_set	JKYi/db/fox_thread.cc	/^                g_thread_info_set = Config::Lookup("fox_thread",$/;"	m	namespace:JKYi	file:
JKYi::g_workers_config	JKYi/worker.cc	/^                 g_workers_config = Config::Lookup("workers",$/;"	m	namespace:JKYi	file:
JKYi::get_pointer	JKYi/reactor/Callbacks.h	/^inline T* get_pointer(const std::shared_ptr<T>& ptr){$/;"	f	namespace:JKYi	signature:(const std::shared_ptr<T>& ptr)
JKYi::get_pointer	JKYi/reactor/Callbacks.h	/^inline T* get_pointer(const std::unique_ptr<T>& ptr){$/;"	f	namespace:JKYi	signature:(const std::unique_ptr<T>& ptr)
JKYi::get_value	JKYi/db/redis.cc	/^static std::string get_value(const std::map<std::string,std::string>& m,$/;"	f	namespace:JKYi	signature:(const std::map<std::string,std::string>& m, const std::string& key,const std::string& def = Ó)
JKYi::hook_init	JKYi/hook.cc	/^void hook_init(){$/;"	f	namespace:JKYi	signature:()
JKYi::http	JKYi/http/http.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
JKYi::http	JKYi/http/http.h	/^namespace http{$/;"	n	namespace:JKYi
JKYi::http	JKYi/http/http_connection.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
JKYi::http	JKYi/http/http_connection.h	/^namespace http{$/;"	n	namespace:JKYi
JKYi::http	JKYi/http/http_parser.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
JKYi::http	JKYi/http/http_parser.h	/^namespace http{$/;"	n	namespace:JKYi
JKYi::http	JKYi/http/http_server.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
JKYi::http	JKYi/http/http_server.h	/^namespace http{$/;"	n	namespace:JKYi
JKYi::http	JKYi/http/http_session.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
JKYi::http	JKYi/http/http_session.h	/^namespace http{$/;"	n	namespace:JKYi
JKYi::http	JKYi/http/servlet.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
JKYi::http	JKYi/http/servlet.h	/^namespace http{$/;"	n	namespace:JKYi
JKYi::http	JKYi/http/ws_connection.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
JKYi::http	JKYi/http/ws_connection.h	/^namespace http{$/;"	n	namespace:JKYi
JKYi::http	JKYi/http/ws_server.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
JKYi::http	JKYi/http/ws_server.h	/^namespace http{$/;"	n	namespace:JKYi
JKYi::http	JKYi/http/ws_servlet.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
JKYi::http	JKYi/http/ws_servlet.h	/^namespace http{$/;"	n	namespace:JKYi
JKYi::http	JKYi/http/ws_session.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
JKYi::http	JKYi/http/ws_session.h	/^namespace http{$/;"	n	namespace:JKYi
JKYi::http2	JKYi/http2/dynamic_table.cc	/^namespace http2{$/;"	n	namespace:JKYi	file:
JKYi::http2	JKYi/http2/dynamic_table.h	/^namespace http2{$/;"	n	namespace:JKYi
JKYi::http2	JKYi/http2/frame.cc	/^namespace http2{$/;"	n	namespace:JKYi	file:
JKYi::http2	JKYi/http2/frame.h	/^namespace http2{$/;"	n	namespace:JKYi
JKYi::http2	JKYi/http2/hpack.cc	/^namespace http2{$/;"	n	namespace:JKYi	file:
JKYi::http2	JKYi/http2/hpack.h	/^namespace http2{$/;"	n	namespace:JKYi
JKYi::http2	JKYi/http2/huffman.cc	/^namespace http2 {$/;"	n	namespace:JKYi	file:
JKYi::http2	JKYi/http2/huffman.h	/^namespace http2 {$/;"	n	namespace:JKYi
JKYi::http2	JKYi/http2/huffman_table.h	/^namespace http2 {$/;"	n	namespace:JKYi
JKYi::http2::DataFrame::readFrom	JKYi/http2/frame.cc	/^bool DataFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::DataFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::DataFrame::toString	JKYi/http2/frame.cc	/^std::string DataFrame::toString()const{$/;"	f	class:JKYi::http2::DataFrame	signature:() const
JKYi::http2::DataFrame::writeTo	JKYi/http2/frame.cc	/^bool DataFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::DataFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::DynamicTable	JKYi/http2/dynamic_table.h	/^class DynamicTable{$/;"	c	namespace:JKYi::http2
JKYi::http2::DynamicTable::DynamicTable	JKYi/http2/dynamic_table.cc	/^DynamicTable::DynamicTable()$/;"	f	class:JKYi::http2::DynamicTable	signature:()
JKYi::http2::DynamicTable::DynamicTable	JKYi/http2/dynamic_table.h	/^    DynamicTable();$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:()
JKYi::http2::DynamicTable::GetStaticHeaders	JKYi/http2/dynamic_table.cc	/^std::pair<std::string,std::string> DynamicTable::GetStaticHeaders(uint32_t idx){$/;"	f	class:JKYi::http2::DynamicTable	signature:(uint32_t idx)
JKYi::http2::DynamicTable::GetStaticHeaders	JKYi/http2/dynamic_table.h	/^    static std::pair<std::string,std::string> GetStaticHeaders(uint32_t idx);$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(uint32_t idx)
JKYi::http2::DynamicTable::GetStaticHeadersIdx	JKYi/http2/dynamic_table.cc	/^int32_t DynamicTable::GetStaticHeadersIdx(const std::string& name){$/;"	f	class:JKYi::http2::DynamicTable	signature:(const std::string& name)
JKYi::http2::DynamicTable::GetStaticHeadersIdx	JKYi/http2/dynamic_table.h	/^    static int32_t GetStaticHeadersIdx(const std::string& name);$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(const std::string& name)
JKYi::http2::DynamicTable::GetStaticHeadersPair	JKYi/http2/dynamic_table.cc	/^std::pair<int32_t,bool> DynamicTable::GetStaticHeadersPair(const std::string& name, $/;"	f	class:JKYi::http2::DynamicTable	signature:(const std::string& name, const std::string& val)
JKYi::http2::DynamicTable::GetStaticHeadersPair	JKYi/http2/dynamic_table.h	/^    static std::pair<int32_t,bool> GetStaticHeadersPair(const std::string& name,const std::string& val);$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(const std::string& name,const std::string& val)
JKYi::http2::DynamicTable::findIndex	JKYi/http2/dynamic_table.cc	/^int32_t DynamicTable::findIndex(const std::string& name){$/;"	f	class:JKYi::http2::DynamicTable	signature:(const std::string& name)
JKYi::http2::DynamicTable::findIndex	JKYi/http2/dynamic_table.h	/^    int32_t findIndex(const std::string& name);$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(const std::string& name)
JKYi::http2::DynamicTable::findPair	JKYi/http2/dynamic_table.cc	/^std::pair<int32_t,bool> DynamicTable::findPair(const std::string& name,$/;"	f	class:JKYi::http2::DynamicTable	signature:(const std::string& name, const std::string& value) const
JKYi::http2::DynamicTable::findPair	JKYi/http2/dynamic_table.h	/^    std::pair<int32_t,bool> findPair(const std::string& name,const std::string& value)const;$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(const std::string& name,const std::string& value) const
JKYi::http2::DynamicTable::getName	JKYi/http2/dynamic_table.cc	/^std::string DynamicTable::getName(uint32_t idx)const{$/;"	f	class:JKYi::http2::DynamicTable	signature:(uint32_t idx) const
JKYi::http2::DynamicTable::getName	JKYi/http2/dynamic_table.h	/^    std::string getName(uint32_t idx)const;$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(uint32_t idx) const
JKYi::http2::DynamicTable::getPair	JKYi/http2/dynamic_table.cc	/^std::pair<std::string,std::string> DynamicTable::getPair(uint32_t idx)const{$/;"	f	class:JKYi::http2::DynamicTable	signature:(uint32_t idx) const
JKYi::http2::DynamicTable::getPair	JKYi/http2/dynamic_table.h	/^    std::pair<std::string,std::string> getPair(uint32_t idx)const;$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(uint32_t idx) const
JKYi::http2::DynamicTable::m_dataSize	JKYi/http2/dynamic_table.h	/^    int32_t m_dataSize;$/;"	m	class:JKYi::http2::DynamicTable	access:private
JKYi::http2::DynamicTable::m_datas	JKYi/http2/dynamic_table.h	/^    std::vector<std::pair<std::string,std::string>>m_datas;$/;"	m	class:JKYi::http2::DynamicTable	access:private
JKYi::http2::DynamicTable::m_maxDataSize	JKYi/http2/dynamic_table.h	/^    int32_t m_maxDataSize;$/;"	m	class:JKYi::http2::DynamicTable	access:private
JKYi::http2::DynamicTable::setMaxDataSize	JKYi/http2/dynamic_table.h	/^    void setMaxDataSize(int32_t v) { m_maxDataSize = v; }$/;"	f	class:JKYi::http2::DynamicTable	access:public	signature:(int32_t v)
JKYi::http2::DynamicTable::toString	JKYi/http2/dynamic_table.cc	/^std::string DynamicTable::toString()const{$/;"	f	class:JKYi::http2::DynamicTable	signature:() const
JKYi::http2::DynamicTable::toString	JKYi/http2/dynamic_table.h	/^    std::string toString()const;$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:() const
JKYi::http2::DynamicTable::update	JKYi/http2/dynamic_table.cc	/^int32_t DynamicTable::update(const std::string& name,const std::string& value){$/;"	f	class:JKYi::http2::DynamicTable	signature:(const std::string& name,const std::string& value)
JKYi::http2::DynamicTable::update	JKYi/http2/dynamic_table.h	/^    int32_t update(const std::string& name,const std::string& value);$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(const std::string& name,const std::string& value)
JKYi::http2::DynamicTable::~DynamicTable	JKYi/http2/dynamic_table.h	/^    ~DynamicTable();$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:()
JKYi::http2::Frame::toString	JKYi/http2/frame.cc	/^std::string Frame::toString(){$/;"	f	class:JKYi::http2::Frame	signature:()
JKYi::http2::FrameCodec::parseFrom	JKYi/http2/frame.cc	/^Frame::ptr FrameCodec::parseFrom(Stream::ptr stream){$/;"	f	class:JKYi::http2::FrameCodec	signature:(Stream::ptr stream)
JKYi::http2::FrameCodec::serializeTo	JKYi/http2/frame.cc	/^int32_t FrameCodec::serializeTo(Stream::ptr stream,Frame::ptr frame){$/;"	f	class:JKYi::http2::FrameCodec	signature:(Stream::ptr stream,Frame::ptr frame)
JKYi::http2::FrameFlagContinuationToString	JKYi/http2/frame.cc	/^std::string FrameFlagContinuationToString(FrameFlagContinuation flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagContinuation flag)
JKYi::http2::FrameFlagDataToString	JKYi/http2/frame.cc	/^std::string FrameFlagDataToString(FrameFlagData flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagData flag)
JKYi::http2::FrameFlagHeadersToString	JKYi/http2/frame.cc	/^std::string FrameFlagHeadersToString(FrameFlagHeaders flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagHeaders flag)
JKYi::http2::FrameFlagPingToString	JKYi/http2/frame.cc	/^std::string FrameFlagPingToString(FrameFlagPing flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagPing flag)
JKYi::http2::FrameFlagPromiseToString	JKYi/http2/frame.cc	/^std::string FrameFlagPromiseToString(FrameFlagPromise flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagPromise flag)
JKYi::http2::FrameFlagSettingsToString	JKYi/http2/frame.cc	/^std::string FrameFlagSettingsToString(FrameFlagSettings flag){$/;"	f	namespace:JKYi::http2	signature:(FrameFlagSettings flag)
JKYi::http2::FrameFlagToString	JKYi/http2/frame.cc	/^std::string FrameFlagToString(uint8_t type,uint8_t flag){$/;"	f	namespace:JKYi::http2	signature:(uint8_t type,uint8_t flag)
JKYi::http2::FrameHeader::readFrom	JKYi/http2/frame.cc	/^bool FrameHeader::readFrom(ByteArray::ptr ba){$/;"	f	class:JKYi::http2::FrameHeader	signature:(ByteArray::ptr ba)
JKYi::http2::FrameHeader::toString	JKYi/http2/frame.cc	/^std::string FrameHeader::toString()const{$/;"	f	class:JKYi::http2::FrameHeader	signature:() const
JKYi::http2::FrameHeader::writeTo	JKYi/http2/frame.cc	/^bool FrameHeader::writeTo(ByteArray::ptr ba){$/;"	f	class:JKYi::http2::FrameHeader	signature:(ByteArray::ptr ba)
JKYi::http2::FrameRToString	JKYi/http2/frame.cc	/^std::string FrameRToString(FrameR r){$/;"	f	namespace:JKYi::http2	signature:(FrameR r)
JKYi::http2::FrameType	JKYi/http2/frame.h	/^enum class FrameType{$/;"	c	namespace:JKYi::http2
JKYi::http2::FrameType::CONTINUATION	JKYi/http2/frame.h	/^    CONTINUATION   = 0X9$/;"	m	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameType::DATA	JKYi/http2/frame.h	/^    DATA           = 0x0,$/;"	m	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameType::FrameFlagData	JKYi/http2/frame.h	/^enum class FrameFlagData{$/;"	c	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameType::FrameFlagData::END_STREAM	JKYi/http2/frame.h	/^    END_STREAM = 0x1,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	JKYi/http2/frame.h	/^enum class FrameFlagHeaders{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::END_HEADERS	JKYi/http2/frame.h	/^    END_HEADERS    = 0x4,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::END_STREAM	JKYi/http2/frame.h	/^    END_STREAM     = 0x1,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings	JKYi/http2/frame.h	/^enum class FrameFlagSettings{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::ACK	JKYi/http2/frame.h	/^    ACK            = 0x1$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing	JKYi/http2/frame.h	/^enum class FrameFlagPing{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::ACK	JKYi/http2/frame.h	/^    ACK            = 0x1$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation	JKYi/http2/frame.h	/^enum class FrameFlagContinuation{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::END_HEADERS	JKYi/http2/frame.h	/^    END_HEADERS    = 0x4$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise	JKYi/http2/frame.h	/^enum class FrameFlagPromise{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::END_HEADERS	JKYi/http2/frame.h	/^    END_HEADERS    = 0x4,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	JKYi/http2/frame.h	/^enum class FrameR{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	JKYi/http2/frame.h	/^struct DataFrame:public IFrame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	inherits:IFrame	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame::data	JKYi/http2/frame.h	/^    std::string data;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame::override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame::override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame::override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame::pad	JKYi/http2/frame.h	/^    uint8_t pad = 0;                        \/\/Flag & FrameFlagData::PADDED$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame::padding	JKYi/http2/frame.h	/^    std::string padding; $/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<DataFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame	JKYi/http2/frame.h	/^struct Frame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame::data	JKYi/http2/frame.h	/^    IFrame::ptr data;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame::header	JKYi/http2/frame.h	/^    FrameHeader header;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<Frame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame::toString	JKYi/http2/frame.h	/^    std::string toString();$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame	access:public	signature:()
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	JKYi/http2/frame.h	/^struct FrameHeader{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::SIZE	JKYi/http2/frame.h	/^    static const uint32_t SIZE = 9;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon3::__anon4::length	JKYi/http2/frame.h	/^            uint32_t length : 24;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon3::__anon4	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon3::__anon4::type	JKYi/http2/frame.h	/^            uint8_t type;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon3::__anon4	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon3::len_type	JKYi/http2/frame.h	/^        uint32_t len_type = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon3	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon5::__anon6::identifier	JKYi/http2/frame.h	/^            uint32_t identifier : 31;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon5::__anon6	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon5::__anon6::r	JKYi/http2/frame.h	/^            uint32_t r : 1;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon5::__anon6	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon5::r_id	JKYi/http2/frame.h	/^        uint32_t r_id = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon5	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::flags	JKYi/http2/frame.h	/^    uint8_t flags = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<FrameHeader> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::readFrom	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public	signature:(ByteArray::ptr ba)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::toString	JKYi/http2/frame.h	/^    std::string toString()const;$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public	signature:() const
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::writeTo	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public	signature:(ByteArray::ptr ba)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	JKYi/http2/frame.h	/^struct HeadersFrame : public IFrame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	inherits:IFrame	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame::data	JKYi/http2/frame.h	/^    std::string data;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame::hpack	JKYi/http2/frame.h	/^    HPack::ptr hpack;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame::kvs	JKYi/http2/frame.h	/^    std::vector<std::pair<std::string,std::string>> kvs;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame::override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame::override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame::override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame::pad	JKYi/http2/frame.h	/^    uint8_t pad = 0;        \/\/flag & FrameFlagHeaders::PADDED$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame::padding	JKYi/http2/frame.h	/^    std::string padding;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame::priority	JKYi/http2/frame.h	/^    PriorityFrame priority; \/\/flag & FrameFlagHeaders::PRIORITY$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<HeadersFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	JKYi/http2/frame.h	/^class IFrame{$/;"	c	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<IFrame> ptr;$/;"	t	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame::readFrom	JKYi/http2/frame.h	/^    virtual bool readFrom(ByteArray::ptr ba,const FrameHeader& header) = 0;$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	access:public	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame::toString	JKYi/http2/frame.h	/^    virtual std::string toString()const = 0;$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	access:public	signature:() const
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame::writeTo	JKYi/http2/frame.h	/^    virtual bool writeTo(ByteArray::ptr ba,const FrameHeader& header) = 0;$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	access:public	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame::~IFrame	JKYi/http2/frame.h	/^    virtual ~IFrame(){}$/;"	f	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	access:public	signature:()
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	JKYi/http2/frame.h	/^struct PriorityFrame:public IFrame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	inherits:IFrame	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::SIZE	JKYi/http2/frame.h	/^    static const uint32_t SIZE = 5;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::__anon7::__anon8::exclusive	JKYi/http2/frame.h	/^            uint32_t exclusive : 1;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::__anon7::__anon8	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::__anon7::__anon8::stream_dep	JKYi/http2/frame.h	/^            uint32_t stream_dep : 31;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::__anon7::__anon8	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::__anon7::e_stream_dep	JKYi/http2/frame.h	/^        uint32_t e_stream_dep = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::__anon7	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<PriorityFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::weight	JKYi/http2/frame.h	/^    uint8_t weight = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	JKYi/http2/frame.h	/^struct RstStreamFrame: public IFrame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	inherits:IFrame	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame::SIZE	JKYi/http2/frame.h	/^    static const uint32_t SIZE = 4;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame::error_code	JKYi/http2/frame.h	/^    uint32_t error_code = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame::override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame::override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame::override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<RstStreamFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SET	JKYi/http2/frame.h	/^    SET      = 0x1$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	JKYi/http2/frame.h	/^struct SettingsFrame:public IFrame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	inherits:IFrame	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameCodec	JKYi/http2/frame.h	/^class FrameCodec{$/;"	c	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameCodec::parseFrom	JKYi/http2/frame.h	/^    Frame::ptr parseFrom(Stream::ptr stream);$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameCodec	access:public	signature:(Stream::ptr stream)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameCodec::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<FrameCodec> ptr;$/;"	t	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameCodec	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameCodec::serializeTo	JKYi/http2/frame.h	/^    int32_t serializeTo(Stream::ptr stream,Frame::ptr frame);$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameCodec	access:public	signature:(Stream::ptr stream,Frame::ptr frame)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameFlagContinuationToString	JKYi/http2/frame.h	/^std::string FrameFlagContinuationToString(FrameFlagContinuation flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagContinuation flag)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameFlagDataToString	JKYi/http2/frame.h	/^std::string FrameFlagDataToString(FrameFlagData flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagData flag)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameFlagHeadersToString	JKYi/http2/frame.h	/^std::string FrameFlagHeadersToString(FrameFlagHeaders flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagHeaders flag)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameFlagPingToString	JKYi/http2/frame.h	/^std::string FrameFlagPingToString(FrameFlagPing flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagPing flag)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameFlagPromiseToString	JKYi/http2/frame.h	/^std::string FrameFlagPromiseToString(FrameFlagPromise flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagPromise flag)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameFlagSettingsToString	JKYi/http2/frame.h	/^std::string FrameFlagSettingsToString(FrameFlagSettings flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameFlagSettings flag)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameFlagToString	JKYi/http2/frame.h	/^std::string FrameFlagToString(uint8_t type,uint8_t flag);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(uint8_t type,uint8_t flag)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameRToString	JKYi/http2/frame.h	/^std::string FrameRToString(FrameR r);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameR r)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameTypeToString	JKYi/http2/frame.h	/^std::string FrameTypeToString(FrameType type);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public	signature:(FrameType type)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	JKYi/http2/frame.h	/^struct GoAwayFrame : public IFrame{$/;"	s	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	inherits:IFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::__anon12::__anon13::last_stream_id	JKYi/http2/frame.h	/^            uint32_t last_stream_id : 31;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::__anon12::__anon13	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::__anon12::__anon13::r	JKYi/http2/frame.h	/^            uint32_t r : 1;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::__anon12::__anon13	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::__anon12::r_last_stream_id	JKYi/http2/frame.h	/^        uint32_t r_last_stream_id = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::__anon12	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::data	JKYi/http2/frame.h	/^    std::string data;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::error_code	JKYi/http2/frame.h	/^    uint32_t error_code = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<GoAwayFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	JKYi/http2/frame.h	/^struct PingFrame : public IFrame{$/;"	s	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	inherits:IFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::SIZE	JKYi/http2/frame.h	/^    static const uint32_t SIZE = 8;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::__anon11::data	JKYi/http2/frame.h	/^        uint8_t data[8];$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::__anon11	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::__anon11::uint64	JKYi/http2/frame.h	/^        uint64_t uint64 = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::__anon11	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<PingFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	JKYi/http2/frame.h	/^struct PushPromisedFrame : public IFrame{$/;"	s	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	inherits:IFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::__anon9::__anon10::r	JKYi/http2/frame.h	/^            uint32_t r : 1;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::__anon9::__anon10	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::__anon9::__anon10::stream_id	JKYi/http2/frame.h	/^            uint32_t stream_id : 31;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::__anon9::__anon10	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::__anon9::r_stream_id	JKYi/http2/frame.h	/^        uint32_t r_stream_id = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::__anon9	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::data	JKYi/http2/frame.h	/^    std::string data;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::pad	JKYi/http2/frame.h	/^    uint8_t pad = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::padding	JKYi/http2/frame.h	/^    std::string padding;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<PushPromisedFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	JKYi/http2/frame.h	/^    enum class Settings{$/;"	c	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::ENABLE_PUSH	JKYi/http2/frame.h	/^        ENABLE_PUSH              =  0x2,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::HEADER_TABLE_SIZE	JKYi/http2/frame.h	/^        HEADER_TABLE_SIZE        =  0x1,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::INITAL_WINDOW_SIZE	JKYi/http2/frame.h	/^        INITAL_WINDOW_SIZE       =  0x4,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::MAX_CONCURRENT_STRING	JKYi/http2/frame.h	/^        MAX_CONCURRENT_STRING    =  0x3,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::MAX_FRAME_SIZE	JKYi/http2/frame.h	/^        MAX_FRAME_SIZE           =  0x5,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::MAX_HEADER_LIST_SIZE	JKYi/http2/frame.h	/^        MAX_HEADER_LIST_SIZE     =  0x6$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::SettingsToString	JKYi/http2/frame.h	/^    static std::string SettingsToString(Settings s);$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private	signature:(Settings s)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::items	JKYi/http2/frame.h	/^    std::vector<SettingsItem> items;$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings::override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	JKYi/http2/frame.h	/^struct WindowUpdateFrame : public IFrame{$/;"	s	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	inherits:IFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::SIZE	JKYi/http2/frame.h	/^    static const uint32_t SIZE = 4;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::__anon14::__anon15::increment	JKYi/http2/frame.h	/^            uint32_t increment : 31;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::__anon14::__anon15	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::__anon14::__anon15::r	JKYi/http2/frame.h	/^            uint32_t r : 1;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::__anon14::__anon15	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::__anon14::r_increment	JKYi/http2/frame.h	/^        uint32_t r_increment = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::__anon14	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<WindowUpdateFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<SettingsFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	JKYi/http2/frame.h	/^struct SettingsItem{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem::SettingsItem	JKYi/http2/frame.h	/^    SettingsItem(uint16_t id = 0,uint32_t v = 0)$/;"	f	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public	signature:(uint16_t id = 0,uint32_t v = 0)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem::identifiber	JKYi/http2/frame.h	/^    uint16_t identifiber = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem::readFrom	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public	signature:(ByteArray::ptr ba)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem::toString	JKYi/http2/frame.h	/^    std::string toString()const;$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public	signature:() const
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem::value	JKYi/http2/frame.h	/^    uint32_t value = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem::writeTo	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public	signature:(ByteArray::ptr ba)
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::UNSET	JKYi/http2/frame.h	/^    UNSET    = 0x0,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::PADDED	JKYi/http2/frame.h	/^    PADDED         = 0x8$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::PADDED	JKYi/http2/frame.h	/^    PADDED         = 0x8,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	access:private
JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::PRIORITY	JKYi/http2/frame.h	/^    PRIORITY       = 0x20$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	access:private
JKYi::http2::FrameType::FrameFlagData::PADDED	JKYi/http2/frame.h	/^    PADDED     = 0x8$/;"	m	class:JKYi::http2::FrameType::FrameFlagData	access:private
JKYi::http2::FrameType::GOAWAY	JKYi/http2/frame.h	/^    GOAWAY         = 0x7,$/;"	m	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameType::HEADERS	JKYi/http2/frame.h	/^    HEADERS        = 0x1,$/;"	m	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameType::PING	JKYi/http2/frame.h	/^    PING           = 0X6,$/;"	m	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameType::PRIORITY	JKYi/http2/frame.h	/^    PRIORITY       = 0x2,$/;"	m	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameType::PUSH_PROMISE	JKYi/http2/frame.h	/^    PUSH_PROMISE   = 0X5,$/;"	m	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameType::RST_STREAM	JKYi/http2/frame.h	/^    RST_STREAM     = 0X3,$/;"	m	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameType::SETTINGS	JKYi/http2/frame.h	/^    SETTINGS       = 0x4,$/;"	m	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameType::WINDOW_UPDATE	JKYi/http2/frame.h	/^    WINDOW_UPDATE  = 0X8,$/;"	m	class:JKYi::http2::FrameType	access:private
JKYi::http2::FrameTypeToString	JKYi/http2/frame.cc	/^std::string FrameTypeToString(FrameType type){$/;"	f	namespace:JKYi::http2	signature:(FrameType type)
JKYi::http2::GoAwayFrame::readFrom	JKYi/http2/frame.cc	/^bool GoAwayFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::GoAwayFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::GoAwayFrame::toString	JKYi/http2/frame.cc	/^std::string GoAwayFrame::toString()const{$/;"	f	class:JKYi::http2::GoAwayFrame	signature:() const
JKYi::http2::GoAwayFrame::writeTo	JKYi/http2/frame.cc	/^bool GoAwayFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::GoAwayFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::HM_RETURN	JKYi/http2/huffman.cc	/^enum HM_RETURN{$/;"	g	namespace:JKYi::http2	file:
JKYi::http2::HM_RETURN_SUCCESS	JKYi/http2/huffman.cc	/^    HM_RETURN_SUCCESS     = 0,$/;"	e	enum:JKYi::http2::HM_RETURN	file:
JKYi::http2::HM_RETURN_UNIMPLEMENT	JKYi/http2/huffman.cc	/^    HM_RETURN_UNIMPLEMENT = -100,$/;"	e	enum:JKYi::http2::HM_RETURN	file:
JKYi::http2::HPack::HPack	JKYi/http2/hpack.cc	/^HPack::HPack(DynamicTable& table)$/;"	f	class:JKYi::http2::HPack	signature:(DynamicTable& table)
JKYi::http2::HPack::Pack	JKYi/http2/hpack.cc	/^int HPack::Pack(HeaderField * header,ByteArray::ptr ba){$/;"	f	class:JKYi::http2::HPack	signature:(HeaderField * header,ByteArray::ptr ba)
JKYi::http2::HPack::ReadString	JKYi/http2/hpack.cc	/^std::string HPack::ReadString(ByteArray::ptr ba){$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba)
JKYi::http2::HPack::ReadVarInt	JKYi/http2/hpack.cc	/^uint64_t HPack::ReadVarInt(ByteArray::ptr ba,int32_t prefix){$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba,int32_t prefix)
JKYi::http2::HPack::ReadVarInt	JKYi/http2/hpack.cc	/^uint64_t HPack::ReadVarInt(ByteArray::ptr ba,uint8_t b,int32_t prefix){$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba,uint8_t b,int32_t prefix)
JKYi::http2::HPack::WriteString	JKYi/http2/hpack.cc	/^int HPack::WriteString(ByteArray::ptr ba,const std::string& str,bool h){$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba,const std::string& str,bool h)
JKYi::http2::HPack::WriteVarInt	JKYi/http2/hpack.cc	/^int HPack::WriteVarInt(ByteArray::ptr ba,int32_t prefix,uint64_t value,$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba,int32_t prefix,uint64_t value, uint8_t flags)
JKYi::http2::HPack::pack	JKYi/http2/hpack.cc	/^int HPack::pack(HeaderField * header,ByteArray::ptr ba){$/;"	f	class:JKYi::http2::HPack	signature:(HeaderField * header,ByteArray::ptr ba)
JKYi::http2::HPack::pack	JKYi/http2/hpack.cc	/^int HPack::pack(const std::vector<std::pair<std::string,std::string>>& headers,$/;"	f	class:JKYi::http2::HPack	signature:(const std::vector<std::pair<std::string,std::string>>& headers, ByteArray::ptr ba)
JKYi::http2::HPack::pack	JKYi/http2/hpack.cc	/^int HPack::pack(const std::vector<std::pair<std::string,std::string>>& headers,$/;"	f	class:JKYi::http2::HPack	signature:(const std::vector<std::pair<std::string,std::string>>& headers, std::string& out)
JKYi::http2::HPack::parse	JKYi/http2/hpack.cc	/^int HPack::parse(ByteArray::ptr ba,int length){$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba,int length)
JKYi::http2::HPack::parse	JKYi/http2/hpack.cc	/^int HPack::parse(std::string& data){$/;"	f	class:JKYi::http2::HPack	signature:(std::string& data)
JKYi::http2::HPack::toString	JKYi/http2/hpack.cc	/^std::string HPack::toString()const{$/;"	f	class:JKYi::http2::HPack	signature:() const
JKYi::http2::HeaderField::toString	JKYi/http2/hpack.cc	/^std::string HeaderField::toString()const{$/;"	f	class:JKYi::http2::HeaderField	signature:() const
JKYi::http2::HeadersFrame::readFrom	JKYi/http2/frame.cc	/^bool HeadersFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::HeadersFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::HeadersFrame::toString	JKYi/http2/frame.cc	/^std::string HeadersFrame::toString()const{$/;"	f	class:JKYi::http2::HeadersFrame	signature:() const
JKYi::http2::HeadersFrame::writeTo	JKYi/http2/frame.cc	/^bool HeadersFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::HeadersFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::Huffman	JKYi/http2/huffman.h	/^class Huffman {$/;"	c	namespace:JKYi::http2
JKYi::http2::Huffman::DecodeString	JKYi/http2/huffman.cc	/^int Huffman::DecodeString(const char* in, int in_len, std::string& out) {$/;"	f	class:JKYi::http2::Huffman	signature:(const char* in, int in_len, std::string& out)
JKYi::http2::Huffman::DecodeString	JKYi/http2/huffman.cc	/^int Huffman::DecodeString(const std::string& in, std::string& out) {$/;"	f	class:JKYi::http2::Huffman	signature:(const std::string& in, std::string& out)
JKYi::http2::Huffman::DecodeString	JKYi/http2/huffman.h	/^    static int DecodeString(const char* in, int in_len, std::string& out);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const char* in, int in_len, std::string& out)
JKYi::http2::Huffman::DecodeString	JKYi/http2/huffman.h	/^    static int DecodeString(const std::string& in, std::string& out);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const std::string& in, std::string& out)
JKYi::http2::Huffman::EncodeLen	JKYi/http2/huffman.cc	/^int Huffman::EncodeLen(const char* in, int in_len) {$/;"	f	class:JKYi::http2::Huffman	signature:(const char* in, int in_len)
JKYi::http2::Huffman::EncodeLen	JKYi/http2/huffman.cc	/^int Huffman::EncodeLen(const std::string& in) {$/;"	f	class:JKYi::http2::Huffman	signature:(const std::string& in)
JKYi::http2::Huffman::EncodeLen	JKYi/http2/huffman.h	/^    static int EncodeLen(const char* in, int in_len);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const char* in, int in_len)
JKYi::http2::Huffman::EncodeLen	JKYi/http2/huffman.h	/^    static int EncodeLen(const std::string& in);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const std::string& in)
JKYi::http2::Huffman::EncodeString	JKYi/http2/huffman.cc	/^int Huffman::EncodeString(const char* in, int in_len, std::string& out, int prefix) {$/;"	f	class:JKYi::http2::Huffman	signature:(const char* in, int in_len, std::string& out, int prefix)
JKYi::http2::Huffman::EncodeString	JKYi/http2/huffman.cc	/^int Huffman::EncodeString(const std::string& in, std::string& out, int prefix) {$/;"	f	class:JKYi::http2::Huffman	signature:(const std::string& in, std::string& out, int prefix)
JKYi::http2::Huffman::EncodeString	JKYi/http2/huffman.h	/^    static int EncodeString(const char* in, int in_len, std::string& out, int prefix);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const char* in, int in_len, std::string& out, int prefix)
JKYi::http2::Huffman::EncodeString	JKYi/http2/huffman.h	/^    static int EncodeString(const std::string& in, std::string& out, int prefix);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const std::string& in, std::string& out, int prefix)
JKYi::http2::Huffman::ShouldEncode	JKYi/http2/huffman.cc	/^bool Huffman::ShouldEncode(const char* in, int in_len) {$/;"	f	class:JKYi::http2::Huffman	signature:(const char* in, int in_len)
JKYi::http2::Huffman::ShouldEncode	JKYi/http2/huffman.cc	/^bool Huffman::ShouldEncode(const std::string& in) {$/;"	f	class:JKYi::http2::Huffman	signature:(const std::string& in)
JKYi::http2::Huffman::ShouldEncode	JKYi/http2/huffman.h	/^    static bool ShouldEncode(const char* in, int in_len);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const char* in, int in_len)
JKYi::http2::Huffman::ShouldEncode	JKYi/http2/huffman.h	/^    static bool ShouldEncode(const std::string& in);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const std::string& in)
JKYi::http2::IndexType	JKYi/http2/hpack.h	/^enum class IndexType{$/;"	c	namespace:JKYi::http2
JKYi::http2::IndexType::ERROR	JKYi/http2/hpack.h	/^    ERROR                         = 7$/;"	m	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexType::HPack	JKYi/http2/hpack.h	/^class HPack{$/;"	c	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexType::HPack::HPack	JKYi/http2/hpack.h	/^    HPack(DynamicTable& table);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(DynamicTable& table)
JKYi::http2::IndexType::HPack::Pack	JKYi/http2/hpack.h	/^    static int Pack(HeaderField * header,ByteArray::ptr ba);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(HeaderField * header,ByteArray::ptr ba)
JKYi::http2::IndexType::HPack::ReadString	JKYi/http2/hpack.h	/^    static std::string ReadString(ByteArray::ptr ba);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba)
JKYi::http2::IndexType::HPack::ReadVarInt	JKYi/http2/hpack.h	/^    static uint64_t ReadVarInt(ByteArray::ptr ba,int32_t prefix);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba,int32_t prefix)
JKYi::http2::IndexType::HPack::ReadVarInt	JKYi/http2/hpack.h	/^    static uint64_t ReadVarInt(ByteArray::ptr ba,uint8_t b,int32_t prefix);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba,uint8_t b,int32_t prefix)
JKYi::http2::IndexType::HPack::WriteString	JKYi/http2/hpack.h	/^    static int WriteString(ByteArray::ptr ba,const std::string& str,bool h);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba,const std::string& str,bool h)
JKYi::http2::IndexType::HPack::WriteVarInt	JKYi/http2/hpack.h	/^    static int WriteVarInt(ByteArray::ptr ba,int32_t prefix,uint64_t value,$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba,int32_t prefix,uint64_t value, uint8_t flag)
JKYi::http2::IndexType::HPack::getHeaders	JKYi/http2/hpack.h	/^    const std::vector<HeaderField>& getHeaders()const { return m_headers; }$/;"	f	class:JKYi::http2::IndexType::HPack	access:public	signature:() const
JKYi::http2::IndexType::HPack::m_headers	JKYi/http2/hpack.h	/^    std::vector<HeaderField> m_headers;$/;"	m	class:JKYi::http2::IndexType::HPack	access:private
JKYi::http2::IndexType::HPack::m_table	JKYi/http2/hpack.h	/^    DynamicTable& m_table;$/;"	m	class:JKYi::http2::IndexType::HPack	access:private
JKYi::http2::IndexType::HPack::pack	JKYi/http2/hpack.h	/^    int pack(HeaderField * header,ByteArray::ptr ba);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(HeaderField * header,ByteArray::ptr ba)
JKYi::http2::IndexType::HPack::pack	JKYi/http2/hpack.h	/^    int pack(const std::vector<std::pair<std::string,std::string>>&headers,$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(const std::vector<std::pair<std::string,std::string>>&headers, ByteArray::ptr ba)
JKYi::http2::IndexType::HPack::pack	JKYi/http2/hpack.h	/^    int pack(const std::vector<std::pair<std::string,std::string>>&headers,$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(const std::vector<std::pair<std::string,std::string>>&headers, std::string& out)
JKYi::http2::IndexType::HPack::parse	JKYi/http2/hpack.h	/^    int parse(ByteArray::ptr ba,int length);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba,int length)
JKYi::http2::IndexType::HPack::parse	JKYi/http2/hpack.h	/^    int parse(std::string & data);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(std::string & data)
JKYi::http2::IndexType::HPack::ptr	JKYi/http2/hpack.h	/^    typedef std::shared_ptr<HPack> ptr;$/;"	t	class:JKYi::http2::IndexType::HPack	access:public
JKYi::http2::IndexType::HPack::toString	JKYi/http2/hpack.h	/^    std::string toString()const;$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:() const
JKYi::http2::IndexType::HeaderField	JKYi/http2/hpack.h	/^struct HeaderField{$/;"	s	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexType::HeaderField::h_name	JKYi/http2/hpack.h	/^    bool h_name = 0;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
JKYi::http2::IndexType::HeaderField::h_value	JKYi/http2/hpack.h	/^    bool h_value = 0;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
JKYi::http2::IndexType::HeaderField::index	JKYi/http2/hpack.h	/^    uint32_t index = 0;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
JKYi::http2::IndexType::HeaderField::name	JKYi/http2/hpack.h	/^    std::string name;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
JKYi::http2::IndexType::HeaderField::toString	JKYi/http2/hpack.h	/^    std::string toString()const;$/;"	p	struct:JKYi::http2::IndexType::HeaderField	access:public	signature:() const
JKYi::http2::IndexType::HeaderField::type	JKYi/http2/hpack.h	/^    IndexType type = IndexType::ERROR;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
JKYi::http2::IndexType::HeaderField::value	JKYi/http2/hpack.h	/^    std::string value;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
JKYi::http2::IndexType::INDEXED	JKYi/http2/hpack.h	/^    INDEXED                       = 0, \/\/ headersçnameåvalueé½å¨è¡¨ä¸­$/;"	m	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexType::IndexTypeToString	JKYi/http2/hpack.h	/^std::string IndexTypeToString(IndexType type);$/;"	p	class:JKYi::http2::IndexType	access:private	signature:(IndexType type)
JKYi::http2::IndexType::NERVER_INDEXED_INDEXED_NAME	JKYi/http2/hpack.h	/^    NERVER_INDEXED_INDEXED_NAME   = 5, \/\/ nameå¨è¡¨ä¸­ï¼valueéè¦ç¼ç ä¼ è¾ï¼å¹¶æ°¸è¿ä¸æ´æ°å°å¨æè¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexType::NERVER_INDEXED_NEW_NAME	JKYi/http2/hpack.h	/^    NERVER_INDEXED_NEW_NAME       = 6, \/\/ nameåvalueé½ä¸å¨è¡¨ä¸­ï¼éè¦ç¼ç ä¼ è¾å¹¶ä¸æ°¸è¿ä¸ä¼æ´æ°å°å¨æè¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexType::StringHeader	JKYi/http2/hpack.h	/^struct StringHeader{$/;"	s	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexType::StringHeader::__anon16::__anon17::h	JKYi/http2/hpack.h	/^            uint8_t h : 1;$/;"	m	struct:JKYi::http2::IndexType::StringHeader::__anon16::__anon17	access:public
JKYi::http2::IndexType::StringHeader::__anon16::__anon17::len	JKYi/http2/hpack.h	/^            uint8_t len : 7;$/;"	m	struct:JKYi::http2::IndexType::StringHeader::__anon16::__anon17	access:public
JKYi::http2::IndexType::StringHeader::__anon16::h_len	JKYi/http2/hpack.h	/^        uint8_t h_len;$/;"	m	union:JKYi::http2::IndexType::StringHeader::__anon16	access:public
JKYi::http2::IndexType::WITHOUT_INDEXING_INDEXED_NAME	JKYi/http2/hpack.h	/^    WITHOUT_INDEXING_INDEXED_NAME = 3, \/\/ name å¨è¡¨ä¸­ï¼valueéè¦ç¼ç ä¼ è¾å¹¶ä¸ä¸æ´æ°å°å¨æè¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexType::WITHOUT_INDEXING_NEW_NAME	JKYi/http2/hpack.h	/^    WITHOUT_INDEXING_NEW_NAME     = 4, \/\/ nameåvalueé½ä¸å¨è¡¨ä¸­ï¼é½éè¦ç¼ç ä¼ è¾å¹¶ä¸ä¸æ´æ°å°è¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexType::WITH_INDEXING_INDEXED_NAME	JKYi/http2/hpack.h	/^    WITH_INDEXING_INDEXED_NAME    = 1, \/\/ nameå¨è¡¨ä¸­valueéè¦ç¼ç ä¼ è¾,å¹¶ä¸ä¼æ´æ°å°å¨æè¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexType::WITH_INDEXING_NEW_NAME	JKYi/http2/hpack.h	/^    WITH_INDEXING_NEW_NAME        = 2, \/\/ nameåvalueé½ä¸å¨è¡¨ä¸­ï¼æä»¥é½éè¦ç¼ç ä¼ è¾å¹¶ä¸ä¼æ´æ°å°å¨æè¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
JKYi::http2::IndexTypeToString	JKYi/http2/hpack.cc	/^std::string IndexTypeToString(IndexType type){$/;"	f	namespace:JKYi::http2	signature:(IndexType type)
JKYi::http2::NODE	JKYi/http2/huffman.cc	/^typedef struct node NODE;$/;"	t	namespace:JKYi::http2	typeref:struct:JKYi::http2::node	file:
JKYi::http2::PingFrame::readFrom	JKYi/http2/frame.cc	/^bool PingFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PingFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::PingFrame::toString	JKYi/http2/frame.cc	/^std::string PingFrame::toString()const {$/;"	f	class:JKYi::http2::PingFrame	signature:() const
JKYi::http2::PingFrame::writeTo	JKYi/http2/frame.cc	/^bool PingFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PingFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::PriorityFrame::readFrom	JKYi/http2/frame.cc	/^bool PriorityFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PriorityFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::PriorityFrame::toString	JKYi/http2/frame.cc	/^std::string PriorityFrame::toString()const{$/;"	f	class:JKYi::http2::PriorityFrame	signature:() const
JKYi::http2::PriorityFrame::writeTo	JKYi/http2/frame.cc	/^bool PriorityFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PriorityFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::PushPromisedFrame::readFrom	JKYi/http2/frame.cc	/^bool PushPromisedFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PushPromisedFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::PushPromisedFrame::toString	JKYi/http2/frame.cc	/^std::string PushPromisedFrame::toString()const{$/;"	f	class:JKYi::http2::PushPromisedFrame	signature:() const
JKYi::http2::PushPromisedFrame::writeTo	JKYi/http2/frame.cc	/^bool PushPromisedFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PushPromisedFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::RstStreamFrame::readFrom	JKYi/http2/frame.cc	/^bool RstStreamFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::RstStreamFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::RstStreamFrame::toString	JKYi/http2/frame.cc	/^std::string RstStreamFrame::toString()const{$/;"	f	class:JKYi::http2::RstStreamFrame	signature:() const
JKYi::http2::RstStreamFrame::writeTo	JKYi/http2/frame.cc	/^bool RstStreamFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::RstStreamFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::SettingsFrame::SettingsToString	JKYi/http2/frame.cc	/^std::string SettingsFrame::SettingsToString(Settings s){$/;"	f	class:JKYi::http2::SettingsFrame	signature:(Settings s)
JKYi::http2::SettingsFrame::readFrom	JKYi/http2/frame.cc	/^bool SettingsFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::SettingsFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::SettingsFrame::toString	JKYi/http2/frame.cc	/^std::string SettingsFrame::toString()const{$/;"	f	class:JKYi::http2::SettingsFrame	signature:() const
JKYi::http2::SettingsFrame::writeTo	JKYi/http2/frame.cc	/^bool SettingsFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::SettingsFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::SettingsItem::readFrom	JKYi/http2/frame.cc	/^bool SettingsItem::readFrom(ByteArray::ptr ba){$/;"	f	class:JKYi::http2::SettingsItem	signature:(ByteArray::ptr ba)
JKYi::http2::SettingsItem::toString	JKYi/http2/frame.cc	/^std::string SettingsItem::toString()const{$/;"	f	class:JKYi::http2::SettingsItem	signature:() const
JKYi::http2::SettingsItem::writeTo	JKYi/http2/frame.cc	/^bool SettingsItem::writeTo(ByteArray::ptr ba){$/;"	f	class:JKYi::http2::SettingsItem	signature:(ByteArray::ptr ba)
JKYi::http2::WindowUpdateFrame::readFrom	JKYi/http2/frame.cc	/^bool WindowUpdateFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::WindowUpdateFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::WindowUpdateFrame::toString	JKYi/http2/frame.cc	/^std::string WindowUpdateFrame::toString()const{$/;"	f	class:JKYi::http2::WindowUpdateFrame	signature:() const
JKYi::http2::WindowUpdateFrame::writeTo	JKYi/http2/frame.cc	/^bool WindowUpdateFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::WindowUpdateFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
JKYi::http2::_hf_add_node	JKYi/http2/huffman.cc	/^static int _hf_add_node(NODE* h_node, unsigned char sym, int code, int code_len){$/;"	f	namespace:JKYi::http2	signature:(NODE* h_node, unsigned char sym, int code, int code_len)
JKYi::http2::_hf_del_node	JKYi/http2/huffman.cc	/^static int _hf_del_node(NODE* h_node){$/;"	f	namespace:JKYi::http2	signature:(NODE* h_node)
JKYi::http2::g_logger	JKYi/http2/frame.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http2	file:
JKYi::http2::g_logger	JKYi/http2/hpack.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http2	file:
JKYi::http2::hf_byte_encode	JKYi/http2/huffman.cc	/^int hf_byte_encode(unsigned char ch, int remain, unsigned char *buff);$/;"	p	namespace:JKYi::http2	file:	signature:(unsigned char ch, int remain, unsigned char *buff)
JKYi::http2::hf_byte_encode	JKYi/http2/huffman.cc	/^int hf_byte_encode(unsigned char ch, int remain, unsigned char *buff){$/;"	f	namespace:JKYi::http2	signature:(unsigned char ch, int remain, unsigned char *buff)
JKYi::http2::hf_finish	JKYi/http2/huffman.cc	/^void hf_finish(NODE* h_node);$/;"	p	namespace:JKYi::http2	file:	signature:(NODE* h_node)
JKYi::http2::hf_finish	JKYi/http2/huffman.cc	/^void hf_finish(NODE* h_node){$/;"	f	namespace:JKYi::http2	signature:(NODE* h_node)
JKYi::http2::hf_init	JKYi/http2/huffman.cc	/^int hf_init(NODE** h_node);$/;"	p	namespace:JKYi::http2	file:	signature:(NODE** h_node)
JKYi::http2::hf_init	JKYi/http2/huffman.cc	/^int hf_init(NODE** h_node){$/;"	f	namespace:JKYi::http2	signature:(NODE** h_node)
JKYi::http2::hf_integer_decode	JKYi/http2/huffman.cc	/^int hf_integer_decode(const char *enc_buff, int nprefix , char *dec_buff);$/;"	p	namespace:JKYi::http2	file:	signature:(const char *enc_buff, int nprefix , char *dec_buff)
JKYi::http2::hf_integer_decode	JKYi/http2/huffman.cc	/^int hf_integer_decode(const char *enc_buff, int nprefix , char *dec_buff){$/;"	f	namespace:JKYi::http2	signature:(const char *enc_buff, int nprefix , char *dec_buff)
JKYi::http2::hf_integer_encode	JKYi/http2/huffman.cc	/^int hf_integer_encode(unsigned int enc_binary, int nprefix, unsigned char *buff){$/;"	f	namespace:JKYi::http2	signature:(unsigned int enc_binary, int nprefix, unsigned char *buff)
JKYi::http2::hf_integer_encode	JKYi/http2/huffman.cc	/^int hf_integer_encode(unsigned int enc_binary,int nprefix, unsigned char *buff);$/;"	p	namespace:JKYi::http2	file:	signature:(unsigned int enc_binary,int nprefix, unsigned char *buff)
JKYi::http2::hf_print_hex	JKYi/http2/huffman.cc	/^void hf_print_hex(unsigned char *buff, int size);$/;"	p	namespace:JKYi::http2	file:	signature:(unsigned char *buff, int size)
JKYi::http2::hf_print_hex	JKYi/http2/huffman.cc	/^void hf_print_hex(unsigned char *buff, int size){$/;"	f	namespace:JKYi::http2	signature:(unsigned char *buff, int size)
JKYi::http2::hf_string_decode	JKYi/http2/huffman.cc	/^int hf_string_decode(NODE* h_node, unsigned char *enc, int enc_sz, char *out_buff, int out_sz);$/;"	p	namespace:JKYi::http2	file:	signature:(NODE* h_node, unsigned char *enc, int enc_sz, char *out_buff, int out_sz)
JKYi::http2::hf_string_decode	JKYi/http2/huffman.cc	/^int hf_string_decode(NODE* h_node, unsigned char *enc, int enc_sz, char *out_buff, int out_sz){$/;"	f	namespace:JKYi::http2	signature:(NODE* h_node, unsigned char *enc, int enc_sz, char *out_buff, int out_sz)
JKYi::http2::hf_string_encode	JKYi/http2/huffman.cc	/^int hf_string_encode(const char *buff_in, int size, int prefix, unsigned char *buff_out, int *size_out);$/;"	p	namespace:JKYi::http2	file:	signature:(const char *buff_in, int size, int prefix, unsigned char *buff_out, int *size_out)
JKYi::http2::hf_string_encode	JKYi/http2/huffman.cc	/^int hf_string_encode(const char *buff_in, int size, int prefix, unsigned char *buff_out, int *size_out){$/;"	f	namespace:JKYi::http2	signature:(const char *buff_in, int size, int prefix, unsigned char *buff_out, int *size_out)
JKYi::http2::hf_string_encode_len	JKYi/http2/huffman.cc	/^int hf_string_encode_len(unsigned char *enc, int enc_sz);$/;"	p	namespace:JKYi::http2	file:	signature:(unsigned char *enc, int enc_sz)
JKYi::http2::hf_string_encode_len	JKYi/http2/huffman.cc	/^int hf_string_encode_len(unsigned char *enc, int enc_sz){$/;"	f	namespace:JKYi::http2	signature:(unsigned char *enc, int enc_sz)
JKYi::http2::huffman_code_len	JKYi/http2/huffman_table.h	/^static int huffman_code_len[256] = {$/;"	m	namespace:JKYi::http2
JKYi::http2::huffman_codes	JKYi/http2/huffman_table.h	/^static unsigned int huffman_codes[256] = {$/;"	m	namespace:JKYi::http2
JKYi::http2::node	JKYi/http2/huffman.cc	/^struct node{$/;"	s	namespace:JKYi::http2	file:
JKYi::http2::node::children	JKYi/http2/huffman.cc	/^    struct node *children[256];$/;"	m	struct:JKYi::http2::node	typeref:struct:JKYi::http2::node::node	file:	access:public
JKYi::http2::node::code	JKYi/http2/huffman.cc	/^    unsigned int code;$/;"	m	struct:JKYi::http2::node	file:	access:public
JKYi::http2::node::code_len	JKYi/http2/huffman.cc	/^    int code_len;$/;"	m	struct:JKYi::http2::node	file:	access:public
JKYi::http2::node::size	JKYi/http2/huffman.cc	/^    int size;$/;"	m	struct:JKYi::http2::node	file:	access:public
JKYi::http2::node::sym	JKYi/http2/huffman.cc	/^    unsigned char sym;$/;"	m	struct:JKYi::http2::node	file:	access:public
JKYi::http2::node_create	JKYi/http2/huffman.cc	/^static NODE * node_create(){$/;"	f	namespace:JKYi::http2	signature:()
JKYi::http2::s_frame_types	JKYi/http2/frame.cc	/^static const std::vector<std::string> s_frame_types = {$/;"	m	namespace:JKYi::http2	file:
JKYi::http2::s_index_type_strings	JKYi/http2/hpack.cc	/^static std::vector<std::string> s_index_type_strings = {$/;"	m	namespace:JKYi::http2	file:
JKYi::http2::s_setting_string	JKYi/http2/frame.cc	/^static std::vector<std::string> s_setting_string = {$/;"	m	namespace:JKYi::http2	file:
JKYi::http2::s_static_headers	JKYi/http2/dynamic_table.cc	/^static std::vector<std::pair<std::string,std::string>> s_static_headers = {$/;"	m	namespace:JKYi::http2	file:
JKYi::http::CaseInsensitiveLess	JKYi/http/http.h	/^struct CaseInsensitiveLess{$/;"	s	namespace:JKYi::http
JKYi::http::CaseInsensitiveLess::operator ()	JKYi/http/http.cc	/^bool CaseInsensitiveLess::operator() (const std::string&lhv$/;"	f	class:JKYi::http::CaseInsensitiveLess	signature:(const std::string&lhv ,const std::string& rhv) const
JKYi::http::CaseInsensitiveLess::operator ()	JKYi/http/http.h	/^    bool operator() (const std::string&lhv,const std::string& rhv)const;$/;"	p	struct:JKYi::http::CaseInsensitiveLess	access:public	signature:(const std::string&lhv,const std::string& rhv) const
JKYi::http::CharsToHttpMethod	JKYi/http/http.cc	/^HttpMethod CharsToHttpMethod(const char* s){$/;"	f	namespace:JKYi::http	signature:(const char* s)
JKYi::http::CharsToHttpMethod	JKYi/http/http.h	/^HttpMethod CharsToHttpMethod(const char* c);$/;"	p	namespace:JKYi::http	signature:(const char* c)
JKYi::http::FunctionServlet	JKYi/http/servlet.h	/^class FunctionServlet:public Servlet{$/;"	c	namespace:JKYi::http	inherits:Servlet
JKYi::http::FunctionServlet::FunctionServlet	JKYi/http/servlet.cc	/^FunctionServlet::FunctionServlet(callback cb)$/;"	f	class:JKYi::http::FunctionServlet	signature:(callback cb)
JKYi::http::FunctionServlet::FunctionServlet	JKYi/http/servlet.h	/^    FunctionServlet(callback cb);$/;"	p	class:JKYi::http::FunctionServlet	access:public	signature:(callback cb)
JKYi::http::FunctionServlet::callback	JKYi/http/servlet.h	/^    typedef std::function<int32_t (JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session)> callback; $/;"	t	class:JKYi::http::FunctionServlet	access:public
JKYi::http::FunctionServlet::handle	JKYi/http/servlet.cc	/^int32_t FunctionServlet::handle(HttpRequest::ptr request,HttpResponse::ptr response,$/;"	f	class:JKYi::http::FunctionServlet	signature:(HttpRequest::ptr request,HttpResponse::ptr response, HttpSession::ptr session)
JKYi::http::FunctionServlet::m_cb	JKYi/http/servlet.h	/^    callback m_cb;$/;"	m	class:JKYi::http::FunctionServlet	access:private
JKYi::http::FunctionServlet::override	JKYi/http/servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session) override;$/;"	m	class:JKYi::http::FunctionServlet	access:public
JKYi::http::FunctionServlet::ptr	JKYi/http/servlet.h	/^    typedef std::shared_ptr<FunctionServlet> ptr;$/;"	t	class:JKYi::http::FunctionServlet	access:public
JKYi::http::FunctionWSServlet	JKYi/http/ws_servlet.h	/^class FunctionWSServlet:public WSServlet{$/;"	c	namespace:JKYi::http	inherits:WSServlet
JKYi::http::FunctionWSServlet::FunctionWSServlet	JKYi/http/ws_servlet.cc	/^FunctionWSServlet::FunctionWSServlet(callback cb,on_connect_cb connect_cb,$/;"	f	class:JKYi::http::FunctionWSServlet	signature:(callback cb,on_connect_cb connect_cb, on_close_cb close_cb)
JKYi::http::FunctionWSServlet::FunctionWSServlet	JKYi/http/ws_servlet.h	/^    FunctionWSServlet(callback cb,on_connect_cb connect_cb = nullptr,on_close_cb close_cb = nullptr);$/;"	p	class:JKYi::http::FunctionWSServlet	access:public	signature:(callback cb,on_connect_cb connect_cb = nullptr,on_close_cb close_cb = nullptr)
JKYi::http::FunctionWSServlet::callback	JKYi/http/ws_servlet.h	/^    typedef std::function<int32_t (JKYi::http::HttpRequest::ptr header,JKYi::http::WSFrameMessage::ptr msg,JKYi::http::WSSession::ptr session) > callback;$/;"	t	class:JKYi::http::FunctionWSServlet	access:public
JKYi::http::FunctionWSServlet::handle	JKYi/http/ws_servlet.cc	/^int32_t FunctionWSServlet::handle(JKYi::http::HttpRequest::ptr header,$/;"	f	class:JKYi::http::FunctionWSServlet	signature:(JKYi::http::HttpRequest::ptr header, JKYi::http::WSFrameMessage::ptr msg, JKYi::http::WSSession::ptr session)
JKYi::http::FunctionWSServlet::m_callback	JKYi/http/ws_servlet.h	/^    callback m_callback;$/;"	m	class:JKYi::http::FunctionWSServlet	access:protected
JKYi::http::FunctionWSServlet::m_onClose	JKYi/http/ws_servlet.h	/^    on_close_cb m_onClose;$/;"	m	class:JKYi::http::FunctionWSServlet	access:protected
JKYi::http::FunctionWSServlet::m_onConnect	JKYi/http/ws_servlet.h	/^    on_connect_cb m_onConnect;$/;"	m	class:JKYi::http::FunctionWSServlet	access:protected
JKYi::http::FunctionWSServlet::onClose	JKYi/http/ws_servlet.cc	/^int32_t FunctionWSServlet::onClose(JKYi::http::HttpRequest::ptr header,$/;"	f	class:JKYi::http::FunctionWSServlet	signature:(JKYi::http::HttpRequest::ptr header, JKYi::http::WSSession::ptr session)
JKYi::http::FunctionWSServlet::onConnect	JKYi/http/ws_servlet.cc	/^int32_t FunctionWSServlet::onConnect(JKYi::http::HttpRequest::ptr header,$/;"	f	class:JKYi::http::FunctionWSServlet	signature:(JKYi::http::HttpRequest::ptr header, JKYi::http::WSSession::ptr session)
JKYi::http::FunctionWSServlet::on_close_cb	JKYi/http/ws_servlet.h	/^    typedef std::function<int32_t (JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session)> on_close_cb;$/;"	t	class:JKYi::http::FunctionWSServlet	access:public
JKYi::http::FunctionWSServlet::on_connect_cb	JKYi/http/ws_servlet.h	/^    typedef std::function<int32_t (JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session) > on_connect_cb;$/;"	t	class:JKYi::http::FunctionWSServlet	access:public
JKYi::http::FunctionWSServlet::override	JKYi/http/ws_servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr header,JKYi::http::WSFrameMessage::ptr msg,JKYi::http::WSSession::ptr session)override;$/;"	m	class:JKYi::http::FunctionWSServlet	access:public
JKYi::http::FunctionWSServlet::override	JKYi/http/ws_servlet.h	/^    virtual int32_t onClose(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session)override;$/;"	m	class:JKYi::http::FunctionWSServlet	access:public
JKYi::http::FunctionWSServlet::override	JKYi/http/ws_servlet.h	/^    virtual int32_t onConnect(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session)override;$/;"	m	class:JKYi::http::FunctionWSServlet	access:public
JKYi::http::FunctionWSServlet::ptr	JKYi/http/ws_servlet.h	/^    typedef std::shared_ptr<FunctionWSServlet> ptr;$/;"	t	class:JKYi::http::FunctionWSServlet	access:public
JKYi::http::HttpConnection	JKYi/http/http_connection.h	/^class HttpConnection:public SocketStream{$/;"	c	namespace:JKYi::http	inherits:SocketStream
JKYi::http::HttpConnection::DoGet	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoGet(Uri::ptr uri,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnection	signature:(Uri::ptr uri,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnection::DoGet	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoGet(const std::string& url,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnection	signature:(const std::string& url,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnection::DoGet	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoGet(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnection::DoGet	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoGet(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnection::DoPost	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoPost(Uri::ptr uri,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnection	signature:(Uri::ptr uri,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnection::DoPost	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoPost(const std::string& url,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnection	signature:(const std::string& url,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnection::DoPost	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoPost(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnection::DoPost	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoPost(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body =""); $/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body =Ó)
JKYi::http::HttpConnection::DoRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpMethod method,Uri::ptr uri,$/;"	f	class:JKYi::http::HttpConnection	signature:(HttpMethod method,Uri::ptr uri, uint64_t timeout_ms, const std::map<std::string,std::string>&headers, const std::string& body)
JKYi::http::HttpConnection::DoRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpMethod method,const std::string& url,$/;"	f	class:JKYi::http::HttpConnection	signature:(HttpMethod method,const std::string& url, uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnection::DoRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpRequest::ptr req,Uri::ptr uri,$/;"	f	class:JKYi::http::HttpConnection	signature:(HttpRequest::ptr req,Uri::ptr uri, uint64_t timeout_ms)
JKYi::http::HttpConnection::DoRequest	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnection::DoRequest	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpMethod method,const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(HttpMethod method,const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnection::DoRequest	JKYi/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpRequest::ptr request,Uri::ptr uri,uint64_t timeout_ms);$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(HttpRequest::ptr request,Uri::ptr uri,uint64_t timeout_ms)
JKYi::http::HttpConnection::HttpConnection	JKYi/http/http_connection.cc	/^HttpConnection::HttpConnection(Socket::ptr sock,bool owner)$/;"	f	class:JKYi::http::HttpConnection	signature:(Socket::ptr sock,bool owner)
JKYi::http::HttpConnection::HttpConnection	JKYi/http/http_connection.h	/^    HttpConnection(Socket::ptr sock,bool owner = true);$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(Socket::ptr sock,bool owner = true)
JKYi::http::HttpConnection::getCreateTime	JKYi/http/http_connection.h	/^    uint64_t getCreateTime()const { return m_createTime; }$/;"	f	class:JKYi::http::HttpConnection	access:public	signature:() const
JKYi::http::HttpConnection::getRequests	JKYi/http/http_connection.h	/^    uint64_t getRequests()const { return m_request; }$/;"	f	class:JKYi::http::HttpConnection	access:public	signature:() const
JKYi::http::HttpConnection::m_createTime	JKYi/http/http_connection.h	/^    uint64_t m_createTime ;$/;"	m	class:JKYi::http::HttpConnection	access:private
JKYi::http::HttpConnection::m_request	JKYi/http/http_connection.h	/^    uint64_t m_request = 0;$/;"	m	class:JKYi::http::HttpConnection	access:private
JKYi::http::HttpConnection::ptr	JKYi/http/http_connection.h	/^    typedef std::shared_ptr<HttpConnection> ptr;$/;"	t	class:JKYi::http::HttpConnection	access:public
JKYi::http::HttpConnection::recvResponse	JKYi/http/http_connection.cc	/^HttpResponse::ptr HttpConnection::recvResponse(){$/;"	f	class:JKYi::http::HttpConnection	signature:()
JKYi::http::HttpConnection::recvResponse	JKYi/http/http_connection.h	/^    HttpResponse::ptr recvResponse();$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:()
JKYi::http::HttpConnection::sendRequest	JKYi/http/http_connection.cc	/^int HttpConnection::sendRequest(HttpRequest::ptr req){$/;"	f	class:JKYi::http::HttpConnection	signature:(HttpRequest::ptr req)
JKYi::http::HttpConnection::sendRequest	JKYi/http/http_connection.h	/^    int sendRequest(HttpRequest::ptr req);$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(HttpRequest::ptr req)
JKYi::http::HttpConnection::~HttpConnection	JKYi/http/http_connection.cc	/^HttpConnection::~HttpConnection(){$/;"	f	class:JKYi::http::HttpConnection	signature:()
JKYi::http::HttpConnection::~HttpConnection	JKYi/http/http_connection.h	/^    ~HttpConnection();$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:()
JKYi::http::HttpConnectionPool	JKYi/http/http_connection.h	/^class HttpConnectionPool{$/;"	c	namespace:JKYi::http
JKYi::http::HttpConnectionPool::Create	JKYi/http/http_connection.cc	/^HttpConnectionPool::ptr HttpConnectionPool::Create(const std::string& uri,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(const std::string& uri, const std::string& vhost, uint32_t max_size, uint32_t max_alive_time, uint32_t max_request)
JKYi::http::HttpConnectionPool::Create	JKYi/http/http_connection.h	/^    static HttpConnectionPool::ptr Create(const std::string& uri,const std::string& vhost,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request);$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(const std::string& uri,const std::string& vhost,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request)
JKYi::http::HttpConnectionPool::HttpConnectionPool	JKYi/http/http_connection.cc	/^HttpConnectionPool::HttpConnectionPool(const std::string& host,const std::string& vhost,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(const std::string& host,const std::string& vhost, uint32_t port,uint32_t max_size, uint32_t max_request,uint32_t max_alive_time, bool is_https)
JKYi::http::HttpConnectionPool::HttpConnectionPool	JKYi/http/http_connection.h	/^    HttpConnectionPool(const std::string& host,$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(const std::string& host, const std::string& vhost, uint32_t port,uint32_t max_size, uint32_t max_alive_size,uint32_t max_request,bool is_https)
JKYi::http::HttpConnectionPool::MutexType	JKYi/http/http_connection.h	/^    typedef Mutex MutexType;$/;"	t	class:JKYi::http::HttpConnectionPool	access:public
JKYi::http::HttpConnectionPool::ReleasePtr	JKYi/http/http_connection.cc	/^void HttpConnectionPool::ReleasePtr(HttpConnection * ptr,HttpConnectionPool * pool){$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(HttpConnection * ptr,HttpConnectionPool * pool)
JKYi::http::HttpConnectionPool::ReleasePtr	JKYi/http/http_connection.h	/^    static void ReleasePtr(HttpConnection * ptr,HttpConnectionPool * pool);$/;"	p	class:JKYi::http::HttpConnectionPool	access:private	signature:(HttpConnection * ptr,HttpConnectionPool * pool)
JKYi::http::HttpConnectionPool::doGet	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doGet(Uri::ptr uri,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(Uri::ptr uri,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnectionPool::doGet	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doGet(const std::string& url,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(const std::string& url,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnectionPool::doGet	JKYi/http/http_connection.h	/^    HttpResult::ptr doGet(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnectionPool::doGet	JKYi/http/http_connection.h	/^    HttpResult::ptr doGet(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnectionPool::doPost	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doPost(Uri::ptr uri,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(Uri::ptr uri,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnectionPool::doPost	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doPost(const std::string& url,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(const std::string& url,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnectionPool::doPost	JKYi/http/http_connection.h	/^    HttpResult::ptr doPost(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnectionPool::doPost	JKYi/http/http_connection.h	/^    HttpResult::ptr doPost(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnectionPool::doRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnectionPool::doRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpMethod method,const std::string& url,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(HttpMethod method,const std::string& url,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
JKYi::http::HttpConnectionPool::doRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpRequest::ptr req,uint64_t timeout_ms){$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(HttpRequest::ptr req,uint64_t timeout_ms)
JKYi::http::HttpConnectionPool::doRequest	JKYi/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnectionPool::doRequest	JKYi/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpMethod method,const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(HttpMethod method,const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
JKYi::http::HttpConnectionPool::doRequest	JKYi/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpRequest::ptr req,uint64_t timeout_ms);$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(HttpRequest::ptr req,uint64_t timeout_ms)
JKYi::http::HttpConnectionPool::getConnection	JKYi/http/http_connection.cc	/^HttpConnection::ptr HttpConnectionPool::getConnection(){$/;"	f	class:JKYi::http::HttpConnectionPool	signature:()
JKYi::http::HttpConnectionPool::getConnection	JKYi/http/http_connection.h	/^    HttpConnection::ptr getConnection();$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:()
JKYi::http::HttpConnectionPool::getTotals	JKYi/http/http_connection.h	/^    const std::atomic<int32_t>& getTotals()const { return m_total; }$/;"	f	class:JKYi::http::HttpConnectionPool	access:public	signature:() const
JKYi::http::HttpConnectionPool::m_conns	JKYi/http/http_connection.h	/^    std::list<HttpConnection*> m_conns;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
JKYi::http::HttpConnectionPool::m_host	JKYi/http/http_connection.h	/^    std::string m_host;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
JKYi::http::HttpConnectionPool::m_isHttps	JKYi/http/http_connection.h	/^    bool m_isHttps;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
JKYi::http::HttpConnectionPool::m_maxAliveTime	JKYi/http/http_connection.h	/^    uint32_t m_maxAliveTime;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
JKYi::http::HttpConnectionPool::m_maxRequest	JKYi/http/http_connection.h	/^    uint32_t m_maxRequest;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
JKYi::http::HttpConnectionPool::m_maxSize	JKYi/http/http_connection.h	/^    uint32_t m_maxSize;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
JKYi::http::HttpConnectionPool::m_mutex	JKYi/http/http_connection.h	/^    MutexType m_mutex;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
JKYi::http::HttpConnectionPool::m_port	JKYi/http/http_connection.h	/^    uint32_t m_port;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
JKYi::http::HttpConnectionPool::m_total	JKYi/http/http_connection.h	/^    std::atomic<int32_t> m_total = {0};$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
JKYi::http::HttpConnectionPool::m_vhost	JKYi/http/http_connection.h	/^    std::string m_vhost;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
JKYi::http::HttpConnectionPool::ptr	JKYi/http/http_connection.h	/^    typedef std::shared_ptr<HttpConnectionPool> ptr;$/;"	t	class:JKYi::http::HttpConnectionPool	access:public
JKYi::http::HttpMethod	JKYi/http/http.h	/^enum class HttpMethod{$/;"	c	namespace:JKYi::http
JKYi::http::HttpMethodToString	JKYi/http/http.cc	/^const char* HttpMethodToString(const HttpMethod& m){$/;"	f	namespace:JKYi::http	signature:(const HttpMethod& m)
JKYi::http::HttpMethodToString	JKYi/http/http.h	/^const char * HttpMethodToString(const HttpMethod&m);$/;"	p	namespace:JKYi::http	signature:(const HttpMethod&m)
JKYi::http::HttpRequest	JKYi/http/http.h	/^class HttpRequest{$/;"	c	namespace:JKYi::http
JKYi::http::HttpRequest::HttpRequest	JKYi/http/http.cc	/^HttpRequest::HttpRequest(uint8_t version,bool close)$/;"	f	class:JKYi::http::HttpRequest	signature:(uint8_t version,bool close)
JKYi::http::HttpRequest::HttpRequest	JKYi/http/http.h	/^   HttpRequest(uint8_t version=0x11,bool close=true);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(uint8_t version=0x11,bool close=true)
JKYi::http::HttpRequest::MapType	JKYi/http/http.h	/^    typedef std::map<std::string,std::string,CaseInsensitiveLess> MapType;$/;"	t	class:JKYi::http::HttpRequest	access:public
JKYi::http::HttpRequest::checkGetCookieAs	JKYi/http/http.h	/^   bool checkGetCookieAs(const std::string& key,T&val,const T& def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,T&val,const T& def=T())
JKYi::http::HttpRequest::checkGetHeaderAs	JKYi/http/http.h	/^   bool checkGetHeaderAs(const std::string &key,T&val,const T&def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string &key,T&val,const T&def=T())
JKYi::http::HttpRequest::checkGetParamAs	JKYi/http/http.h	/^   bool checkGetParamAs(const std::string& key,T& val,const T& def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,T& val,const T& def=T())
JKYi::http::HttpRequest::createResponse	JKYi/http/http.cc	/^std::shared_ptr<HttpResponse> HttpRequest::createResponse(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
JKYi::http::HttpRequest::createResponse	JKYi/http/http.h	/^   std::shared_ptr<HttpResponse> createResponse();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
JKYi::http::HttpRequest::delCookie	JKYi/http/http.cc	/^void HttpRequest::delCookie(const std::string& key){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key)
JKYi::http::HttpRequest::delCookie	JKYi/http/http.h	/^   void delCookie(const std::string& key);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key)
JKYi::http::HttpRequest::delHeader	JKYi/http/http.cc	/^void HttpRequest::delHeader(const std::string& key){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key)
JKYi::http::HttpRequest::delHeader	JKYi/http/http.h	/^   void delHeader(const std::string&key);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string&key)
JKYi::http::HttpRequest::delParam	JKYi/http/http.cc	/^void HttpRequest::delParam(const std::string& key){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key)
JKYi::http::HttpRequest::delParam	JKYi/http/http.h	/^   void delParam(const std::string& key);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key)
JKYi::http::HttpRequest::dump	JKYi/http/http.cc	/^std::ostream& HttpRequest::dump(std::ostream & os)const{$/;"	f	class:JKYi::http::HttpRequest	signature:(std::ostream & os) const
JKYi::http::HttpRequest::dump	JKYi/http/http.h	/^   std::ostream& dump(std::ostream& os)const;$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(std::ostream& os) const
JKYi::http::HttpRequest::getBody	JKYi/http/http.h	/^   const std::string getBody()const { return m_body; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequest::getCookie	JKYi/http/http.cc	/^std::string HttpRequest::getCookie(const std::string& key$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key ,const std::string& def)
JKYi::http::HttpRequest::getCookie	JKYi/http/http.h	/^   std::string getCookie(const std::string& key,const  std::string & def="");$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const std::string & def=Ó)
JKYi::http::HttpRequest::getCookieAs	JKYi/http/http.h	/^   T getCookieAs(const std::string& key,const T& def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const T& def=T())
JKYi::http::HttpRequest::getCookies	JKYi/http/http.h	/^   const MapType& getCookies()const{ return m_cookies; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequest::getHeader	JKYi/http/http.cc	/^std::string HttpRequest::getHeader(const std::string& key,$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key, const std::string& def) const
JKYi::http::HttpRequest::getHeader	JKYi/http/http.h	/^   std::string getHeader(const std::string& key,const std::string& def="")const;$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const std::string& def=Ó) const
JKYi::http::HttpRequest::getHeaderAs	JKYi/http/http.h	/^   T getHeaderAs(const std::string& key,const T& def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const T& def=T())
JKYi::http::HttpRequest::getHeaders	JKYi/http/http.h	/^   const MapType& getHeaders()const { return m_headers; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequest::getMethod	JKYi/http/http.h	/^   HttpMethod getMethod()const{ return m_method; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequest::getParam	JKYi/http/http.cc	/^std::string HttpRequest::getParam(const std::string& key$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key ,const std::string &def)
JKYi::http::HttpRequest::getParam	JKYi/http/http.h	/^   std::string getParam(const std::string& key,const std::string& def="");$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const std::string& def=Ó)
JKYi::http::HttpRequest::getParamAs	JKYi/http/http.h	/^   T getParamAs(const std::string& key,const T&def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const T&def=T())
JKYi::http::HttpRequest::getParams	JKYi/http/http.h	/^   const MapType& getParams()const{ return m_params; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequest::getPath	JKYi/http/http.h	/^   const std::string getPath()const { return m_path; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequest::getQuery	JKYi/http/http.h	/^   const std::string getQuery()const { return m_query; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequest::getVersion	JKYi/http/http.h	/^   uint8_t getVersion()const { return m_version; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequest::hasCookie	JKYi/http/http.cc	/^bool HttpRequest::hasCookie(const std::string& key,std::string * val){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,std::string * val)
JKYi::http::HttpRequest::hasCookie	JKYi/http/http.h	/^   bool hasCookie(const std::string& key,std::string * val=nullptr );$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,std::string * val=nullptr )
JKYi::http::HttpRequest::hasHeader	JKYi/http/http.cc	/^bool HttpRequest::hasHeader(const std::string& key,std::string * val){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,std::string * val)
JKYi::http::HttpRequest::hasHeader	JKYi/http/http.h	/^   bool hasHeader(const std::string& key,std::string * val=nullptr );$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,std::string * val=nullptr )
JKYi::http::HttpRequest::hasParam	JKYi/http/http.cc	/^bool HttpRequest::hasParam(const std::string& key,std::string * val){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,std::string * val)
JKYi::http::HttpRequest::hasParam	JKYi/http/http.h	/^   bool hasParam(const std::string& key,std::string * val=nullptr );$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,std::string * val=nullptr )
JKYi::http::HttpRequest::init	JKYi/http/http.cc	/^void HttpRequest::init(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
JKYi::http::HttpRequest::init	JKYi/http/http.h	/^   void init();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
JKYi::http::HttpRequest::initBodyParam	JKYi/http/http.cc	/^void HttpRequest::initBodyParam(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
JKYi::http::HttpRequest::initBodyParam	JKYi/http/http.h	/^   void initBodyParam();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
JKYi::http::HttpRequest::initCookies	JKYi/http/http.cc	/^void HttpRequest::initCookies(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
JKYi::http::HttpRequest::initCookies	JKYi/http/http.h	/^   void initCookies();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
JKYi::http::HttpRequest::initParam	JKYi/http/http.cc	/^void HttpRequest::initParam(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
JKYi::http::HttpRequest::initParam	JKYi/http/http.h	/^   void initParam();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
JKYi::http::HttpRequest::initQueryParam	JKYi/http/http.cc	/^void HttpRequest::initQueryParam(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
JKYi::http::HttpRequest::initQueryParam	JKYi/http/http.h	/^   void initQueryParam();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
JKYi::http::HttpRequest::isClose	JKYi/http/http.h	/^   bool isClose()const { return m_close; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequest::iswebsocket	JKYi/http/http.h	/^   bool iswebsocket()const { return m_websocket; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequest::m_body	JKYi/http/http.h	/^    std::string m_body;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_close	JKYi/http/http.h	/^    bool m_close;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_cookies	JKYi/http/http.h	/^    MapType m_cookies;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_fragment	JKYi/http/http.h	/^    std::string m_fragment;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_headers	JKYi/http/http.h	/^    MapType m_headers;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_method	JKYi/http/http.h	/^    HttpMethod m_method;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_params	JKYi/http/http.h	/^    MapType m_params;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_parseParamFlag	JKYi/http/http.h	/^    uint8_t m_parseParamFlag;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_path	JKYi/http/http.h	/^    std::string m_path;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_query	JKYi/http/http.h	/^    std::string m_query;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_version	JKYi/http/http.h	/^    uint8_t m_version;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::m_websocket	JKYi/http/http.h	/^    bool m_websocket;$/;"	m	class:JKYi::http::HttpRequest	access:private
JKYi::http::HttpRequest::ptr	JKYi/http/http.h	/^    typedef std::shared_ptr<HttpRequest> ptr;$/;"	t	class:JKYi::http::HttpRequest	access:public
JKYi::http::HttpRequest::setBody	JKYi/http/http.h	/^   void setBody(const std::string& v){ m_body=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& v)
JKYi::http::HttpRequest::setClose	JKYi/http/http.h	/^   void setClose(bool v){ m_close=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(bool v)
JKYi::http::HttpRequest::setCookie	JKYi/http/http.cc	/^void HttpRequest::setCookie(const std::string& key,const std::string& value){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,const std::string& value)
JKYi::http::HttpRequest::setCookie	JKYi/http/http.h	/^   void setCookie(const std::string&key,const std::string& value);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string&key,const std::string& value)
JKYi::http::HttpRequest::setCookies	JKYi/http/http.h	/^   void setCookies(const MapType& v){ m_cookies=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const MapType& v)
JKYi::http::HttpRequest::setFragment	JKYi/http/http.h	/^   void setFragment(const std::string& v){ m_fragment=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& v)
JKYi::http::HttpRequest::setHeader	JKYi/http/http.cc	/^void HttpRequest::setHeader(const std::string& key,const std::string& value){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,const std::string& value)
JKYi::http::HttpRequest::setHeader	JKYi/http/http.h	/^   void setHeader(const std::string& key,const std::string&value);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const std::string&value)
JKYi::http::HttpRequest::setHeaders	JKYi/http/http.h	/^   void setHeaders(const MapType& v){ m_headers=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const MapType& v)
JKYi::http::HttpRequest::setMethod	JKYi/http/http.h	/^   void setMethod(HttpMethod m){ m_method=m; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(HttpMethod m)
JKYi::http::HttpRequest::setParam	JKYi/http/http.cc	/^void HttpRequest::setParam(const std::string& key,const std::string& value){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,const std::string& value)
JKYi::http::HttpRequest::setParam	JKYi/http/http.h	/^   void setParam(const std::string&key,const std::string&value);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string&key,const std::string&value)
JKYi::http::HttpRequest::setParams	JKYi/http/http.h	/^   void setParams(const MapType& v){ m_params=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const MapType& v)
JKYi::http::HttpRequest::setPath	JKYi/http/http.h	/^   void setPath(const std::string& path){ m_path=path; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& path)
JKYi::http::HttpRequest::setQuery	JKYi/http/http.h	/^   void setQuery(const std::string& v){ m_query=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& v)
JKYi::http::HttpRequest::setVersion	JKYi/http/http.h	/^   void setVersion(uint8_t version){ m_version=version; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(uint8_t version)
JKYi::http::HttpRequest::setWebsocket	JKYi/http/http.h	/^   void setWebsocket(bool v) { m_websocket=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(bool v)
JKYi::http::HttpRequest::toString	JKYi/http/http.cc	/^std::string HttpRequest::toString()const {$/;"	f	class:JKYi::http::HttpRequest	signature:() const
JKYi::http::HttpRequest::toString	JKYi/http/http.h	/^   std::string toString()const;$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:() const
JKYi::http::HttpRequestParser	JKYi/http/http_parser.h	/^class HttpRequestParser{$/;"	c	namespace:JKYi::http
JKYi::http::HttpRequestParser::GetHttpRequestBufferSize	JKYi/http/http_parser.cc	/^uint64_t HttpRequestParser::GetHttpRequestBufferSize(){$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
JKYi::http::HttpRequestParser::GetHttpRequestBufferSize	JKYi/http/http_parser.h	/^     static uint64_t GetHttpRequestBufferSize();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
JKYi::http::HttpRequestParser::GetHttpRequestMaxBodySize	JKYi/http/http_parser.cc	/^uint64_t HttpRequestParser::GetHttpRequestMaxBodySize(){$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
JKYi::http::HttpRequestParser::GetHttpRequestMaxBodySize	JKYi/http/http_parser.h	/^     static uint64_t GetHttpRequestMaxBodySize();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
JKYi::http::HttpRequestParser::HttpRequestParser	JKYi/http/http_parser.cc	/^HttpRequestParser::HttpRequestParser()$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
JKYi::http::HttpRequestParser::HttpRequestParser	JKYi/http/http_parser.h	/^    HttpRequestParser();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
JKYi::http::HttpRequestParser::execute	JKYi/http/http_parser.cc	/^size_t HttpRequestParser::execute(char * data,size_t length){$/;"	f	class:JKYi::http::HttpRequestParser	signature:(char * data,size_t length)
JKYi::http::HttpRequestParser::execute	JKYi/http/http_parser.h	/^    size_t execute(char * data,size_t len);$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:(char * data,size_t len)
JKYi::http::HttpRequestParser::getContentLength	JKYi/http/http_parser.cc	/^uint64_t HttpRequestParser::getContentLength(){$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
JKYi::http::HttpRequestParser::getContentLength	JKYi/http/http_parser.h	/^    uint64_t getContentLength();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
JKYi::http::HttpRequestParser::getData	JKYi/http/http_parser.h	/^    HttpRequest::ptr getData()const { return m_data; }$/;"	f	class:JKYi::http::HttpRequestParser	access:public	signature:() const
JKYi::http::HttpRequestParser::getParser	JKYi/http/http_parser.h	/^    const http_parser& getParser()const { return m_parser; }$/;"	f	class:JKYi::http::HttpRequestParser	access:public	signature:() const
JKYi::http::HttpRequestParser::hasError	JKYi/http/http_parser.cc	/^int HttpRequestParser::hasError(){$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
JKYi::http::HttpRequestParser::hasError	JKYi/http/http_parser.h	/^    int hasError();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
JKYi::http::HttpRequestParser::isFinished	JKYi/http/http_parser.cc	/^int HttpRequestParser::isFinished(){$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
JKYi::http::HttpRequestParser::isFinished	JKYi/http/http_parser.h	/^    int isFinished();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
JKYi::http::HttpRequestParser::m_data	JKYi/http/http_parser.h	/^    HttpRequest::ptr m_data;$/;"	m	class:JKYi::http::HttpRequestParser	access:private
JKYi::http::HttpRequestParser::m_error	JKYi/http/http_parser.h	/^    int m_error;$/;"	m	class:JKYi::http::HttpRequestParser	access:private
JKYi::http::HttpRequestParser::m_parser	JKYi/http/http_parser.h	/^    http_parser m_parser;$/;"	m	class:JKYi::http::HttpRequestParser	access:private
JKYi::http::HttpRequestParser::ptr	JKYi/http/http_parser.h	/^    typedef std::shared_ptr<HttpRequestParser> ptr;$/;"	t	class:JKYi::http::HttpRequestParser	access:public
JKYi::http::HttpRequestParser::setError	JKYi/http/http_parser.h	/^    void setError(int v){ m_error=v; }$/;"	f	class:JKYi::http::HttpRequestParser	access:public	signature:(int v)
JKYi::http::HttpResponse	JKYi/http/http.h	/^class HttpResponse{$/;"	c	namespace:JKYi::http
JKYi::http::HttpResponse::HttpResponse	JKYi/http/http.cc	/^HttpResponse::HttpResponse(uint8_t version,bool close)$/;"	f	class:JKYi::http::HttpResponse	signature:(uint8_t version,bool close)
JKYi::http::HttpResponse::HttpResponse	JKYi/http/http.h	/^    HttpResponse(uint8_t version=0x11,bool close=true);$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(uint8_t version=0x11,bool close=true)
JKYi::http::HttpResponse::MapType	JKYi/http/http.h	/^    typedef std::map<std::string,std::string,CaseInsensitiveLess> MapType;$/;"	t	class:JKYi::http::HttpResponse	access:public
JKYi::http::HttpResponse::checkGetHeaderAs	JKYi/http/http.h	/^    bool checkGetHeaderAs(const std::string&key,T& val,const T& def=T()){$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(const std::string&key,T& val,const T& def=T())
JKYi::http::HttpResponse::delHeader	JKYi/http/http.cc	/^void HttpResponse::delHeader(const std::string& key){$/;"	f	class:JKYi::http::HttpResponse	signature:(const std::string& key)
JKYi::http::HttpResponse::delHeader	JKYi/http/http.h	/^    void delHeader(const std::string&key);$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(const std::string&key)
JKYi::http::HttpResponse::dump	JKYi/http/http.cc	/^std::ostream& HttpResponse::dump(std::ostream& os)const{$/;"	f	class:JKYi::http::HttpResponse	signature:(std::ostream& os) const
JKYi::http::HttpResponse::dump	JKYi/http/http.h	/^    std::ostream& dump(std::ostream& os)const;$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(std::ostream& os) const
JKYi::http::HttpResponse::getBody	JKYi/http/http.h	/^    const std::string&  getBody()const { return m_body; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
JKYi::http::HttpResponse::getHeader	JKYi/http/http.cc	/^std::string HttpResponse::getHeader(const std::string& key,const std::string & def)const{$/;"	f	class:JKYi::http::HttpResponse	signature:(const std::string& key,const std::string & def) const
JKYi::http::HttpResponse::getHeader	JKYi/http/http.h	/^    std::string getHeader(const std::string& key,const std::string& def="")const;$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(const std::string& key,const std::string& def=Ó) const
JKYi::http::HttpResponse::getHeaderAs	JKYi/http/http.h	/^    T getHeaderAs(const std::string& key,const T& def=T()){$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(const std::string& key,const T& def=T())
JKYi::http::HttpResponse::getHeaders	JKYi/http/http.h	/^    const MapType& getHeaders()const { return m_headers; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
JKYi::http::HttpResponse::getReason	JKYi/http/http.h	/^    const std::string& getReason()const { return m_reason; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
JKYi::http::HttpResponse::getStatus	JKYi/http/http.h	/^    HttpStatus getStatus()const { return m_status; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
JKYi::http::HttpResponse::getVersion	JKYi/http/http.h	/^    uint8_t getVersion()const { return m_version; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
JKYi::http::HttpResponse::isClose	JKYi/http/http.h	/^    bool isClose()const { return m_close; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
JKYi::http::HttpResponse::isWebSocket	JKYi/http/http.h	/^    bool isWebSocket()const { return m_websocket; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
JKYi::http::HttpResponse::m_body	JKYi/http/http.h	/^    std::string m_body;$/;"	m	class:JKYi::http::HttpResponse	access:private
JKYi::http::HttpResponse::m_close	JKYi/http/http.h	/^    bool m_close;$/;"	m	class:JKYi::http::HttpResponse	access:private
JKYi::http::HttpResponse::m_cookies	JKYi/http/http.h	/^    std::vector<std::string>m_cookies;$/;"	m	class:JKYi::http::HttpResponse	access:private
JKYi::http::HttpResponse::m_headers	JKYi/http/http.h	/^    MapType m_headers;$/;"	m	class:JKYi::http::HttpResponse	access:private
JKYi::http::HttpResponse::m_reason	JKYi/http/http.h	/^    std::string m_reason;$/;"	m	class:JKYi::http::HttpResponse	access:private
JKYi::http::HttpResponse::m_status	JKYi/http/http.h	/^    HttpStatus m_status;$/;"	m	class:JKYi::http::HttpResponse	access:private
JKYi::http::HttpResponse::m_version	JKYi/http/http.h	/^    uint8_t m_version;$/;"	m	class:JKYi::http::HttpResponse	access:private
JKYi::http::HttpResponse::m_websocket	JKYi/http/http.h	/^    bool m_websocket;$/;"	m	class:JKYi::http::HttpResponse	access:private
JKYi::http::HttpResponse::ptr	JKYi/http/http.h	/^    typedef std::shared_ptr<HttpResponse> ptr;$/;"	t	class:JKYi::http::HttpResponse	access:public
JKYi::http::HttpResponse::setBody	JKYi/http/http.h	/^    void setBody(const std::string& v) { m_body=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(const std::string& v)
JKYi::http::HttpResponse::setClose	JKYi/http/http.h	/^    void setClose(bool v) { m_close=v; } $/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(bool v)
JKYi::http::HttpResponse::setCookie	JKYi/http/http.cc	/^void HttpResponse::setCookie(const std::string& key,const std::string& value$/;"	f	class:JKYi::http::HttpResponse	signature:(const std::string& key,const std::string& value ,time_t expired,const std::string& path ,const std::string& domain,bool secure)
JKYi::http::HttpResponse::setCookie	JKYi/http/http.h	/^    void setCookie(const std::string & key,const std::string & value,time_t expired = 0$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(const std::string & key,const std::string & value,time_t expired = 0 ,const std::string& path = Ó,const std::string & domain = Ó ,bool secure = false)
JKYi::http::HttpResponse::setHeader	JKYi/http/http.cc	/^void HttpResponse::setHeader(const std::string& key,const std::string& value){$/;"	f	class:JKYi::http::HttpResponse	signature:(const std::string& key,const std::string& value)
JKYi::http::HttpResponse::setHeader	JKYi/http/http.h	/^    void setHeader(const std::string&key,const std::string& value);$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(const std::string&key,const std::string& value)
JKYi::http::HttpResponse::setHeaders	JKYi/http/http.h	/^    void setHeaders(const MapType& v) { m_headers=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(const MapType& v)
JKYi::http::HttpResponse::setReason	JKYi/http/http.h	/^    void setReason(const std::string & v) { m_reason=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(const std::string & v)
JKYi::http::HttpResponse::setRedirect	JKYi/http/http.cc	/^void HttpResponse::setRedirect(const std::string& uri){$/;"	f	class:JKYi::http::HttpResponse	signature:(const std::string& uri)
JKYi::http::HttpResponse::setRedirect	JKYi/http/http.h	/^    void setRedirect(const std::string& uri);$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(const std::string& uri)
JKYi::http::HttpResponse::setStatus	JKYi/http/http.h	/^    void setStatus(HttpStatus v) { m_status=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(HttpStatus v)
JKYi::http::HttpResponse::setVersion	JKYi/http/http.h	/^    void setVersion(uint8_t v) { m_version=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(uint8_t v)
JKYi::http::HttpResponse::setWebsocket	JKYi/http/http.h	/^    void setWebsocket(bool v) { m_websocket=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(bool v)
JKYi::http::HttpResponse::toString	JKYi/http/http.cc	/^std::string HttpResponse::toString()const{$/;"	f	class:JKYi::http::HttpResponse	signature:() const
JKYi::http::HttpResponse::toString	JKYi/http/http.h	/^    std::string toString()const;$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:() const
JKYi::http::HttpResponseParser	JKYi/http/http_parser.h	/^class HttpResponseParser{$/;"	c	namespace:JKYi::http
JKYi::http::HttpResponseParser::GetHttpResponseBufferSize	JKYi/http/http_parser.cc	/^uint64_t HttpResponseParser::GetHttpResponseBufferSize(){$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
JKYi::http::HttpResponseParser::GetHttpResponseBufferSize	JKYi/http/http_parser.h	/^    static uint64_t GetHttpResponseBufferSize();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
JKYi::http::HttpResponseParser::GetHttpResponseMaxBodySize	JKYi/http/http_parser.cc	/^uint64_t HttpResponseParser::GetHttpResponseMaxBodySize(){$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
JKYi::http::HttpResponseParser::GetHttpResponseMaxBodySize	JKYi/http/http_parser.h	/^    static uint64_t GetHttpResponseMaxBodySize();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
JKYi::http::HttpResponseParser::HttpResponseParser	JKYi/http/http_parser.cc	/^HttpResponseParser::HttpResponseParser()$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
JKYi::http::HttpResponseParser::HttpResponseParser	JKYi/http/http_parser.h	/^    HttpResponseParser();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
JKYi::http::HttpResponseParser::execute	JKYi/http/http_parser.cc	/^size_t HttpResponseParser::execute(char* data,size_t len,bool chunk){$/;"	f	class:JKYi::http::HttpResponseParser	signature:(char* data,size_t len,bool chunk)
JKYi::http::HttpResponseParser::execute	JKYi/http/http_parser.h	/^    size_t execute(char * data,size_t len,bool chunk);$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:(char * data,size_t len,bool chunk)
JKYi::http::HttpResponseParser::getContentLength	JKYi/http/http_parser.cc	/^uint64_t HttpResponseParser::getContentLength(){$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
JKYi::http::HttpResponseParser::getContentLength	JKYi/http/http_parser.h	/^    uint64_t getContentLength();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
JKYi::http::HttpResponseParser::getData	JKYi/http/http_parser.h	/^    HttpResponse::ptr getData()const { return m_data; }$/;"	f	class:JKYi::http::HttpResponseParser	access:public	signature:() const
JKYi::http::HttpResponseParser::getParser	JKYi/http/http_parser.h	/^    const httpclient_parser& getParser()const { return m_parser; }$/;"	f	class:JKYi::http::HttpResponseParser	access:public	signature:() const
JKYi::http::HttpResponseParser::hasError	JKYi/http/http_parser.cc	/^int HttpResponseParser::hasError(){$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
JKYi::http::HttpResponseParser::hasError	JKYi/http/http_parser.h	/^    int hasError();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
JKYi::http::HttpResponseParser::isFinished	JKYi/http/http_parser.cc	/^int HttpResponseParser::isFinished(){$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
JKYi::http::HttpResponseParser::isFinished	JKYi/http/http_parser.h	/^    int isFinished();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
JKYi::http::HttpResponseParser::m_data	JKYi/http/http_parser.h	/^    HttpResponse::ptr  m_data;$/;"	m	class:JKYi::http::HttpResponseParser	access:private
JKYi::http::HttpResponseParser::m_error	JKYi/http/http_parser.h	/^    int m_error;$/;"	m	class:JKYi::http::HttpResponseParser	access:private
JKYi::http::HttpResponseParser::m_parser	JKYi/http/http_parser.h	/^    httpclient_parser m_parser;$/;"	m	class:JKYi::http::HttpResponseParser	access:private
JKYi::http::HttpResponseParser::ptr	JKYi/http/http_parser.h	/^    typedef std::shared_ptr<HttpResponseParser> ptr;$/;"	t	class:JKYi::http::HttpResponseParser	access:public
JKYi::http::HttpResponseParser::setError	JKYi/http/http_parser.h	/^    void setError(int v) { m_error=v; }$/;"	f	class:JKYi::http::HttpResponseParser	access:public	signature:(int v)
JKYi::http::HttpResult	JKYi/http/http_connection.h	/^struct HttpResult{$/;"	s	namespace:JKYi::http
JKYi::http::HttpResult::Error	JKYi/http/http_connection.h	/^    enum class Error{$/;"	c	struct:JKYi::http::HttpResult	access:public
JKYi::http::HttpResult::Error::CONNECT_FAIL	JKYi/http/http_connection.h	/^        CONNECT_FAIL = 3,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
JKYi::http::HttpResult::Error::CREATE_SOCKET_ERROR	JKYi/http/http_connection.h	/^        CREATE_SOCKET_ERROR = 7,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
JKYi::http::HttpResult::Error::INVALID_HOST	JKYi/http/http_connection.h	/^        INVALID_HOST = 2,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
JKYi::http::HttpResult::Error::INVALID_URL	JKYi/http/http_connection.h	/^        INVALID_URL = 1,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
JKYi::http::HttpResult::Error::OK	JKYi/http/http_connection.h	/^        OK = 0,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
JKYi::http::HttpResult::Error::POOL_GET_CONNECTION	JKYi/http/http_connection.h	/^        POOL_GET_CONNECTION = 8,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
JKYi::http::HttpResult::Error::POOL_INVALID_CONNECTION	JKYi/http/http_connection.h	/^        POOL_INVALID_CONNECTION = 9,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
JKYi::http::HttpResult::Error::SEND_CLOSE_BY_PEER	JKYi/http/http_connection.h	/^        SEND_CLOSE_BY_PEER = 4,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
JKYi::http::HttpResult::Error::SEND_SOCKET_ERROR	JKYi/http/http_connection.h	/^        SEND_SOCKET_ERROR = 5,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
JKYi::http::HttpResult::Error::TIMEOUT	JKYi/http/http_connection.h	/^        TIMEOUT = 6,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
JKYi::http::HttpResult::HttpResult	JKYi/http/http_connection.h	/^    HttpResult(int _result,HttpResponse::ptr _rsp,const std::string& _error)$/;"	f	struct:JKYi::http::HttpResult	access:public	signature:(int _result,HttpResponse::ptr _rsp,const std::string& _error)
JKYi::http::HttpResult::error	JKYi/http/http_connection.h	/^    std::string error;$/;"	m	struct:JKYi::http::HttpResult	access:public
JKYi::http::HttpResult::ptr	JKYi/http/http_connection.h	/^    typedef std::shared_ptr<HttpResult> ptr;$/;"	t	struct:JKYi::http::HttpResult	access:public
JKYi::http::HttpResult::result	JKYi/http/http_connection.h	/^    int result;$/;"	m	struct:JKYi::http::HttpResult	access:public
JKYi::http::HttpResult::rsp	JKYi/http/http_connection.h	/^    HttpResponse::ptr rsp;$/;"	m	struct:JKYi::http::HttpResult	access:public
JKYi::http::HttpResult::toString	JKYi/http/http_connection.cc	/^std::string HttpResult::toString()const{$/;"	f	class:JKYi::http::HttpResult	signature:() const
JKYi::http::HttpResult::toString	JKYi/http/http_connection.h	/^    std::string toString()const;$/;"	p	struct:JKYi::http::HttpResult	access:public	signature:() const
JKYi::http::HttpServer	JKYi/http/http_server.h	/^class HttpServer:public TcpServer{$/;"	c	namespace:JKYi::http	inherits:TcpServer
JKYi::http::HttpServer::HttpServer	JKYi/http/http_server.cc	/^HttpServer::HttpServer(bool keepalive,IOManager * worker,IOManager * io_worker,$/;"	f	class:JKYi::http::HttpServer	signature:(bool keepalive,IOManager * worker,IOManager * io_worker, IOManager * accept_worker)
JKYi::http::HttpServer::HttpServer	JKYi/http/http_server.h	/^    HttpServer(bool keepalive = false,IOManager * worker = JKYi::IOManager::GetThis()$/;"	p	class:JKYi::http::HttpServer	access:public	signature:(bool keepalive = false,IOManager * worker = JKYi::IOManager::GetThis() ,IOManager * io_worker = JKYi::IOManager::GetThis() ,IOManager * accept_worker = JKYi::IOManager::GetThis())
JKYi::http::HttpServer::getServletDispatch	JKYi/http/http_server.h	/^    ServletDispatch::ptr getServletDispatch()const{ return m_dispatch; }$/;"	f	class:JKYi::http::HttpServer	access:public	signature:() const
JKYi::http::HttpServer::handleClient	JKYi/http/http_server.cc	/^void HttpServer::handleClient(Socket::ptr client){$/;"	f	class:JKYi::http::HttpServer	signature:(Socket::ptr client)
JKYi::http::HttpServer::m_dispatch	JKYi/http/http_server.h	/^    ServletDispatch::ptr m_dispatch;$/;"	m	class:JKYi::http::HttpServer	access:private
JKYi::http::HttpServer::m_isKeepalive	JKYi/http/http_server.h	/^    bool m_isKeepalive;$/;"	m	class:JKYi::http::HttpServer	access:private
JKYi::http::HttpServer::override	JKYi/http/http_server.h	/^    virtual void handleClient(Socket::ptr client)override;$/;"	m	class:JKYi::http::HttpServer	access:private
JKYi::http::HttpServer::override	JKYi/http/http_server.h	/^    virtual void setName(const std::string& name)override;$/;"	m	class:JKYi::http::HttpServer	access:public
JKYi::http::HttpServer::ptr	JKYi/http/http_server.h	/^    typedef std::shared_ptr<HttpServer> ptr;$/;"	t	class:JKYi::http::HttpServer	access:public
JKYi::http::HttpServer::setName	JKYi/http/http_server.cc	/^void HttpServer::setName(const std::string& name){$/;"	f	class:JKYi::http::HttpServer	signature:(const std::string& name)
JKYi::http::HttpServer::setServletDispatch	JKYi/http/http_server.h	/^    void setServletDispatch(ServletDispatch::ptr v){ m_dispatch = v; }$/;"	f	class:JKYi::http::HttpServer	access:public	signature:(ServletDispatch::ptr v)
JKYi::http::HttpSession	JKYi/http/http_session.h	/^class HttpSession:public SocketStream{$/;"	c	namespace:JKYi::http	inherits:SocketStream
JKYi::http::HttpSession::HttpSession	JKYi/http/http_session.cc	/^HttpSession::HttpSession(Socket::ptr sock,bool owner)$/;"	f	class:JKYi::http::HttpSession	signature:(Socket::ptr sock,bool owner)
JKYi::http::HttpSession::HttpSession	JKYi/http/http_session.h	/^    HttpSession(Socket::ptr sock,bool owner = true);$/;"	p	class:JKYi::http::HttpSession	access:public	signature:(Socket::ptr sock,bool owner = true)
JKYi::http::HttpSession::ptr	JKYi/http/http_session.h	/^    typedef std::shared_ptr<HttpSession> ptr;$/;"	t	class:JKYi::http::HttpSession	access:public
JKYi::http::HttpSession::recvRequest	JKYi/http/http_session.cc	/^HttpRequest::ptr HttpSession::recvRequest(){$/;"	f	class:JKYi::http::HttpSession	signature:()
JKYi::http::HttpSession::recvRequest	JKYi/http/http_session.h	/^    HttpRequest::ptr recvRequest();$/;"	p	class:JKYi::http::HttpSession	access:public	signature:()
JKYi::http::HttpSession::sendResponse	JKYi/http/http_session.cc	/^int  HttpSession::sendResponse(const HttpResponse::ptr rsp){$/;"	f	class:JKYi::http::HttpSession	signature:(const HttpResponse::ptr rsp)
JKYi::http::HttpSession::sendResponse	JKYi/http/http_session.h	/^    int sendResponse(HttpResponse::ptr rsp);$/;"	p	class:JKYi::http::HttpSession	access:public	signature:(HttpResponse::ptr rsp)
JKYi::http::HttpStatueToString	JKYi/http/http.h	/^const char * HttpStatueToString(const HttpStatus&s);$/;"	p	namespace:JKYi::http	signature:(const HttpStatus&s)
JKYi::http::HttpStatus	JKYi/http/http.h	/^enum class HttpStatus{$/;"	c	namespace:JKYi::http
JKYi::http::HttpStatusToString	JKYi/http/http.cc	/^const char* HttpStatusToString(const HttpStatus& s){$/;"	f	namespace:JKYi::http	signature:(const HttpStatus& s)
JKYi::http::NotFoundServlet	JKYi/http/servlet.h	/^class NotFoundServlet: public Servlet{$/;"	c	namespace:JKYi::http	inherits:Servlet
JKYi::http::NotFoundServlet::NotFoundServlet	JKYi/http/servlet.cc	/^NotFoundServlet::NotFoundServlet(const std::string& name)$/;"	f	class:JKYi::http::NotFoundServlet	signature:(const std::string& name)
JKYi::http::NotFoundServlet::NotFoundServlet	JKYi/http/servlet.h	/^    NotFoundServlet(const std::string& name);$/;"	p	class:JKYi::http::NotFoundServlet	access:public	signature:(const std::string& name)
JKYi::http::NotFoundServlet::handle	JKYi/http/servlet.cc	/^int32_t NotFoundServlet::handle(HttpRequest::ptr request,HttpResponse::ptr response$/;"	f	class:JKYi::http::NotFoundServlet	signature:(HttpRequest::ptr request,HttpResponse::ptr response ,HttpSession::ptr session)
JKYi::http::NotFoundServlet::m_content	JKYi/http/servlet.h	/^    std::string m_content;$/;"	m	class:JKYi::http::NotFoundServlet	access:private
JKYi::http::NotFoundServlet::m_name	JKYi/http/servlet.h	/^    std::string m_name;$/;"	m	class:JKYi::http::NotFoundServlet	access:private
JKYi::http::NotFoundServlet::override	JKYi/http/servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session)override;$/;"	m	class:JKYi::http::NotFoundServlet	access:public
JKYi::http::NotFoundServlet::ptr	JKYi/http/servlet.h	/^    typedef std::shared_ptr<NotFoundServlet> ptr;$/;"	t	class:JKYi::http::NotFoundServlet	access:public
JKYi::http::Servlet	JKYi/http/servlet.h	/^class Servlet{$/;"	c	namespace:JKYi::http
JKYi::http::Servlet::Servlet	JKYi/http/servlet.cc	/^Servlet::Servlet(const std::string& name)$/;"	f	class:JKYi::http::Servlet	signature:(const std::string& name)
JKYi::http::Servlet::Servlet	JKYi/http/servlet.h	/^    Servlet(const std::string& name);$/;"	p	class:JKYi::http::Servlet	access:public	signature:(const std::string& name)
JKYi::http::Servlet::getName	JKYi/http/servlet.h	/^    const std::string getName()const { return m_name; }$/;"	f	class:JKYi::http::Servlet	access:public	signature:() const
JKYi::http::Servlet::handle	JKYi/http/servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session) = 0;$/;"	p	class:JKYi::http::Servlet	access:public	signature:(JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session)
JKYi::http::Servlet::m_name	JKYi/http/servlet.h	/^    std::string m_name;$/;"	m	class:JKYi::http::Servlet	access:protected
JKYi::http::Servlet::ptr	JKYi/http/servlet.h	/^    typedef std::shared_ptr<Servlet> ptr;$/;"	t	class:JKYi::http::Servlet	access:public
JKYi::http::Servlet::~Servlet	JKYi/http/servlet.h	/^    virtual ~Servlet(){};$/;"	f	class:JKYi::http::Servlet	access:public	signature:()
JKYi::http::ServletDispatch	JKYi/http/servlet.h	/^class ServletDispatch: public Servlet{$/;"	c	namespace:JKYi::http	inherits:Servlet
JKYi::http::ServletDispatch::RWMutexType	JKYi/http/servlet.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:JKYi::http::ServletDispatch	access:public
JKYi::http::ServletDispatch::ServletDispatch	JKYi/http/servlet.cc	/^ServletDispatch::ServletDispatch()$/;"	f	class:JKYi::http::ServletDispatch	signature:()
JKYi::http::ServletDispatch::ServletDispatch	JKYi/http/servlet.h	/^    ServletDispatch();$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:()
JKYi::http::ServletDispatch::addGlobServlet	JKYi/http/servlet.cc	/^void ServletDispatch::addGlobServlet(const std::string& uri,$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri, FunctionServlet::callback cb)
JKYi::http::ServletDispatch::addGlobServlet	JKYi/http/servlet.cc	/^void ServletDispatch::addGlobServlet(const std::string& uri,Servlet::ptr slt){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri,Servlet::ptr slt)
JKYi::http::ServletDispatch::addGlobServlet	JKYi/http/servlet.h	/^    void addGlobServlet(const std::string& uri,FunctionServlet::callback cb);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri,FunctionServlet::callback cb)
JKYi::http::ServletDispatch::addGlobServlet	JKYi/http/servlet.h	/^    void addGlobServlet(const std::string& uri,JKYi::http::Servlet::ptr slt);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri,JKYi::http::Servlet::ptr slt)
JKYi::http::ServletDispatch::addServlet	JKYi/http/servlet.cc	/^void ServletDispatch::addServlet(const std::string& uri,FunctionServlet::callback cb){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri,FunctionServlet::callback cb)
JKYi::http::ServletDispatch::addServlet	JKYi/http/servlet.cc	/^void ServletDispatch::addServlet(const std::string& uri,Servlet::ptr slt){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri,Servlet::ptr slt)
JKYi::http::ServletDispatch::addServlet	JKYi/http/servlet.h	/^    void addServlet(const std::string& uri,FunctionServlet::callback cb);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri,FunctionServlet::callback cb)
JKYi::http::ServletDispatch::addServlet	JKYi/http/servlet.h	/^    void addServlet(const std::string& uri,JKYi::http::Servlet::ptr slt);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri,JKYi::http::Servlet::ptr slt)
JKYi::http::ServletDispatch::delGlobServlet	JKYi/http/servlet.cc	/^void ServletDispatch::delGlobServlet(const std::string& uri){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri)
JKYi::http::ServletDispatch::delGlobServlet	JKYi/http/servlet.h	/^    void delGlobServlet(const std::string& uri);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri)
JKYi::http::ServletDispatch::delServlet	JKYi/http/servlet.cc	/^void ServletDispatch::delServlet(const std::string& uri){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri)
JKYi::http::ServletDispatch::delServlet	JKYi/http/servlet.h	/^    void delServlet(const std::string& uri);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri)
JKYi::http::ServletDispatch::getDefault	JKYi/http/servlet.h	/^    Servlet::ptr getDefault()const { return m_default; }$/;"	f	class:JKYi::http::ServletDispatch	access:public	signature:() const
JKYi::http::ServletDispatch::getGlobServlet	JKYi/http/servlet.cc	/^Servlet::ptr ServletDispatch::getGlobServlet(const std::string& uri){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri)
JKYi::http::ServletDispatch::getGlobServlet	JKYi/http/servlet.h	/^    Servlet::ptr getGlobServlet(const std::string& uri);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri)
JKYi::http::ServletDispatch::getMatchedServlet	JKYi/http/servlet.cc	/^Servlet::ptr ServletDispatch::getMatchedServlet(const std::string& uri){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri)
JKYi::http::ServletDispatch::getMatchedServlet	JKYi/http/servlet.h	/^    Servlet::ptr getMatchedServlet(const std::string& uri);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri)
JKYi::http::ServletDispatch::getServlet	JKYi/http/servlet.cc	/^Servlet::ptr ServletDispatch::getServlet(const std::string& uri){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri)
JKYi::http::ServletDispatch::getServlet	JKYi/http/servlet.h	/^    Servlet::ptr getServlet(const std::string& uri);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri)
JKYi::http::ServletDispatch::handle	JKYi/http/servlet.cc	/^int32_t ServletDispatch::handle(HttpRequest::ptr request,HttpResponse::ptr response,$/;"	f	class:JKYi::http::ServletDispatch	signature:(HttpRequest::ptr request,HttpResponse::ptr response, HttpSession::ptr session)
JKYi::http::ServletDispatch::m_datas	JKYi/http/servlet.h	/^    std::unordered_map<std::string,Servlet::ptr> m_datas;$/;"	m	class:JKYi::http::ServletDispatch	access:private
JKYi::http::ServletDispatch::m_default	JKYi/http/servlet.h	/^    Servlet::ptr m_default;$/;"	m	class:JKYi::http::ServletDispatch	access:private
JKYi::http::ServletDispatch::m_globs	JKYi/http/servlet.h	/^    std::vector<std::pair<std::string,Servlet::ptr>> m_globs;$/;"	m	class:JKYi::http::ServletDispatch	access:private
JKYi::http::ServletDispatch::m_mutex	JKYi/http/servlet.h	/^    RWMutex m_mutex;$/;"	m	class:JKYi::http::ServletDispatch	access:private
JKYi::http::ServletDispatch::override	JKYi/http/servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session) override;$/;"	m	class:JKYi::http::ServletDispatch	access:public
JKYi::http::ServletDispatch::ptr	JKYi/http/servlet.h	/^    typedef std::shared_ptr<ServletDispatch> ptr;$/;"	t	class:JKYi::http::ServletDispatch	access:public
JKYi::http::ServletDispatch::setDefault	JKYi/http/servlet.h	/^    void setDefault(Servlet::ptr v){ m_default = v; }$/;"	f	class:JKYi::http::ServletDispatch	access:public	signature:(Servlet::ptr v)
JKYi::http::StringToHttpMethod	JKYi/http/http.cc	/^HttpMethod StringToHttpMethod(const std::string& m){$/;"	f	namespace:JKYi::http	signature:(const std::string& m)
JKYi::http::StringToHttpMethod	JKYi/http/http.h	/^HttpMethod StringToHttpMethod(const std::string& str);$/;"	p	namespace:JKYi::http	signature:(const std::string& str)
JKYi::http::WSConnection	JKYi/http/ws_connection.h	/^class WSConnection:public HttpConnection{$/;"	c	namespace:JKYi::http	inherits:HttpConnection
JKYi::http::WSConnection::Create	JKYi/http/ws_connection.cc	/^std::pair<HttpResult::ptr,WSConnection::ptr> WSConnection::Create(Uri::ptr uri,$/;"	f	class:JKYi::http::WSConnection	signature:(Uri::ptr uri, uint64_t timeout_ms,const std::map<std::string,std::string>& headers)
JKYi::http::WSConnection::Create	JKYi/http/ws_connection.cc	/^std::pair<HttpResult::ptr,WSConnection::ptr> WSConnection::Create(const std::string& url,$/;"	f	class:JKYi::http::WSConnection	signature:(const std::string& url, uint64_t timeout_ms,const std::map<std::string,std::string>& headers)
JKYi::http::WSConnection::Create	JKYi/http/ws_connection.h	/^    static std::pair<HttpResult::ptr,WSConnection::ptr> Create(Uri::ptr uri,$/;"	p	class:JKYi::http::WSConnection	access:public	signature:(Uri::ptr uri, uint64_t timeous_ms,const std::map<std::string,std::string>& header = {})
JKYi::http::WSConnection::Create	JKYi/http/ws_connection.h	/^    static std::pair<HttpResult::ptr,WSConnection::ptr> Create(const std::string& uri,$/;"	p	class:JKYi::http::WSConnection	access:public	signature:(const std::string& uri, uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {})
JKYi::http::WSConnection::WSConnection	JKYi/http/ws_connection.cc	/^WSConnection::WSConnection(Socket::ptr sock,bool owner)$/;"	f	class:JKYi::http::WSConnection	signature:(Socket::ptr sock,bool owner)
JKYi::http::WSConnection::WSConnection	JKYi/http/ws_connection.h	/^    WSConnection(Socket::ptr  sock,bool owner = true);$/;"	p	class:JKYi::http::WSConnection	access:public	signature:(Socket::ptr sock,bool owner = true)
JKYi::http::WSConnection::ping	JKYi/http/ws_connection.cc	/^int32_t WSConnection::ping(){$/;"	f	class:JKYi::http::WSConnection	signature:()
JKYi::http::WSConnection::ping	JKYi/http/ws_connection.h	/^    int32_t ping();$/;"	p	class:JKYi::http::WSConnection	access:public	signature:()
JKYi::http::WSConnection::pong	JKYi/http/ws_connection.cc	/^int32_t WSConnection::pong(){$/;"	f	class:JKYi::http::WSConnection	signature:()
JKYi::http::WSConnection::pong	JKYi/http/ws_connection.h	/^    int32_t pong();$/;"	p	class:JKYi::http::WSConnection	access:public	signature:()
JKYi::http::WSConnection::ptr	JKYi/http/ws_connection.h	/^    typedef std::shared_ptr<WSConnection> ptr;$/;"	t	class:JKYi::http::WSConnection	access:public
JKYi::http::WSConnection::recvMessage	JKYi/http/ws_connection.cc	/^WSFrameMessage::ptr WSConnection::recvMessage(){$/;"	f	class:JKYi::http::WSConnection	signature:()
JKYi::http::WSConnection::recvMessage	JKYi/http/ws_connection.h	/^    WSFrameMessage::ptr recvMessage();$/;"	p	class:JKYi::http::WSConnection	access:public	signature:()
JKYi::http::WSConnection::sendMessage	JKYi/http/ws_connection.cc	/^int32_t WSConnection::sendMessage(WSFrameMessage::ptr msg,bool fin){$/;"	f	class:JKYi::http::WSConnection	signature:(WSFrameMessage::ptr msg,bool fin)
JKYi::http::WSConnection::sendMessage	JKYi/http/ws_connection.cc	/^int32_t WSConnection::sendMessage(const std::string& msg,int32_t opcode,bool fin){$/;"	f	class:JKYi::http::WSConnection	signature:(const std::string& msg,int32_t opcode,bool fin)
JKYi::http::WSConnection::sendMessage	JKYi/http/ws_connection.h	/^    int32_t sendMessage(WSFrameMessage::ptr msg,bool fin = true);$/;"	p	class:JKYi::http::WSConnection	access:public	signature:(WSFrameMessage::ptr msg,bool fin = true)
JKYi::http::WSConnection::sendMessage	JKYi/http/ws_connection.h	/^    int32_t sendMessage(const std::string& msg,int32_t opcode = WSFrameHead::TEXT_FRAME,$/;"	p	class:JKYi::http::WSConnection	access:public	signature:(const std::string& msg,int32_t opcode = WSFrameHead::TEXT_FRAME, bool fin = true)
JKYi::http::WSFrameHead	JKYi/http/ws_session.h	/^struct WSFrameHead{$/;"	s	namespace:JKYi::http
JKYi::http::WSFrameHead::BIN_FRAME	JKYi/http/ws_session.h	/^        BIN_FRAME = 2,$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
JKYi::http::WSFrameHead::CLOSE	JKYi/http/ws_session.h	/^        CLOSE = 8,$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
JKYi::http::WSFrameHead::CONTINUE	JKYi/http/ws_session.h	/^        CONTINUE = 0,$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
JKYi::http::WSFrameHead::OPCODE	JKYi/http/ws_session.h	/^    enum OPCODE{$/;"	g	struct:JKYi::http::WSFrameHead	access:public
JKYi::http::WSFrameHead::PING	JKYi/http/ws_session.h	/^        PING = 9,$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
JKYi::http::WSFrameHead::PONG	JKYi/http/ws_session.h	/^        PONG = 0xA$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
JKYi::http::WSFrameHead::TEXT_FRAME	JKYi/http/ws_session.h	/^        TEXT_FRAME = 1,$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
JKYi::http::WSFrameHead::fin	JKYi/http/ws_session.h	/^   bool fin: 1;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
JKYi::http::WSFrameHead::mask	JKYi/http/ws_session.h	/^   bool mask: 1;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
JKYi::http::WSFrameHead::opcode	JKYi/http/ws_session.h	/^   uint32_t opcode: 4; $/;"	m	struct:JKYi::http::WSFrameHead	access:public
JKYi::http::WSFrameHead::payload	JKYi/http/ws_session.h	/^   uint32_t payload: 7;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
JKYi::http::WSFrameHead::rsv1	JKYi/http/ws_session.h	/^   bool rsv1: 1;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
JKYi::http::WSFrameHead::rsv2	JKYi/http/ws_session.h	/^   bool rsv2: 1;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
JKYi::http::WSFrameHead::rsv3	JKYi/http/ws_session.h	/^   bool rsv3: 1;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
JKYi::http::WSFrameHead::toString	JKYi/http/ws_session.cc	/^std::string WSFrameHead::toString()const {$/;"	f	class:JKYi::http::WSFrameHead	signature:() const
JKYi::http::WSFrameHead::toString	JKYi/http/ws_session.h	/^   std::string toString()const;$/;"	p	struct:JKYi::http::WSFrameHead	access:public	signature:() const
JKYi::http::WSFrameMessage	JKYi/http/ws_session.h	/^class WSFrameMessage{$/;"	c	namespace:JKYi::http
JKYi::http::WSFrameMessage::WSFrameMessage	JKYi/http/ws_session.cc	/^WSFrameMessage::WSFrameMessage(int opcode,const std::string& msg)$/;"	f	class:JKYi::http::WSFrameMessage	signature:(int opcode,const std::string& msg)
JKYi::http::WSFrameMessage::WSFrameMessage	JKYi/http/ws_session.h	/^    WSFrameMessage(int opcode = 0,const std::string& data = "");$/;"	p	class:JKYi::http::WSFrameMessage	access:public	signature:(int opcode = 0,const std::string& data = Ó)
JKYi::http::WSFrameMessage::getData	JKYi/http/ws_session.h	/^    const std::string& getData()const { return m_data; }$/;"	f	class:JKYi::http::WSFrameMessage	access:public	signature:() const
JKYi::http::WSFrameMessage::getData	JKYi/http/ws_session.h	/^    std::string& getData(){ return m_data; }$/;"	f	class:JKYi::http::WSFrameMessage	access:public	signature:()
JKYi::http::WSFrameMessage::getOpcode	JKYi/http/ws_session.h	/^    int getOpcode()const { return m_opcode; }$/;"	f	class:JKYi::http::WSFrameMessage	access:public	signature:() const
JKYi::http::WSFrameMessage::m_data	JKYi/http/ws_session.h	/^    std::string m_data;$/;"	m	class:JKYi::http::WSFrameMessage	access:private
JKYi::http::WSFrameMessage::m_opcode	JKYi/http/ws_session.h	/^    int m_opcode;$/;"	m	class:JKYi::http::WSFrameMessage	access:private
JKYi::http::WSFrameMessage::ptr	JKYi/http/ws_session.h	/^    typedef std::shared_ptr<WSFrameMessage> ptr;$/;"	t	class:JKYi::http::WSFrameMessage	access:public
JKYi::http::WSFrameMessage::setData	JKYi/http/ws_session.h	/^    void setData(const std::string& data){ m_data = data; }$/;"	f	class:JKYi::http::WSFrameMessage	access:public	signature:(const std::string& data)
JKYi::http::WSFrameMessage::setOpcode	JKYi/http/ws_session.h	/^    void setOpcode(int v) { m_opcode = v; }$/;"	f	class:JKYi::http::WSFrameMessage	access:public	signature:(int v)
JKYi::http::WSPing	JKYi/http/ws_session.cc	/^int32_t WSPing(Stream * stream){$/;"	f	namespace:JKYi::http	signature:(Stream * stream)
JKYi::http::WSPing	JKYi/http/ws_session.h	/^int32_t WSPing(Stream * stream);$/;"	p	namespace:JKYi::http	signature:(Stream * stream)
JKYi::http::WSPong	JKYi/http/ws_session.cc	/^int32_t WSPong(Stream * stream){$/;"	f	namespace:JKYi::http	signature:(Stream * stream)
JKYi::http::WSPong	JKYi/http/ws_session.h	/^int32_t WSPong(Stream * stream);$/;"	p	namespace:JKYi::http	signature:(Stream * stream)
JKYi::http::WSRecvMessage	JKYi/http/ws_session.cc	/^WSFrameMessage::ptr WSRecvMessage(Stream * stream,bool client){$/;"	f	namespace:JKYi::http	signature:(Stream * stream,bool client)
JKYi::http::WSRecvMessage	JKYi/http/ws_session.h	/^WSFrameMessage::ptr WSRecvMessage(Stream * stream,bool client);$/;"	p	namespace:JKYi::http	signature:(Stream * stream,bool client)
JKYi::http::WSSendMessage	JKYi/http/ws_session.cc	/^int32_t WSSendMessage(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin){$/;"	f	namespace:JKYi::http	signature:(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin)
JKYi::http::WSSendMessage	JKYi/http/ws_session.h	/^int32_t WSSendMessage(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin);$/;"	p	namespace:JKYi::http	signature:(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin)
JKYi::http::WSServer	JKYi/http/ws_server.h	/^class WSServer:public TcpServer{$/;"	c	namespace:JKYi::http	inherits:TcpServer
JKYi::http::WSServer::WSServer	JKYi/http/ws_server.cc	/^WSServer::WSServer(JKYi::IOManager * worker,JKYi::IOManager * io_worker,$/;"	f	class:JKYi::http::WSServer	signature:(JKYi::IOManager * worker,JKYi::IOManager * io_worker, JKYi::IOManager * accept_worker)
JKYi::http::WSServer::WSServer	JKYi/http/ws_server.h	/^    WSServer(JKYi::IOManager * worker = JKYi::IOManager::GetThis(),$/;"	p	class:JKYi::http::WSServer	access:public	signature:(JKYi::IOManager * worker = JKYi::IOManager::GetThis(), JKYi::IOManager * io_worker = JKYi::IOManager::GetThis(), JKYi::IOManager * accept_worker = JKYi::IOManager::GetThis())
JKYi::http::WSServer::getWSServletDispatch	JKYi/http/ws_server.h	/^    WSServletDispatch::ptr getWSServletDispatch()const { return m_dispatch; }$/;"	f	class:JKYi::http::WSServer	access:public	signature:() const
JKYi::http::WSServer::handleClient	JKYi/http/ws_server.cc	/^void WSServer::handleClient(Socket::ptr client){$/;"	f	class:JKYi::http::WSServer	signature:(Socket::ptr client)
JKYi::http::WSServer::m_dispatch	JKYi/http/ws_server.h	/^    WSServletDispatch::ptr m_dispatch;$/;"	m	class:JKYi::http::WSServer	access:private
JKYi::http::WSServer::override	JKYi/http/ws_server.h	/^    virtual void handleClient(Socket::ptr client)override;$/;"	m	class:JKYi::http::WSServer	access:protected
JKYi::http::WSServer::ptr	JKYi/http/ws_server.h	/^    typedef std::shared_ptr<WSServer> ptr;$/;"	t	class:JKYi::http::WSServer	access:public
JKYi::http::WSServer::setWSServletDispatch	JKYi/http/ws_server.h	/^    void setWSServletDispatch(WSServletDispatch::ptr v) { m_dispatch = v; }$/;"	f	class:JKYi::http::WSServer	access:public	signature:(WSServletDispatch::ptr v)
JKYi::http::WSServlet	JKYi/http/ws_servlet.h	/^class WSServlet:public Servlet{$/;"	c	namespace:JKYi::http	inherits:Servlet
JKYi::http::WSServlet::WSServlet	JKYi/http/ws_servlet.h	/^    WSServlet(const std::string& name)$/;"	f	class:JKYi::http::WSServlet	access:public	signature:(const std::string& name)
JKYi::http::WSServlet::getName	JKYi/http/ws_servlet.h	/^    const std::string& getName()const { return m_name; }$/;"	f	class:JKYi::http::WSServlet	access:public	signature:() const
JKYi::http::WSServlet::handle	JKYi/http/ws_servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr header,JKYi::http::WSFrameMessage::ptr msg,JKYi::http::WSSession::ptr session) = 0;$/;"	p	class:JKYi::http::WSServlet	access:public	signature:(JKYi::http::HttpRequest::ptr header,JKYi::http::WSFrameMessage::ptr msg,JKYi::http::WSSession::ptr session)
JKYi::http::WSServlet::m_name	JKYi/http/ws_servlet.h	/^    std::string m_name;$/;"	m	class:JKYi::http::WSServlet	access:protected
JKYi::http::WSServlet::onClose	JKYi/http/ws_servlet.h	/^    virtual int32_t onClose(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session) = 0;$/;"	p	class:JKYi::http::WSServlet	access:public	signature:(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session)
JKYi::http::WSServlet::onConnect	JKYi/http/ws_servlet.h	/^    virtual int32_t onConnect(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session) = 0;$/;"	p	class:JKYi::http::WSServlet	access:public	signature:(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session)
JKYi::http::WSServlet::ptr	JKYi/http/ws_servlet.h	/^    typedef std::shared_ptr<WSServlet> ptr;$/;"	t	class:JKYi::http::WSServlet	access:public
JKYi::http::WSServlet::~WSServlet	JKYi/http/ws_servlet.h	/^    virtual ~WSServlet(){}$/;"	f	class:JKYi::http::WSServlet	access:public	signature:()
JKYi::http::WSServletDispatch	JKYi/http/ws_servlet.h	/^class WSServletDispatch:public ServletDispatch{$/;"	c	namespace:JKYi::http	inherits:ServletDispatch
JKYi::http::WSServletDispatch::RWMutexType	JKYi/http/ws_servlet.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:JKYi::http::WSServletDispatch	access:public
JKYi::http::WSServletDispatch::WSServletDispatch	JKYi/http/ws_servlet.cc	/^WSServletDispatch::WSServletDispatch(){$/;"	f	class:JKYi::http::WSServletDispatch	signature:()
JKYi::http::WSServletDispatch::WSServletDispatch	JKYi/http/ws_servlet.h	/^    WSServletDispatch();$/;"	p	class:JKYi::http::WSServletDispatch	access:public	signature:()
JKYi::http::WSServletDispatch::addGlobServlet	JKYi/http/ws_servlet.cc	/^void WSServletDispatch::addGlobServlet(const std::string& uri,$/;"	f	class:JKYi::http::WSServletDispatch	signature:(const std::string& uri, FunctionWSServlet::callback cb, FunctionWSServlet::on_connect_cb connect_cb, FunctionWSServlet::on_close_cb close_cb)
JKYi::http::WSServletDispatch::addGlobServlet	JKYi/http/ws_servlet.h	/^    void addGlobServlet(const std::string& uri,$/;"	p	class:JKYi::http::WSServletDispatch	access:public	signature:(const std::string& uri, FunctionWSServlet::callback cb, FunctionWSServlet::on_connect_cb connect_cb = nullptr, FunctionWSServlet::on_close_cb close_cb = nullptr)
JKYi::http::WSServletDispatch::addServlet	JKYi/http/ws_servlet.cc	/^void WSServletDispatch::addServlet(const std::string& uri,$/;"	f	class:JKYi::http::WSServletDispatch	signature:(const std::string& uri, FunctionWSServlet::callback cb, FunctionWSServlet::on_connect_cb connect_cb, FunctionWSServlet::on_close_cb close_cb)
JKYi::http::WSServletDispatch::addServlet	JKYi/http/ws_servlet.h	/^    void addServlet(const std::string& uri,$/;"	p	class:JKYi::http::WSServletDispatch	access:public	signature:(const std::string& uri, FunctionWSServlet::callback cb, FunctionWSServlet::on_connect_cb connect_cb = nullptr, FunctionWSServlet::on_close_cb close_cb = nullptr)
JKYi::http::WSServletDispatch::getWSServlet	JKYi/http/ws_servlet.cc	/^WSServlet::ptr WSServletDispatch::getWSServlet(const std::string& uri){$/;"	f	class:JKYi::http::WSServletDispatch	signature:(const std::string& uri)
JKYi::http::WSServletDispatch::getWSServlet	JKYi/http/ws_servlet.h	/^    WSServlet::ptr getWSServlet(const std::string& uri);$/;"	p	class:JKYi::http::WSServletDispatch	access:public	signature:(const std::string& uri)
JKYi::http::WSServletDispatch::ptr	JKYi/http/ws_servlet.h	/^    typedef std::shared_ptr<WSServletDispatch> ptr;$/;"	t	class:JKYi::http::WSServletDispatch	access:public
JKYi::http::WSSession	JKYi/http/ws_session.h	/^class WSSession:public HttpSession{$/;"	c	namespace:JKYi::http	inherits:HttpSession
JKYi::http::WSSession::WSSession	JKYi/http/ws_session.cc	/^WSSession::WSSession(Socket::ptr sock,bool owner)$/;"	f	class:JKYi::http::WSSession	signature:(Socket::ptr sock,bool owner)
JKYi::http::WSSession::WSSession	JKYi/http/ws_session.h	/^    WSSession(Socket::ptr sock,bool owner = true);$/;"	p	class:JKYi::http::WSSession	access:public	signature:(Socket::ptr sock,bool owner = true)
JKYi::http::WSSession::handleClientShake	JKYi/http/ws_session.h	/^    bool handleClientShake();$/;"	p	class:JKYi::http::WSSession	access:private	signature:()
JKYi::http::WSSession::handleServerShake	JKYi/http/ws_session.h	/^    bool handleServerShake();$/;"	p	class:JKYi::http::WSSession	access:private	signature:()
JKYi::http::WSSession::handleShake	JKYi/http/ws_session.cc	/^HttpRequest::ptr WSSession::handleShake(){$/;"	f	class:JKYi::http::WSSession	signature:()
JKYi::http::WSSession::handleShake	JKYi/http/ws_session.h	/^    HttpRequest::ptr handleShake();$/;"	p	class:JKYi::http::WSSession	access:public	signature:()
JKYi::http::WSSession::ping	JKYi/http/ws_session.cc	/^int32_t WSSession::ping(){$/;"	f	class:JKYi::http::WSSession	signature:()
JKYi::http::WSSession::ping	JKYi/http/ws_session.h	/^    int32_t ping();$/;"	p	class:JKYi::http::WSSession	access:public	signature:()
JKYi::http::WSSession::pong	JKYi/http/ws_session.cc	/^int32_t WSSession::pong(){$/;"	f	class:JKYi::http::WSSession	signature:()
JKYi::http::WSSession::pong	JKYi/http/ws_session.h	/^    int32_t pong();$/;"	p	class:JKYi::http::WSSession	access:public	signature:()
JKYi::http::WSSession::ptr	JKYi/http/ws_session.h	/^    typedef std::shared_ptr<WSSession> ptr;$/;"	t	class:JKYi::http::WSSession	access:public
JKYi::http::WSSession::recvMessage	JKYi/http/ws_session.cc	/^WSFrameMessage::ptr WSSession::recvMessage(){$/;"	f	class:JKYi::http::WSSession	signature:()
JKYi::http::WSSession::recvMessage	JKYi/http/ws_session.h	/^    WSFrameMessage::ptr recvMessage();$/;"	p	class:JKYi::http::WSSession	access:public	signature:()
JKYi::http::WSSession::sendMessage	JKYi/http/ws_session.cc	/^int32_t WSSession::sendMessage(WSFrameMessage::ptr msg,$/;"	f	class:JKYi::http::WSSession	signature:(WSFrameMessage::ptr msg, bool fin)
JKYi::http::WSSession::sendMessage	JKYi/http/ws_session.cc	/^int32_t WSSession::sendMessage(const std::string& msg,int32_t opcode,bool fin){$/;"	f	class:JKYi::http::WSSession	signature:(const std::string& msg,int32_t opcode,bool fin)
JKYi::http::WSSession::sendMessage	JKYi/http/ws_session.h	/^    int32_t sendMessage(WSFrameMessage::ptr msg,bool fin = true);$/;"	p	class:JKYi::http::WSSession	access:public	signature:(WSFrameMessage::ptr msg,bool fin = true)
JKYi::http::WSSession::sendMessage	JKYi/http/ws_session.h	/^    int32_t sendMessage(const std::string& msg,int32_t opcode = WSFrameHead::TEXT_FRAME,bool fin = true);$/;"	p	class:JKYi::http::WSSession	access:public	signature:(const std::string& msg,int32_t opcode = WSFrameHead::TEXT_FRAME,bool fin = true)
JKYi::http::__anon1::_RequestSizeIniter	JKYi/http/http_parser.cc	/^struct _RequestSizeIniter{$/;"	s	namespace:JKYi::http::__anon1	file:
JKYi::http::__anon1::_RequestSizeIniter::_RequestSizeIniter	JKYi/http/http_parser.cc	/^        _RequestSizeIniter(){$/;"	f	struct:JKYi::http::__anon1::_RequestSizeIniter	access:public	signature:()
JKYi::http::__anon1::_init	JKYi/http/http_parser.cc	/^static _RequestSizeIniter _init;$/;"	m	namespace:JKYi::http::__anon1	file:
JKYi::http::checkGetAs	JKYi/http/http.h	/^bool checkGetAs(const MapType&m,const std::string&key,T& val,const T&def=T()){$/;"	f	namespace:JKYi::http	signature:(const MapType&m,const std::string&key,T& val,const T&def=T())
JKYi::http::g_http_request_buffer_size	JKYi/http/http_parser.cc	/^static JKYi::ConfigVar<uint64_t>::ptr g_http_request_buffer_size=JKYi::Config::Lookup("http.request.buffer_size",(uint64_t)(4*1024),"http request buffer size");$/;"	m	namespace:JKYi::http	file:
JKYi::http::g_http_request_max_body_size	JKYi/http/http_parser.cc	/^static JKYi::ConfigVar<uint64_t>::ptr g_http_request_max_body_size=JKYi::Config::Lookup("http.request.max_body_size",(uint64_t)(64 * 1024 * 1024),"http request max body size");$/;"	m	namespace:JKYi::http	file:
JKYi::http::g_http_response_buffer_size	JKYi/http/http_parser.cc	/^static JKYi::ConfigVar<uint64_t>::ptr g_http_response_buffer_size=JKYi::Config::Lookup("http.response.buffer_size",(uint64_t)(4*1024),"http response buffer size");$/;"	m	namespace:JKYi::http	file:
JKYi::http::g_http_response_max_body_size	JKYi/http/http_parser.cc	/^static JKYi::ConfigVar<uint64_t>::ptr g_http_response_max_body_size=JKYi::Config::Lookup("http.response.max_body_size",(uint64_t)(64*1024*1024),"http response max body size");$/;"	m	namespace:JKYi::http	file:
JKYi::http::g_logger	JKYi/http/http_connection.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
JKYi::http::g_logger	JKYi/http/http_parser.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
JKYi::http::g_logger	JKYi/http/http_server.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
JKYi::http::g_logger	JKYi/http/servlet.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
JKYi::http::g_logger	JKYi/http/ws_server.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
JKYi::http::g_logger	JKYi/http/ws_session.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
JKYi::http::g_websocket_message_max_size	JKYi/http/ws_session.cc	/^ConfigVar<uint32_t>::ptr g_websocket_message_max_size = $/;"	m	namespace:JKYi::http	file:
JKYi::http::getAs	JKYi/http/http.h	/^T getAs(const MapType&m,const std::string&key,const T& def=T()){$/;"	f	namespace:JKYi::http	signature:(const MapType&m,const std::string&key,const T& def=T())
JKYi::http::on_request_fragment	JKYi/http/http_parser.cc	/^void on_request_fragment(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::on_request_header_done	JKYi/http/http_parser.cc	/^void on_request_header_done(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::on_request_http_field	JKYi/http/http_parser.cc	/^void on_request_http_field(void * data,const char * field,size_t flen,$/;"	f	namespace:JKYi::http	signature:(void * data,const char * field,size_t flen, const char * value,size_t vlen)
JKYi::http::on_request_method	JKYi/http/http_parser.cc	/^void on_request_method(void * data,const char* at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char* at,size_t length)
JKYi::http::on_request_path	JKYi/http/http_parser.cc	/^void on_request_path(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::on_request_query	JKYi/http/http_parser.cc	/^void on_request_query(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::on_request_uri	JKYi/http/http_parser.cc	/^void on_request_uri(void *data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void *data,const char * at,size_t length)
JKYi::http::on_request_version	JKYi/http/http_parser.cc	/^void on_request_version(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::on_response_chunk	JKYi/http/http_parser.cc	/^void on_response_chunk(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::on_response_header_done	JKYi/http/http_parser.cc	/^void on_response_header_done(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::on_response_http_field	JKYi/http/http_parser.cc	/^void on_response_http_field(void * data,const char * field,size_t flen,$/;"	f	namespace:JKYi::http	signature:(void * data,const char * field,size_t flen, const char * value,size_t vlen)
JKYi::http::on_response_last_chunk	JKYi/http/http_parser.cc	/^void on_response_last_chunk(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::on_response_reason	JKYi/http/http_parser.cc	/^void on_response_reason(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::on_response_status	JKYi/http/http_parser.cc	/^void on_response_status(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::on_response_version	JKYi/http/http_parser.cc	/^void on_response_version(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
JKYi::http::operator <<	JKYi/http/http.cc	/^std::ostream& operator<< (std::ostream& os,const HttpRequest& req){$/;"	f	namespace:JKYi::http	signature:(std::ostream& os,const HttpRequest& req)
JKYi::http::operator <<	JKYi/http/http.cc	/^std::ostream& operator<< (std::ostream& os,const HttpResponse& rsp){$/;"	f	namespace:JKYi::http	signature:(std::ostream& os,const HttpResponse& rsp)
JKYi::http::operator <<	JKYi/http/http.h	/^std::ostream& operator<< (std::ostream& os,const HttpRequest&req);$/;"	p	namespace:JKYi::http	signature:(std::ostream& os,const HttpRequest&req)
JKYi::http::operator <<	JKYi/http/http.h	/^std::ostream& operator<< (std::ostream& os,const HttpStatus& rsp);$/;"	p	namespace:JKYi::http	signature:(std::ostream& os,const HttpStatus& rsp)
JKYi::http::s_http_request_buffer_size	JKYi/http/http_parser.cc	/^static uint64_t s_http_request_buffer_size=0;$/;"	m	namespace:JKYi::http	file:
JKYi::http::s_http_request_max_body_size	JKYi/http/http_parser.cc	/^static uint64_t s_http_request_max_body_size=0;$/;"	m	namespace:JKYi::http	file:
JKYi::http::s_http_response_buffer_size	JKYi/http/http_parser.cc	/^static uint64_t s_http_response_buffer_size=0;$/;"	m	namespace:JKYi::http	file:
JKYi::http::s_http_response_max_body_size	JKYi/http/http_parser.cc	/^static uint64_t s_http_response_max_body_size=0;$/;"	m	namespace:JKYi::http	file:
JKYi::http::s_method_string	JKYi/http/http.cc	/^static const char*s_method_string[]={$/;"	m	namespace:JKYi::http	file:
JKYi::implicit_cast	JKYi/Types.h	/^inline To implicit_cast(From const & f){$/;"	f	namespace:JKYi	signature:(From const & f)
JKYi::is_hook_enable	JKYi/hook.cc	/^bool is_hook_enable(){$/;"	f	namespace:JKYi	signature:()
JKYi::is_hook_enable	JKYi/hook.h	/^bool is_hook_enable();$/;"	p	namespace:JKYi	signature:()
JKYi::makeWeakCallback	JKYi/WeakCallback.h	/^WeakCallback<CLASS,ARGS...> makeWeakCallback(const std::shared_ptr<CLASS>& object,void (CLASS::* function)(ARGS...)){$/;"	f	namespace:JKYi	signature:(const std::shared_ptr<CLASS>& object,void (CLASS::* function)(ARGS...))
JKYi::makeWeakCallback	JKYi/WeakCallback.h	/^WeakCallback<CLASS,ARGS...> makeWeakCallback(const std::shared_ptr<CLASS>& object,void (CLASS::* function)(ARGS...)const){$/;"	f	namespace:JKYi	signature:(const std::shared_ptr<CLASS>& object,void (CLASS::* function)(ARGS...)const)
JKYi::my_mysql_query	JKYi/db/mysql.cc	/^static MYSQL_RES* my_mysql_query(MYSQL* mysql,const char * sql){$/;"	f	namespace:JKYi	signature:(MYSQL* mysql,const char * sql)
JKYi::mysql_init	JKYi/db/mysql.cc	/^static MYSQL* mysql_init(std::map<std::string,std::string>& params,$/;"	f	namespace:JKYi	signature:(std::map<std::string,std::string>& params, const int& timeout)
JKYi::mysql_time_to_time_t	JKYi/db/mysql.cc	/^bool mysql_time_to_time_t(const MYSQL_TIME& mt,time_t& ts){$/;"	f	namespace:JKYi	signature:(const MYSQL_TIME& mt,time_t& ts)
JKYi::mysql_time_to_time_t	JKYi/db/mysql.h	/^bool mysql_time_to_time_t(const MYSQL_TIME& mt,time_t& ts);$/;"	p	namespace:JKYi	signature:(const MYSQL_TIME& mt,time_t& ts)
JKYi::net	JKYi/reactor/Buffer.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/Buffer.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/Callbacks.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/Connector.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/Connector.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/EventLoop.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/EventLoop.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/EventLoopThread.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/EventLoopThread.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/EventLoopThreadPool.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/EventLoopThreadPool.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/Socket.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/Socket.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/SocketsOps.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/StringPiece.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/TcpClient.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/TcpClient.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/TcpConnection.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/TcpConnection.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/TcpServer.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/TcpServer.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/Thread.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/Thread.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/acceptor.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/acceptor.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/channel.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/channel.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/poller.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/poller.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/poller/epollPoller.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/poller/epollPoller.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/poller/pollPoller.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/poller/pollPoller.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/timer.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/timer.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/timerId.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/reactor/timerQueue.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/reactor/timerQueue.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net	JKYi/timestamp.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
JKYi::net	JKYi/timestamp.h	/^namespace net{$/;"	n	namespace:JKYi
JKYi::net::Acceptor	JKYi/reactor/acceptor.h	/^class Acceptor:public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::Acceptor::Acceptor	JKYi/reactor/acceptor.cc	/^Acceptor::Acceptor(EventLoop* loop,const Address::ptr& address,bool reuseport)$/;"	f	class:JKYi::net::Acceptor	signature:(EventLoop* loop,const Address::ptr& address,bool reuseport)
JKYi::net::Acceptor::Acceptor	JKYi/reactor/acceptor.h	/^    Acceptor(EventLoop* loop,const Address::ptr& address,bool reuseport);$/;"	p	class:JKYi::net::Acceptor	access:public	signature:(EventLoop* loop,const Address::ptr& address,bool reuseport)
JKYi::net::Acceptor::NewConnectionCallback	JKYi/reactor/acceptor.h	/^    typedef std::function<void(int sockfd,const Address::ptr)> NewConnectionCallback;$/;"	t	class:JKYi::net::Acceptor	access:public
JKYi::net::Acceptor::acceptChannel_	JKYi/reactor/acceptor.h	/^    Channel acceptChannel_;$/;"	m	class:JKYi::net::Acceptor	access:private
JKYi::net::Acceptor::acceptSocket_	JKYi/reactor/acceptor.h	/^    Socket  acceptSocket_;$/;"	m	class:JKYi::net::Acceptor	access:private
JKYi::net::Acceptor::handleRead	JKYi/reactor/acceptor.cc	/^void Acceptor::handleRead(){$/;"	f	class:JKYi::net::Acceptor	signature:()
JKYi::net::Acceptor::handleRead	JKYi/reactor/acceptor.h	/^    void handleRead();$/;"	p	class:JKYi::net::Acceptor	access:private	signature:()
JKYi::net::Acceptor::idleFd_	JKYi/reactor/acceptor.h	/^    int idleFd_;$/;"	m	class:JKYi::net::Acceptor	access:private
JKYi::net::Acceptor::listen	JKYi/reactor/acceptor.cc	/^void Acceptor::listen(){$/;"	f	class:JKYi::net::Acceptor	signature:()
JKYi::net::Acceptor::listen	JKYi/reactor/acceptor.h	/^    void listen();$/;"	p	class:JKYi::net::Acceptor	access:public	signature:()
JKYi::net::Acceptor::listening	JKYi/reactor/acceptor.h	/^    bool listening()const { return listening_; }$/;"	f	class:JKYi::net::Acceptor	access:public	signature:() const
JKYi::net::Acceptor::listening_	JKYi/reactor/acceptor.h	/^    bool listening_;$/;"	m	class:JKYi::net::Acceptor	access:private
JKYi::net::Acceptor::loop_	JKYi/reactor/acceptor.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::Acceptor	access:private
JKYi::net::Acceptor::newConnectionCallback_	JKYi/reactor/acceptor.h	/^    NewConnectionCallback newConnectionCallback_;$/;"	m	class:JKYi::net::Acceptor	access:private
JKYi::net::Acceptor::setNewConnectionCallback	JKYi/reactor/acceptor.h	/^    void setNewConnectionCallback(const NewConnectionCallback& cb){$/;"	f	class:JKYi::net::Acceptor	access:public	signature:(const NewConnectionCallback& cb)
JKYi::net::Acceptor::~Acceptor	JKYi/reactor/acceptor.cc	/^Acceptor::~Acceptor(){$/;"	f	class:JKYi::net::Acceptor	signature:()
JKYi::net::Acceptor::~Acceptor	JKYi/reactor/acceptor.h	/^    ~Acceptor();$/;"	p	class:JKYi::net::Acceptor	access:public	signature:()
JKYi::net::Buffer	JKYi/reactor/Buffer.h	/^class Buffer{$/;"	c	namespace:JKYi::net
JKYi::net::Buffer::Buffer	JKYi/reactor/Buffer.h	/^    explicit Buffer(size_t initialSize = kInitialSize)$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t initialSize = kInitialSize)
JKYi::net::Buffer::append	JKYi/reactor/Buffer.h	/^    void append(const StringPiece& str){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const StringPiece& str)
JKYi::net::Buffer::append	JKYi/reactor/Buffer.h	/^    void append(const char * data,size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const char * data,size_t len)
JKYi::net::Buffer::append	JKYi/reactor/Buffer.h	/^    void append(const void * data,size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const void * data,size_t len)
JKYi::net::Buffer::appendInt16	JKYi/reactor/Buffer.h	/^    void appendInt16(int16_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int16_t x)
JKYi::net::Buffer::appendInt32	JKYi/reactor/Buffer.h	/^    void appendInt32(int32_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int32_t x)
JKYi::net::Buffer::appendInt64	JKYi/reactor/Buffer.h	/^    void appendInt64(int64_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int64_t x)
JKYi::net::Buffer::appendInt8	JKYi/reactor/Buffer.h	/^    void appendInt8(int8_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int8_t x)
JKYi::net::Buffer::begin	JKYi/reactor/Buffer.h	/^    char* begin(){$/;"	f	class:JKYi::net::Buffer	access:private	signature:()
JKYi::net::Buffer::begin	JKYi/reactor/Buffer.h	/^    const char* begin()const{$/;"	f	class:JKYi::net::Buffer	access:private	signature:() const
JKYi::net::Buffer::beginWrite	JKYi/reactor/Buffer.h	/^    char * beginWrite(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::beginWrite	JKYi/reactor/Buffer.h	/^    const char * beginWrite()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::buffer_	JKYi/reactor/Buffer.h	/^    std::vector<char> buffer_;$/;"	m	class:JKYi::net::Buffer	access:private
JKYi::net::Buffer::ensureWritableBytes	JKYi/reactor/Buffer.h	/^    void ensureWritableBytes(size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t len)
JKYi::net::Buffer::findCRLF	JKYi/reactor/Buffer.h	/^    const char * findCRLF()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::findCRLF	JKYi/reactor/Buffer.h	/^    const char * findCRLF(const char * start)const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const char * start) const
JKYi::net::Buffer::findEOL	JKYi/reactor/Buffer.h	/^    const char * findEOL()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::findEOL	JKYi/reactor/Buffer.h	/^    const char * findEOL(const char * start)const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const char * start) const
JKYi::net::Buffer::hasWritten	JKYi/reactor/Buffer.h	/^    void hasWritten(size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t len)
JKYi::net::Buffer::internalCapacity	JKYi/reactor/Buffer.h	/^    size_t internalCapacity()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::kCRLF	JKYi/reactor/Buffer.cc	/^const char Buffer::kCRLF[] = "\\r\\n";$/;"	m	class:JKYi::net::Buffer	file:
JKYi::net::Buffer::kCRLF	JKYi/reactor/Buffer.h	/^    static const char kCRLF[];      \/\/å­å¨æ¢è¡æ å¿$/;"	m	class:JKYi::net::Buffer	access:private
JKYi::net::Buffer::kCheapPrepend	JKYi/reactor/Buffer.cc	/^const size_t Buffer::kCheapPrepend;$/;"	m	class:JKYi::net::Buffer	file:
JKYi::net::Buffer::kCheapPrepend	JKYi/reactor/Buffer.h	/^    static const size_t kCheapPrepend = 8;           \/\/bufferä¸­é¢ççå¤´é¨çå¤§å°$/;"	m	class:JKYi::net::Buffer	access:public
JKYi::net::Buffer::kInitialSize	JKYi/reactor/Buffer.cc	/^const size_t Buffer::kInitialSize;$/;"	m	class:JKYi::net::Buffer	file:
JKYi::net::Buffer::kInitialSize	JKYi/reactor/Buffer.h	/^    static const size_t kInitialSize = 1024;         \/\/bufferé»è®¤çå¤§å°$/;"	m	class:JKYi::net::Buffer	access:public
JKYi::net::Buffer::makeSpace	JKYi/reactor/Buffer.h	/^    void makeSpace(size_t len){$/;"	f	class:JKYi::net::Buffer	access:private	signature:(size_t len)
JKYi::net::Buffer::peek	JKYi/reactor/Buffer.h	/^    const char * peek()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::peekInt16	JKYi/reactor/Buffer.h	/^    int16_t peekInt16()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::peekInt32	JKYi/reactor/Buffer.h	/^    int32_t peekInt32()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::peekInt64	JKYi/reactor/Buffer.h	/^    int64_t peekInt64()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::peekInt8	JKYi/reactor/Buffer.h	/^    int8_t peekInt8()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::prepend	JKYi/reactor/Buffer.h	/^    void prepend(const void * data,size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const void * data,size_t len)
JKYi::net::Buffer::prependInt16	JKYi/reactor/Buffer.h	/^    void prependInt16(int16_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int16_t x)
JKYi::net::Buffer::prependInt32	JKYi/reactor/Buffer.h	/^    void prependInt32(int32_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int32_t x)
JKYi::net::Buffer::prependInt64	JKYi/reactor/Buffer.h	/^    void prependInt64(int64_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int64_t x)
JKYi::net::Buffer::prependInt8	JKYi/reactor/Buffer.h	/^    void prependInt8(int8_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int8_t x)
JKYi::net::Buffer::prependableBytes	JKYi/reactor/Buffer.h	/^    size_t prependableBytes()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::readFd	JKYi/reactor/Buffer.cc	/^ssize_t Buffer::readFd(int fd,int * savedErrno){$/;"	f	class:JKYi::net::Buffer	signature:(int fd,int * savedErrno)
JKYi::net::Buffer::readFd	JKYi/reactor/Buffer.h	/^    ssize_t readFd(int fd,int* savedErrno);$/;"	p	class:JKYi::net::Buffer	access:public	signature:(int fd,int* savedErrno)
JKYi::net::Buffer::readInt16	JKYi/reactor/Buffer.h	/^    int16_t readInt16(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::readInt32	JKYi/reactor/Buffer.h	/^    int32_t readInt32(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::readInt64	JKYi/reactor/Buffer.h	/^    int64_t readInt64(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::readInt8	JKYi/reactor/Buffer.h	/^    int8_t readInt8(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::readableBytes	JKYi/reactor/Buffer.h	/^    size_t readableBytes()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::readerIndex_	JKYi/reactor/Buffer.h	/^    size_t readerIndex_;            \/\/å½åå¯ä»¥è¯»çç¬¬ä¸ä¸ªå­è$/;"	m	class:JKYi::net::Buffer	access:private
JKYi::net::Buffer::retrieve	JKYi/reactor/Buffer.h	/^    void retrieve(size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t len)
JKYi::net::Buffer::retrieveAll	JKYi/reactor/Buffer.h	/^    void retrieveAll(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::retrieveAllAsString	JKYi/reactor/Buffer.h	/^    std::string retrieveAllAsString(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::retrieveAsString	JKYi/reactor/Buffer.h	/^    std::string retrieveAsString(size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t len)
JKYi::net::Buffer::retrieveInt16	JKYi/reactor/Buffer.h	/^    void retrieveInt16(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::retrieveInt32	JKYi/reactor/Buffer.h	/^    void retrieveInt32(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::retrieveInt64	JKYi/reactor/Buffer.h	/^    void retrieveInt64(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::retrieveInt8	JKYi/reactor/Buffer.h	/^    void retrieveInt8(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
JKYi::net::Buffer::retrieveUntil	JKYi/reactor/Buffer.h	/^    void retrieveUntil(const char * end){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const char * end)
JKYi::net::Buffer::shrink	JKYi/reactor/Buffer.h	/^    void shrink(size_t reserve){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t reserve)
JKYi::net::Buffer::swap	JKYi/reactor/Buffer.h	/^    void swap(Buffer& rhv){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(Buffer& rhv)
JKYi::net::Buffer::toStringPiece	JKYi/reactor/Buffer.h	/^    StringPiece toStringPiece()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::unwrite	JKYi/reactor/Buffer.h	/^    void unwrite(size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t len)
JKYi::net::Buffer::writableBytes	JKYi/reactor/Buffer.h	/^    size_t writableBytes()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
JKYi::net::Buffer::writerIndex_	JKYi/reactor/Buffer.h	/^    size_t writerIndex_;            \/\/å½åå¯ä»¥åçç¬¬ä¸ä¸ªå­è$/;"	m	class:JKYi::net::Buffer	access:private
JKYi::net::Channel	JKYi/reactor/channel.h	/^class Channel{$/;"	c	namespace:JKYi::net
JKYi::net::Channel::Channel	JKYi/reactor/channel.cc	/^Channel::Channel(EventLoop* loop,int fd)$/;"	f	class:JKYi::net::Channel	signature:(EventLoop* loop,int fd)
JKYi::net::Channel::Channel	JKYi/reactor/channel.h	/^    Channel(EventLoop* loop,int fd);$/;"	p	class:JKYi::net::Channel	access:public	signature:(EventLoop* loop,int fd)
JKYi::net::Channel::EventCallback	JKYi/reactor/channel.h	/^    typedef std::function<void ()> EventCallback;$/;"	t	class:JKYi::net::Channel	access:public
JKYi::net::Channel::ReadEventCallback	JKYi/reactor/channel.h	/^    typedef std::function<void (Timestamp)> ReadEventCallback;$/;"	t	class:JKYi::net::Channel	access:public
JKYi::net::Channel::addedToLoop_	JKYi/reactor/channel.h	/^    bool addedToLoop_;$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::closeCallback_	JKYi/reactor/channel.h	/^    EventCallback closeCallback_;$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::disableAll	JKYi/reactor/channel.h	/^    void disableAll() { events_ = kNoneEvent; update();}$/;"	f	class:JKYi::net::Channel	access:public	signature:()
JKYi::net::Channel::disableReading	JKYi/reactor/channel.h	/^    void disableReading() { events_ &= ~kReadEvent; update(); }$/;"	f	class:JKYi::net::Channel	access:public	signature:()
JKYi::net::Channel::disableWriting	JKYi/reactor/channel.h	/^    void disableWriting() { events_ &= ~kWriteEvent; update(); }$/;"	f	class:JKYi::net::Channel	access:public	signature:()
JKYi::net::Channel::enableReading	JKYi/reactor/channel.h	/^    void enableReading() { events_ |= kReadEvent; update();}$/;"	f	class:JKYi::net::Channel	access:public	signature:()
JKYi::net::Channel::enableWriting	JKYi/reactor/channel.h	/^    void enableWriting() { events_ |= kWriteEvent; update(); }$/;"	f	class:JKYi::net::Channel	access:public	signature:()
JKYi::net::Channel::errorCallback_	JKYi/reactor/channel.h	/^    EventCallback errorCallback_;$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::eventHanding_	JKYi/reactor/channel.h	/^    bool eventHanding_;$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::eventsToString	JKYi/reactor/channel.cc	/^std::string Channel::eventsToString()const{$/;"	f	class:JKYi::net::Channel	signature:() const
JKYi::net::Channel::eventsToString	JKYi/reactor/channel.cc	/^std::string Channel::eventsToString(int fd,int ev){$/;"	f	class:JKYi::net::Channel	signature:(int fd,int ev)
JKYi::net::Channel::eventsToString	JKYi/reactor/channel.h	/^    static std::string eventsToString(int fd,int ev);$/;"	p	class:JKYi::net::Channel	access:private	signature:(int fd,int ev)
JKYi::net::Channel::eventsToString	JKYi/reactor/channel.h	/^    std::string eventsToString()const;$/;"	p	class:JKYi::net::Channel	access:public	signature:() const
JKYi::net::Channel::events_	JKYi/reactor/channel.h	/^    int events_;                  \/\/æ³¨åçäºä»¶$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::fd_	JKYi/reactor/channel.h	/^    const int fd_;                \/\/ æä»£è¡¨çæä»¶æè¿°ç¬¦$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::getEvents	JKYi/reactor/channel.h	/^    int getEvents()const { return events_; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
JKYi::net::Channel::getFd	JKYi/reactor/channel.h	/^    int getFd()const { return fd_; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
JKYi::net::Channel::getIndex	JKYi/reactor/channel.h	/^    int getIndex()const { return index_; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
JKYi::net::Channel::handleEvent	JKYi/reactor/channel.cc	/^void Channel::handleEvent(Timestamp receiveTime){$/;"	f	class:JKYi::net::Channel	signature:(Timestamp receiveTime)
JKYi::net::Channel::handleEvent	JKYi/reactor/channel.h	/^    void handleEvent(Timestamp receiveTime);$/;"	p	class:JKYi::net::Channel	access:public	signature:(Timestamp receiveTime)
JKYi::net::Channel::handleEventWithGuard	JKYi/reactor/channel.cc	/^void Channel::handleEventWithGuard(Timestamp receiveTime){$/;"	f	class:JKYi::net::Channel	signature:(Timestamp receiveTime)
JKYi::net::Channel::handleEventWithGuard	JKYi/reactor/channel.h	/^    void handleEventWithGuard(Timestamp timestamp);$/;"	p	class:JKYi::net::Channel	access:private	signature:(Timestamp timestamp)
JKYi::net::Channel::index_	JKYi/reactor/channel.h	/^    int index_;                   \/\/poll ä½ä¸ºåºå±ioå¤ç¨ç³»ç»è°ç¨æ¶ä½¿ç¨$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::isNoneEvent	JKYi/reactor/channel.h	/^    bool isNoneEvent()const{ return events_ == kNoneEvent; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
JKYi::net::Channel::isReading	JKYi/reactor/channel.h	/^    bool isReading()const { return events_ & kReadEvent; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
JKYi::net::Channel::isWriting	JKYi/reactor/channel.h	/^    bool isWriting()const { return events_ & kWriteEvent; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
JKYi::net::Channel::kNoneEvent	JKYi/reactor/channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:JKYi::net::Channel	file:
JKYi::net::Channel::kNoneEvent	JKYi/reactor/channel.h	/^    static const int kNoneEvent;$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::kReadEvent	JKYi/reactor/channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:JKYi::net::Channel	file:
JKYi::net::Channel::kReadEvent	JKYi/reactor/channel.h	/^    static const int kReadEvent;$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::kWriteEvent	JKYi/reactor/channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:JKYi::net::Channel	file:
JKYi::net::Channel::kWriteEvent	JKYi/reactor/channel.h	/^    static const int kWriteEvent;$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::loop_	JKYi/reactor/channel.h	/^    EventLoop* loop_;             \/\/å±äºé£ä¸ä¸ªeventloop$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::ownerLoop	JKYi/reactor/channel.h	/^    EventLoop* ownerLoop(){ return loop_; }$/;"	f	class:JKYi::net::Channel	access:public	signature:()
JKYi::net::Channel::ptr	JKYi/reactor/channel.h	/^    typedef std::shared_ptr<Channel> ptr;$/;"	t	class:JKYi::net::Channel	access:public
JKYi::net::Channel::readCallback_	JKYi/reactor/channel.h	/^    ReadEventCallback readCallback_;  \/\/æåºå±çè¯»åè°$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::remove	JKYi/reactor/channel.cc	/^void Channel::remove(){$/;"	f	class:JKYi::net::Channel	signature:()
JKYi::net::Channel::remove	JKYi/reactor/channel.h	/^    void remove();$/;"	p	class:JKYi::net::Channel	access:public	signature:()
JKYi::net::Channel::reventsToString	JKYi/reactor/channel.cc	/^std::string Channel::reventsToString()const{$/;"	f	class:JKYi::net::Channel	signature:() const
JKYi::net::Channel::reventsToString	JKYi/reactor/channel.h	/^    std::string reventsToString()const;$/;"	p	class:JKYi::net::Channel	access:public	signature:() const
JKYi::net::Channel::revents_	JKYi/reactor/channel.h	/^    int revents_;                 \/\/å®éåççäºä»¶$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::setCloseCallback	JKYi/reactor/channel.h	/^    void setCloseCallback(EventCallback cb) { closeCallback_ = std::move(cb); } $/;"	f	class:JKYi::net::Channel	access:public	signature:(EventCallback cb)
JKYi::net::Channel::setErrorCallback	JKYi/reactor/channel.h	/^    void setErrorCallback(EventCallback cb) { errorCallback_ = std::move(cb); }$/;"	f	class:JKYi::net::Channel	access:public	signature:(EventCallback cb)
JKYi::net::Channel::setIndex	JKYi/reactor/channel.h	/^    void setIndex(int idx){ index_ = idx; }$/;"	f	class:JKYi::net::Channel	access:public	signature:(int idx)
JKYi::net::Channel::setReadCallback	JKYi/reactor/channel.h	/^    void setReadCallback(ReadEventCallback cb){ readCallback_ = std::move(cb); }$/;"	f	class:JKYi::net::Channel	access:public	signature:(ReadEventCallback cb)
JKYi::net::Channel::setRevents	JKYi/reactor/channel.h	/^    void setRevents(int rvt) { revents_ = rvt; }$/;"	f	class:JKYi::net::Channel	access:public	signature:(int rvt)
JKYi::net::Channel::setWriteCallback	JKYi/reactor/channel.h	/^    void setWriteCallback(EventCallback cb) { writeCallback_ = std::move(cb); }$/;"	f	class:JKYi::net::Channel	access:public	signature:(EventCallback cb)
JKYi::net::Channel::tie	JKYi/reactor/channel.cc	/^void Channel::tie(const std::shared_ptr<void>& obj){$/;"	f	class:JKYi::net::Channel	signature:(const std::shared_ptr<void>& obj)
JKYi::net::Channel::tie	JKYi/reactor/channel.h	/^    void tie(const std::shared_ptr<void>&);$/;"	p	class:JKYi::net::Channel	access:public	signature:(const std::shared_ptr<void>&)
JKYi::net::Channel::tie_	JKYi/reactor/channel.h	/^    std::weak_ptr<void> tie_;$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::tied_	JKYi/reactor/channel.h	/^    bool tied_;$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::update	JKYi/reactor/channel.cc	/^void Channel::update(){$/;"	f	class:JKYi::net::Channel	signature:()
JKYi::net::Channel::update	JKYi/reactor/channel.h	/^    void update();$/;"	p	class:JKYi::net::Channel	access:private	signature:()
JKYi::net::Channel::writeCallback_	JKYi/reactor/channel.h	/^    EventCallback writeCallback_;$/;"	m	class:JKYi::net::Channel	access:private
JKYi::net::Channel::~Channel	JKYi/reactor/channel.cc	/^Channel::~Channel(){$/;"	f	class:JKYi::net::Channel	signature:()
JKYi::net::Channel::~Channel	JKYi/reactor/channel.h	/^    ~Channel();$/;"	p	class:JKYi::net::Channel	access:public	signature:()
JKYi::net::CloseCallback	JKYi/reactor/Callbacks.h	/^typedef std::function<void (const TcpConnectionPtr&)> CloseCallback;$/;"	t	namespace:JKYi::net
JKYi::net::ConnectionCallback	JKYi/reactor/Callbacks.h	/^typedef std::function<void (const TcpConnectionPtr&)> ConnectionCallback;$/;"	t	namespace:JKYi::net
JKYi::net::Connector	JKYi/reactor/Connector.h	/^class Connector : public Noncopyable,$/;"	c	namespace:JKYi::net	inherits:Noncopyable,std::enable_shared_from_this
JKYi::net::Connector::Connector	JKYi/reactor/Connector.cc	/^Connector::Connector(EventLoop* loop,const Address::ptr& serverAddr)$/;"	f	class:JKYi::net::Connector	signature:(EventLoop* loop,const Address::ptr& serverAddr)
JKYi::net::Connector::Connector	JKYi/reactor/Connector.h	/^    Connector(EventLoop* loop,const Address::ptr& serverAddr);$/;"	p	class:JKYi::net::Connector	access:public	signature:(EventLoop* loop,const Address::ptr& serverAddr)
JKYi::net::Connector::NewConnectionCallback	JKYi/reactor/Connector.h	/^    typedef std::function<void (int sockfd)> NewConnectionCallback;$/;"	t	class:JKYi::net::Connector	access:public
JKYi::net::Connector::State	JKYi/reactor/Connector.h	/^    enum State{$/;"	g	class:JKYi::net::Connector	access:private
JKYi::net::Connector::channel_	JKYi/reactor/Connector.h	/^    std::unique_ptr<Channel> channel_;$/;"	m	class:JKYi::net::Connector	access:private
JKYi::net::Connector::connect	JKYi/reactor/Connector.cc	/^void Connector::connect(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::connect	JKYi/reactor/Connector.h	/^    void connect();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
JKYi::net::Connector::connect_	JKYi/reactor/Connector.h	/^    bool connect_;$/;"	m	class:JKYi::net::Connector	access:private
JKYi::net::Connector::connecting	JKYi/reactor/Connector.cc	/^void Connector::connecting(int sockfd){$/;"	f	class:JKYi::net::Connector	signature:(int sockfd)
JKYi::net::Connector::connecting	JKYi/reactor/Connector.h	/^    void connecting(int sockfd);$/;"	p	class:JKYi::net::Connector	access:private	signature:(int sockfd)
JKYi::net::Connector::handleError	JKYi/reactor/Connector.cc	/^void Connector::handleError(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::handleError	JKYi/reactor/Connector.h	/^    void handleError();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
JKYi::net::Connector::handleWrite	JKYi/reactor/Connector.cc	/^void Connector::handleWrite(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::handleWrite	JKYi/reactor/Connector.h	/^    void handleWrite();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
JKYi::net::Connector::kConnected	JKYi/reactor/Connector.h	/^        kConnected$/;"	e	enum:JKYi::net::Connector::State
JKYi::net::Connector::kConnecting	JKYi/reactor/Connector.h	/^        kConnecting,$/;"	e	enum:JKYi::net::Connector::State
JKYi::net::Connector::kDisconnected	JKYi/reactor/Connector.h	/^        kDisconnected,$/;"	e	enum:JKYi::net::Connector::State
JKYi::net::Connector::kInitRetryDelayMs	JKYi/reactor/Connector.h	/^    static const int kInitRetryDelayMs = 500;$/;"	m	class:JKYi::net::Connector	access:private
JKYi::net::Connector::kMaxRetryDelayMs	JKYi/reactor/Connector.cc	/^const int Connector::kMaxRetryDelayMs;$/;"	m	class:JKYi::net::Connector	file:
JKYi::net::Connector::kMaxRetryDelayMs	JKYi/reactor/Connector.h	/^    static const int kMaxRetryDelayMs = 30 * 1000;     $/;"	m	class:JKYi::net::Connector	access:private
JKYi::net::Connector::loop_	JKYi/reactor/Connector.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::Connector	access:private
JKYi::net::Connector::newConnectionCallback_	JKYi/reactor/Connector.h	/^    NewConnectionCallback newConnectionCallback_;$/;"	m	class:JKYi::net::Connector	access:private
JKYi::net::Connector::removeAndResetChannel	JKYi/reactor/Connector.cc	/^int Connector::removeAndResetChannel(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::removeAndResetChannel	JKYi/reactor/Connector.h	/^    int removeAndResetChannel();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
JKYi::net::Connector::resetChannel	JKYi/reactor/Connector.cc	/^void Connector::resetChannel(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::resetChannel	JKYi/reactor/Connector.h	/^    void resetChannel();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
JKYi::net::Connector::restart	JKYi/reactor/Connector.cc	/^void Connector::restart(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::restart	JKYi/reactor/Connector.h	/^    void restart();     \/\/must be called in loop thread$/;"	p	class:JKYi::net::Connector	access:public	signature:()
JKYi::net::Connector::retry	JKYi/reactor/Connector.cc	/^void Connector::retry(int sockfd){$/;"	f	class:JKYi::net::Connector	signature:(int sockfd)
JKYi::net::Connector::retry	JKYi/reactor/Connector.h	/^    void retry(int sockfd);$/;"	p	class:JKYi::net::Connector	access:private	signature:(int sockfd)
JKYi::net::Connector::retryDelayMs_	JKYi/reactor/Connector.h	/^    int retryDelayMs_;$/;"	m	class:JKYi::net::Connector	access:private
JKYi::net::Connector::serverAddr_	JKYi/reactor/Connector.h	/^    Address::ptr serverAddr_;  \/\/è¦è¿æ¥çæå¡å¨ç«¯çå°å$/;"	m	class:JKYi::net::Connector	access:private
JKYi::net::Connector::serverAddress	JKYi/reactor/Connector.h	/^    const Address::ptr& serverAddress()const { return serverAddr_; }$/;"	f	class:JKYi::net::Connector	access:public	signature:() const
JKYi::net::Connector::setNewConnectionCallback	JKYi/reactor/Connector.h	/^    void setNewConnectionCallback(const NewConnectionCallback& cb){$/;"	f	class:JKYi::net::Connector	access:public	signature:(const NewConnectionCallback& cb)
JKYi::net::Connector::setState	JKYi/reactor/Connector.h	/^    void setState(State s){ state_ = s; }$/;"	f	class:JKYi::net::Connector	access:private	signature:(State s)
JKYi::net::Connector::start	JKYi/reactor/Connector.cc	/^void Connector::start(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::start	JKYi/reactor/Connector.h	/^    void start();       \/\/can be called in any thread$/;"	p	class:JKYi::net::Connector	access:public	signature:()
JKYi::net::Connector::startInLoop	JKYi/reactor/Connector.cc	/^void Connector::startInLoop(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::startInLoop	JKYi/reactor/Connector.h	/^    void startInLoop();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
JKYi::net::Connector::state_	JKYi/reactor/Connector.h	/^    State state_;$/;"	m	class:JKYi::net::Connector	access:private
JKYi::net::Connector::stop	JKYi/reactor/Connector.cc	/^void Connector::stop(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::stop	JKYi/reactor/Connector.h	/^    void stop();        \/\/can be called in any thread$/;"	p	class:JKYi::net::Connector	access:public	signature:()
JKYi::net::Connector::stopInLoop	JKYi/reactor/Connector.cc	/^void Connector::stopInLoop(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::stopInLoop	JKYi/reactor/Connector.h	/^    void stopInLoop();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
JKYi::net::Connector::~Connector	JKYi/reactor/Connector.cc	/^Connector::~Connector(){$/;"	f	class:JKYi::net::Connector	signature:()
JKYi::net::Connector::~Connector	JKYi/reactor/Connector.h	/^    ~Connector();$/;"	p	class:JKYi::net::Connector	access:public	signature:()
JKYi::net::ConnectorPtr	JKYi/reactor/TcpClient.h	/^typedef std::shared_ptr<Connector> ConnectorPtr;$/;"	t	namespace:JKYi::net
JKYi::net::EpollPoller	JKYi/reactor/poller/epollPoller.h	/^class EpollPoller:public Poller{$/;"	c	namespace:JKYi::net	inherits:Poller
JKYi::net::EpollPoller::EpollPoller	JKYi/reactor/poller/epollPoller.cc	/^EpollPoller::EpollPoller(EventLoop* loop)$/;"	f	class:JKYi::net::EpollPoller	signature:(EventLoop* loop)
JKYi::net::EpollPoller::EpollPoller	JKYi/reactor/poller/epollPoller.h	/^    EpollPoller(EventLoop* loop);$/;"	p	class:JKYi::net::EpollPoller	access:public	signature:(EventLoop* loop)
JKYi::net::EpollPoller::EventList	JKYi/reactor/poller/epollPoller.h	/^    typedef std::vector<struct epoll_event> EventList;$/;"	t	class:JKYi::net::EpollPoller	access:private
JKYi::net::EpollPoller::epollfd_	JKYi/reactor/poller/epollPoller.h	/^    int epollfd_;$/;"	m	class:JKYi::net::EpollPoller	access:private
JKYi::net::EpollPoller::events_	JKYi/reactor/poller/epollPoller.h	/^    EventList events_;$/;"	m	class:JKYi::net::EpollPoller	access:private
JKYi::net::EpollPoller::fillActiveChannels	JKYi/reactor/poller/epollPoller.cc	/^void EpollPoller::fillActiveChannels(int numEvents,ChannelList* activeChannels)const{$/;"	f	class:JKYi::net::EpollPoller	signature:(int numEvents,ChannelList* activeChannels) const
JKYi::net::EpollPoller::fillActiveChannels	JKYi/reactor/poller/epollPoller.h	/^    void fillActiveChannels(int numEvents,ChannelList* activeChannels) const;$/;"	p	class:JKYi::net::EpollPoller	access:private	signature:(int numEvents,ChannelList* activeChannels) const
JKYi::net::EpollPoller::kInitEventListSize	JKYi/reactor/poller/epollPoller.h	/^    static const int kInitEventListSize = 16;$/;"	m	class:JKYi::net::EpollPoller	access:private
JKYi::net::EpollPoller::operationToString	JKYi/reactor/poller/epollPoller.cc	/^const char * EpollPoller::operationToString(int op){$/;"	f	class:JKYi::net::EpollPoller	signature:(int op)
JKYi::net::EpollPoller::operationToString	JKYi/reactor/poller/epollPoller.h	/^    static const char * operationToString(int op);$/;"	p	class:JKYi::net::EpollPoller	access:private	signature:(int op)
JKYi::net::EpollPoller::override	JKYi/reactor/poller/epollPoller.h	/^    Timestamp poll(int timeoutMs,ChannelList* activeChannels)override;$/;"	m	class:JKYi::net::EpollPoller	access:public
JKYi::net::EpollPoller::override	JKYi/reactor/poller/epollPoller.h	/^    void removeChannel(Channel* channel)override;$/;"	m	class:JKYi::net::EpollPoller	access:public
JKYi::net::EpollPoller::override	JKYi/reactor/poller/epollPoller.h	/^    void updateChannel(Channel* channel)override;$/;"	m	class:JKYi::net::EpollPoller	access:public
JKYi::net::EpollPoller::override	JKYi/reactor/poller/epollPoller.h	/^    ~EpollPoller()override;$/;"	m	class:JKYi::net::EpollPoller	access:public
JKYi::net::EpollPoller::poll	JKYi/reactor/poller/epollPoller.cc	/^Timestamp EpollPoller::poll(int timeoutMs,ChannelList* activeChannels){$/;"	f	class:JKYi::net::EpollPoller	signature:(int timeoutMs,ChannelList* activeChannels)
JKYi::net::EpollPoller::removeChannel	JKYi/reactor/poller/epollPoller.cc	/^void EpollPoller::removeChannel(Channel* channel){$/;"	f	class:JKYi::net::EpollPoller	signature:(Channel* channel)
JKYi::net::EpollPoller::update	JKYi/reactor/poller/epollPoller.cc	/^void EpollPoller::update(int operation,Channel* channel){$/;"	f	class:JKYi::net::EpollPoller	signature:(int operation,Channel* channel)
JKYi::net::EpollPoller::update	JKYi/reactor/poller/epollPoller.h	/^    void update(int operation,Channel* channel);$/;"	p	class:JKYi::net::EpollPoller	access:private	signature:(int operation,Channel* channel)
JKYi::net::EpollPoller::updateChannel	JKYi/reactor/poller/epollPoller.cc	/^void EpollPoller::updateChannel(Channel* channel){$/;"	f	class:JKYi::net::EpollPoller	signature:(Channel* channel)
JKYi::net::EpollPoller::~EpollPoller	JKYi/reactor/poller/epollPoller.cc	/^EpollPoller::~EpollPoller(){$/;"	f	class:JKYi::net::EpollPoller	signature:()
JKYi::net::EventLoop	JKYi/reactor/EventLoop.h	/^class EventLoop : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::EventLoop::ChannelList	JKYi/reactor/EventLoop.h	/^    typedef std::vector<Channel*> ChannelList;$/;"	t	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::EventLoop	JKYi/reactor/EventLoop.cc	/^EventLoop::EventLoop()$/;"	f	class:JKYi::net::EventLoop	signature:()
JKYi::net::EventLoop::EventLoop	JKYi/reactor/EventLoop.h	/^    EventLoop();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
JKYi::net::EventLoop::Functor	JKYi/reactor/EventLoop.h	/^    typedef std::function<void()> Functor;$/;"	t	class:JKYi::net::EventLoop	access:public
JKYi::net::EventLoop::abortNotInLoopThread	JKYi/reactor/EventLoop.cc	/^void EventLoop::abortNotInLoopThread(){$/;"	f	class:JKYi::net::EventLoop	signature:()
JKYi::net::EventLoop::abortNotInLoopThread	JKYi/reactor/EventLoop.h	/^    void abortNotInLoopThread();$/;"	p	class:JKYi::net::EventLoop	access:private	signature:()
JKYi::net::EventLoop::activeChannels_	JKYi/reactor/EventLoop.h	/^    ChannelList activeChannels_;          $/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::assertInLoopThread	JKYi/reactor/EventLoop.h	/^    void assertInLoopThread(){$/;"	f	class:JKYi::net::EventLoop	access:public	signature:()
JKYi::net::EventLoop::callingPendingFunctors_	JKYi/reactor/EventLoop.h	/^    bool callingPendingFunctors_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::cancel	JKYi/reactor/EventLoop.cc	/^void EventLoop::cancel(TimerId timerId){$/;"	f	class:JKYi::net::EventLoop	signature:(TimerId timerId)
JKYi::net::EventLoop::cancel	JKYi/reactor/EventLoop.h	/^    void cancel(TimerId timerId);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(TimerId timerId)
JKYi::net::EventLoop::context_	JKYi/reactor/EventLoop.h	/^    boost::any context_;                   \/\/ç¨æ¥æºå¸¦ä¸äºç¨æ·èªå·±çä¸è¥¿$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::currentActiveChannel_	JKYi/reactor/EventLoop.h	/^    Channel* currentActiveChannel_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::doPendingFunctors	JKYi/reactor/EventLoop.cc	/^void EventLoop::doPendingFunctors(){$/;"	f	class:JKYi::net::EventLoop	signature:()
JKYi::net::EventLoop::doPendingFunctors	JKYi/reactor/EventLoop.h	/^    void doPendingFunctors();$/;"	p	class:JKYi::net::EventLoop	access:private	signature:()
JKYi::net::EventLoop::eventHanding	JKYi/reactor/EventLoop.h	/^    bool eventHanding()const { return eventHandling_; }$/;"	f	class:JKYi::net::EventLoop	access:public	signature:() const
JKYi::net::EventLoop::eventHandling_	JKYi/reactor/EventLoop.h	/^    bool eventHandling_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::getContext	JKYi/reactor/EventLoop.h	/^    const boost::any& getContext()const{$/;"	f	class:JKYi::net::EventLoop	access:public	signature:() const
JKYi::net::EventLoop::getEventLoopOfCurrentThread	JKYi/reactor/EventLoop.cc	/^EventLoop* EventLoop::getEventLoopOfCurrentThread(){$/;"	f	class:JKYi::net::EventLoop	signature:()
JKYi::net::EventLoop::getEventLoopOfCurrentThread	JKYi/reactor/EventLoop.h	/^    static EventLoop* getEventLoopOfCurrentThread();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
JKYi::net::EventLoop::getMutableContext	JKYi/reactor/EventLoop.h	/^    boost::any* getMutableContext(){$/;"	f	class:JKYi::net::EventLoop	access:public	signature:()
JKYi::net::EventLoop::handleRead	JKYi/reactor/EventLoop.cc	/^void EventLoop::handleRead(){$/;"	f	class:JKYi::net::EventLoop	signature:()
JKYi::net::EventLoop::handleRead	JKYi/reactor/EventLoop.h	/^    void handleRead();$/;"	p	class:JKYi::net::EventLoop	access:private	signature:()
JKYi::net::EventLoop::hasChannel	JKYi/reactor/EventLoop.cc	/^bool EventLoop::hasChannel(Channel* channel){$/;"	f	class:JKYi::net::EventLoop	signature:(Channel* channel)
JKYi::net::EventLoop::hasChannel	JKYi/reactor/EventLoop.h	/^    bool hasChannel(Channel* channel);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Channel* channel)
JKYi::net::EventLoop::isInLoopThread	JKYi/reactor/EventLoop.h	/^    bool isInLoopThread()const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:JKYi::net::EventLoop	access:public	signature:() const
JKYi::net::EventLoop::iteration	JKYi/reactor/EventLoop.h	/^    int64_t iteration()const { return iteration_; }$/;"	f	class:JKYi::net::EventLoop	access:public	signature:() const
JKYi::net::EventLoop::iteration_	JKYi/reactor/EventLoop.h	/^    int64_t iteration_;                  \/\/pollçæ¬¡æ°$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::loop	JKYi/reactor/EventLoop.cc	/^void EventLoop::loop(){$/;"	f	class:JKYi::net::EventLoop	signature:()
JKYi::net::EventLoop::loop	JKYi/reactor/EventLoop.h	/^    void loop();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
JKYi::net::EventLoop::looping_	JKYi/reactor/EventLoop.h	/^    bool looping_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::mutex_	JKYi/reactor/EventLoop.h	/^    mutable Mutex mutex_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::pendingFunctors_	JKYi/reactor/EventLoop.h	/^    std::vector<Functor> pendingFunctors_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::pollReturnTime	JKYi/reactor/EventLoop.h	/^    Timestamp pollReturnTime()const { return pollReturnTime_; }$/;"	f	class:JKYi::net::EventLoop	access:public	signature:() const
JKYi::net::EventLoop::pollReturnTime_	JKYi/reactor/EventLoop.h	/^    Timestamp pollReturnTime_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::poller_	JKYi/reactor/EventLoop.h	/^    std::unique_ptr<Poller> poller_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::printActiveChannels	JKYi/reactor/EventLoop.cc	/^void EventLoop::printActiveChannels()const{$/;"	f	class:JKYi::net::EventLoop	signature:() const
JKYi::net::EventLoop::printActiveChannels	JKYi/reactor/EventLoop.h	/^    void printActiveChannels()const;$/;"	p	class:JKYi::net::EventLoop	access:private	signature:() const
JKYi::net::EventLoop::queueInLoop	JKYi/reactor/EventLoop.cc	/^void EventLoop::queueInLoop(Functor cb){$/;"	f	class:JKYi::net::EventLoop	signature:(Functor cb)
JKYi::net::EventLoop::queueInLoop	JKYi/reactor/EventLoop.h	/^    void queueInLoop(Functor cb);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Functor cb)
JKYi::net::EventLoop::queueSize	JKYi/reactor/EventLoop.cc	/^size_t EventLoop::queueSize()const{$/;"	f	class:JKYi::net::EventLoop	signature:() const
JKYi::net::EventLoop::queueSize	JKYi/reactor/EventLoop.h	/^    size_t queueSize()const;$/;"	p	class:JKYi::net::EventLoop	access:public	signature:() const
JKYi::net::EventLoop::quit	JKYi/reactor/EventLoop.cc	/^void EventLoop::quit(){$/;"	f	class:JKYi::net::EventLoop	signature:()
JKYi::net::EventLoop::quit	JKYi/reactor/EventLoop.h	/^    void quit();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
JKYi::net::EventLoop::quit_	JKYi/reactor/EventLoop.h	/^    std::atomic<bool> quit_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::removeChannel	JKYi/reactor/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel){$/;"	f	class:JKYi::net::EventLoop	signature:(Channel* channel)
JKYi::net::EventLoop::removeChannel	JKYi/reactor/EventLoop.h	/^    void removeChannel(Channel* channel);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Channel* channel)
JKYi::net::EventLoop::runAfter	JKYi/reactor/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay,TimerCallback cb){$/;"	f	class:JKYi::net::EventLoop	signature:(double delay,TimerCallback cb)
JKYi::net::EventLoop::runAfter	JKYi/reactor/EventLoop.h	/^    TimerId runAfter(double delay,TimerCallback cb);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(double delay,TimerCallback cb)
JKYi::net::EventLoop::runAt	JKYi/reactor/EventLoop.cc	/^TimerId EventLoop::runAt(Timestamp time,TimerCallback cb){$/;"	f	class:JKYi::net::EventLoop	signature:(Timestamp time,TimerCallback cb)
JKYi::net::EventLoop::runAt	JKYi/reactor/EventLoop.h	/^    TimerId runAt(Timestamp time,TimerCallback cb);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Timestamp time,TimerCallback cb)
JKYi::net::EventLoop::runEvery	JKYi/reactor/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval,TimerCallback cb){$/;"	f	class:JKYi::net::EventLoop	signature:(double interval,TimerCallback cb)
JKYi::net::EventLoop::runEvery	JKYi/reactor/EventLoop.h	/^    TimerId runEvery(double interval,TimerCallback cb);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(double interval,TimerCallback cb)
JKYi::net::EventLoop::runInLoop	JKYi/reactor/EventLoop.cc	/^void EventLoop::runInLoop(Functor cb){$/;"	f	class:JKYi::net::EventLoop	signature:(Functor cb)
JKYi::net::EventLoop::runInLoop	JKYi/reactor/EventLoop.h	/^    void runInLoop(Functor cb);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Functor cb)
JKYi::net::EventLoop::setContext	JKYi/reactor/EventLoop.h	/^    void setContext(const boost::any& context){$/;"	f	class:JKYi::net::EventLoop	access:public	signature:(const boost::any& context)
JKYi::net::EventLoop::threadId_	JKYi/reactor/EventLoop.h	/^    const pid_t threadId_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::timerQueue_	JKYi/reactor/EventLoop.h	/^    std::unique_ptr<TimerQueue> timerQueue_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::updateChannel	JKYi/reactor/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel){$/;"	f	class:JKYi::net::EventLoop	signature:(Channel* channel)
JKYi::net::EventLoop::updateChannel	JKYi/reactor/EventLoop.h	/^    void updateChannel(Channel* channel);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Channel* channel)
JKYi::net::EventLoop::wakeup	JKYi/reactor/EventLoop.cc	/^void EventLoop::wakeup(){$/;"	f	class:JKYi::net::EventLoop	signature:()
JKYi::net::EventLoop::wakeup	JKYi/reactor/EventLoop.h	/^    void wakeup();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
JKYi::net::EventLoop::wakeupChannel_	JKYi/reactor/EventLoop.h	/^    std::unique_ptr<Channel> wakeupChannel_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::wakeupFd_	JKYi/reactor/EventLoop.h	/^    int wakeupFd_;$/;"	m	class:JKYi::net::EventLoop	access:private
JKYi::net::EventLoop::~EventLoop	JKYi/reactor/EventLoop.cc	/^EventLoop::~EventLoop(){$/;"	f	class:JKYi::net::EventLoop	signature:()
JKYi::net::EventLoop::~EventLoop	JKYi/reactor/EventLoop.h	/^    ~EventLoop();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
JKYi::net::EventLoopThread	JKYi/reactor/EventLoopThread.h	/^class EventLoopThread : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::EventLoopThread::EventLoopThread	JKYi/reactor/EventLoopThread.cc	/^EventLoopThread::EventLoopThread(const ThreadInitCallback& cb,$/;"	f	class:JKYi::net::EventLoopThread	signature:(const ThreadInitCallback& cb, const std::string& name)
JKYi::net::EventLoopThread::EventLoopThread	JKYi/reactor/EventLoopThread.h	/^    EventLoopThread(const ThreadInitCallback& cb = ThreadInitCallback(),$/;"	p	class:JKYi::net::EventLoopThread	access:public	signature:(const ThreadInitCallback& cb = ThreadInitCallback(), const std::string& name = std::string())
JKYi::net::EventLoopThread::ThreadInitCallback	JKYi/reactor/EventLoopThread.h	/^    typedef std::function<void (EventLoop*)> ThreadInitCallback;$/;"	t	class:JKYi::net::EventLoopThread	access:public
JKYi::net::EventLoopThread::callback_	JKYi/reactor/EventLoopThread.h	/^    ThreadInitCallback callback_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
JKYi::net::EventLoopThread::condition_	JKYi/reactor/EventLoopThread.h	/^    Condition condition_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
JKYi::net::EventLoopThread::exiting_	JKYi/reactor/EventLoopThread.h	/^    bool exiting_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
JKYi::net::EventLoopThread::loop_	JKYi/reactor/EventLoopThread.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
JKYi::net::EventLoopThread::mutex_	JKYi/reactor/EventLoopThread.h	/^    Mutex mutex_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
JKYi::net::EventLoopThread::startLoop	JKYi/reactor/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop(){$/;"	f	class:JKYi::net::EventLoopThread	signature:()
JKYi::net::EventLoopThread::startLoop	JKYi/reactor/EventLoopThread.h	/^    EventLoop* startLoop();$/;"	p	class:JKYi::net::EventLoopThread	access:public	signature:()
JKYi::net::EventLoopThread::threadFunc	JKYi/reactor/EventLoopThread.cc	/^void EventLoopThread::threadFunc(){$/;"	f	class:JKYi::net::EventLoopThread	signature:()
JKYi::net::EventLoopThread::threadFunc	JKYi/reactor/EventLoopThread.h	/^    void threadFunc();$/;"	p	class:JKYi::net::EventLoopThread	access:private	signature:()
JKYi::net::EventLoopThread::thread_	JKYi/reactor/EventLoopThread.h	/^    Thread thread_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
JKYi::net::EventLoopThread::~EventLoopThread	JKYi/reactor/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread(){$/;"	f	class:JKYi::net::EventLoopThread	signature:()
JKYi::net::EventLoopThread::~EventLoopThread	JKYi/reactor/EventLoopThread.h	/^    ~EventLoopThread();$/;"	p	class:JKYi::net::EventLoopThread	access:public	signature:()
JKYi::net::EventLoopThreadPool	JKYi/reactor/EventLoopThreadPool.h	/^class EventLoopThreadPool : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::EventLoopThreadPool::EventLoopThreadPool	JKYi/reactor/EventLoopThreadPool.cc	/^EventLoopThreadPool::EventLoopThreadPool(EventLoop* baseloop,$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:(EventLoop* baseloop, const std::string& nameArg)
JKYi::net::EventLoopThreadPool::EventLoopThreadPool	JKYi/reactor/EventLoopThreadPool.h	/^    EventLoopThreadPool(EventLoop* baseloop,const std::string& nameArg);$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:(EventLoop* baseloop,const std::string& nameArg)
JKYi::net::EventLoopThreadPool::ThreadInitCallback	JKYi/reactor/EventLoopThreadPool.h	/^    typedef std::function<void (EventLoop*)> ThreadInitCallback;$/;"	t	class:JKYi::net::EventLoopThreadPool	access:public
JKYi::net::EventLoopThreadPool::baseLoop_	JKYi/reactor/EventLoopThreadPool.h	/^    EventLoop* baseLoop_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
JKYi::net::EventLoopThreadPool::getAllLoops	JKYi/reactor/EventLoopThreadPool.cc	/^std::vector<EventLoop*> EventLoopThreadPool::getAllLoops(){$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:()
JKYi::net::EventLoopThreadPool::getAllLoops	JKYi/reactor/EventLoopThreadPool.h	/^    std::vector<EventLoop*> getAllLoops();$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:()
JKYi::net::EventLoopThreadPool::getLoopForHash	JKYi/reactor/EventLoopThreadPool.cc	/^EventLoop* EventLoopThreadPool::getLoopForHash(size_t hashCode){$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:(size_t hashCode)
JKYi::net::EventLoopThreadPool::getLoopForHash	JKYi/reactor/EventLoopThreadPool.h	/^    EventLoop* getLoopForHash(size_t hashCode); \/\/same hashcode -> same EventLoop$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:(size_t hashCode)
JKYi::net::EventLoopThreadPool::getNextLoop	JKYi/reactor/EventLoopThreadPool.cc	/^EventLoop* EventLoopThreadPool::getNextLoop(){$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:()
JKYi::net::EventLoopThreadPool::getNextLoop	JKYi/reactor/EventLoopThreadPool.h	/^    EventLoop* getNextLoop();     \/\/round-robin$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:()
JKYi::net::EventLoopThreadPool::loops_	JKYi/reactor/EventLoopThreadPool.h	/^    std::vector<EventLoop*> loops_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
JKYi::net::EventLoopThreadPool::name	JKYi/reactor/EventLoopThreadPool.h	/^    const std::string& name()const{$/;"	f	class:JKYi::net::EventLoopThreadPool	access:public	signature:() const
JKYi::net::EventLoopThreadPool::name_	JKYi/reactor/EventLoopThreadPool.h	/^    std::string name_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
JKYi::net::EventLoopThreadPool::next_	JKYi/reactor/EventLoopThreadPool.h	/^    int next_;          \/\/ç¨äºå®ç°round-robin$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
JKYi::net::EventLoopThreadPool::numThreads_	JKYi/reactor/EventLoopThreadPool.h	/^    int numThreads_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
JKYi::net::EventLoopThreadPool::setThreadNum	JKYi/reactor/EventLoopThreadPool.h	/^    void setThreadNum(int numThreads){ numThreads_ = numThreads; }$/;"	f	class:JKYi::net::EventLoopThreadPool	access:public	signature:(int numThreads)
JKYi::net::EventLoopThreadPool::start	JKYi/reactor/EventLoopThreadPool.cc	/^void EventLoopThreadPool::start(const ThreadInitCallback& cb){$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:(const ThreadInitCallback& cb)
JKYi::net::EventLoopThreadPool::start	JKYi/reactor/EventLoopThreadPool.h	/^    void start(const ThreadInitCallback& cb = ThreadInitCallback());$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:(const ThreadInitCallback& cb = ThreadInitCallback())
JKYi::net::EventLoopThreadPool::started	JKYi/reactor/EventLoopThreadPool.h	/^    bool started()const{$/;"	f	class:JKYi::net::EventLoopThreadPool	access:public	signature:() const
JKYi::net::EventLoopThreadPool::started_	JKYi/reactor/EventLoopThreadPool.h	/^    bool started_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
JKYi::net::EventLoopThreadPool::threads_	JKYi/reactor/EventLoopThreadPool.h	/^    std::vector<std::unique_ptr<EventLoopThread>> threads_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
JKYi::net::EventLoopThreadPool::~EventLoopThreadPool	JKYi/reactor/EventLoopThreadPool.cc	/^EventLoopThreadPool::~EventLoopThreadPool(){$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:()
JKYi::net::EventLoopThreadPool::~EventLoopThreadPool	JKYi/reactor/EventLoopThreadPool.h	/^    ~EventLoopThreadPool();$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:()
JKYi::net::HighWaterMarkCallback	JKYi/reactor/Callbacks.h	/^typedef std::function<void (const TcpConnectionPtr&,size_t)> HighWaterMarkCallback;$/;"	t	namespace:JKYi::net
JKYi::net::JKYi::net::Thread::numCreated_	JKYi/reactor/Thread.cc	/^AtomicInt32 JKYi::net::Thread::numCreated_;$/;"	m	class:JKYi::net::JKYi::net::Thread	file:
JKYi::net::MessageCallback	JKYi/reactor/Callbacks.h	/^                                       Timestamp)> MessageCallback;$/;"	t	namespace:JKYi::net
JKYi::net::PollPoller	JKYi/reactor/poller/pollPoller.h	/^class PollPoller:public Poller{$/;"	c	namespace:JKYi::net	inherits:Poller
JKYi::net::PollPoller::PollFdList	JKYi/reactor/poller/pollPoller.h	/^   typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:JKYi::net::PollPoller	access:private
JKYi::net::PollPoller::PollPoller	JKYi/reactor/poller/pollPoller.cc	/^PollPoller::PollPoller(EventLoop* loop)$/;"	f	class:JKYi::net::PollPoller	signature:(EventLoop* loop)
JKYi::net::PollPoller::PollPoller	JKYi/reactor/poller/pollPoller.h	/^    PollPoller(EventLoop* loop);$/;"	p	class:JKYi::net::PollPoller	access:public	signature:(EventLoop* loop)
JKYi::net::PollPoller::fillActiveChannels	JKYi/reactor/poller/pollPoller.cc	/^void PollPoller::fillActiveChannels(int numEvents,ChannelList* activeChannels){$/;"	f	class:JKYi::net::PollPoller	signature:(int numEvents,ChannelList* activeChannels)
JKYi::net::PollPoller::fillActiveChannels	JKYi/reactor/poller/pollPoller.h	/^   void fillActiveChannels(int numEvents,ChannelList* activeChannels);$/;"	p	class:JKYi::net::PollPoller	access:private	signature:(int numEvents,ChannelList* activeChannels)
JKYi::net::PollPoller::override	JKYi/reactor/poller/pollPoller.h	/^    Timestamp poll(int timeoutMs,ChannelList* activeChannels)override;$/;"	m	class:JKYi::net::PollPoller	access:public
JKYi::net::PollPoller::override	JKYi/reactor/poller/pollPoller.h	/^    void removeChannel(Channel* channel)override;$/;"	m	class:JKYi::net::PollPoller	access:public
JKYi::net::PollPoller::override	JKYi/reactor/poller/pollPoller.h	/^    void updateChannel(Channel* channel)override;$/;"	m	class:JKYi::net::PollPoller	access:public
JKYi::net::PollPoller::override	JKYi/reactor/poller/pollPoller.h	/^    ~PollPoller()override;$/;"	m	class:JKYi::net::PollPoller	access:public
JKYi::net::PollPoller::poll	JKYi/reactor/poller/pollPoller.cc	/^Timestamp PollPoller::poll(int timeoutMs,ChannelList* activeChannels){$/;"	f	class:JKYi::net::PollPoller	signature:(int timeoutMs,ChannelList* activeChannels)
JKYi::net::PollPoller::pollfds_	JKYi/reactor/poller/pollPoller.h	/^   PollFdList pollfds_;$/;"	m	class:JKYi::net::PollPoller	access:private
JKYi::net::PollPoller::removeChannel	JKYi/reactor/poller/pollPoller.cc	/^void PollPoller::removeChannel(Channel * channel){$/;"	f	class:JKYi::net::PollPoller	signature:(Channel * channel)
JKYi::net::PollPoller::updateChannel	JKYi/reactor/poller/pollPoller.cc	/^void PollPoller::updateChannel(Channel * channel){$/;"	f	class:JKYi::net::PollPoller	signature:(Channel * channel)
JKYi::net::PollPoller::~PollPoller	JKYi/reactor/poller/pollPoller.cc	/^PollPoller::~PollPoller() = default;$/;"	p	class:JKYi::net::PollPoller	file:	signature:()
JKYi::net::Poller	JKYi/reactor/poller.h	/^class Poller:public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::Poller::ChannelList	JKYi/reactor/poller.h	/^    typedef std::vector<Channel*> ChannelList;$/;"	t	class:JKYi::net::Poller	access:public
JKYi::net::Poller::ChannelMap	JKYi/reactor/poller.h	/^    typedef std::map<int,Channel*> ChannelMap;$/;"	t	class:JKYi::net::Poller	access:protected
JKYi::net::Poller::Poller	JKYi/reactor/poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:JKYi::net::Poller	signature:(EventLoop* loop)
JKYi::net::Poller::Poller	JKYi/reactor/poller.h	/^    Poller(EventLoop* loop);$/;"	p	class:JKYi::net::Poller	access:public	signature:(EventLoop* loop)
JKYi::net::Poller::assertInLoopThread	JKYi/reactor/poller.h	/^    void assertInLoopThread()const{ ownerLoop_->assertInLoopThread(); }$/;"	f	class:JKYi::net::Poller	access:public	signature:() const
JKYi::net::Poller::channels_	JKYi/reactor/poller.h	/^    ChannelMap channels_;$/;"	m	class:JKYi::net::Poller	access:protected
JKYi::net::Poller::hasChannel	JKYi/reactor/poller.cc	/^bool Poller::hasChannel(Channel* channel)const{$/;"	f	class:JKYi::net::Poller	signature:(Channel* channel) const
JKYi::net::Poller::hasChannel	JKYi/reactor/poller.h	/^    virtual bool hasChannel(Channel* channel) const;$/;"	p	class:JKYi::net::Poller	access:public	signature:(Channel* channel) const
JKYi::net::Poller::newDefaultPoller	JKYi/reactor/poller.h	/^    static Poller* newDefaultPoller(EventLoop* loop);$/;"	p	class:JKYi::net::Poller	access:public	signature:(EventLoop* loop)
JKYi::net::Poller::ownerLoop_	JKYi/reactor/poller.h	/^    EventLoop* ownerLoop_;$/;"	m	class:JKYi::net::Poller	access:private
JKYi::net::Poller::poll	JKYi/reactor/poller.h	/^    virtual Timestamp poll(int timeoutMs,ChannelList* activeChannels) = 0;$/;"	p	class:JKYi::net::Poller	access:public	signature:(int timeoutMs,ChannelList* activeChannels)
JKYi::net::Poller::removeChannel	JKYi/reactor/poller.h	/^    virtual void removeChannel(Channel* channel) = 0;$/;"	p	class:JKYi::net::Poller	access:public	signature:(Channel* channel)
JKYi::net::Poller::updateChannel	JKYi/reactor/poller.h	/^    virtual void updateChannel(Channel* channel) = 0;$/;"	p	class:JKYi::net::Poller	access:public	signature:(Channel* channel)
JKYi::net::Poller::~Poller	JKYi/reactor/poller.cc	/^Poller::~Poller() = default;$/;"	p	class:JKYi::net::Poller	file:	signature:()
JKYi::net::Poller::~Poller	JKYi/reactor/poller.h	/^    virtual ~Poller();$/;"	p	class:JKYi::net::Poller	access:public	signature:()
JKYi::net::Socket	JKYi/reactor/Socket.h	/^class Socket : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::Socket::Socket	JKYi/reactor/Socket.h	/^    explicit Socket(int sockfd)$/;"	f	class:JKYi::net::Socket	access:public	signature:(int sockfd)
JKYi::net::Socket::accept	JKYi/reactor/Socket.cc	/^int Socket::accept(Address::ptr& addr){$/;"	f	class:JKYi::net::Socket	signature:(Address::ptr& addr)
JKYi::net::Socket::accept	JKYi/reactor/Socket.h	/^    int accept(Address::ptr& addr);$/;"	p	class:JKYi::net::Socket	access:public	signature:(Address::ptr& addr)
JKYi::net::Socket::bindAddress	JKYi/reactor/Socket.cc	/^void Socket::bindAddress(Address::ptr addr){$/;"	f	class:JKYi::net::Socket	signature:(Address::ptr addr)
JKYi::net::Socket::bindAddress	JKYi/reactor/Socket.h	/^    void bindAddress(const Address::ptr addr);$/;"	p	class:JKYi::net::Socket	access:public	signature:(const Address::ptr addr)
JKYi::net::Socket::getFd	JKYi/reactor/Socket.h	/^    int getFd()const { return sockfd_; }$/;"	f	class:JKYi::net::Socket	access:public	signature:() const
JKYi::net::Socket::getTcpInfo	JKYi/reactor/Socket.cc	/^bool Socket::getTcpInfo(struct tcp_info* tcpi)const{$/;"	f	class:JKYi::net::Socket	signature:(struct tcp_info* tcpi) const
JKYi::net::Socket::getTcpInfo	JKYi/reactor/Socket.h	/^    bool getTcpInfo(struct tcp_info*)const;$/;"	p	class:JKYi::net::Socket	access:public	signature:(struct tcp_info*) const
JKYi::net::Socket::getTcpInfoString	JKYi/reactor/Socket.cc	/^bool Socket::getTcpInfoString(char * buf,int len)const{$/;"	f	class:JKYi::net::Socket	signature:(char * buf,int len) const
JKYi::net::Socket::getTcpInfoString	JKYi/reactor/Socket.h	/^    bool getTcpInfoString(char * buf,int len)const;$/;"	p	class:JKYi::net::Socket	access:public	signature:(char * buf,int len) const
JKYi::net::Socket::listen	JKYi/reactor/Socket.cc	/^void Socket::listen(){$/;"	f	class:JKYi::net::Socket	signature:()
JKYi::net::Socket::listen	JKYi/reactor/Socket.h	/^    void listen();$/;"	p	class:JKYi::net::Socket	access:public	signature:()
JKYi::net::Socket::setKeepAlive	JKYi/reactor/Socket.cc	/^void Socket::setKeepAlive(bool on){$/;"	f	class:JKYi::net::Socket	signature:(bool on)
JKYi::net::Socket::setKeepAlive	JKYi/reactor/Socket.h	/^    void setKeepAlive(bool on);$/;"	p	class:JKYi::net::Socket	access:public	signature:(bool on)
JKYi::net::Socket::setReuseAddr	JKYi/reactor/Socket.cc	/^void Socket::setReuseAddr(bool on){$/;"	f	class:JKYi::net::Socket	signature:(bool on)
JKYi::net::Socket::setReuseAddr	JKYi/reactor/Socket.h	/^    void setReuseAddr(bool on);$/;"	p	class:JKYi::net::Socket	access:public	signature:(bool on)
JKYi::net::Socket::setReusePort	JKYi/reactor/Socket.cc	/^void Socket::setReusePort(bool on){$/;"	f	class:JKYi::net::Socket	signature:(bool on)
JKYi::net::Socket::setReusePort	JKYi/reactor/Socket.h	/^    void setReusePort(bool on);$/;"	p	class:JKYi::net::Socket	access:public	signature:(bool on)
JKYi::net::Socket::setTcpNoDelay	JKYi/reactor/Socket.cc	/^void Socket::setTcpNoDelay(bool on){$/;"	f	class:JKYi::net::Socket	signature:(bool on)
JKYi::net::Socket::setTcpNoDelay	JKYi/reactor/Socket.h	/^    void setTcpNoDelay(bool on);$/;"	p	class:JKYi::net::Socket	access:public	signature:(bool on)
JKYi::net::Socket::shutdownWrite	JKYi/reactor/Socket.cc	/^void Socket::shutdownWrite(){$/;"	f	class:JKYi::net::Socket	signature:()
JKYi::net::Socket::shutdownWrite	JKYi/reactor/Socket.h	/^    void shutdownWrite();$/;"	p	class:JKYi::net::Socket	access:public	signature:()
JKYi::net::Socket::sockfd_	JKYi/reactor/Socket.h	/^    const int sockfd_;$/;"	m	class:JKYi::net::Socket	access:private
JKYi::net::Socket::~Socket	JKYi/reactor/Socket.cc	/^Socket::~Socket(){$/;"	f	class:JKYi::net::Socket	signature:()
JKYi::net::Socket::~Socket	JKYi/reactor/Socket.h	/^    ~Socket();$/;"	p	class:JKYi::net::Socket	access:public	signature:()
JKYi::net::StringArg	JKYi/reactor/StringPiece.h	/^class StringArg \/\/ copyable$/;"	c	namespace:JKYi::net
JKYi::net::StringArg::StringArg	JKYi/reactor/StringPiece.h	/^  StringArg(const char* str)$/;"	f	class:JKYi::net::StringArg	access:public	signature:(const char* str)
JKYi::net::StringArg::StringArg	JKYi/reactor/StringPiece.h	/^  StringArg(const std::string& str)$/;"	f	class:JKYi::net::StringArg	access:public	signature:(const std::string& str)
JKYi::net::StringArg::c_str	JKYi/reactor/StringPiece.h	/^  const char* c_str() const { return str_; }$/;"	f	class:JKYi::net::StringArg	access:public	signature:() const
JKYi::net::StringArg::str_	JKYi/reactor/StringPiece.h	/^  const char* str_;$/;"	m	class:JKYi::net::StringArg	access:private
JKYi::net::StringPiece	JKYi/reactor/StringPiece.h	/^class StringPiece {$/;"	c	namespace:JKYi::net
JKYi::net::StringPiece::CopyToString	JKYi/reactor/StringPiece.h	/^  void CopyToString(std::string* target) const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(std::string* target) const
JKYi::net::StringPiece::STRINGPIECE_BINARY_PREDICATE	JKYi/reactor/StringPiece.h	/^  STRINGPIECE_BINARY_PREDICATE(<,  <);$/;"	p	class:JKYi::net::StringPiece	access:public	signature:(<, <); STRINGPIECE_BINARY_PREDICATE(<=, <); STRINGPIECE_BINARY_PREDICATE(>=, >); STRINGPIECE_BINARY_PREDICATE(>, >)
JKYi::net::StringPiece::StringPiece	JKYi/reactor/StringPiece.h	/^  StringPiece()$/;"	f	class:JKYi::net::StringPiece	access:public	signature:()
JKYi::net::StringPiece::StringPiece	JKYi/reactor/StringPiece.h	/^  StringPiece(const char* offset, int len)$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const char* offset, int len)
JKYi::net::StringPiece::StringPiece	JKYi/reactor/StringPiece.h	/^  StringPiece(const char* str)$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const char* str)
JKYi::net::StringPiece::StringPiece	JKYi/reactor/StringPiece.h	/^  StringPiece(const std::string& str)$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const std::string& str)
JKYi::net::StringPiece::StringPiece	JKYi/reactor/StringPiece.h	/^  StringPiece(const unsigned char* str)$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const unsigned char* str)
JKYi::net::StringPiece::as_string	JKYi/reactor/StringPiece.h	/^  std::string as_string() const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
JKYi::net::StringPiece::begin	JKYi/reactor/StringPiece.h	/^  const char* begin() const { return ptr_; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
JKYi::net::StringPiece::clear	JKYi/reactor/StringPiece.h	/^  void clear() { ptr_ = NULL; length_ = 0; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:()
JKYi::net::StringPiece::compare	JKYi/reactor/StringPiece.h	/^  int compare(const StringPiece& x) const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const StringPiece& x) const
JKYi::net::StringPiece::data	JKYi/reactor/StringPiece.h	/^  const char* data() const { return ptr_; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
JKYi::net::StringPiece::empty	JKYi/reactor/StringPiece.h	/^  bool empty() const { return length_ == 0; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
JKYi::net::StringPiece::end	JKYi/reactor/StringPiece.h	/^  const char* end() const { return ptr_ + length_; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
JKYi::net::StringPiece::length_	JKYi/reactor/StringPiece.h	/^  int           length_;$/;"	m	class:JKYi::net::StringPiece	access:private
JKYi::net::StringPiece::operator !=	JKYi/reactor/StringPiece.h	/^  bool operator!=(const StringPiece& x) const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const StringPiece& x) const
JKYi::net::StringPiece::operator ==	JKYi/reactor/StringPiece.h	/^  bool operator==(const StringPiece& x) const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const StringPiece& x) const
JKYi::net::StringPiece::operator []	JKYi/reactor/StringPiece.h	/^  char operator[](int i) const { return ptr_[i]; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(int i) const
JKYi::net::StringPiece::ptr_	JKYi/reactor/StringPiece.h	/^  const char*   ptr_;$/;"	m	class:JKYi::net::StringPiece	access:private
JKYi::net::StringPiece::remove_prefix	JKYi/reactor/StringPiece.h	/^  void remove_prefix(int n) {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(int n)
JKYi::net::StringPiece::remove_suffix	JKYi/reactor/StringPiece.h	/^  void remove_suffix(int n) {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(int n)
JKYi::net::StringPiece::set	JKYi/reactor/StringPiece.h	/^  void set(const char* buffer, int len) { ptr_ = buffer; length_ = len; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const char* buffer, int len)
JKYi::net::StringPiece::set	JKYi/reactor/StringPiece.h	/^  void set(const char* str) {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const char* str)
JKYi::net::StringPiece::set	JKYi/reactor/StringPiece.h	/^  void set(const void* buffer, int len) {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const void* buffer, int len)
JKYi::net::StringPiece::size	JKYi/reactor/StringPiece.h	/^  int size() const { return length_; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
JKYi::net::StringPiece::starts_with	JKYi/reactor/StringPiece.h	/^  bool starts_with(const StringPiece& x) const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const StringPiece& x) const
JKYi::net::TcpClient	JKYi/reactor/TcpClient.h	/^class TcpClient : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::TcpClient::TcpClient	JKYi/reactor/TcpClient.cc	/^TcpClient::TcpClient(EventLoop* loop,const Address::ptr& serverAddr,$/;"	f	class:JKYi::net::TcpClient	signature:(EventLoop* loop,const Address::ptr& serverAddr, const std::string& nameArg)
JKYi::net::TcpClient::TcpClient	JKYi/reactor/TcpClient.h	/^    TcpClient(EventLoop* loop,$/;"	p	class:JKYi::net::TcpClient	access:public	signature:(EventLoop* loop, const Address::ptr& serverAddr, const std::string& nameArg)
JKYi::net::TcpClient::connecetion	JKYi/reactor/TcpClient.h	/^    TcpConnection::ptr connecetion()const{$/;"	f	class:JKYi::net::TcpClient	access:public	signature:() const
JKYi::net::TcpClient::connect	JKYi/reactor/TcpClient.cc	/^void TcpClient::connect(){$/;"	f	class:JKYi::net::TcpClient	signature:()
JKYi::net::TcpClient::connect	JKYi/reactor/TcpClient.h	/^    void connect();$/;"	p	class:JKYi::net::TcpClient	access:public	signature:()
JKYi::net::TcpClient::connect_	JKYi/reactor/TcpClient.h	/^    bool connect_;$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::connectionCallback_	JKYi/reactor/TcpClient.h	/^    ConnectionCallback connectionCallback_;$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::connection_	JKYi/reactor/TcpClient.h	/^    TcpConnection::ptr connection_;$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::connector_	JKYi/reactor/TcpClient.h	/^    ConnectorPtr connector_;  \/\/è¿æ¥å¨$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::disconnect	JKYi/reactor/TcpClient.cc	/^void TcpClient::disconnect(){$/;"	f	class:JKYi::net::TcpClient	signature:()
JKYi::net::TcpClient::disconnect	JKYi/reactor/TcpClient.h	/^    void disconnect();$/;"	p	class:JKYi::net::TcpClient	access:public	signature:()
JKYi::net::TcpClient::enableRetry	JKYi/reactor/TcpClient.h	/^    void enableRetry(){$/;"	f	class:JKYi::net::TcpClient	access:public	signature:()
JKYi::net::TcpClient::getLoop	JKYi/reactor/TcpClient.h	/^    EventLoop* getLoop()const{$/;"	f	class:JKYi::net::TcpClient	access:public	signature:() const
JKYi::net::TcpClient::loop_	JKYi/reactor/TcpClient.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::messageCallback_	JKYi/reactor/TcpClient.h	/^    MessageCallback messageCallback_;$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::mutex_	JKYi/reactor/TcpClient.h	/^    mutable Mutex mutex_;$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::name	JKYi/reactor/TcpClient.h	/^    const std::string& name()const{$/;"	f	class:JKYi::net::TcpClient	access:public	signature:() const
JKYi::net::TcpClient::name_	JKYi/reactor/TcpClient.h	/^    const std::string name_;$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::newConnection	JKYi/reactor/TcpClient.cc	/^void TcpClient::newConnection(int sockfd){$/;"	f	class:JKYi::net::TcpClient	signature:(int sockfd)
JKYi::net::TcpClient::newConnection	JKYi/reactor/TcpClient.h	/^    void newConnection(int sockfd);$/;"	p	class:JKYi::net::TcpClient	access:private	signature:(int sockfd)
JKYi::net::TcpClient::nextConnId_	JKYi/reactor/TcpClient.h	/^    int nextConnId_;$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::removeConnection	JKYi/reactor/TcpClient.cc	/^void TcpClient::removeConnection(const TcpConnection::ptr& conn){$/;"	f	class:JKYi::net::TcpClient	signature:(const TcpConnection::ptr& conn)
JKYi::net::TcpClient::removeConnection	JKYi/reactor/TcpClient.h	/^    void removeConnection(const TcpConnection::ptr& conn);$/;"	p	class:JKYi::net::TcpClient	access:private	signature:(const TcpConnection::ptr& conn)
JKYi::net::TcpClient::retry	JKYi/reactor/TcpClient.h	/^    bool retry()const{$/;"	f	class:JKYi::net::TcpClient	access:public	signature:() const
JKYi::net::TcpClient::retry_	JKYi/reactor/TcpClient.h	/^    bool retry_;$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::setConnectionCallback	JKYi/reactor/TcpClient.h	/^    void setConnectionCallback(ConnectionCallback cb){$/;"	f	class:JKYi::net::TcpClient	access:public	signature:(ConnectionCallback cb)
JKYi::net::TcpClient::setMessageCallback	JKYi/reactor/TcpClient.h	/^    void setMessageCallback(MessageCallback cb){$/;"	f	class:JKYi::net::TcpClient	access:public	signature:(MessageCallback cb)
JKYi::net::TcpClient::setWriteCallback	JKYi/reactor/TcpClient.h	/^    void setWriteCallback(WriteCompleteCallback cb){$/;"	f	class:JKYi::net::TcpClient	access:public	signature:(WriteCompleteCallback cb)
JKYi::net::TcpClient::stop	JKYi/reactor/TcpClient.cc	/^void TcpClient::stop(){$/;"	f	class:JKYi::net::TcpClient	signature:()
JKYi::net::TcpClient::stop	JKYi/reactor/TcpClient.h	/^    void stop();$/;"	p	class:JKYi::net::TcpClient	access:public	signature:()
JKYi::net::TcpClient::writeCompleteCallback_	JKYi/reactor/TcpClient.h	/^    WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:JKYi::net::TcpClient	access:private
JKYi::net::TcpClient::~TcpClient	JKYi/reactor/TcpClient.cc	/^TcpClient::~TcpClient(){$/;"	f	class:JKYi::net::TcpClient	signature:()
JKYi::net::TcpClient::~TcpClient	JKYi/reactor/TcpClient.h	/^    ~TcpClient();$/;"	p	class:JKYi::net::TcpClient	access:public	signature:()
JKYi::net::TcpConnection	JKYi/reactor/TcpConnection.h	/^class TcpConnection : public Noncopyable,$/;"	c	namespace:JKYi::net	inherits:Noncopyable,std::enable_shared_from_this
JKYi::net::TcpConnection::StateE	JKYi/reactor/TcpConnection.h	/^    enum StateE{$/;"	g	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::TcpConnection	JKYi/reactor/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,const std::string& nameArg,int sockfd,$/;"	f	class:JKYi::net::TcpConnection	signature:(EventLoop* loop,const std::string& nameArg,int sockfd, const Address::ptr localAddr, const Address::ptr peerAddr)
JKYi::net::TcpConnection::TcpConnection	JKYi/reactor/TcpConnection.h	/^    TcpConnection(EventLoop* loop,const std::string& name,int sockfd,$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(EventLoop* loop,const std::string& name,int sockfd, const Address::ptr localAddr,const Address::ptr peerAddr)
JKYi::net::TcpConnection::channel_	JKYi/reactor/TcpConnection.h	/^    std::unique_ptr<Channel> channel_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::closeCallback_	JKYi/reactor/TcpConnection.h	/^    CloseCallback closeCallback_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::connectDestroyed	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::connectDestroyed(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::connectDestroyed	JKYi/reactor/TcpConnection.h	/^    void connectDestroyed();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
JKYi::net::TcpConnection::connectEstablished	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::connectEstablished(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::connectEstablished	JKYi/reactor/TcpConnection.h	/^    void connectEstablished();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
JKYi::net::TcpConnection::connected	JKYi/reactor/TcpConnection.h	/^    bool connected()const { return state_ == kConnected; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
JKYi::net::TcpConnection::connectionCallback_	JKYi/reactor/TcpConnection.h	/^    ConnectionCallback connectionCallback_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::context_	JKYi/reactor/TcpConnection.h	/^    boost::any context_;    \/\/ç¨æ·èªå®ä¹æºå¸¦çä¸ä¸æä¿¡æ¯$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::disconnected	JKYi/reactor/TcpConnection.h	/^    bool disconnected()const { return state_ == kDisconnected; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
JKYi::net::TcpConnection::forceClose	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::forceClose(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::forceClose	JKYi/reactor/TcpConnection.h	/^    void forceClose();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
JKYi::net::TcpConnection::forceCloseInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::forceCloseInLoop(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::forceCloseInLoop	JKYi/reactor/TcpConnection.h	/^    void forceCloseInLoop();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
JKYi::net::TcpConnection::forceCloseWithDelay	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::forceCloseWithDelay(double seconds){$/;"	f	class:JKYi::net::TcpConnection	signature:(double seconds)
JKYi::net::TcpConnection::forceCloseWithDelay	JKYi/reactor/TcpConnection.h	/^    void forceCloseWithDelay(double seconds);$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(double seconds)
JKYi::net::TcpConnection::getContext	JKYi/reactor/TcpConnection.h	/^    const boost::any& getContext()const{$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
JKYi::net::TcpConnection::getLoop	JKYi/reactor/TcpConnection.h	/^    EventLoop* getLoop()const { return loop_; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
JKYi::net::TcpConnection::getMutableContext	JKYi/reactor/TcpConnection.h	/^    boost::any* getMutableContext(){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:()
JKYi::net::TcpConnection::getTcpInfo	JKYi/reactor/TcpConnection.cc	/^bool TcpConnection::getTcpInfo(struct tcp_info* tcpi)const{$/;"	f	class:JKYi::net::TcpConnection	signature:(struct tcp_info* tcpi) const
JKYi::net::TcpConnection::getTcpInfo	JKYi/reactor/TcpConnection.h	/^    bool getTcpInfo(struct tcp_info* )const;$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(struct tcp_info* ) const
JKYi::net::TcpConnection::getTcpInfoString	JKYi/reactor/TcpConnection.cc	/^std::string TcpConnection::getTcpInfoString()const{$/;"	f	class:JKYi::net::TcpConnection	signature:() const
JKYi::net::TcpConnection::getTcpInfoString	JKYi/reactor/TcpConnection.h	/^    std::string getTcpInfoString()const;$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:() const
JKYi::net::TcpConnection::handleClose	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::handleClose(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::handleClose	JKYi/reactor/TcpConnection.h	/^    void handleClose();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
JKYi::net::TcpConnection::handleError	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::handleError(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::handleError	JKYi/reactor/TcpConnection.h	/^    void handleError();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
JKYi::net::TcpConnection::handleRead	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::handleRead(Timestamp receiveTime){$/;"	f	class:JKYi::net::TcpConnection	signature:(Timestamp receiveTime)
JKYi::net::TcpConnection::handleRead	JKYi/reactor/TcpConnection.h	/^    void handleRead(Timestamp receiveTime);$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:(Timestamp receiveTime)
JKYi::net::TcpConnection::handleWrite	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::handleWrite(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::handleWrite	JKYi/reactor/TcpConnection.h	/^    void handleWrite();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
JKYi::net::TcpConnection::highWaterMarkCallback_	JKYi/reactor/TcpConnection.h	/^    HighWaterMarkCallback highWaterMarkCallback_;   \/\/é«æ°´ä½åè°$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::highWaterMark_	JKYi/reactor/TcpConnection.h	/^    size_t highWaterMark_;   \/\/æ°´ä½$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::inputBuffer	JKYi/reactor/TcpConnection.h	/^    Buffer* inputBuffer(){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:()
JKYi::net::TcpConnection::inputBuffer_	JKYi/reactor/TcpConnection.h	/^    Buffer inputBuffer_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::isReading	JKYi/reactor/TcpConnection.h	/^    bool isReading()const{$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
JKYi::net::TcpConnection::kConnected	JKYi/reactor/TcpConnection.h	/^        kConnected,$/;"	e	enum:JKYi::net::TcpConnection::StateE
JKYi::net::TcpConnection::kConnecting	JKYi/reactor/TcpConnection.h	/^        kConnecting,$/;"	e	enum:JKYi::net::TcpConnection::StateE
JKYi::net::TcpConnection::kDisconnected	JKYi/reactor/TcpConnection.h	/^        kDisconnected,$/;"	e	enum:JKYi::net::TcpConnection::StateE
JKYi::net::TcpConnection::kDisconnecting	JKYi/reactor/TcpConnection.h	/^        kDisconnecting$/;"	e	enum:JKYi::net::TcpConnection::StateE
JKYi::net::TcpConnection::localAddr_	JKYi/reactor/TcpConnection.h	/^    const Address::ptr localAddr_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::localAddress	JKYi/reactor/TcpConnection.h	/^    const Address::ptr& localAddress()const{ return localAddr_; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
JKYi::net::TcpConnection::loop_	JKYi/reactor/TcpConnection.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::messageCallback_	JKYi/reactor/TcpConnection.h	/^    MessageCallback messageCallback_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::name	JKYi/reactor/TcpConnection.h	/^    const std::string& name()const { return name_; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
JKYi::net::TcpConnection::name_	JKYi/reactor/TcpConnection.h	/^    const std::string name_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::outputBuffer	JKYi/reactor/TcpConnection.h	/^    Buffer* outputBuffer(){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:()
JKYi::net::TcpConnection::outputBuffer_	JKYi/reactor/TcpConnection.h	/^    Buffer outputBuffer_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::peerAddr_	JKYi/reactor/TcpConnection.h	/^    const Address::ptr peerAddr_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::peerAddress	JKYi/reactor/TcpConnection.h	/^    const Address::ptr& peerAddress() const{ return peerAddr_; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
JKYi::net::TcpConnection::ptr	JKYi/reactor/TcpConnection.h	/^    typedef std::shared_ptr<TcpConnection> ptr;$/;"	t	class:JKYi::net::TcpConnection	access:public
JKYi::net::TcpConnection::reading_	JKYi/reactor/TcpConnection.h	/^    bool reading_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::send	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::send(Buffer * buf){$/;"	f	class:JKYi::net::TcpConnection	signature:(Buffer * buf)
JKYi::net::TcpConnection::send	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::send(const StringPiece& message){$/;"	f	class:JKYi::net::TcpConnection	signature:(const StringPiece& message)
JKYi::net::TcpConnection::send	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::send(const void * data,int len){$/;"	f	class:JKYi::net::TcpConnection	signature:(const void * data,int len)
JKYi::net::TcpConnection::send	JKYi/reactor/TcpConnection.h	/^    void send(Buffer* message);$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(Buffer* message)
JKYi::net::TcpConnection::send	JKYi/reactor/TcpConnection.h	/^    void send(const StringPiece& message);$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(const StringPiece& message)
JKYi::net::TcpConnection::send	JKYi/reactor/TcpConnection.h	/^    void send(const void * message,int len);$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(const void * message,int len)
JKYi::net::TcpConnection::sendInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::sendInLoop(const StringPiece& message){$/;"	f	class:JKYi::net::TcpConnection	signature:(const StringPiece& message)
JKYi::net::TcpConnection::sendInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::sendInLoop(const void * message,size_t len){$/;"	f	class:JKYi::net::TcpConnection	signature:(const void * message,size_t len)
JKYi::net::TcpConnection::sendInLoop	JKYi/reactor/TcpConnection.h	/^    void sendInLoop(const StringPiece& message);$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:(const StringPiece& message)
JKYi::net::TcpConnection::sendInLoop	JKYi/reactor/TcpConnection.h	/^    void sendInLoop(const void * message,size_t len);$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:(const void * message,size_t len)
JKYi::net::TcpConnection::setCloseCallback	JKYi/reactor/TcpConnection.h	/^    void setCloseCallback(const CloseCallback& cb){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const CloseCallback& cb)
JKYi::net::TcpConnection::setConnectionCallback	JKYi/reactor/TcpConnection.h	/^    void setConnectionCallback(const ConnectionCallback& cb){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const ConnectionCallback& cb)
JKYi::net::TcpConnection::setContext	JKYi/reactor/TcpConnection.h	/^    void setContext(const boost::any& context){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const boost::any& context)
JKYi::net::TcpConnection::setHighWaterMarkCallback	JKYi/reactor/TcpConnection.h	/^    void setHighWaterMarkCallback(const HighWaterMarkCallback& cb,size_t highWaterMark){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const HighWaterMarkCallback& cb,size_t highWaterMark)
JKYi::net::TcpConnection::setMessageCallback	JKYi/reactor/TcpConnection.h	/^    void setMessageCallback(const MessageCallback& cb){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const MessageCallback& cb)
JKYi::net::TcpConnection::setState	JKYi/reactor/TcpConnection.h	/^    void setState(StateE s){$/;"	f	class:JKYi::net::TcpConnection	access:private	signature:(StateE s)
JKYi::net::TcpConnection::setTcpNoDelay	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::setTcpNoDelay(bool on){$/;"	f	class:JKYi::net::TcpConnection	signature:(bool on)
JKYi::net::TcpConnection::setTcpNoDelay	JKYi/reactor/TcpConnection.h	/^    void setTcpNoDelay(bool on);$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(bool on)
JKYi::net::TcpConnection::setWriteCompleteCallback	JKYi/reactor/TcpConnection.h	/^    void setWriteCompleteCallback(const WriteCompleteCallback& cb){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const WriteCompleteCallback& cb)
JKYi::net::TcpConnection::shutdown	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::shutdown(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::shutdown	JKYi/reactor/TcpConnection.h	/^    void shutdown();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
JKYi::net::TcpConnection::shutdownInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::shutdownInLoop(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::shutdownInLoop	JKYi/reactor/TcpConnection.h	/^    void shutdownInLoop();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
JKYi::net::TcpConnection::socket_	JKYi/reactor/TcpConnection.h	/^    std::unique_ptr<Socket>  socket_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::startRead	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::startRead(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::startRead	JKYi/reactor/TcpConnection.h	/^    void startRead();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
JKYi::net::TcpConnection::startReadInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::startReadInLoop(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::startReadInLoop	JKYi/reactor/TcpConnection.h	/^    void startReadInLoop();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
JKYi::net::TcpConnection::stateToString	JKYi/reactor/TcpConnection.cc	/^const char * TcpConnection::stateToString()const{$/;"	f	class:JKYi::net::TcpConnection	signature:() const
JKYi::net::TcpConnection::stateToString	JKYi/reactor/TcpConnection.h	/^    const char * stateToString()const;$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:() const
JKYi::net::TcpConnection::state_	JKYi/reactor/TcpConnection.h	/^    StateE state_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::stopRead	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::stopRead(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::stopRead	JKYi/reactor/TcpConnection.h	/^    void stopRead();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
JKYi::net::TcpConnection::stopReadInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::stopReadInLoop(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::stopReadInLoop	JKYi/reactor/TcpConnection.h	/^    void stopReadInLoop();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
JKYi::net::TcpConnection::writeCompleteCallback_	JKYi/reactor/TcpConnection.h	/^    WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:JKYi::net::TcpConnection	access:private
JKYi::net::TcpConnection::~TcpConnection	JKYi/reactor/TcpConnection.cc	/^TcpConnection::~TcpConnection(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
JKYi::net::TcpConnection::~TcpConnection	JKYi/reactor/TcpConnection.h	/^    ~TcpConnection();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
JKYi::net::TcpConnectionPtr	JKYi/reactor/Callbacks.h	/^typedef std::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:JKYi::net
JKYi::net::TcpServer	JKYi/reactor/TcpServer.h	/^class TcpServer : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::TcpServer::ConnectionMap	JKYi/reactor/TcpServer.h	/^    typedef std::map<std::string,TcpConnection::ptr> ConnectionMap;$/;"	t	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::Option	JKYi/reactor/TcpServer.h	/^    enum Option{$/;"	g	class:JKYi::net::TcpServer	access:public
JKYi::net::TcpServer::TcpServer	JKYi/reactor/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop,$/;"	f	class:JKYi::net::TcpServer	signature:(EventLoop* loop, const Address::ptr& listenAddr, const std::string& nameArg, Option option)
JKYi::net::TcpServer::TcpServer	JKYi/reactor/TcpServer.h	/^    TcpServer(EventLoop* loop,$/;"	p	class:JKYi::net::TcpServer	access:public	signature:(EventLoop* loop, const Address::ptr& listerAddr, const std::string& nameArg, Option option = kNoReusePort)
JKYi::net::TcpServer::ThreadInitCallback	JKYi/reactor/TcpServer.h	/^    typedef std::function<void (EventLoop*)> ThreadInitCallback;$/;"	t	class:JKYi::net::TcpServer	access:public
JKYi::net::TcpServer::acceptor_	JKYi/reactor/TcpServer.h	/^    std::unique_ptr<Acceptor> acceptor_;   \/\/çå¬å¨$/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::connectionCallback_	JKYi/reactor/TcpServer.h	/^    ConnectionCallback connectionCallback_;$/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::connections_	JKYi/reactor/TcpServer.h	/^    ConnectionMap connections_;    $/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::getLoop	JKYi/reactor/TcpServer.h	/^    EventLoop* getLoop()const { return loop_; }$/;"	f	class:JKYi::net::TcpServer	access:public	signature:() const
JKYi::net::TcpServer::ipPort	JKYi/reactor/TcpServer.h	/^    const std::string& ipPort()const { return ipPort_; }$/;"	f	class:JKYi::net::TcpServer	access:public	signature:() const
JKYi::net::TcpServer::ipPort_	JKYi/reactor/TcpServer.h	/^    const std::string ipPort_;$/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::kNoReusePort	JKYi/reactor/TcpServer.h	/^        kNoReusePort,$/;"	e	enum:JKYi::net::TcpServer::Option
JKYi::net::TcpServer::kReusePort	JKYi/reactor/TcpServer.h	/^        kReusePort$/;"	e	enum:JKYi::net::TcpServer::Option
JKYi::net::TcpServer::loop_	JKYi/reactor/TcpServer.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::messageCallback_	JKYi/reactor/TcpServer.h	/^    MessageCallback messageCallback_;$/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::name	JKYi/reactor/TcpServer.h	/^    const std::string& name()const { return name_; }$/;"	f	class:JKYi::net::TcpServer	access:public	signature:() const
JKYi::net::TcpServer::name_	JKYi/reactor/TcpServer.h	/^    const std::string name_;$/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::newConnection	JKYi/reactor/TcpServer.cc	/^void TcpServer::newConnection(int sockfd,const Address::ptr& peerAddr){$/;"	f	class:JKYi::net::TcpServer	signature:(int sockfd,const Address::ptr& peerAddr)
JKYi::net::TcpServer::newConnection	JKYi/reactor/TcpServer.h	/^    void newConnection(int sockfd,const Address::ptr& peerAddr);$/;"	p	class:JKYi::net::TcpServer	access:private	signature:(int sockfd,const Address::ptr& peerAddr)
JKYi::net::TcpServer::nextConnId_	JKYi/reactor/TcpServer.h	/^    int nextConnId_;$/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::removeConnection	JKYi/reactor/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnection::ptr& conn){$/;"	f	class:JKYi::net::TcpServer	signature:(const TcpConnection::ptr& conn)
JKYi::net::TcpServer::removeConnection	JKYi/reactor/TcpServer.h	/^    void removeConnection(const TcpConnection::ptr& conn);$/;"	p	class:JKYi::net::TcpServer	access:private	signature:(const TcpConnection::ptr& conn)
JKYi::net::TcpServer::removeConnectionInLoop	JKYi/reactor/TcpServer.cc	/^void TcpServer::removeConnectionInLoop(const TcpConnection::ptr& conn){$/;"	f	class:JKYi::net::TcpServer	signature:(const TcpConnection::ptr& conn)
JKYi::net::TcpServer::removeConnectionInLoop	JKYi/reactor/TcpServer.h	/^    void removeConnectionInLoop(const TcpConnection::ptr& conn);$/;"	p	class:JKYi::net::TcpServer	access:private	signature:(const TcpConnection::ptr& conn)
JKYi::net::TcpServer::setConnectionCallback	JKYi/reactor/TcpServer.h	/^    void setConnectionCallback(const ConnectionCallback& cb){$/;"	f	class:JKYi::net::TcpServer	access:public	signature:(const ConnectionCallback& cb)
JKYi::net::TcpServer::setMessageCallback	JKYi/reactor/TcpServer.h	/^    void setMessageCallback(const MessageCallback& cb){$/;"	f	class:JKYi::net::TcpServer	access:public	signature:(const MessageCallback& cb)
JKYi::net::TcpServer::setThreadInitCallback	JKYi/reactor/TcpServer.h	/^    void setThreadInitCallback(const ThreadInitCallback& cb){$/;"	f	class:JKYi::net::TcpServer	access:public	signature:(const ThreadInitCallback& cb)
JKYi::net::TcpServer::setThreadNum	JKYi/reactor/TcpServer.cc	/^void TcpServer::setThreadNum(int numThreads){$/;"	f	class:JKYi::net::TcpServer	signature:(int numThreads)
JKYi::net::TcpServer::setThreadNum	JKYi/reactor/TcpServer.h	/^    void setThreadNum(int numThreads);$/;"	p	class:JKYi::net::TcpServer	access:public	signature:(int numThreads)
JKYi::net::TcpServer::setWriteCompleteCallback	JKYi/reactor/TcpServer.h	/^    void setWriteCompleteCallback(const WriteCompleteCallback& cb){$/;"	f	class:JKYi::net::TcpServer	access:public	signature:(const WriteCompleteCallback& cb)
JKYi::net::TcpServer::start	JKYi/reactor/TcpServer.cc	/^void TcpServer::start(){$/;"	f	class:JKYi::net::TcpServer	signature:()
JKYi::net::TcpServer::start	JKYi/reactor/TcpServer.h	/^    void start();$/;"	p	class:JKYi::net::TcpServer	access:public	signature:()
JKYi::net::TcpServer::started_	JKYi/reactor/TcpServer.h	/^    AtomicInt32 started_;$/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::threadInitCallback_	JKYi/reactor/TcpServer.h	/^    ThreadInitCallback threadInitCallback_;$/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::threadPool	JKYi/reactor/TcpServer.h	/^    std::shared_ptr<EventLoopThreadPool> threadPool(){$/;"	f	class:JKYi::net::TcpServer	access:public	signature:()
JKYi::net::TcpServer::threadPool_	JKYi/reactor/TcpServer.h	/^    std::shared_ptr<EventLoopThreadPool> threadPool_;  \/\/çº¿ç¨æ± $/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::writeCompleteCallback_	JKYi/reactor/TcpServer.h	/^    WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:JKYi::net::TcpServer	access:private
JKYi::net::TcpServer::~TcpServer	JKYi/reactor/TcpServer.cc	/^TcpServer::~TcpServer(){$/;"	f	class:JKYi::net::TcpServer	signature:()
JKYi::net::TcpServer::~TcpServer	JKYi/reactor/TcpServer.h	/^    ~TcpServer();$/;"	p	class:JKYi::net::TcpServer	access:public	signature:()
JKYi::net::Thread	JKYi/reactor/Thread.h	/^class Thread : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::Thread::Thread	JKYi/reactor/Thread.cc	/^Thread::Thread(ThreadFunc func,const std::string& name)$/;"	f	class:JKYi::net::Thread	signature:(ThreadFunc func,const std::string& name)
JKYi::net::Thread::Thread	JKYi/reactor/Thread.h	/^    explicit Thread(ThreadFunc ,const std::string& name = std::string());$/;"	p	class:JKYi::net::Thread	access:public	signature:(ThreadFunc ,const std::string& name = std::string())
JKYi::net::Thread::ThreadFunc	JKYi/reactor/Thread.h	/^    typedef std::function<void ()> ThreadFunc;$/;"	t	class:JKYi::net::Thread	access:public
JKYi::net::Thread::func_	JKYi/reactor/Thread.h	/^    ThreadFunc func_;$/;"	m	class:JKYi::net::Thread	access:private
JKYi::net::Thread::join	JKYi/reactor/Thread.cc	/^int Thread::join(){$/;"	f	class:JKYi::net::Thread	signature:()
JKYi::net::Thread::join	JKYi/reactor/Thread.h	/^    int join();$/;"	p	class:JKYi::net::Thread	access:public	signature:()
JKYi::net::Thread::joined_	JKYi/reactor/Thread.h	/^    bool joined_;$/;"	m	class:JKYi::net::Thread	access:private
JKYi::net::Thread::latch_	JKYi/reactor/Thread.h	/^    CountDownLatch latch_;          \/\/ç¨æ¥è®©ä¸»çº¿ç¨ç­å¾å­çº¿ç¨å¾å°èªå·±çtidä¹åå¨å¾ä¸æ§è¡$/;"	m	class:JKYi::net::Thread	access:private
JKYi::net::Thread::name	JKYi/reactor/Thread.h	/^    const std::string& name(){ return name_; }$/;"	f	class:JKYi::net::Thread	access:public	signature:()
JKYi::net::Thread::name_	JKYi/reactor/Thread.h	/^    std::string name_;$/;"	m	class:JKYi::net::Thread	access:private
JKYi::net::Thread::numCreated	JKYi/reactor/Thread.h	/^    static int numCreated(){ return numCreated_.get(); }$/;"	f	class:JKYi::net::Thread	access:public	signature:()
JKYi::net::Thread::numCreated_	JKYi/reactor/Thread.h	/^    static AtomicInt32 numCreated_; \/\/ ç»´æ¤å½ååå»ºççº¿ç¨æ°ç®$/;"	m	class:JKYi::net::Thread	access:private
JKYi::net::Thread::pthreadId_	JKYi/reactor/Thread.h	/^    pthread_t pthreadId_;$/;"	m	class:JKYi::net::Thread	access:private
JKYi::net::Thread::setDefaultName	JKYi/reactor/Thread.cc	/^void Thread::setDefaultName(){$/;"	f	class:JKYi::net::Thread	signature:()
JKYi::net::Thread::setDefaultName	JKYi/reactor/Thread.h	/^    void setDefaultName();$/;"	p	class:JKYi::net::Thread	access:private	signature:()
JKYi::net::Thread::start	JKYi/reactor/Thread.cc	/^void Thread::start(){$/;"	f	class:JKYi::net::Thread	signature:()
JKYi::net::Thread::start	JKYi/reactor/Thread.h	/^    void start();$/;"	p	class:JKYi::net::Thread	access:public	signature:()
JKYi::net::Thread::started	JKYi/reactor/Thread.h	/^    bool started()const { return started_; }$/;"	f	class:JKYi::net::Thread	access:public	signature:() const
JKYi::net::Thread::started_	JKYi/reactor/Thread.h	/^    bool started_;$/;"	m	class:JKYi::net::Thread	access:private
JKYi::net::Thread::tid	JKYi/reactor/Thread.h	/^    pid_t tid()const { return tid_; }$/;"	f	class:JKYi::net::Thread	access:public	signature:() const
JKYi::net::Thread::tid_	JKYi/reactor/Thread.h	/^    pid_t tid_;$/;"	m	class:JKYi::net::Thread	access:private
JKYi::net::Thread::~Thread	JKYi/reactor/Thread.cc	/^Thread::~Thread(){$/;"	f	class:JKYi::net::Thread	signature:()
JKYi::net::Thread::~Thread	JKYi/reactor/Thread.h	/^    ~Thread();$/;"	p	class:JKYi::net::Thread	access:public	signature:()
JKYi::net::Timer	JKYi/reactor/timer.h	/^class Timer : Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::Timer::Timer	JKYi/reactor/timer.h	/^    Timer(TimerCallback cb,Timestamp when,double interval)$/;"	f	class:JKYi::net::Timer	access:public	signature:(TimerCallback cb,Timestamp when,double interval)
JKYi::net::Timer::callback_	JKYi/reactor/timer.h	/^    const TimerCallback callback_;$/;"	m	class:JKYi::net::Timer	access:private
JKYi::net::Timer::expiration_	JKYi/reactor/timer.h	/^    Timestamp expiration_;          \/\/è¿ææ¶é´$/;"	m	class:JKYi::net::Timer	access:private
JKYi::net::Timer::getExpiration	JKYi/reactor/timer.h	/^     Timestamp getExpiration()const { return expiration_; }$/;"	f	class:JKYi::net::Timer	access:public	signature:() const
JKYi::net::Timer::getNumCreated	JKYi/reactor/timer.h	/^     static int64_t getNumCreated(){ return s_numCreated_.get(); }$/;"	f	class:JKYi::net::Timer	access:public	signature:()
JKYi::net::Timer::getSequence	JKYi/reactor/timer.h	/^     int64_t getSequence()const { return sequence_; }$/;"	f	class:JKYi::net::Timer	access:public	signature:() const
JKYi::net::Timer::interval_	JKYi/reactor/timer.h	/^    const double interval_;         \/\/è§¦åçæ¶é´é´é$/;"	m	class:JKYi::net::Timer	access:private
JKYi::net::Timer::isRepeat	JKYi/reactor/timer.h	/^     bool isRepeat()const { return repeat_; }$/;"	f	class:JKYi::net::Timer	access:public	signature:() const
JKYi::net::Timer::repeat_	JKYi/reactor/timer.h	/^    const bool repeat_;             \/\/æ¯å¦éè¦å¾ªç¯è§¦å$/;"	m	class:JKYi::net::Timer	access:private
JKYi::net::Timer::restart	JKYi/reactor/timer.cc	/^void Timer::restart(Timestamp now){$/;"	f	class:JKYi::net::Timer	signature:(Timestamp now)
JKYi::net::Timer::restart	JKYi/reactor/timer.h	/^     void restart(Timestamp now);$/;"	p	class:JKYi::net::Timer	access:public	signature:(Timestamp now)
JKYi::net::Timer::run	JKYi/reactor/timer.h	/^     void run()const{$/;"	f	class:JKYi::net::Timer	access:public	signature:() const
JKYi::net::Timer::s_numCreated_	JKYi/reactor/timer.cc	/^AtomicInt64 Timer::s_numCreated_;$/;"	m	class:JKYi::net::Timer	file:
JKYi::net::Timer::s_numCreated_	JKYi/reactor/timer.h	/^    static AtomicInt64 s_numCreated_;  \/\/è®°å½ä¸å±åå»ºçå®æ¶å¨çæ°ç®$/;"	m	class:JKYi::net::Timer	access:private
JKYi::net::Timer::sequence_	JKYi/reactor/timer.h	/^    const int64_t sequence_;        \/\/$/;"	m	class:JKYi::net::Timer	access:private
JKYi::net::TimerCallback	JKYi/reactor/Callbacks.h	/^typedef std::function<void ()> TimerCallback;$/;"	t	namespace:JKYi::net
JKYi::net::TimerId	JKYi/reactor/timerId.h	/^class TimerId{$/;"	c	namespace:JKYi::net
JKYi::net::TimerId::TimerId	JKYi/reactor/timerId.h	/^     TimerId(Timer* timer,int64_t seq)$/;"	f	class:JKYi::net::TimerId	access:public	signature:(Timer* timer,int64_t seq)
JKYi::net::TimerId::TimerId	JKYi/reactor/timerId.h	/^    TimerId()$/;"	f	class:JKYi::net::TimerId	access:public	signature:()
JKYi::net::TimerId::sequence_	JKYi/reactor/timerId.h	/^    int64_t sequence_;$/;"	m	class:JKYi::net::TimerId	access:private
JKYi::net::TimerId::timer_	JKYi/reactor/timerId.h	/^    Timer* timer_;$/;"	m	class:JKYi::net::TimerId	access:private
JKYi::net::TimerQueue	JKYi/reactor/timerQueue.h	/^class TimerQueue : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
JKYi::net::TimerQueue::ActiveTimer	JKYi/reactor/timerQueue.h	/^    typedef std::pair<Timer* ,int64_t> ActiveTimer;$/;"	t	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::ActiveTimerSet	JKYi/reactor/timerQueue.h	/^    typedef std::set<ActiveTimer> ActiveTimerSet;$/;"	t	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::Entry	JKYi/reactor/timerQueue.h	/^    typedef std::pair<Timestamp,Timer*> Entry;$/;"	t	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::TimerList	JKYi/reactor/timerQueue.h	/^    typedef std::set<Entry> TimerList;$/;"	t	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::TimerQueue	JKYi/reactor/timerQueue.h	/^    explicit TimerQueue(EventLoop* loop);$/;"	p	class:JKYi::net::TimerQueue	access:public	signature:(EventLoop* loop)
JKYi::net::TimerQueue::activeTimers_	JKYi/reactor/timerQueue.h	/^    ActiveTimerSet activeTimers_;   \/\/å½åææçå®æ¶å¨åè¡¨$/;"	m	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::addTimer	JKYi/reactor/timerQueue.h	/^    TimerId addTimer(TimerCallback cb,Timestamp when,double interval);$/;"	p	class:JKYi::net::TimerQueue	access:public	signature:(TimerCallback cb,Timestamp when,double interval)
JKYi::net::TimerQueue::addTimerInLoop	JKYi/reactor/timerQueue.h	/^    void addTimerInLoop(Timer* timer);$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:(Timer* timer)
JKYi::net::TimerQueue::callingExpiredTimers_	JKYi/reactor/timerQueue.h	/^    bool callingExpiredTimers_;     \/\/æ¯å¦æ­£å¨å¤çè¶æ¶çå®æ¶å¨$/;"	m	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::cancel	JKYi/reactor/timerQueue.h	/^    void cancel(TimerId timerId);$/;"	p	class:JKYi::net::TimerQueue	access:public	signature:(TimerId timerId)
JKYi::net::TimerQueue::cancelInLoop	JKYi/reactor/timerQueue.h	/^    void cancelInLoop(TimerId timerId);$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:(TimerId timerId)
JKYi::net::TimerQueue::cancelingTimers_	JKYi/reactor/timerQueue.h	/^    ActiveTimerSet cancelingTimers_; \/\/å¨å¤çè¶æ¶å®æ¶å¨è¿ç¨ä¸­åæ¶çå®æ¶å¨å°±æå­å¨è¿é$/;"	m	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::getExpired	JKYi/reactor/timerQueue.h	/^    std::vector<Entry> getExpired(Timestamp now);$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:(Timestamp now)
JKYi::net::TimerQueue::handleRead	JKYi/reactor/timerQueue.h	/^    void handleRead();$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:()
JKYi::net::TimerQueue::insert	JKYi/reactor/timerQueue.h	/^    bool insert(Timer* timer);$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:(Timer* timer)
JKYi::net::TimerQueue::loop_	JKYi/reactor/timerQueue.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::reset	JKYi/reactor/timerQueue.h	/^    void reset(const std::vector<Entry>& expired,Timestamp now);$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:(const std::vector<Entry>& expired,Timestamp now)
JKYi::net::TimerQueue::timerfdChannel_	JKYi/reactor/timerQueue.h	/^    Channel* timerfdChannel_;$/;"	m	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::timerfd_	JKYi/reactor/timerQueue.h	/^    const int timerfd_;$/;"	m	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::timers_	JKYi/reactor/timerQueue.h	/^    TimerList timers_;              \/\/å å¥çå®æ¶å¨åè¡¨$/;"	m	class:JKYi::net::TimerQueue	access:private
JKYi::net::TimerQueue::~TimerQueue	JKYi/reactor/timerQueue.h	/^    ~TimerQueue();$/;"	p	class:JKYi::net::TimerQueue	access:public	signature:()
JKYi::net::Timestamp	JKYi/timestamp.h	/^class Timestamp:public boost::equality_comparable<Timestamp>,$/;"	c	namespace:JKYi::net	inherits:boost::equality_comparable,boost::less_than_comparable
JKYi::net::Timestamp::Timestamp	JKYi/timestamp.h	/^    Timestamp()$/;"	f	class:JKYi::net::Timestamp	access:public	signature:()
JKYi::net::Timestamp::Timestamp	JKYi/timestamp.h	/^    explicit Timestamp(int64_t microSecondsSinceEpochArg)$/;"	f	class:JKYi::net::Timestamp	access:public	signature:(int64_t microSecondsSinceEpochArg)
JKYi::net::Timestamp::fromUnixTime	JKYi/timestamp.h	/^    static Timestamp fromUnixTime(time_t t){ return fromUnixTime(t,0); }$/;"	f	class:JKYi::net::Timestamp	access:public	signature:(time_t t)
JKYi::net::Timestamp::fromUnixTime	JKYi/timestamp.h	/^    static Timestamp fromUnixTime(time_t t,int microseconds){ return Timestamp(static_cast<int64_t>(t) * kMicroSecondsPerSecond + microseconds); }$/;"	f	class:JKYi::net::Timestamp	access:public	signature:(time_t t,int microseconds)
JKYi::net::Timestamp::getMicroSecondsSinceEpoch	JKYi/timestamp.h	/^    int64_t getMicroSecondsSinceEpoch()const { return m_microSecondsSinceEpoch; }$/;"	f	class:JKYi::net::Timestamp	access:public	signature:() const
JKYi::net::Timestamp::getSecondsSinceEpoch	JKYi/timestamp.h	/^    time_t getSecondsSinceEpoch()const{ $/;"	f	class:JKYi::net::Timestamp	access:public	signature:() const
JKYi::net::Timestamp::invalid	JKYi/timestamp.h	/^    static Timestamp invalid(){ return Timestamp(); }$/;"	f	class:JKYi::net::Timestamp	access:public	signature:()
JKYi::net::Timestamp::kMicroSecondsPerSecond	JKYi/timestamp.h	/^    static const int kMicroSecondsPerSecond = 1000 * 1000;$/;"	m	class:JKYi::net::Timestamp	access:public
JKYi::net::Timestamp::m_microSecondsSinceEpoch	JKYi/timestamp.h	/^    int64_t m_microSecondsSinceEpoch;$/;"	m	class:JKYi::net::Timestamp	access:private
JKYi::net::Timestamp::now	JKYi/timestamp.cc	/^Timestamp Timestamp::now(){$/;"	f	class:JKYi::net::Timestamp	signature:()
JKYi::net::Timestamp::now	JKYi/timestamp.h	/^    static Timestamp now();$/;"	p	class:JKYi::net::Timestamp	access:public	signature:()
JKYi::net::Timestamp::swap	JKYi/timestamp.h	/^    void swap(Timestamp& rhv){$/;"	f	class:JKYi::net::Timestamp	access:public	signature:(Timestamp& rhv)
JKYi::net::Timestamp::toFormattedString	JKYi/timestamp.cc	/^std::string Timestamp::toFormattedString(bool showMicroseconds)const{$/;"	f	class:JKYi::net::Timestamp	signature:(bool showMicroseconds) const
JKYi::net::Timestamp::toFormattedString	JKYi/timestamp.h	/^    std::string toFormattedString(bool showMicroseconds = true)const;$/;"	p	class:JKYi::net::Timestamp	access:public	signature:(bool showMicroseconds = true) const
JKYi::net::Timestamp::toString	JKYi/timestamp.cc	/^std::string Timestamp::toString()const {$/;"	f	class:JKYi::net::Timestamp	signature:() const
JKYi::net::Timestamp::toString	JKYi/timestamp.h	/^    std::string toString()const;$/;"	p	class:JKYi::net::Timestamp	access:public	signature:() const
JKYi::net::Timestamp::valid	JKYi/timestamp.h	/^    bool valid()const { return m_microSecondsSinceEpoch > 0; }$/;"	f	class:JKYi::net::Timestamp	access:public	signature:() const
JKYi::net::WriteCompleteCallback	JKYi/reactor/Callbacks.h	/^typedef std::function<void (const TcpConnectionPtr&)> WriteCompleteCallback;$/;"	t	namespace:JKYi::net
JKYi::net::__anon18::kAdded	JKYi/reactor/poller/epollPoller.cc	/^    const int kAdded = 1;     \/\/å·²æ·»å $/;"	m	namespace:JKYi::net::__anon18	file:
JKYi::net::__anon18::kDeleted	JKYi/reactor/poller/epollPoller.cc	/^    const int kDeleted = 2;   \/\/mapä¸­å­å¨è¯¥channelï¼ä½æ¯å¯¹åºçfdå·²ç»epoll_ctl_del$/;"	m	namespace:JKYi::net::__anon18	file:
JKYi::net::__anon18::kNew	JKYi/reactor/poller/epollPoller.cc	/^    const int kNew  = -1;     \/\/æªæ·»å $/;"	m	namespace:JKYi::net::__anon18	file:
JKYi::net::addTime	JKYi/timestamp.h	/^inline Timestamp addTime(Timestamp timestamp,double seconds){$/;"	f	namespace:JKYi::net	signature:(Timestamp timestamp,double seconds)
JKYi::net::defaultConnectionCallback	JKYi/reactor/Callbacks.h	/^void defaultConnectionCallback(const TcpConnectionPtr& conn);$/;"	p	namespace:JKYi::net	signature:(const TcpConnectionPtr& conn)
JKYi::net::defaultConnectionCallback	JKYi/reactor/TcpConnection.cc	/^void defaultConnectionCallback(const TcpConnectionPtr& conn){$/;"	f	namespace:JKYi::net	signature:(const TcpConnectionPtr& conn)
JKYi::net::defaultMessageCallback	JKYi/reactor/Callbacks.h	/^void defaultMessageCallback(const TcpConnectionPtr& conn,Buffer*,$/;"	p	namespace:JKYi::net	signature:(const TcpConnectionPtr& conn,Buffer*, Timestamp receiveTime)
JKYi::net::defaultMessageCallback	JKYi/reactor/TcpConnection.cc	/^void defaultMessageCallback(const TcpConnectionPtr& conn,Buffer* buf,$/;"	f	namespace:JKYi::net	signature:(const TcpConnectionPtr& conn,Buffer* buf, Timestamp receiveTime)
JKYi::net::detail	JKYi/reactor/TcpClient.cc	/^namespace detail{$/;"	n	namespace:JKYi::net	file:
JKYi::net::detail	JKYi/reactor/timerQueue.cc	/^namespace detail{$/;"	n	namespace:JKYi::net	file:
JKYi::net::detail::createTimerfd	JKYi/reactor/timerQueue.cc	/^int createTimerfd(){$/;"	f	namespace:JKYi::net::detail	signature:()
JKYi::net::detail::g_logger	JKYi/reactor/timerQueue.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net::detail	file:
JKYi::net::detail::howMuchTimeFromNow	JKYi/reactor/timerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when){$/;"	f	namespace:JKYi::net::detail	signature:(Timestamp when)
JKYi::net::detail::readTimerfd	JKYi/reactor/timerQueue.cc	/^void readTimerfd(int timerfd,Timestamp now){$/;"	f	namespace:JKYi::net::detail	signature:(int timerfd,Timestamp now)
JKYi::net::detail::removeConnection	JKYi/reactor/TcpClient.cc	/^void removeConnection(EventLoop* loop,const TcpConnection::ptr& conn){$/;"	f	namespace:JKYi::net::detail	signature:(EventLoop* loop,const TcpConnection::ptr& conn)
JKYi::net::detail::removeConnector	JKYi/reactor/TcpClient.cc	/^void removeConnector(const ConnectorPtr& connector){$/;"	f	namespace:JKYi::net::detail	signature:(const ConnectorPtr& connector)
JKYi::net::detail::resetTimerfd	JKYi/reactor/timerQueue.cc	/^void resetTimerfd(int timerfd,Timestamp expiration){$/;"	f	namespace:JKYi::net::detail	signature:(int timerfd,Timestamp expiration)
JKYi::net::g_logger	JKYi/reactor/Connector.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
JKYi::net::g_logger	JKYi/reactor/Socket.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
JKYi::net::g_logger	JKYi/reactor/TcpClient.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
JKYi::net::g_logger	JKYi/reactor/TcpConnection.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
JKYi::net::g_logger	JKYi/reactor/TcpServer.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
JKYi::net::g_logger	JKYi/reactor/acceptor.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
JKYi::net::g_logger	JKYi/reactor/channel.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
JKYi::net::g_logger	JKYi/reactor/poller/epollPoller.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
JKYi::net::g_logger	JKYi/reactor/poller/pollPoller.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
JKYi::net::operator <	JKYi/timestamp.h	/^inline bool operator< (const Timestamp& lhv,const Timestamp& rhv){$/;"	f	namespace:JKYi::net	signature:(const Timestamp& lhv,const Timestamp& rhv)
JKYi::net::operator ==	JKYi/timestamp.h	/^inline bool operator== (const Timestamp& lhv,const Timestamp& rhv){$/;"	f	namespace:JKYi::net	signature:(const Timestamp& lhv,const Timestamp& rhv)
JKYi::net::sockets	JKYi/reactor/SocketsOps.h	/^namespace sockets{$/;"	n	namespace:JKYi::net
JKYi::net::sockets::accept	JKYi/reactor/SocketsOps.h	/^int  accept(int sockfd, struct sockaddr_in6* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, struct sockaddr_in6* addr)
JKYi::net::sockets::bindOrDie	JKYi/reactor/SocketsOps.h	/^void bindOrDie(int sockfd, const struct sockaddr* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, const struct sockaddr* addr)
JKYi::net::sockets::close	JKYi/reactor/SocketsOps.h	/^void close(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
JKYi::net::sockets::connect	JKYi/reactor/SocketsOps.h	/^int  connect(int sockfd, const struct sockaddr* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, const struct sockaddr* addr)
JKYi::net::sockets::createNonBlockingOrDie	JKYi/reactor/SocketsOps.h	/^int createNonBlockingOrDie(sa_family_t family);$/;"	p	namespace:JKYi::net::sockets	signature:(sa_family_t family)
JKYi::net::sockets::fromIpPort	JKYi/reactor/SocketsOps.h	/^void fromIpPort(const char* ip, uint16_t port,$/;"	p	namespace:JKYi::net::sockets	signature:(const char* ip, uint16_t port, struct sockaddr_in* addr)
JKYi::net::sockets::fromIpPort	JKYi/reactor/SocketsOps.h	/^void fromIpPort(const char* ip, uint16_t port,$/;"	p	namespace:JKYi::net::sockets	signature:(const char* ip, uint16_t port, struct sockaddr_in6* addr)
JKYi::net::sockets::getLocalAddr	JKYi/reactor/SocketsOps.h	/^struct sockaddr_in6 getLocalAddr(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
JKYi::net::sockets::getPeerAddr	JKYi/reactor/SocketsOps.h	/^struct sockaddr_in6 getPeerAddr(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
JKYi::net::sockets::getSocketError	JKYi/reactor/SocketsOps.h	/^int getSocketError(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
JKYi::net::sockets::isSelfConnect	JKYi/reactor/SocketsOps.h	/^bool isSelfConnect(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
JKYi::net::sockets::listenOrDie	JKYi/reactor/SocketsOps.h	/^void listenOrDie(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
JKYi::net::sockets::read	JKYi/reactor/SocketsOps.h	/^ssize_t read(int sockfd, void *buf, size_t count);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, void *buf, size_t count)
JKYi::net::sockets::readv	JKYi/reactor/SocketsOps.h	/^ssize_t readv(int sockfd, const struct iovec *iov, int iovcnt);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, const struct iovec *iov, int iovcnt)
JKYi::net::sockets::shutdownWrite	JKYi/reactor/SocketsOps.h	/^void shutdownWrite(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
JKYi::net::sockets::sockaddr_cast	JKYi/reactor/SocketsOps.h	/^const struct sockaddr* sockaddr_cast(const struct sockaddr_in* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(const struct sockaddr_in* addr)
JKYi::net::sockets::sockaddr_cast	JKYi/reactor/SocketsOps.h	/^const struct sockaddr* sockaddr_cast(const struct sockaddr_in6* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(const struct sockaddr_in6* addr)
JKYi::net::sockets::sockaddr_cast	JKYi/reactor/SocketsOps.h	/^struct sockaddr* sockaddr_cast(struct sockaddr_in6* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(struct sockaddr_in6* addr)
JKYi::net::sockets::sockaddr_in6_cast	JKYi/reactor/SocketsOps.h	/^const struct sockaddr_in6* sockaddr_in6_cast(const struct sockaddr* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(const struct sockaddr* addr)
JKYi::net::sockets::sockaddr_in_cast	JKYi/reactor/SocketsOps.h	/^const struct sockaddr_in* sockaddr_in_cast(const struct sockaddr* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(const struct sockaddr* addr)
JKYi::net::sockets::toIp	JKYi/reactor/SocketsOps.h	/^void toIp(char* buf, size_t size,$/;"	p	namespace:JKYi::net::sockets	signature:(char* buf, size_t size, const struct sockaddr* addr)
JKYi::net::sockets::toIpPort	JKYi/reactor/SocketsOps.h	/^void toIpPort(char* buf, size_t size,$/;"	p	namespace:JKYi::net::sockets	signature:(char* buf, size_t size, const struct sockaddr* addr)
JKYi::net::sockets::write	JKYi/reactor/SocketsOps.h	/^ssize_t write(int sockfd, const void *buf, size_t count);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, const void *buf, size_t count)
JKYi::net::static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLERR == POLLERR,      "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLERR == POLLERR, Ó)
JKYi::net::static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLHUP == POLLHUP,      "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLHUP == POLLHUP, Ó)
JKYi::net::static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLIN == POLLIN,        "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLIN == POLLIN, Ó)
JKYi::net::static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLOUT == POLLOUT,      "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLOUT == POLLOUT, Ó)
JKYi::net::static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLPRI == POLLPRI,      "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLPRI == POLLPRI, Ó)
JKYi::net::static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLRDHUP == POLLRDHUP,  "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLRDHUP == POLLRDHUP, Ó)
JKYi::net::timeDifference	JKYi/timestamp.h	/^inline double timeDifference(const Timestamp& high,const Timestamp& low){$/;"	f	namespace:JKYi::net	signature:(const Timestamp& high,const Timestamp& low)
JKYi::nop	JKYi/util.h	/^void nop(T * t){$/;"	f	namespace:JKYi	signature:(T * t)
JKYi::operator <<	JKYi/address.cc	/^std::ostream& operator<< (std::ostream&os,const Address&addr){$/;"	f	namespace:JKYi	signature:(std::ostream&os,const Address&addr)
JKYi::operator <<	JKYi/address.h	/^std::ostream& operator<< (std::ostream&os,const Address&rhv);$/;"	p	namespace:JKYi	signature:(std::ostream&os,const Address&rhv)
JKYi::random_string	JKYi/util/hash_util.cc	/^std::string random_string(size_t len,const std::string& chars){$/;"	f	namespace:JKYi	signature:(size_t len,const std::string& chars)
JKYi::random_string	JKYi/util/hash_util.h	/^std::string random_string(size_t len,$/;"	p	namespace:JKYi	signature:(size_t len, const std::string& chars = Ó)
JKYi::real_daemon	JKYi/daemon.cc	/^static int real_daemon(int argc,char** argv,$/;"	f	namespace:JKYi	signature:(int argc,char** argv, std::function<int (int argc,char ** argv)>main_cb)
JKYi::real_start	JKYi/daemon.cc	/^static int real_start(int argc,char ** argv,$/;"	f	namespace:JKYi	signature:(int argc,char ** argv, std::function<int(int argc,char** argv)>main_cb)
JKYi::s_connect_timeout	JKYi/hook.cc	/^static uint64_t s_connect_timeout=-1;$/;"	m	namespace:JKYi	file:
JKYi::s_file2modifytime	JKYi/config.cc	/^static std::map<std::string,uint64_t> s_file2modifytime;$/;"	m	namespace:JKYi	file:
JKYi::s_hook_initer	JKYi/hook.cc	/^static _HookIniter s_hook_initer;$/;"	m	namespace:JKYi	file:
JKYi::s_mutex	JKYi/config.cc	/^static JKYi::Mutex s_mutex;   $/;"	m	namespace:JKYi	file:
JKYi::s_thread	JKYi/db/fox_thread.cc	/^thread_local FoxThread* s_thread = nullptr;$/;"	m	namespace:JKYi	file:
JKYi::s_thread_mutex	JKYi/db/fox_thread.cc	/^static RWMutex s_thread_mutex;$/;"	m	namespace:JKYi	file:
JKYi::s_thread_names	JKYi/db/fox_thread.cc	/^static std::map<uint64_t,std::string>s_thread_names;$/;"	m	namespace:JKYi	file:
JKYi::set_hook_enable	JKYi/hook.cc	/^void set_hook_enable(bool flag){$/;"	f	namespace:JKYi	signature:(bool flag)
JKYi::set_hook_enable	JKYi/hook.h	/^void set_hook_enable(bool flag);$/;"	p	namespace:JKYi	signature:(bool flag)
JKYi::sha1sum	JKYi/util/hash_util.cc	/^std::string sha1sum(const std::string &data) {$/;"	f	namespace:JKYi	signature:(const std::string &data)
JKYi::sha1sum	JKYi/util/hash_util.cc	/^std::string sha1sum(const void *data, size_t len) {$/;"	f	namespace:JKYi	signature:(const void *data, size_t len)
JKYi::sha1sum	JKYi/util/hash_util.h	/^std::string sha1sum(const std::string& data);$/;"	p	namespace:JKYi	signature:(const std::string& data)
JKYi::sha1sum	JKYi/util/hash_util.h	/^std::string sha1sum(const void * data,size_t len);$/;"	p	namespace:JKYi	signature:(const void * data,size_t len)
JKYi::start_daemon	JKYi/daemon.cc	/^int start_daemon(int argc,char ** argv,$/;"	f	namespace:JKYi	signature:(int argc,char ** argv, std::function<int(int argc,char ** argv)>main_cb, bool is_daemon)
JKYi::start_daemon	JKYi/daemon.h	/^int start_daemon(int argc,char ** argv,std::function<int(int argc,char ** argv)>main_cb,bool is_daemon);$/;"	p	namespace:JKYi	signature:(int argc,char ** argv,std::function<int(int argc,char ** argv)>main_cb,bool is_daemon)
JKYi::t_fiber	JKYi/fiber.cc	/^ static thread_local Fiber* t_fiber = nullptr;$/;"	m	namespace:JKYi	file:
JKYi::t_hook_enable	JKYi/hook.cc	/^static thread_local bool t_hook_enable=false;$/;"	m	namespace:JKYi	file:
JKYi::t_scheduler	JKYi/scheduler.cc	/^static thread_local Scheduler* t_scheduler = nullptr;$/;"	m	namespace:JKYi	file:
JKYi::t_scheduler_fiber	JKYi/scheduler.cc	/^static thread_local Fiber* t_scheduler_fiber = nullptr;$/;"	m	namespace:JKYi	file:
JKYi::t_thread	JKYi/thread.cc	/^static thread_local Thread* t_thread = nullptr;$/;"	m	namespace:JKYi	file:
JKYi::t_threadFiber	JKYi/fiber.cc	/^ static thread_local Fiber::ptr t_threadFiber = nullptr;$/;"	m	namespace:JKYi	file:
JKYi::t_thread_name	JKYi/thread.cc	/^static thread_local std::string t_thread_name = "UNKNOW";$/;"	m	namespace:JKYi	file:
JKYi::time_t_to_mysql_time	JKYi/db/mysql.h	/^bool time_t_to_mysql_time(const time_t& ts,MYSQL_TIME& mt);$/;"	p	namespace:JKYi	signature:(const time_t& ts,MYSQL_TIME& mt)
JKYi::time_to_mysql_time	JKYi/db/mysql.cc	/^bool time_to_mysql_time(const time_t& ts,MYSQL_TIME& mt){$/;"	f	namespace:JKYi	signature:(const time_t& ts,MYSQL_TIME& mt)
JKYi::toLittleEndian	JKYi/endian.h	/^T toLittleEndian(T t){$/;"	f	namespace:JKYi	signature:(T t)
JKYi::toNetEndian	JKYi/endian.h	/^T toNetEndian(T t){$/;"	f	namespace:JKYi	signature:(T t)
JKYi::uri_parser_en_main	JKYi/uri.rl.cc	/^static const int uri_parser_en_main = 451;$/;"	m	namespace:JKYi	file:
JKYi::uri_parser_error	JKYi/uri.rl.cc	/^static const int uri_parser_error = 0;$/;"	m	namespace:JKYi	file:
JKYi::uri_parser_first_final	JKYi/uri.rl.cc	/^static const int uri_parser_first_final = 451;$/;"	m	namespace:JKYi	file:
JKYi::uri_parser_start	JKYi/uri.rl.cc	/^static const int uri_parser_start = 451;$/;"	m	namespace:JKYi	file:
Join	JKYi/util.h	/^std::string Join(Iter begin,Iter end,const std::string& str){$/;"	f	namespace:JKYi	signature:(Iter begin,Iter end,const std::string& str)
JsonUtil	JKYi/util/json_util.h	/^class JsonUtil{$/;"	c	namespace:JKYi
LEN	JKYi/http/http11_parser.rl.cc	45;"	d	file:
LEN	JKYi/http/httpclient_parser.rl.cc	46;"	d	file:
Level	JKYi/log.h	/^   enum Level{$/;"	g	class:JKYi::LogLevel	access:public
LevelFormatItem	JKYi/log.cc	/^    LevelFormatItem(const std::string&str=""){}$/;"	f	class:JKYi::LevelFormatItem	access:public	signature:(const std::string&str=Ó)
LevelFormatItem	JKYi/log.cc	/^class LevelFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
LexicalCast	JKYi/config.h	/^class LexicalCast<std::list<T>,std::string>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::map<std::string, T>, std::string> {$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::set<T>,std::string>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::list<T>>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::map<std::string,T>>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::set<T>>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::unordered_map<std::string,T>>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::unordered_set<T>>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::string,std::vector<T>>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::unordered_map<std::string, T>, std::string> {$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::unordered_set<T>,std::string>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast<std::vector<T>,std::string>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/config.h	/^class LexicalCast{$/;"	c	namespace:JKYi
LexicalCast	JKYi/log.cc	/^class LexicalCast<LogDefine,std::string>{$/;"	c	namespace:JKYi	file:
LexicalCast	JKYi/log.cc	/^class LexicalCast<std::string,LogDefine>{$/;"	c	namespace:JKYi	file:
LexicalCast	JKYi/tcp_server.h	/^class LexicalCast<TcpServerConf,std::string>{$/;"	c	namespace:JKYi
LexicalCast	JKYi/tcp_server.h	/^class LexicalCast<std::string,TcpServerConf>{$/;"	c	namespace:JKYi
LexicalCast	tests/test_config.cc	/^class LexicalCast<Person,std::string>{$/;"	c	namespace:JKYi	file:
LexicalCast	tests/test_config.cc	/^class LexicalCast<std::string,Person>{$/;"	c	namespace:JKYi	file:
Library	JKYi/library.h	/^class Library{$/;"	c	namespace:JKYi
LineFormatItem	JKYi/log.cc	/^    LineFormatItem(const std::string& str = "") {}$/;"	f	class:JKYi::LineFormatItem	access:public	signature:(const std::string& str = Ó)
LineFormatItem	JKYi/log.cc	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
ListAllFile	JKYi/util.cc	/^void FSUtil::ListAllFile(std::vector<std::string>& files,$/;"	f	class:JKYi::FSUtil	signature:(std::vector<std::string>& files, const std::string& path, const std::string& subfix)
ListAllFile	JKYi/util.h	/^    static void ListAllFile(std::vector<std::string>& files,$/;"	p	class:JKYi::FSUtil	access:public	signature:(std::vector<std::string>& files, const std::string& path, const std::string& subfix)
ListAllMember	JKYi/config.cc	/^static void ListAllMember(const std::string&prefix,const YAML::Node&node,std::list<std::pair<std::string,const YAML::Node>>&output){$/;"	f	namespace:JKYi	signature:(const std::string&prefix,const YAML::Node&node,std::list<std::pair<std::string,const YAML::Node>>&output)
LoadFromConfDir	JKYi/config.cc	/^void Config::LoadFromConfDir(const std::string& path,bool force){$/;"	f	class:JKYi::Config	signature:(const std::string& path,bool force)
LoadFromConfDir	JKYi/config.h	/^    static void LoadFromConfDir(const std::string& path,bool force = false);$/;"	p	class:JKYi::Config	access:public	signature:(const std::string& path,bool force = false)
LoadFromYaml	JKYi/config.cc	/^void Config::LoadFromYaml(const YAML::Node& node){$/;"	f	class:JKYi::Config	signature:(const YAML::Node& node)
LoadFromYaml	JKYi/config.h	/^    static void LoadFromYaml(const YAML::Node&node);$/;"	p	class:JKYi::Config	access:public	signature:(const YAML::Node&node)
Lock	JKYi/mutex.h	/^    typedef ScopedLockImpl<Mutex>  Lock;$/;"	t	class:JKYi::Mutex	access:public
Lock	JKYi/mutex.h	/^   typedef ScopedLockImpl<SpinLock>   Lock;$/;"	t	class:JKYi::SpinLock	access:public
LogAppender	JKYi/log.h	/^class LogAppender{$/;"	c	namespace:JKYi
LogAppenderDefine	JKYi/log.cc	/^struct LogAppenderDefine{$/;"	s	namespace:JKYi	file:
LogDefine	JKYi/log.cc	/^struct LogDefine{$/;"	s	namespace:JKYi	file:
LogEvent	JKYi/log.cc	/^LogEvent::LogEvent(std::shared_ptr<Logger>logger$/;"	f	class:JKYi::LogEvent	signature:(std::shared_ptr<Logger>logger ,JKYi::LogLevel::Level level ,const char*file ,int32_t line ,uint32_t elapse ,uint32_t thread_id ,uint32_t fiber_id ,uint32_t time ,const std::string& threadName)
LogEvent	JKYi/log.h	/^   LogEvent(std::shared_ptr<Logger>logger$/;"	p	class:JKYi::LogEvent	access:public	signature:(std::shared_ptr<Logger>logger ,LogLevel::Level level ,const char*file ,int32_t line ,uint32_t elapse ,uint32_t thread_id ,uint32_t fiber_id ,uint32_t time ,const std::string&threadName)
LogEvent	JKYi/log.h	/^class LogEvent{$/;"	c	namespace:JKYi
LogEventWrap	JKYi/log.cc	/^LogEventWrap::LogEventWrap(LogEvent::ptr event)$/;"	f	class:JKYi::LogEventWrap	signature:(LogEvent::ptr event)
LogEventWrap	JKYi/log.h	/^   LogEventWrap(LogEvent::ptr event);$/;"	p	class:JKYi::LogEventWrap	access:public	signature:(LogEvent::ptr event)
LogEventWrap	JKYi/log.h	/^class LogEventWrap{$/;"	c	namespace:JKYi
LogFormatter	JKYi/log.cc	/^LogFormatter::LogFormatter(const std::string&pattern)$/;"	f	class:JKYi::LogFormatter	signature:(const std::string&pattern)
LogFormatter	JKYi/log.h	/^    LogFormatter(const std::string&pattern);$/;"	p	class:JKYi::LogFormatter	access:public	signature:(const std::string&pattern)
LogFormatter	JKYi/log.h	/^class LogFormatter{$/;"	c	namespace:JKYi
LogIniter	JKYi/log.cc	/^    LogIniter(){$/;"	f	struct:JKYi::LogIniter	access:public	signature:()
LogIniter	JKYi/log.cc	/^struct LogIniter{$/;"	s	namespace:JKYi	file:
LogLevel	JKYi/log.h	/^class LogLevel{$/;"	c	namespace:JKYi
Logger	JKYi/log.cc	/^Logger::Logger(const std::string& name)$/;"	f	class:JKYi::Logger	signature:(const std::string& name)
Logger	JKYi/log.h	/^    Logger(const std::string& name="root");$/;"	p	class:JKYi::Logger	access:public	signature:(const std::string& name=Ó)
Logger	JKYi/log.h	/^class Logger:public std::enable_shared_from_this<Logger>{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this
LoggerManager	JKYi/log.cc	/^LoggerManager::LoggerManager(){$/;"	f	class:JKYi::LoggerManager	signature:()
LoggerManager	JKYi/log.h	/^     LoggerManager();$/;"	p	class:JKYi::LoggerManager	access:public	signature:()
LoggerManager	JKYi/log.h	/^class LoggerManager{$/;"	c	namespace:JKYi
LoggerMgr	JKYi/log.h	/^typedef JKYi::Singleton<LoggerManager> LoggerMgr;$/;"	t	namespace:JKYi
Lookup	JKYi/address.cc	/^bool Address::Lookup(std::vector<Address::ptr>&result,const std::string&host,int family,int type,int protocol){$/;"	f	class:JKYi::Address	signature:(std::vector<Address::ptr>&result,const std::string&host,int family,int type,int protocol)
Lookup	JKYi/address.h	/^	static bool Lookup(std::vector<Address::ptr>&result,const std::string&host,int family=AF_INET,int type=0,int protocol=0);$/;"	p	class:JKYi::Address	access:public	signature:(std::vector<Address::ptr>&result,const std::string&host,int family=AF_INET,int type=0,int protocol=0)
Lookup	JKYi/config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string&name){$/;"	f	class:JKYi::Config	access:public	signature:(const std::string&name)
Lookup	JKYi/config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string&name,$/;"	f	class:JKYi::Config	access:public	signature:(const std::string&name, const T&default_value,const std::string&description=Ó)
LookupAny	JKYi/address.cc	/^Address::ptr Address::LookupAny(const std::string&host,int family,int type,int protocol){$/;"	f	class:JKYi::Address	signature:(const std::string&host,int family,int type,int protocol)
LookupAny	JKYi/address.h	/^	static Address::ptr LookupAny(const std::string&host,int family=AF_INET,int type=0,int protocol=0);$/;"	p	class:JKYi::Address	access:public	signature:(const std::string&host,int family=AF_INET,int type=0,int protocol=0)
LookupAnyIPAddress	JKYi/address.cc	/^IPAddress::ptr Address::LookupAnyIPAddress(const std::string&host,int family,int type,int protocol){$/;"	f	class:JKYi::Address	signature:(const std::string&host,int family,int type,int protocol)
LookupAnyIPAddress	JKYi/address.h	/^	static std::shared_ptr<IPAddress> LookupAnyIPAddress(const std::string&host,int family=AF_INET,int type=0,int protocol=0);$/;"	p	class:JKYi::Address	access:public	signature:(const std::string&host,int family=AF_INET,int type=0,int protocol=0)
LookupBase	JKYi/config.cc	/^ConfigVarBase::ptr Config::LookupBase(const std::string&name){$/;"	f	class:JKYi::Config	signature:(const std::string&name)
LookupBase	JKYi/config.h	/^    static ConfigVarBase::ptr LookupBase(const std::string&name);$/;"	p	class:JKYi::Config	access:public	signature:(const std::string&name)
MARK	JKYi/http/http11_parser.rl.cc	46;"	d	file:
MARK	JKYi/http/httpclient_parser.rl.cc	47;"	d	file:
MAX_CONCURRENT_STRING	JKYi/http2/frame.h	/^        MAX_CONCURRENT_STRING    =  0x3,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
MAX_FRAME_SIZE	JKYi/http2/frame.h	/^        MAX_FRAME_SIZE           =  0x5,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
MAX_HEADER_LIST_SIZE	JKYi/http2/frame.h	/^        MAX_HEADER_LIST_SIZE     =  0x6$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
MAX_PATH_LEN	JKYi/address.cc	/^static const size_t MAX_PATH_LEN=sizeof(((sockaddr_un*)0)->sun_path)-1;$/;"	m	namespace:JKYi	file:
MODULE	JKYi/module.h	/^        MODULE = 0,$/;"	e	enum:JKYi::Module::Type
MainFunc	JKYi/fiber.cc	/^void Fiber::MainFunc(){$/;"	f	class:JKYi::Fiber	signature:()
MainFunc	JKYi/fiber.h	/^   static void MainFunc();$/;"	p	class:JKYi::Fiber	access:public	signature:()
MallocStackAllocator	JKYi/fiber.cc	/^class MallocStackAllocator{$/;"	c	namespace:JKYi	file:
MapType	JKYi/http/http.h	/^    typedef std::map<std::string,std::string,CaseInsensitiveLess> MapType;$/;"	t	class:JKYi::http::HttpRequest	access:public
MapType	JKYi/http/http.h	/^    typedef std::map<std::string,std::string,CaseInsensitiveLess> MapType;$/;"	t	class:JKYi::http::HttpResponse	access:public
Message	JKYi/protocol.h	/^class Message{$/;"	c	namespace:JKYi
MessageCallback	JKYi/reactor/Callbacks.h	/^                                       Timestamp)> MessageCallback;$/;"	t	namespace:JKYi::net
MessageDecoder	JKYi/protocol.h	/^class MessageDecoder{$/;"	c	namespace:JKYi
MessageFormatItem	JKYi/log.cc	/^   MessageFormatItem(const std::string& str = ""){}$/;"	f	class:JKYi::MessageFormatItem	access:public	signature:(const std::string& str = Ó)
MessageFormatItem	JKYi/log.cc	/^class MessageFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
MessageType	JKYi/protocol.h	/^    enum MessageType{$/;"	g	class:JKYi::Message	access:public
Mkdir	JKYi/util.cc	/^bool FSUtil::Mkdir(const std::string& dirname){$/;"	f	class:JKYi::FSUtil	signature:(const std::string& dirname)
Mkdir	JKYi/util.h	/^    static bool Mkdir(const std::string& dirname);$/;"	p	class:JKYi::FSUtil	access:public	signature:(const std::string& dirname)
Module	JKYi/module.cc	/^Module::Module(const std::string& name,$/;"	f	class:JKYi::Module	signature:(const std::string& name, const std::string& version, const std::string& filename, uint32_t type)
Module	JKYi/module.h	/^    Module(const std::string& name,$/;"	p	class:JKYi::Module	access:public	signature:(const std::string& name, const std::string& version, const std::string& filename, uint32_t type = MODULE)
Module	JKYi/module.h	/^class Module{$/;"	c	namespace:JKYi
ModuleCloser	JKYi/library.cc	/^    ModuleCloser(void * handle,destroy_module d)$/;"	f	class:JKYi::ModuleCloser	access:public	signature:(void * handle,destroy_module d)
ModuleCloser	JKYi/library.cc	/^class ModuleCloser{$/;"	c	namespace:JKYi	file:
ModuleManager	JKYi/module.cc	/^ModuleManager::ModuleManager(){$/;"	f	class:JKYi::ModuleManager	signature:()
ModuleManager	JKYi/module.h	/^    ModuleManager();$/;"	p	class:JKYi::ModuleManager	access:public	signature:()
ModuleManager	JKYi/module.h	/^class ModuleManager{$/;"	c	namespace:JKYi
ModuleMgr	JKYi/module.h	/^typedef JKYi::Singleton<ModuleManager> ModuleMgr;$/;"	t	namespace:JKYi
Mutex	JKYi/mutex.h	/^   Mutex(){$/;"	f	class:JKYi::Mutex	access:public	signature:()
Mutex	JKYi/mutex.h	/^class Mutex: Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
MutexType	JKYi/db/mysql.h	/^    typedef Mutex MutexType;$/;"	t	class:JKYi::MySQLManager	access:public
MutexType	JKYi/ds/blocking_queue.h	/^    typedef JKYi::SpinLock MutexType;$/;"	t	class:JKYi::ds::BlockingQueue	access:public
MutexType	JKYi/http/http_connection.h	/^    typedef Mutex MutexType;$/;"	t	class:JKYi::http::HttpConnectionPool	access:public
MutexType	JKYi/iomanager.h	/^     typedef Mutex MutexType;$/;"	t	struct:JKYi::IOManager::FdContext	access:public
MutexType	JKYi/log.h	/^	typedef SpinLock MutexType;$/;"	t	class:JKYi::LogAppender	access:public
MutexType	JKYi/log.h	/^	typedef SpinLock MutexType;$/;"	t	class:JKYi::Logger	access:public
MutexType	JKYi/log.h	/^     typedef SpinLock MutexType;$/;"	t	class:JKYi::LoggerManager	access:public
MutexType	JKYi/mutex.h	/^    typedef SpinLock MutexType;$/;"	t	class:JKYi::FiberSemaphore	access:public
MutexType	JKYi/scheduler.h	/^   typedef Mutex MutexType;$/;"	t	class:JKYi::Scheduler	access:public
MyModule	template/template/my_module.cc	/^MyModule::MyModule()$/;"	f	class:name_space::MyModule	signature:()
MyModule	template/template/my_module.h	/^    MyModule();$/;"	p	class:name_space::MyModule	access:public	signature:()
MyModule	template/template/my_module.h	/^class MyModule:public JKYi::Module{$/;"	c	namespace:name_space	inherits:JKYi::Module
MySQL	JKYi/db/mysql.cc	/^MySQL::MySQL(const std::map<std::string,std::string>& args)$/;"	f	class:JKYi::MySQL	signature:(const std::map<std::string,std::string>& args)
MySQL	JKYi/db/mysql.h	/^    MySQL(const std::map<std::string,std::string>& args);$/;"	p	class:JKYi::MySQL	access:public	signature:(const std::map<std::string,std::string>& args)
MySQL	JKYi/db/mysql.h	/^class MySQL:public IDB,public std::enable_shared_from_this<MySQL>{$/;"	c	namespace:JKYi	inherits:IDB,std::enable_shared_from_this
MySQLManager	JKYi/db/mysql.cc	/^MySQLManager::MySQLManager()$/;"	f	class:JKYi::MySQLManager	signature:()
MySQLManager	JKYi/db/mysql.h	/^    MySQLManager();$/;"	p	class:JKYi::MySQLManager	access:public	signature:()
MySQLManager	JKYi/db/mysql.h	/^class MySQLManager{$/;"	c	namespace:JKYi
MySQLMgr	JKYi/db/mysql.h	/^typedef JKYi::Singleton<MySQLManager> MySQLMgr;$/;"	t	namespace:JKYi
MySQLRes	JKYi/db/mysql.cc	/^MySQLRes::MySQLRes(MYSQL_RES * res,int eno,const char * estr)$/;"	f	class:JKYi::MySQLRes	signature:(MYSQL_RES * res,int eno,const char * estr)
MySQLRes	JKYi/db/mysql.h	/^    MySQLRes(MYSQL_RES * res,int eno,const char * estr);$/;"	p	class:JKYi::MySQLRes	access:public	signature:(MYSQL_RES * res,int eno,const char * estr)
MySQLRes	JKYi/db/mysql.h	/^class MySQLRes:public ISQLData{$/;"	c	namespace:JKYi	inherits:ISQLData
MySQLStmt	JKYi/db/mysql.cc	/^MySQLStmt::MySQLStmt(MySQL::ptr db,MYSQL_STMT* stmt)$/;"	f	class:JKYi::MySQLStmt	signature:(MySQL::ptr db,MYSQL_STMT* stmt)
MySQLStmt	JKYi/db/mysql.h	/^    MySQLStmt(MySQL::ptr mysql,MYSQL_STMT * stmt);$/;"	p	class:JKYi::MySQLStmt	access:private	signature:(MySQL::ptr mysql,MYSQL_STMT * stmt)
MySQLStmt	JKYi/db/mysql.h	/^class MySQLStmt:public IStmt,public std::enable_shared_from_this<MySQLStmt>{$/;"	c	namespace:JKYi	inherits:IStmt,std::enable_shared_from_this
MySQLStmtRes	JKYi/db/mysql.cc	/^MySQLStmtRes::MySQLStmtRes(std::shared_ptr<MySQLStmt>stmt,int eno,$/;"	f	class:JKYi::MySQLStmtRes	signature:(std::shared_ptr<MySQLStmt>stmt,int eno, const std::string& estr)
MySQLStmtRes	JKYi/db/mysql.h	/^    MySQLStmtRes(std::shared_ptr<MySQLStmt> stmt,int eno,const std::string& estr);$/;"	p	class:JKYi::MySQLStmtRes	access:private	signature:(std::shared_ptr<MySQLStmt> stmt,int eno,const std::string& estr)
MySQLStmtRes	JKYi/db/mysql.h	/^class MySQLStmtRes:public ISQLData{$/;"	c	namespace:JKYi	inherits:ISQLData
MySQLThreadIniter	JKYi/db/mysql.cc	/^        MySQLThreadIniter(){$/;"	f	struct:JKYi::__anon21::MySQLThreadIniter	access:public	signature:()
MySQLThreadIniter	JKYi/db/mysql.cc	/^    struct MySQLThreadIniter{$/;"	s	namespace:JKYi::__anon21	file:
MySQLTime	JKYi/db/mysql.h	/^    MySQLTime(time_t t)$/;"	f	struct:JKYi::MySQLTime	access:public	signature:(time_t t)
MySQLTime	JKYi/db/mysql.h	/^struct MySQLTime{$/;"	s	namespace:JKYi
MySQLTransaction	JKYi/db/mysql.cc	/^MySQLTransaction::MySQLTransaction(MySQL::ptr mysql,bool auto_commit)$/;"	f	class:JKYi::MySQLTransaction	signature:(MySQL::ptr mysql,bool auto_commit)
MySQLTransaction	JKYi/db/mysql.h	/^   MySQLTransaction(MySQL::ptr mysql,bool auto_commit);$/;"	p	class:JKYi::MySQLTransaction	access:private	signature:(MySQL::ptr mysql,bool auto_commit)
MySQLTransaction	JKYi/db/mysql.h	/^class MySQLTransaction:public ITransaction{$/;"	c	namespace:JKYi	inherits:ITransaction
MySQLUtil	JKYi/db/mysql.h	/^class MySQLUtil{$/;"	c	namespace:JKYi
NERVER_INDEXED_INDEXED_NAME	JKYi/http2/hpack.h	/^    NERVER_INDEXED_INDEXED_NAME   = 5, \/\/ nameå¨è¡¨ä¸­ï¼valueéè¦ç¼ç ä¼ è¾ï¼å¹¶æ°¸è¿ä¸æ´æ°å°å¨æè¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
NERVER_INDEXED_NEW_NAME	JKYi/http2/hpack.h	/^    NERVER_INDEXED_NEW_NAME       = 6, \/\/ nameåvalueé½ä¸å¨è¡¨ä¸­ï¼éè¦ç¼ç ä¼ è¾å¹¶ä¸æ°¸è¿ä¸ä¼æ´æ°å°å¨æè¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
NODE	JKYi/http2/huffman.cc	/^typedef struct node NODE;$/;"	t	namespace:JKYi::http2	typeref:struct:JKYi::http2::node	file:
NONE	JKYi/iomanager.h	/^	   NONE  =  0x0,$/;"	e	enum:JKYi::IOManager::Event
NOTIFY	JKYi/protocol.h	/^        NOTIFY = 3,$/;"	e	enum:JKYi::Message::MessageType
NOWATCHING	JKYi/zk_client.cc	/^const int ZKClient::EventType::NOWATCHING = ZOO_NOTWATCHING_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
NOWATCHING	JKYi/zk_client.h	/^        static const int NOWATCHING;$/;"	m	class:JKYi::ZKClient::EventType	access:public
NameFormatItem	JKYi/log.cc	/^    NameFormatItem(const std::string&str=""){}$/;"	f	class:JKYi::NameFormatItem	access:public	signature:(const std::string&str=Ó)
NameFormatItem	JKYi/log.cc	/^class NameFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
NewConnectionCallback	JKYi/reactor/Connector.h	/^    typedef std::function<void (int sockfd)> NewConnectionCallback;$/;"	t	class:JKYi::net::Connector	access:public
NewConnectionCallback	JKYi/reactor/acceptor.h	/^    typedef std::function<void(int sockfd,const Address::ptr)> NewConnectionCallback;$/;"	t	class:JKYi::net::Acceptor	access:public
NewLineFormatItem	JKYi/log.cc	/^    NewLineFormatItem(const std::string& str = "") {}$/;"	f	class:JKYi::NewLineFormatItem	access:public	signature:(const std::string& str = Ó)
NewLineFormatItem	JKYi/log.cc	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
Node	JKYi/bytearray.cc	/^ByteArray::Node::Node()$/;"	f	class:JKYi::ByteArray::Node	signature:()
Node	JKYi/bytearray.cc	/^ByteArray::Node::Node(size_t s)$/;"	f	class:JKYi::ByteArray::Node	signature:(size_t s)
Node	JKYi/bytearray.h	/^        Node();$/;"	p	struct:JKYi::ByteArray::Node	access:public	signature:()
Node	JKYi/bytearray.h	/^        Node(size_t s);$/;"	p	struct:JKYi::ByteArray::Node	access:public	signature:(size_t s)
Node	JKYi/bytearray.h	/^    struct Node{$/;"	s	class:JKYi::ByteArray	access:public
Noncopyable	JKYi/noncopyable.h	/^  Noncopyable() = default; $/;"	p	class:JKYi::Noncopyable	access:public	signature:()
Noncopyable	JKYi/noncopyable.h	/^  Noncopyable(const Noncopyable&) = delete;$/;"	p	class:JKYi::Noncopyable	access:public	signature:(const Noncopyable&)
Noncopyable	JKYi/noncopyable.h	/^class Noncopyable{$/;"	c	namespace:JKYi
NotFoundServlet	JKYi/http/servlet.cc	/^NotFoundServlet::NotFoundServlet(const std::string& name)$/;"	f	class:JKYi::http::NotFoundServlet	signature:(const std::string& name)
NotFoundServlet	JKYi/http/servlet.h	/^    NotFoundServlet(const std::string& name);$/;"	p	class:JKYi::http::NotFoundServlet	access:public	signature:(const std::string& name)
NotFoundServlet	JKYi/http/servlet.h	/^class NotFoundServlet: public Servlet{$/;"	c	namespace:JKYi::http	inherits:Servlet
Notify	JKYi/protocol.cc	/^Notify::Notify()$/;"	f	class:JKYi::Notify	signature:()
Notify	JKYi/protocol.h	/^    Notify();$/;"	p	class:JKYi::Notify	access:public	signature:()
Notify	JKYi/protocol.h	/^class Notify:public Message{$/;"	c	namespace:JKYi	inherits:Message
OK	JKYi/db/redis.h	/^        OK = 0,$/;"	e	enum:JKYi::FoxRedis::RESULT
OK	JKYi/db/redis.h	/^        OK = 0,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
OK	JKYi/http/http_connection.h	/^        OK = 0,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
OPCODE	JKYi/http/ws_session.h	/^    enum OPCODE{$/;"	g	struct:JKYi::http::WSFrameHead	access:public
OnAuthCb	JKYi/db/redis.cc	/^void FoxRedis::OnAuthCb(redisAsyncContext* c,void * rp,void * priv){$/;"	f	class:JKYi::FoxRedis	signature:(redisAsyncContext* c,void * rp,void * priv)
OnAuthCb	JKYi/db/redis.cc	/^void FoxRedisCluster::OnAuthCb(redisClusterAsyncContext* c,void * rp,void * priv){$/;"	f	class:JKYi::FoxRedisCluster	signature:(redisClusterAsyncContext* c,void * rp,void * priv)
OnAuthCb	JKYi/db/redis.h	/^    static void OnAuthCb(redisAsyncContext* c,void * rp,void * priv);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(redisAsyncContext* c,void * rp,void * priv)
OnAuthCb	JKYi/db/redis.h	/^    static void OnAuthCb(redisClusterAsyncContext* c,void * rp,void * priv);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(redisClusterAsyncContext* c,void * rp,void * priv)
OnMessage	tests/test_reactor_tcpserver.cc	/^void OnMessage(const JKYi::net::TcpConnectionPtr& conn,JKYi::net::Buffer* buf,$/;"	f	signature:(const JKYi::net::TcpConnectionPtr& conn,JKYi::net::Buffer* buf, JKYi::net::Timestamp receiveTime)
OnTimer	JKYi/timer.cc	/^static void OnTimer(std::weak_ptr<void>weak_cond,std::function<void()>cb){$/;"	f	namespace:JKYi	signature:(std::weak_ptr<void>weak_cond,std::function<void()>cb)
OnWatcher	JKYi/zk_client.cc	/^void ZKClient::OnWatcher(zhandle_t* zk,int type,int stat,const char * path,$/;"	f	class:JKYi::ZKClient	signature:(zhandle_t* zk,int type,int stat,const char * path, void * watcherCtx)
OnWatcher	JKYi/zk_client.h	/^    static void OnWatcher(zhandle_t * zh,int type,int stat,const char * path,void * watcherCtx);$/;"	p	class:JKYi::ZKClient	access:private	signature:(zhandle_t * zh,int type,int stat,const char * path,void * watcherCtx)
Option	JKYi/reactor/TcpServer.h	/^    enum Option{$/;"	g	class:JKYi::net::TcpServer	access:public
PADDED	JKYi/http2/frame.h	/^    PADDED         = 0x8$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise	access:private
PADDED	JKYi/http2/frame.h	/^    PADDED         = 0x8,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	access:private
PADDED	JKYi/http2/frame.h	/^    PADDED     = 0x8$/;"	m	class:JKYi::http2::FrameType::FrameFlagData	access:private
PARSE_PARAM	JKYi/http/http.cc	208;"	d	file:
PING	JKYi/http/ws_session.h	/^        PING = 9,$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
PING	JKYi/http2/frame.h	/^    PING           = 0X6,$/;"	m	class:JKYi::http2::FrameType	access:private
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	337;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	340;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	343;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	346;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	349;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	352;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	355;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	358;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	361;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	367;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	370;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	373;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	376;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	379;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	382;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	385;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	388;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	391;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	394;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	397;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	400;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	403;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	406;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	409;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	413;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	416;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	419;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	422;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	429;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	322;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	325;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	328;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	331;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	334;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	337;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	340;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	343;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	346;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	349;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	352;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	355;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	358;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	361;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	379;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	382;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	385;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	388;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	391;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	394;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	398;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	404;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	407;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	410;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	414;"	d	file:
PONG	JKYi/http/ws_session.h	/^        PONG = 0xA$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
POOL_GET_CONNECTION	JKYi/http/http_connection.h	/^        POOL_GET_CONNECTION = 8,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
POOL_INVALID_CONNECTION	JKYi/http/http_connection.h	/^        POOL_INVALID_CONNECTION = 9,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
PRIORITY	JKYi/http2/frame.h	/^    PRIORITY       = 0x2,$/;"	m	class:JKYi::http2::FrameType	access:private
PRIORITY	JKYi/http2/frame.h	/^    PRIORITY       = 0x20$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders	access:private
PTR_TO	JKYi/http/http11_parser.rl.cc	47;"	d	file:
PTR_TO	JKYi/http/httpclient_parser.rl.cc	48;"	d	file:
PUSH_PROMISE	JKYi/http2/frame.h	/^    PUSH_PROMISE   = 0X5,$/;"	m	class:JKYi::http2::FrameType	access:private
Pack	JKYi/http2/hpack.cc	/^int HPack::Pack(HeaderField * header,ByteArray::ptr ba){$/;"	f	class:JKYi::http2::HPack	signature:(HeaderField * header,ByteArray::ptr ba)
Pack	JKYi/http2/hpack.h	/^    static int Pack(HeaderField * header,ByteArray::ptr ba);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(HeaderField * header,ByteArray::ptr ba)
Person	tests/test_config.cc	/^    Person(std::string name="å·«ææ´",int age=18,int sex=1)$/;"	f	class:Person	access:public	signature:(std::string name=Ó,int age=18,int sex=1)
Person	tests/test_config.cc	/^class Person{$/;"	c	file:
Person::Person	tests/test_config.cc	/^    Person(std::string name="å·«ææ´",int age=18,int sex=1)$/;"	f	class:Person	access:public	signature:(std::string name=Ó,int age=18,int sex=1)
Person::m_age	tests/test_config.cc	/^    int m_age;$/;"	m	class:Person	file:	access:public
Person::m_name	tests/test_config.cc	/^    std::string m_name;$/;"	m	class:Person	file:	access:public
Person::m_sex	tests/test_config.cc	/^    int m_sex;$/;"	m	class:Person	file:	access:public
Person::operator ==	tests/test_config.cc	/^     bool operator== (const Person&rhv)const {$/;"	f	class:Person	access:public	signature:(const Person&rhv) const
Person::toString	tests/test_config.cc	/^    std::string toString()const {$/;"	f	class:Person	access:public	signature:() const
PingFrame	JKYi/http2/frame.h	/^struct PingFrame : public IFrame{$/;"	s	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	inherits:IFrame	access:public
PollFdList	JKYi/reactor/poller/pollPoller.h	/^   typedef std::vector<struct pollfd> PollFdList;$/;"	t	class:JKYi::net::PollPoller	access:private
PollPoller	JKYi/reactor/poller/pollPoller.cc	/^PollPoller::PollPoller(EventLoop* loop)$/;"	f	class:JKYi::net::PollPoller	signature:(EventLoop* loop)
PollPoller	JKYi/reactor/poller/pollPoller.h	/^    PollPoller(EventLoop* loop);$/;"	p	class:JKYi::net::PollPoller	access:public	signature:(EventLoop* loop)
PollPoller	JKYi/reactor/poller/pollPoller.h	/^class PollPoller:public Poller{$/;"	c	namespace:JKYi::net	inherits:Poller
Poller	JKYi/reactor/poller.cc	/^Poller::Poller(EventLoop* loop)$/;"	f	class:JKYi::net::Poller	signature:(EventLoop* loop)
Poller	JKYi/reactor/poller.h	/^    Poller(EventLoop* loop);$/;"	p	class:JKYi::net::Poller	access:public	signature:(EventLoop* loop)
Poller	JKYi/reactor/poller.h	/^class Poller:public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
PriorityFrame	JKYi/http2/frame.h	/^struct PriorityFrame:public IFrame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	inherits:IFrame	access:private
ProcessInfo	JKYi/daemon.h	/^struct ProcessInfo{$/;"	s	namespace:JKYi
ProcessInfoMgr	JKYi/daemon.h	/^typedef JKYi::Singleton<ProcessInfo> ProcessInfoMgr;$/;"	t	namespace:JKYi
PushPromisedFrame	JKYi/http2/frame.h	/^struct PushPromisedFrame : public IFrame{$/;"	s	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	inherits:IFrame	access:public
Query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name,const char * format,...){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const char * format,...)
Query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name,const char * format,va_list ap){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const char * format,va_list ap)
Query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name,const std::string& sql){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,const std::string& sql)
Query	JKYi/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name,const char * format,...);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const char * format,...)
Query	JKYi/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name,const char * format,va_list ap);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const char * format,va_list ap)
Query	JKYi/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name,const std::string& sql);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,const std::string& sql)
READ	JKYi/iomanager.h	/^	   READ  =  0x1,$/;"	e	enum:JKYi::IOManager::Event
READY	JKYi/fiber.h	/^	  READY, \/\/å°±ç»ªæ$/;"	e	enum:JKYi::Fiber::State
REDIS	JKYi/db/redis.h	/^        REDIS = 1,$/;"	e	enum:JKYi::IRedis::Type
REDIS_CLUSTER	JKYi/db/redis.h	/^        REDIS_CLUSTER = 2,$/;"	e	enum:JKYi::IRedis::Type
REPLY_ERR	JKYi/db/redis.h	/^        REPLY_ERR = 5,$/;"	e	enum:JKYi::FoxRedis::RESULT
REPLY_ERR	JKYi/db/redis.h	/^        REPLY_ERR = 5,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
REPLY_NULL	JKYi/db/redis.h	/^        REPLY_NULL = 4,$/;"	e	enum:JKYi::FoxRedis::RESULT
REPLY_NULL	JKYi/db/redis.h	/^        REPLY_NULL = 4,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
REQUEST	JKYi/protocol.h	/^        REQUEST = 1,$/;"	e	enum:JKYi::Message::MessageType
RESPONSE	JKYi/protocol.h	/^        RESPONSE = 2,$/;"	e	enum:JKYi::Message::MessageType
RESULT	JKYi/db/redis.h	/^    enum RESULT{$/;"	g	class:JKYi::FoxRedis	access:public
RESULT	JKYi/db/redis.h	/^    enum RESULT{$/;"	g	class:JKYi::FoxRedisCluster	access:public
RM	build/JKYi/reactor/examples/Makefile	/^RM = \/usr\/local\/bin\/cmake -E remove -f$/;"	m
RM	build/JKYi/reactor/examples/idleconnection/Makefile	/^RM = \/usr\/local\/bin\/cmake -E remove -f$/;"	m
RM	build/JKYi/reactor/examples/maxconnection/Makefile	/^RM = \/usr\/local\/bin\/cmake -E remove -f$/;"	m
RM	build/Makefile	/^RM = \/usr\/local\/bin\/cmake -E remove -f$/;"	m
RST_STREAM	JKYi/http2/frame.h	/^    RST_STREAM     = 0X3,$/;"	m	class:JKYi::http2::FrameType	access:private
RWMutex	JKYi/mutex.h	/^    RWMutex(){$/;"	f	class:JKYi::RWMutex	access:public	signature:()
RWMutex	JKYi/mutex.h	/^class RWMutex:Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
RWMutexType	JKYi/config.h	/^	typedef RWMutex RWMutexType;$/;"	t	class:JKYi::Config	access:public
RWMutexType	JKYi/config.h	/^   typedef RWMutex RWMutexType;$/;"	t	class:JKYi::ConfigVar	access:public
RWMutexType	JKYi/env.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:JKYi::Env	access:public
RWMutexType	JKYi/fdmanager.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:JKYi::FdManager	access:public
RWMutexType	JKYi/http/servlet.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:JKYi::http::ServletDispatch	access:public
RWMutexType	JKYi/http/ws_servlet.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:JKYi::http::WSServletDispatch	access:public
RWMutexType	JKYi/iomanager.h	/^   typedef RWMutex RWMutexType;$/;"	t	class:JKYi::IOManager	access:public
RWMutexType	JKYi/module.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:JKYi::ModuleManager	access:public
RWMutexType	JKYi/timer.h	/^   typedef RWMutex RWMutexType;$/;"	t	class:JKYi::TimerManager	access:public
ReadEventCallback	JKYi/reactor/channel.h	/^    typedef std::function<void (Timestamp)> ReadEventCallback;$/;"	t	class:JKYi::net::Channel	access:public
ReadLock	JKYi/mutex.h	/^    typedef ReadScopedLockImpl<RWMutex> ReadLock;$/;"	t	class:JKYi::RWMutex	access:public
ReadScopedLockImpl	JKYi/mutex.h	/^  ReadScopedLockImpl(T&mutex)$/;"	f	class:JKYi::ReadScopedLockImpl	access:public	signature:(T&mutex)
ReadScopedLockImpl	JKYi/mutex.h	/^class ReadScopedLockImpl{$/;"	c	namespace:JKYi
ReadString	JKYi/http2/hpack.cc	/^std::string HPack::ReadString(ByteArray::ptr ba){$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba)
ReadString	JKYi/http2/hpack.h	/^    static std::string ReadString(ByteArray::ptr ba);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba)
ReadVarInt	JKYi/http2/hpack.cc	/^uint64_t HPack::ReadVarInt(ByteArray::ptr ba,int32_t prefix){$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba,int32_t prefix)
ReadVarInt	JKYi/http2/hpack.cc	/^uint64_t HPack::ReadVarInt(ByteArray::ptr ba,uint8_t b,int32_t prefix){$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba,uint8_t b,int32_t prefix)
ReadVarInt	JKYi/http2/hpack.h	/^    static uint64_t ReadVarInt(ByteArray::ptr ba,int32_t prefix);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba,int32_t prefix)
ReadVarInt	JKYi/http2/hpack.h	/^    static uint64_t ReadVarInt(ByteArray::ptr ba,uint8_t b,int32_t prefix);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba,uint8_t b,int32_t prefix)
Redis	JKYi/db/redis.cc	/^Redis::Redis(){$/;"	f	class:JKYi::Redis	signature:()
Redis	JKYi/db/redis.cc	/^Redis::Redis(const std::map<std::string,std::string>&conf){$/;"	f	class:JKYi::Redis	signature:(const std::map<std::string,std::string>&conf)
Redis	JKYi/db/redis.h	/^    Redis();$/;"	p	class:JKYi::Redis	access:public	signature:()
Redis	JKYi/db/redis.h	/^    Redis(const std::map<std::string,std::string>& conf);$/;"	p	class:JKYi::Redis	access:public	signature:(const std::map<std::string,std::string>& conf)
Redis	JKYi/db/redis.h	/^class Redis:public ISyncRedis{$/;"	c	namespace:JKYi	inherits:ISyncRedis
RedisCluster	JKYi/db/redis.cc	/^RedisCluster::RedisCluster(){$/;"	f	class:JKYi::RedisCluster	signature:()
RedisCluster	JKYi/db/redis.cc	/^RedisCluster::RedisCluster(const std::map<std::string,std::string>&conf){$/;"	f	class:JKYi::RedisCluster	signature:(const std::map<std::string,std::string>&conf)
RedisCluster	JKYi/db/redis.h	/^    RedisCluster();$/;"	p	class:JKYi::RedisCluster	access:public	signature:()
RedisCluster	JKYi/db/redis.h	/^    RedisCluster(const std::map<std::string,std::string>& conf);$/;"	p	class:JKYi::RedisCluster	access:public	signature:(const std::map<std::string,std::string>& conf)
RedisCluster	JKYi/db/redis.h	/^class RedisCluster: public ISyncRedis{$/;"	c	namespace:JKYi	inherits:ISyncRedis
RedisManager	JKYi/db/redis.cc	/^RedisManager::RedisManager(){$/;"	f	class:JKYi::RedisManager	signature:()
RedisManager	JKYi/db/redis.h	/^    RedisManager();$/;"	p	class:JKYi::RedisManager	access:public	signature:()
RedisManager	JKYi/db/redis.h	/^class RedisManager{$/;"	c	namespace:JKYi
RedisMgr	JKYi/db/redis.h	/^typedef JKYi::Singleton<RedisManager> RedisMgr;$/;"	t	namespace:JKYi
RedisReplyClone	JKYi/db/redis.cc	/^redisReply* RedisReplyClone(redisReply* r){$/;"	f	namespace:JKYi	signature:(redisReply* r)
RedisUtil	JKYi/db/redis.h	/^class RedisUtil{$/;"	c	namespace:JKYi
ReleasePtr	JKYi/http/http_connection.cc	/^void HttpConnectionPool::ReleasePtr(HttpConnection * ptr,HttpConnectionPool * pool){$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(HttpConnection * ptr,HttpConnectionPool * pool)
ReleasePtr	JKYi/http/http_connection.h	/^    static void ReleasePtr(HttpConnection * ptr,HttpConnectionPool * pool);$/;"	p	class:JKYi::http::HttpConnectionPool	access:private	signature:(HttpConnection * ptr,HttpConnectionPool * pool)
ReplyPtr	JKYi/db/redis.h	/^typedef std::shared_ptr<redisReply> ReplyPtr;$/;"	t	namespace:JKYi
Request	JKYi/protocol.cc	/^Request::Request()$/;"	f	class:JKYi::Request	signature:()
Request	JKYi/protocol.h	/^    Request();$/;"	p	class:JKYi::Request	access:public	signature:()
Request	JKYi/protocol.h	/^class Request:public Message{$/;"	c	namespace:JKYi	inherits:Message
Response	JKYi/protocol.cc	/^Response::Response()$/;"	f	class:JKYi::Response	signature:()
Response	JKYi/protocol.h	/^    Response();$/;"	p	class:JKYi::Response	access:public	signature:()
Response	JKYi/protocol.h	/^class Response:public Message{$/;"	c	namespace:JKYi	inherits:Message
RstStreamFrame	JKYi/http2/frame.h	/^struct RstStreamFrame: public IFrame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	inherits:IFrame	access:private
SA	JKYi/reactor/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon19	typeref:struct:__anon19::sockaddr	file:
SEND_CLOSE_BY_PEER	JKYi/http/http_connection.h	/^        SEND_CLOSE_BY_PEER = 4,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
SEND_SOCKET_ERROR	JKYi/http/http_connection.h	/^        SEND_SOCKET_ERROR = 5,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
SEQUENCE	JKYi/zk_client.cc	/^const int ZKClient::FlagsType::SEQUENCE = ZOO_SEQUENCE;$/;"	m	class:JKYi::ZKClient::FlagsType	file:
SEQUENCE	JKYi/zk_client.h	/^        static const int SEQUENCE;$/;"	m	class:JKYi::ZKClient::FlagsType	access:public
SESSION	JKYi/zk_client.cc	/^const int ZKClient::EventType::SESSION = ZOO_SESSION_EVENT;$/;"	m	class:JKYi::ZKClient::EventType	file:
SESSION	JKYi/zk_client.h	/^        static const int SESSION;$/;"	m	class:JKYi::ZKClient::EventType	access:public
SET	JKYi/http2/frame.h	/^    SET      = 0x1$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
SETTINGS	JKYi/http2/frame.h	/^    SETTINGS       = 0x4,$/;"	m	class:JKYi::http2::FrameType	access:private
SHELL	build/JKYi/reactor/examples/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/JKYi/reactor/examples/idleconnection/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/JKYi/reactor/examples/maxconnection/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	187;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	21;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	209;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	188;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	203;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	189;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	204;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
SIZE	JKYi/http2/frame.h	/^    static const uint32_t SIZE = 4;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
SIZE	JKYi/http2/frame.h	/^    static const uint32_t SIZE = 4;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	access:public
SIZE	JKYi/http2/frame.h	/^    static const uint32_t SIZE = 5;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
SIZE	JKYi/http2/frame.h	/^    static const uint32_t SIZE = 8;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	access:public
SIZE	JKYi/http2/frame.h	/^    static const uint32_t SIZE = 9;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public
SSLSocket	JKYi/socket.cc	/^SSLSocket::SSLSocket(int family,int type,int protocol)$/;"	f	class:JKYi::SSLSocket	signature:(int family,int type,int protocol)
SSLSocket	JKYi/socket.h	/^    SSLSocket(int family,int type,int protocol = 0);$/;"	p	class:JKYi::SSLSocket	access:public	signature:(int family,int type,int protocol = 0)
SSLSocket	JKYi/socket.h	/^class SSLSocket:public Socket{$/;"	c	namespace:JKYi	inherits:Socket
STATIC_HEADERS	JKYi/http2/dynamic_table.cc	7;"	d	file:
STATUS	JKYi/db/redis.h	/^    enum STATUS{$/;"	g	class:JKYi::FoxRedis	access:public
STATUS	JKYi/db/redis.h	/^    enum STATUS{$/;"	g	class:JKYi::FoxRedisCluster	access:public
STRINGIFY	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	333;"	d	file:
STRINGIFY	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	317;"	d	file:
STRINGPIECE_BINARY_PREDICATE	JKYi/reactor/StringPiece.h	/^  STRINGPIECE_BINARY_PREDICATE(<,  <);$/;"	p	class:JKYi::net::StringPiece	access:public	signature:(<, <); STRINGPIECE_BINARY_PREDICATE(<=, <); STRINGPIECE_BINARY_PREDICATE(>=, >); STRINGPIECE_BINARY_PREDICATE(>, >)
STRINGPIECE_BINARY_PREDICATE	JKYi/reactor/StringPiece.h	101;"	d
STRINGPIECE_BINARY_PREDICATE	JKYi/reactor/StringPiece.h	92;"	d
SUFFIXES	build/JKYi/reactor/examples/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/JKYi/reactor/examples/idleconnection/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/JKYi/reactor/examples/maxconnection/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
Scheduler	JKYi/scheduler.cc	/^Scheduler::Scheduler(size_t threads,bool use_caller,const std::string&name)$/;"	f	class:JKYi::Scheduler	signature:(size_t threads,bool use_caller,const std::string&name)
Scheduler	JKYi/scheduler.h	/^   Scheduler(size_t threads = 1,bool use_caller = true,const std::string& name = "");$/;"	p	class:JKYi::Scheduler	access:public	signature:(size_t threads = 1,bool use_caller = true,const std::string& name = Ó)
Scheduler	JKYi/scheduler.h	/^class Scheduler{$/;"	c	namespace:JKYi
ScopedLockImpl	JKYi/mutex.h	/^  ScopedLockImpl(T& mutex)$/;"	f	class:JKYi::ScopedLockImpl	access:public	signature:(T& mutex)
ScopedLockImpl	JKYi/mutex.h	/^class ScopedLockImpl{$/;"	c	namespace:JKYi
Semaphore	JKYi/mutex.cc	/^Semaphore::Semaphore(uint32_t count){$/;"	f	class:JKYi::Semaphore	signature:(uint32_t count)
Semaphore	JKYi/mutex.h	/^   Semaphore(uint32_t count=0);$/;"	p	class:JKYi::Semaphore	access:public	signature:(uint32_t count=0)
Semaphore	JKYi/mutex.h	/^class Semaphore:Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
Servlet	JKYi/http/servlet.cc	/^Servlet::Servlet(const std::string& name)$/;"	f	class:JKYi::http::Servlet	signature:(const std::string& name)
Servlet	JKYi/http/servlet.h	/^    Servlet(const std::string& name);$/;"	p	class:JKYi::http::Servlet	access:public	signature:(const std::string& name)
Servlet	JKYi/http/servlet.h	/^class Servlet{$/;"	c	namespace:JKYi::http
ServletDispatch	JKYi/http/servlet.cc	/^ServletDispatch::ServletDispatch()$/;"	f	class:JKYi::http::ServletDispatch	signature:()
ServletDispatch	JKYi/http/servlet.h	/^    ServletDispatch();$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:()
ServletDispatch	JKYi/http/servlet.h	/^class ServletDispatch: public Servlet{$/;"	c	namespace:JKYi::http	inherits:Servlet
SetThis	JKYi/fiber.cc	/^void Fiber::SetThis(Fiber*f){$/;"	f	class:JKYi::Fiber	signature:(Fiber*f)
SetThis	JKYi/fiber.h	/^   static void SetThis(Fiber*f);$/;"	p	class:JKYi::Fiber	access:public	signature:(Fiber*f)
Settings	JKYi/http2/frame.h	/^    enum class Settings{$/;"	c	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public
SettingsFrame	JKYi/http2/frame.h	/^struct SettingsFrame:public IFrame{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	inherits:IFrame	access:private
SettingsItem	JKYi/http2/frame.h	/^    SettingsItem(uint16_t id = 0,uint32_t v = 0)$/;"	f	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public	signature:(uint16_t id = 0,uint32_t v = 0)
SettingsItem	JKYi/http2/frame.h	/^struct SettingsItem{$/;"	s	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
SettingsToString	JKYi/http2/frame.cc	/^std::string SettingsFrame::SettingsToString(Settings s){$/;"	f	class:JKYi::http2::SettingsFrame	signature:(Settings s)
SettingsToString	JKYi/http2/frame.h	/^    static std::string SettingsToString(Settings s);$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private	signature:(Settings s)
ShouldEncode	JKYi/http2/huffman.cc	/^bool Huffman::ShouldEncode(const char* in, int in_len) {$/;"	f	class:JKYi::http2::Huffman	signature:(const char* in, int in_len)
ShouldEncode	JKYi/http2/huffman.cc	/^bool Huffman::ShouldEncode(const std::string& in) {$/;"	f	class:JKYi::http2::Huffman	signature:(const std::string& in)
ShouldEncode	JKYi/http2/huffman.h	/^    static bool ShouldEncode(const char* in, int in_len);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const char* in, int in_len)
ShouldEncode	JKYi/http2/huffman.h	/^    static bool ShouldEncode(const std::string& in);$/;"	p	class:JKYi::http2::Huffman	access:public	signature:(const std::string& in)
Singleton	JKYi/singleton.h	/^class Singleton{$/;"	c	namespace:JKYi
SingletonPtr	JKYi/singleton.h	/^class SingletonPtr{$/;"	c	namespace:JKYi
Socket	JKYi/reactor/Socket.h	/^    explicit Socket(int sockfd)$/;"	f	class:JKYi::net::Socket	access:public	signature:(int sockfd)
Socket	JKYi/reactor/Socket.h	/^class Socket : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
Socket	JKYi/socket.cc	/^Socket::Socket(int family,int type,int protocol)$/;"	f	class:JKYi::Socket	signature:(int family,int type,int protocol)
Socket	JKYi/socket.h	/^    Socket(int family,int type,int protocol = 0);$/;"	p	class:JKYi::Socket	access:public	signature:(int family,int type,int protocol = 0)
Socket	JKYi/socket.h	/^class Socket:public std::enable_shared_from_this<Socket>,Noncopyable{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this,Noncopyable
SocketStream	JKYi/stream/socket_stream.cc	/^SocketStream::SocketStream(Socket::ptr sock,bool owner)$/;"	f	class:JKYi::SocketStream	signature:(Socket::ptr sock,bool owner)
SocketStream	JKYi/stream/socket_stream.h	/^     SocketStream(Socket::ptr sock,bool owner = true);$/;"	p	class:JKYi::SocketStream	access:public	signature:(Socket::ptr sock,bool owner = true)
SocketStream	JKYi/stream/socket_stream.h	/^class SocketStream:public Stream{$/;"	c	namespace:JKYi	inherits:Stream
SpinLock	JKYi/mutex.h	/^   SpinLock(){$/;"	f	class:JKYi::SpinLock	access:public	signature:()
SpinLock	JKYi/mutex.h	/^class SpinLock:Noncopyable{$/;"	c	namespace:JKYi	inherits:Noncopyable
State	JKYi/fiber.h	/^   enum State{$/;"	g	class:JKYi::Fiber	access:public
State	JKYi/reactor/Connector.h	/^    enum State{$/;"	g	class:JKYi::net::Connector	access:private
StateE	JKYi/reactor/TcpConnection.h	/^    enum StateE{$/;"	g	class:JKYi::net::TcpConnection	access:private
StateType	JKYi/zk_client.h	/^    class StateType{$/;"	c	class:JKYi::ZKClient	access:public
StdoutLogAppender	JKYi/log.h	/^class StdoutLogAppender:public LogAppender{$/;"	c	namespace:JKYi	inherits:LogAppender
Str2Time	JKYi/util.cc	/^time_t Str2Time(const char * str,const char * format){$/;"	f	namespace:JKYi	signature:(const char * str,const char * format)
Str2Time	JKYi/util.h	/^time_t Str2Time(const char * str,const char * format = "%Y-%m-%d %H:%M:%S");$/;"	p	namespace:JKYi	signature:(const char * str,const char * format = Ó)
Stream	JKYi/stream.h	/^class Stream{$/;"	c	namespace:JKYi
StringArg	JKYi/reactor/StringPiece.h	/^  StringArg(const char* str)$/;"	f	class:JKYi::net::StringArg	access:public	signature:(const char* str)
StringArg	JKYi/reactor/StringPiece.h	/^  StringArg(const std::string& str)$/;"	f	class:JKYi::net::StringArg	access:public	signature:(const std::string& str)
StringArg	JKYi/reactor/StringPiece.h	/^class StringArg \/\/ copyable$/;"	c	namespace:JKYi::net
StringFormatItem	JKYi/log.cc	/^   StringFormatItem(const std::string&str)$/;"	f	class:JKYi::StringFormatItem	access:public	signature:(const std::string&str)
StringFormatItem	JKYi/log.cc	/^class StringFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
StringHeader	JKYi/http2/hpack.h	/^struct StringHeader{$/;"	s	class:JKYi::http2::IndexType	access:private
StringPiece	JKYi/reactor/StringPiece.h	/^  StringPiece()$/;"	f	class:JKYi::net::StringPiece	access:public	signature:()
StringPiece	JKYi/reactor/StringPiece.h	/^  StringPiece(const char* offset, int len)$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const char* offset, int len)
StringPiece	JKYi/reactor/StringPiece.h	/^  StringPiece(const char* str)$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const char* str)
StringPiece	JKYi/reactor/StringPiece.h	/^  StringPiece(const std::string& str)$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const std::string& str)
StringPiece	JKYi/reactor/StringPiece.h	/^  StringPiece(const unsigned char* str)$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const unsigned char* str)
StringPiece	JKYi/reactor/StringPiece.h	/^class StringPiece {$/;"	c	namespace:JKYi::net
StringToHttpMethod	JKYi/http/http.cc	/^HttpMethod StringToHttpMethod(const std::string& m){$/;"	f	namespace:JKYi::http	signature:(const std::string& m)
StringToHttpMethod	JKYi/http/http.h	/^HttpMethod StringToHttpMethod(const std::string& str);$/;"	p	namespace:JKYi::http	signature:(const std::string& str)
StringUtil	JKYi/util.h	/^class StringUtil{$/;"	c	namespace:JKYi
TCP	JKYi/socket.h	/^        TCP = SOCK_STREAM,$/;"	e	enum:JKYi::Socket::Type
TERM	JKYi/fiber.h	/^	  TERM,  \/\/ç»ææ$/;"	e	enum:JKYi::Fiber::State
TEXT_FRAME	JKYi/http/ws_session.h	/^        TEXT_FRAME = 1,$/;"	e	enum:JKYi::http::WSFrameHead::OPCODE
TIMEOUT	JKYi/http/http_connection.h	/^        TIMEOUT = 6,$/;"	m	class:JKYi::http::HttpResult::Error	access:private
TIME_OUT	JKYi/db/redis.h	/^        TIME_OUT = 1,$/;"	e	enum:JKYi::FoxRedis::RESULT
TIME_OUT	JKYi/db/redis.h	/^        TIME_OUT = 1,$/;"	e	enum:JKYi::FoxRedisCluster::RESULT
TabFormatItem	JKYi/log.cc	/^   TabFormatItem(const std::string str = ""){}$/;"	f	class:JKYi::TabFormatItem	access:public	signature:(const std::string str = Ó)
TabFormatItem	JKYi/log.cc	/^class TabFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
TcpClient	JKYi/reactor/TcpClient.cc	/^TcpClient::TcpClient(EventLoop* loop,const Address::ptr& serverAddr,$/;"	f	class:JKYi::net::TcpClient	signature:(EventLoop* loop,const Address::ptr& serverAddr, const std::string& nameArg)
TcpClient	JKYi/reactor/TcpClient.h	/^    TcpClient(EventLoop* loop,$/;"	p	class:JKYi::net::TcpClient	access:public	signature:(EventLoop* loop, const Address::ptr& serverAddr, const std::string& nameArg)
TcpClient	JKYi/reactor/TcpClient.h	/^class TcpClient : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
TcpConnection	JKYi/reactor/TcpConnection.cc	/^TcpConnection::TcpConnection(EventLoop* loop,const std::string& nameArg,int sockfd,$/;"	f	class:JKYi::net::TcpConnection	signature:(EventLoop* loop,const std::string& nameArg,int sockfd, const Address::ptr localAddr, const Address::ptr peerAddr)
TcpConnection	JKYi/reactor/TcpConnection.h	/^    TcpConnection(EventLoop* loop,const std::string& name,int sockfd,$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(EventLoop* loop,const std::string& name,int sockfd, const Address::ptr localAddr,const Address::ptr peerAddr)
TcpConnection	JKYi/reactor/TcpConnection.h	/^class TcpConnection : public Noncopyable,$/;"	c	namespace:JKYi::net	inherits:Noncopyable,std::enable_shared_from_this
TcpConnectionPtr	JKYi/reactor/Callbacks.h	/^typedef std::shared_ptr<TcpConnection> TcpConnectionPtr;$/;"	t	namespace:JKYi::net
TcpServer	JKYi/reactor/TcpServer.cc	/^TcpServer::TcpServer(EventLoop* loop,$/;"	f	class:JKYi::net::TcpServer	signature:(EventLoop* loop, const Address::ptr& listenAddr, const std::string& nameArg, Option option)
TcpServer	JKYi/reactor/TcpServer.h	/^    TcpServer(EventLoop* loop,$/;"	p	class:JKYi::net::TcpServer	access:public	signature:(EventLoop* loop, const Address::ptr& listerAddr, const std::string& nameArg, Option option = kNoReusePort)
TcpServer	JKYi/reactor/TcpServer.h	/^class TcpServer : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
TcpServer	JKYi/tcp_server.cc	/^TcpServer::TcpServer(IOManager * worker,IOManager * io_worker,IOManager * accept_worker)$/;"	f	class:JKYi::TcpServer	signature:(IOManager * worker,IOManager * io_worker,IOManager * accept_worker)
TcpServer	JKYi/tcp_server.h	/^    TcpServer(IOManager * worker = IOManager::GetThis(),IOManager * io_worker = IOManager::GetThis(),$/;"	p	class:JKYi::TcpServer	access:public	signature:(IOManager * worker = IOManager::GetThis(),IOManager * io_worker = IOManager::GetThis(), IOManager * accept_worker = IOManager::GetThis())
TcpServer	JKYi/tcp_server.h	/^class TcpServer:public std::enable_shared_from_this<TcpServer>,Noncopyable{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this,Noncopyable
TcpServerConf	JKYi/tcp_server.h	/^struct TcpServerConf{$/;"	s	namespace:JKYi
Thread	JKYi/reactor/Thread.cc	/^Thread::Thread(ThreadFunc func,const std::string& name)$/;"	f	class:JKYi::net::Thread	signature:(ThreadFunc func,const std::string& name)
Thread	JKYi/reactor/Thread.h	/^    explicit Thread(ThreadFunc ,const std::string& name = std::string());$/;"	p	class:JKYi::net::Thread	access:public	signature:(ThreadFunc ,const std::string& name = std::string())
Thread	JKYi/reactor/Thread.h	/^class Thread : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
Thread	JKYi/thread.cc	/^Thread::Thread(std::function<void()> cb,const std::string &name)$/;"	f	class:JKYi::Thread	signature:(std::function<void()> cb,const std::string &name)
Thread	JKYi/thread.h	/^   Thread(std::function<void()> cb,const std::string &name); $/;"	p	class:JKYi::Thread	access:public	signature:(std::function<void()> cb,const std::string &name)
Thread	JKYi/thread.h	/^class Thread:Noncopyable {$/;"	c	namespace:JKYi	inherits:Noncopyable
ThreadData	JKYi/reactor/Thread.cc	/^    ThreadData(ThreadFunc func,const std::string& name,pid_t* tid,$/;"	f	struct:JKYi::detail::ThreadData	access:public	signature:(ThreadFunc func,const std::string& name,pid_t* tid, CountDownLatch* latch)
ThreadData	JKYi/reactor/Thread.cc	/^struct ThreadData{$/;"	s	namespace:JKYi::detail	file:
ThreadFunc	JKYi/reactor/Thread.cc	/^    typedef JKYi::net::Thread::ThreadFunc ThreadFunc;$/;"	t	struct:JKYi::detail::ThreadData	file:	access:public
ThreadFunc	JKYi/reactor/Thread.h	/^    typedef std::function<void ()> ThreadFunc;$/;"	t	class:JKYi::net::Thread	access:public
ThreadIdFormatItem	JKYi/log.cc	/^    ThreadIdFormatItem(const std::string&str=""){}$/;"	f	class:JKYi::ThreadIdFormatItem	access:public	signature:(const std::string&str=Ó)
ThreadIdFormatItem	JKYi/log.cc	/^class ThreadIdFormatItem:public LogFormatter::FormatItem{$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
ThreadInitCallback	JKYi/reactor/EventLoopThread.h	/^    typedef std::function<void (EventLoop*)> ThreadInitCallback;$/;"	t	class:JKYi::net::EventLoopThread	access:public
ThreadInitCallback	JKYi/reactor/EventLoopThreadPool.h	/^    typedef std::function<void (EventLoop*)> ThreadInitCallback;$/;"	t	class:JKYi::net::EventLoopThreadPool	access:public
ThreadInitCallback	JKYi/reactor/TcpServer.h	/^    typedef std::function<void (EventLoop*)> ThreadInitCallback;$/;"	t	class:JKYi::net::TcpServer	access:public
ThreadNameFormatItem	JKYi/log.cc	/^    ThreadNameFormatItem(const std::string& str = "") {}$/;"	f	class:JKYi::ThreadNameFormatItem	access:public	signature:(const std::string& str = Ó)
ThreadNameFormatItem	JKYi/log.cc	/^class ThreadNameFormatItem: public LogFormatter::FormatItem {$/;"	c	namespace:JKYi	file:	inherits:LogFormatter::FormatItem
ThreadNameInitializer	JKYi/reactor/Thread.cc	/^    ThreadNameInitializer(){$/;"	f	class:JKYi::detail::ThreadNameInitializer	access:public	signature:()
ThreadNameInitializer	JKYi/reactor/Thread.cc	/^class ThreadNameInitializer{$/;"	c	namespace:JKYi::detail	file:
Time2Str	JKYi/util.cc	/^std::string Time2Str(time_t ts,const std::string& format){$/;"	f	namespace:JKYi	signature:(time_t ts,const std::string& format)
Time2Str	JKYi/util.h	/^std::string Time2Str(time_t ts = time(0),const std::string& format $/;"	p	namespace:JKYi	signature:(time_t ts = time(0),const std::string& format = Ó)
TimeCb	JKYi/db/redis.cc	/^void FoxRedis::TimeCb(int fd,short event,void * d){$/;"	f	class:JKYi::FoxRedis	signature:(int fd,short event,void * d)
TimeCb	JKYi/db/redis.cc	/^void FoxRedisCluster::TimeCb(int fd,short event,void * d){$/;"	f	class:JKYi::FoxRedisCluster	signature:(int fd,short event,void * d)
TimeCb	JKYi/db/redis.h	/^    static void TimeCb(int fd,short event,void * d);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(int fd,short event,void * d)
TimeCb	JKYi/db/redis.h	/^    static void TimeCb(int fd,short event,void * d);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(int fd,short event,void * d)
Timer	JKYi/reactor/timer.h	/^    Timer(TimerCallback cb,Timestamp when,double interval)$/;"	f	class:JKYi::net::Timer	access:public	signature:(TimerCallback cb,Timestamp when,double interval)
Timer	JKYi/reactor/timer.h	/^class Timer : Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
Timer	JKYi/timer.cc	/^Timer::Timer(uint64_t ms,std::function<void ()>cb,bool recurring,TimerManager*manager)$/;"	f	class:JKYi::Timer	signature:(uint64_t ms,std::function<void ()>cb,bool recurring,TimerManager*manager)
Timer	JKYi/timer.cc	/^Timer::Timer(uint64_t next)$/;"	f	class:JKYi::Timer	signature:(uint64_t next)
Timer	JKYi/timer.h	/^   Timer(uint64_t ms,std::function<void ()>cb,bool recurring,TimerManager*manager);$/;"	p	class:JKYi::Timer	access:private	signature:(uint64_t ms,std::function<void ()>cb,bool recurring,TimerManager*manager)
Timer	JKYi/timer.h	/^   Timer(uint64_t next);$/;"	p	class:JKYi::Timer	access:private	signature:(uint64_t next)
Timer	JKYi/timer.h	/^class Timer:public std::enable_shared_from_this<Timer>{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this
TimerCallback	JKYi/reactor/Callbacks.h	/^typedef std::function<void ()> TimerCallback;$/;"	t	namespace:JKYi::net
TimerId	JKYi/reactor/timerId.h	/^     TimerId(Timer* timer,int64_t seq)$/;"	f	class:JKYi::net::TimerId	access:public	signature:(Timer* timer,int64_t seq)
TimerId	JKYi/reactor/timerId.h	/^    TimerId()$/;"	f	class:JKYi::net::TimerId	access:public	signature:()
TimerId	JKYi/reactor/timerId.h	/^class TimerId{$/;"	c	namespace:JKYi::net
TimerList	JKYi/reactor/timerQueue.h	/^    typedef std::set<Entry> TimerList;$/;"	t	class:JKYi::net::TimerQueue	access:private
TimerManager	JKYi/timer.cc	/^TimerManager::TimerManager(){$/;"	f	class:JKYi::TimerManager	signature:()
TimerManager	JKYi/timer.h	/^   TimerManager();$/;"	p	class:JKYi::TimerManager	access:public	signature:()
TimerManager	JKYi/timer.h	/^class TimerManager{$/;"	c	namespace:JKYi
TimerQueue	JKYi/reactor/timerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue	signature:(EventLoop* loop)
TimerQueue	JKYi/reactor/timerQueue.h	/^    explicit TimerQueue(EventLoop* loop);$/;"	p	class:JKYi::net::TimerQueue	access:public	signature:(EventLoop* loop)
TimerQueue	JKYi/reactor/timerQueue.h	/^class TimerQueue : public Noncopyable{$/;"	c	namespace:JKYi::net	inherits:Noncopyable
TimerQueue::TimerQueue	JKYi/reactor/timerQueue.cc	/^TimerQueue::TimerQueue(EventLoop* loop)$/;"	f	class:TimerQueue	signature:(EventLoop* loop)
TimerQueue::addTimer	JKYi/reactor/timerQueue.cc	/^TimerId TimerQueue::addTimer(TimerCallback cb,Timestamp when,double interval){$/;"	f	class:TimerQueue	signature:(TimerCallback cb,Timestamp when,double interval)
TimerQueue::addTimerInLoop	JKYi/reactor/timerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer){$/;"	f	class:TimerQueue	signature:(Timer* timer)
TimerQueue::cancel	JKYi/reactor/timerQueue.cc	/^void TimerQueue::cancel(TimerId timerId){$/;"	f	class:TimerQueue	signature:(TimerId timerId)
TimerQueue::cancelInLoop	JKYi/reactor/timerQueue.cc	/^void TimerQueue::cancelInLoop(TimerId timerId){$/;"	f	class:TimerQueue	signature:(TimerId timerId)
TimerQueue::getExpired	JKYi/reactor/timerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now){$/;"	f	class:TimerQueue	signature:(Timestamp now)
TimerQueue::handleRead	JKYi/reactor/timerQueue.cc	/^void TimerQueue::handleRead(){$/;"	f	class:TimerQueue	signature:()
TimerQueue::insert	JKYi/reactor/timerQueue.cc	/^bool TimerQueue::insert(Timer* timer){$/;"	f	class:TimerQueue	signature:(Timer* timer)
TimerQueue::reset	JKYi/reactor/timerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired,Timestamp now){$/;"	f	class:TimerQueue	signature:(const std::vector<Entry>& expired,Timestamp now)
TimerQueue::~TimerQueue	JKYi/reactor/timerQueue.cc	/^TimerQueue::~TimerQueue(){$/;"	f	class:TimerQueue	signature:()
Timestamp	JKYi/timestamp.h	/^    Timestamp()$/;"	f	class:JKYi::net::Timestamp	access:public	signature:()
Timestamp	JKYi/timestamp.h	/^    explicit Timestamp(int64_t microSecondsSinceEpochArg)$/;"	f	class:JKYi::net::Timestamp	access:public	signature:(int64_t microSecondsSinceEpochArg)
Timestamp	JKYi/timestamp.h	/^class Timestamp:public boost::equality_comparable<Timestamp>,$/;"	c	namespace:JKYi::net	inherits:boost::equality_comparable,boost::less_than_comparable
ToChar	JKYi/util.cc	/^int8_t TypeUtil::ToChar(const char * str){$/;"	f	class:JKYi::TypeUtil	signature:(const char * str)
ToChar	JKYi/util.cc	/^int8_t TypeUtil::ToChar(const std::string& str){$/;"	f	class:JKYi::TypeUtil	signature:(const std::string& str)
ToChar	JKYi/util.h	/^    static int8_t ToChar(const char * str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const char * str)
ToChar	JKYi/util.h	/^    static int8_t ToChar(const std::string& str);$/;"	p	class:JKYi::TypeUtil	access:public	signature:(const std::string& str)
ToString	JKYi/log.cc	/^ const char* LogLevel::ToString(LogLevel::Level level){$/;"	f	class:JKYi::LogLevel	signature:(LogLevel::Level level)
ToString	JKYi/log.h	/^   static const char* ToString(LogLevel::Level level);$/;"	p	class:JKYi::LogLevel	access:public	signature:(LogLevel::Level level)
ToString	JKYi/util/json_util.cc	/^std::string JsonUtil::ToString(const Json::Value& json){$/;"	f	class:JKYi::JsonUtil	signature:(const Json::Value& json)
ToString	JKYi/util/json_util.h	/^    static std::string ToString(const Json::Value& json);$/;"	p	class:JKYi::JsonUtil	access:public	signature:(const Json::Value& json)
TotalFibers	JKYi/fiber.cc	/^uint64_t Fiber::TotalFibers(){$/;"	f	class:JKYi::Fiber	signature:()
TotalFibers	JKYi/fiber.h	/^   static uint64_t TotalFibers();$/;"	p	class:JKYi::Fiber	access:public	signature:()
Trim	JKYi/util.cc	/^std::string StringUtil::Trim(const std::string& str,const std::string& delimit){$/;"	f	class:JKYi::StringUtil	signature:(const std::string& str,const std::string& delimit)
Trim	JKYi/util.h	/^   static std::string Trim(const std::string& str,const std::string& delimit = " \\t\\r\\n");$/;"	p	class:JKYi::StringUtil	access:public	signature:(const std::string& str,const std::string& delimit = Ó)
TryCmd	JKYi/db/redis.cc	/^ReplyPtr RedisUtil::TryCmd(const std::string& name,uint64_t count,$/;"	f	class:JKYi::RedisUtil	signature:(const std::string& name,uint64_t count, const std::vector<std::string>& args)
TryCmd	JKYi/db/redis.cc	/^ReplyPtr RedisUtil::TryCmd(const std::string& name,uint64_t count,const char * fmt,...){$/;"	f	class:JKYi::RedisUtil	signature:(const std::string& name,uint64_t count,const char * fmt,...)
TryCmd	JKYi/db/redis.h	/^    static ReplyPtr TryCmd(const std::string& name,uint64_t count,const char * fmt,...);$/;"	p	class:JKYi::RedisUtil	access:public	signature:(const std::string& name,uint64_t count,const char * fmt,...)
TryCmd	JKYi/db/redis.h	/^    static ReplyPtr TryCmd(const std::string& name,uint64_t count,const std::vector<std::string>& args);$/;"	p	class:JKYi::RedisUtil	access:public	signature:(const std::string& name,uint64_t count,const std::vector<std::string>& args)
TryExcute	JKYi/db/mysql.cc	/^int MySQLUtil::TryExcute(const std::string& name,uint32_t count,const char * format,$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,uint32_t count,const char * format, ...)
TryExcute	JKYi/db/mysql.cc	/^int MySQLUtil::TryExcute(const std::string& name,uint32_t count,const std::string& sql){$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,uint32_t count,const std::string& sql)
TryExcute	JKYi/db/mysql.h	/^    static int TryExcute(const std::string& name,uint32_t count,const char * format,...);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,uint32_t count,const char * format,...)
TryExcute	JKYi/db/mysql.h	/^    static int TryExcute(const std::string& name,uint32_t count,const std::string& sql);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,uint32_t count,const std::string& sql)
TryQuery	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLUtil::TryQuery(const std::string& name,uint32_t count,$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,uint32_t count, const char * format,...)
TryQuery	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLUtil::TryQuery(const std::string& name,uint32_t count,$/;"	f	class:JKYi::MySQLUtil	signature:(const std::string& name,uint32_t count, const std::string& sql)
TryQuery	JKYi/db/mysql.h	/^    static ISQLData::ptr TryQuery(const std::string& name,uint32_t count,const char * format,...);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,uint32_t count,const char * format,...)
TryQuery	JKYi/db/mysql.h	/^    static ISQLData::ptr TryQuery(const std::string& name,uint32_t count,const std::string& sql);$/;"	p	class:JKYi::MySQLUtil	access:public	signature:(const std::string& name,uint32_t count,const std::string& sql)
Type	JKYi/db/redis.h	/^    enum Type{$/;"	g	class:JKYi::IRedis	access:public
Type	JKYi/module.h	/^    enum Type{$/;"	g	class:JKYi::Module	access:public
Type	JKYi/socket.h	/^    enum Type{$/;"	g	class:JKYi::Socket	access:public
TypeUtil	JKYi/util.h	/^class TypeUtil{$/;"	c	namespace:JKYi
UDP	JKYi/socket.h	/^        UDP = SOCK_DGRAM$/;"	e	enum:JKYi::Socket::Type
UNCONNECTED	JKYi/db/redis.h	/^        UNCONNECTED = 0,$/;"	e	enum:JKYi::FoxRedis::STATUS
UNCONNECTED	JKYi/db/redis.h	/^        UNCONNECTED = 0,$/;"	e	enum:JKYi::FoxRedisCluster::STATUS
UNKNOW	JKYi/log.h	/^     UNKNOW = 0,$/;"	e	enum:JKYi::LogLevel::Level
UNSET	JKYi/http2/frame.h	/^    UNSET    = 0x0,$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR	access:private
Unix	JKYi/socket.h	/^        Unix = AF_UNIX$/;"	e	enum:JKYi::Socket::Family
UnixAddress	JKYi/address.cc	/^UnixAddress::UnixAddress(){$/;"	f	class:JKYi::UnixAddress	signature:()
UnixAddress	JKYi/address.cc	/^UnixAddress::UnixAddress(const std::string&path){$/;"	f	class:JKYi::UnixAddress	signature:(const std::string&path)
UnixAddress	JKYi/address.h	/^	UnixAddress();$/;"	p	class:JKYi::UnixAddress	access:public	signature:()
UnixAddress	JKYi/address.h	/^	UnixAddress(const std::string& path);$/;"	p	class:JKYi::UnixAddress	access:public	signature:(const std::string& path)
UnixAddress	JKYi/address.h	/^class UnixAddress:public Address{$/;"	c	namespace:JKYi	inherits:Address
UnknowAddress	JKYi/address.cc	/^UnknowAddress::UnknowAddress(const sockaddr&addr){$/;"	f	class:JKYi::UnknowAddress	signature:(const sockaddr&addr)
UnknowAddress	JKYi/address.cc	/^UnknowAddress::UnknowAddress(int family){$/;"	f	class:JKYi::UnknowAddress	signature:(int family)
UnknowAddress	JKYi/address.h	/^	UnknowAddress(const sockaddr&addr);$/;"	p	class:JKYi::UnknowAddress	access:public	signature:(const sockaddr&addr)
UnknowAddress	JKYi/address.h	/^	UnknowAddress(int family);$/;"	p	class:JKYi::UnknowAddress	access:public	signature:(int family)
UnknowAddress	JKYi/address.h	/^class UnknowAddress:public Address{$/;"	c	namespace:JKYi	inherits:Address
Uri	JKYi/uri.h	/^    Uri();$/;"	p	class:JKYi::Uri	access:public	signature:()
Uri	JKYi/uri.h	/^class Uri{$/;"	c	namespace:JKYi
Uri	JKYi/uri.rl.cc	/^Uri::Uri()$/;"	f	class:JKYi::Uri	signature:()
VERBOSE	build/JKYi/reactor/examples/Makefile	/^VERBOSE = 1$/;"	m
VERBOSE	build/JKYi/reactor/examples/idleconnection/Makefile	/^VERBOSE = 1$/;"	m
VERBOSE	build/JKYi/reactor/examples/maxconnection/Makefile	/^VERBOSE = 1$/;"	m
VERBOSE	build/Makefile	/^VERBOSE = 1$/;"	m
Visit	JKYi/config.cc	/^void Config::Visit(std::function<void (ConfigVarBase::ptr)>cb){$/;"	f	class:JKYi::Config	signature:(std::function<void (ConfigVarBase::ptr)>cb)
Visit	JKYi/config.h	/^	static void Visit(std::function<void (ConfigVarBase::ptr)>cb); $/;"	p	class:JKYi::Config	access:public	signature:(std::function<void (ConfigVarBase::ptr)>cb)
WARN	JKYi/log.h	/^     WARN = 3,$/;"	e	enum:JKYi::LogLevel::Level
WINDOW_UPDATE	JKYi/http2/frame.h	/^    WINDOW_UPDATE  = 0X8,$/;"	m	class:JKYi::http2::FrameType	access:private
WITHOUT_INDEXING_INDEXED_NAME	JKYi/http2/hpack.h	/^    WITHOUT_INDEXING_INDEXED_NAME = 3, \/\/ name å¨è¡¨ä¸­ï¼valueéè¦ç¼ç ä¼ è¾å¹¶ä¸ä¸æ´æ°å°å¨æè¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
WITHOUT_INDEXING_NEW_NAME	JKYi/http2/hpack.h	/^    WITHOUT_INDEXING_NEW_NAME     = 4, \/\/ nameåvalueé½ä¸å¨è¡¨ä¸­ï¼é½éè¦ç¼ç ä¼ è¾å¹¶ä¸ä¸æ´æ°å°è¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
WITH_INDEXING_INDEXED_NAME	JKYi/http2/hpack.h	/^    WITH_INDEXING_INDEXED_NAME    = 1, \/\/ nameå¨è¡¨ä¸­valueéè¦ç¼ç ä¼ è¾,å¹¶ä¸ä¼æ´æ°å°å¨æè¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
WITH_INDEXING_NEW_NAME	JKYi/http2/hpack.h	/^    WITH_INDEXING_NEW_NAME        = 2, \/\/ nameåvalueé½ä¸å¨è¡¨ä¸­ï¼æä»¥é½éè¦ç¼ç ä¼ è¾å¹¶ä¸ä¼æ´æ°å°å¨æè¡¨ä¸­å»$/;"	m	class:JKYi::http2::IndexType	access:private
WRITE	JKYi/iomanager.h	/^	   WRITE =  0x4$/;"	e	enum:JKYi::IOManager::Event
WSConnection	JKYi/http/ws_connection.cc	/^WSConnection::WSConnection(Socket::ptr sock,bool owner)$/;"	f	class:JKYi::http::WSConnection	signature:(Socket::ptr sock,bool owner)
WSConnection	JKYi/http/ws_connection.h	/^    WSConnection(Socket::ptr  sock,bool owner = true);$/;"	p	class:JKYi::http::WSConnection	access:public	signature:(Socket::ptr sock,bool owner = true)
WSConnection	JKYi/http/ws_connection.h	/^class WSConnection:public HttpConnection{$/;"	c	namespace:JKYi::http	inherits:HttpConnection
WSFrameHead	JKYi/http/ws_session.h	/^struct WSFrameHead{$/;"	s	namespace:JKYi::http
WSFrameMessage	JKYi/http/ws_session.cc	/^WSFrameMessage::WSFrameMessage(int opcode,const std::string& msg)$/;"	f	class:JKYi::http::WSFrameMessage	signature:(int opcode,const std::string& msg)
WSFrameMessage	JKYi/http/ws_session.h	/^    WSFrameMessage(int opcode = 0,const std::string& data = "");$/;"	p	class:JKYi::http::WSFrameMessage	access:public	signature:(int opcode = 0,const std::string& data = Ó)
WSFrameMessage	JKYi/http/ws_session.h	/^class WSFrameMessage{$/;"	c	namespace:JKYi::http
WSPing	JKYi/http/ws_session.cc	/^int32_t WSPing(Stream * stream){$/;"	f	namespace:JKYi::http	signature:(Stream * stream)
WSPing	JKYi/http/ws_session.h	/^int32_t WSPing(Stream * stream);$/;"	p	namespace:JKYi::http	signature:(Stream * stream)
WSPong	JKYi/http/ws_session.cc	/^int32_t WSPong(Stream * stream){$/;"	f	namespace:JKYi::http	signature:(Stream * stream)
WSPong	JKYi/http/ws_session.h	/^int32_t WSPong(Stream * stream);$/;"	p	namespace:JKYi::http	signature:(Stream * stream)
WSRecvMessage	JKYi/http/ws_session.cc	/^WSFrameMessage::ptr WSRecvMessage(Stream * stream,bool client){$/;"	f	namespace:JKYi::http	signature:(Stream * stream,bool client)
WSRecvMessage	JKYi/http/ws_session.h	/^WSFrameMessage::ptr WSRecvMessage(Stream * stream,bool client);$/;"	p	namespace:JKYi::http	signature:(Stream * stream,bool client)
WSSendMessage	JKYi/http/ws_session.cc	/^int32_t WSSendMessage(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin){$/;"	f	namespace:JKYi::http	signature:(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin)
WSSendMessage	JKYi/http/ws_session.h	/^int32_t WSSendMessage(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin);$/;"	p	namespace:JKYi::http	signature:(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin)
WSServer	JKYi/http/ws_server.cc	/^WSServer::WSServer(JKYi::IOManager * worker,JKYi::IOManager * io_worker,$/;"	f	class:JKYi::http::WSServer	signature:(JKYi::IOManager * worker,JKYi::IOManager * io_worker, JKYi::IOManager * accept_worker)
WSServer	JKYi/http/ws_server.h	/^    WSServer(JKYi::IOManager * worker = JKYi::IOManager::GetThis(),$/;"	p	class:JKYi::http::WSServer	access:public	signature:(JKYi::IOManager * worker = JKYi::IOManager::GetThis(), JKYi::IOManager * io_worker = JKYi::IOManager::GetThis(), JKYi::IOManager * accept_worker = JKYi::IOManager::GetThis())
WSServer	JKYi/http/ws_server.h	/^class WSServer:public TcpServer{$/;"	c	namespace:JKYi::http	inherits:TcpServer
WSServlet	JKYi/http/ws_servlet.h	/^    WSServlet(const std::string& name)$/;"	f	class:JKYi::http::WSServlet	access:public	signature:(const std::string& name)
WSServlet	JKYi/http/ws_servlet.h	/^class WSServlet:public Servlet{$/;"	c	namespace:JKYi::http	inherits:Servlet
WSServletDispatch	JKYi/http/ws_servlet.cc	/^WSServletDispatch::WSServletDispatch(){$/;"	f	class:JKYi::http::WSServletDispatch	signature:()
WSServletDispatch	JKYi/http/ws_servlet.h	/^    WSServletDispatch();$/;"	p	class:JKYi::http::WSServletDispatch	access:public	signature:()
WSServletDispatch	JKYi/http/ws_servlet.h	/^class WSServletDispatch:public ServletDispatch{$/;"	c	namespace:JKYi::http	inherits:ServletDispatch
WSSession	JKYi/http/ws_session.cc	/^WSSession::WSSession(Socket::ptr sock,bool owner)$/;"	f	class:JKYi::http::WSSession	signature:(Socket::ptr sock,bool owner)
WSSession	JKYi/http/ws_session.h	/^    WSSession(Socket::ptr sock,bool owner = true);$/;"	p	class:JKYi::http::WSSession	access:public	signature:(Socket::ptr sock,bool owner = true)
WSSession	JKYi/http/ws_session.h	/^class WSSession:public HttpSession{$/;"	c	namespace:JKYi::http	inherits:HttpSession
WeakCallback	JKYi/WeakCallback.h	/^    WeakCallback(const std::weak_ptr<CLASS>& object,$/;"	f	class:JKYi::WeakCallback	access:public	signature:(const std::weak_ptr<CLASS>& object, const std::function<void (CLASS*,ARGS...)>& function)
WeakCallback	JKYi/WeakCallback.h	/^class WeakCallback{$/;"	c	namespace:JKYi
WeakConnectionList	JKYi/reactor/examples/idleconnection/echo.h	/^    typedef boost::circular_buffer<Bucket> WeakConnectionList;$/;"	t	class:EchoServer	access:private
WeakEntryPtr	JKYi/reactor/examples/idleconnection/echo.h	/^    typedef std::weak_ptr<Entry> WeakEntryPtr;$/;"	t	class:EchoServer	access:private
WeakTcpConnectionPtr	JKYi/reactor/examples/idleconnection/echo.h	/^    typedef std::weak_ptr<JKYi::net::TcpConnection> WeakTcpConnectionPtr;$/;"	t	class:EchoServer	access:private
WindowUpdateFrame	JKYi/http2/frame.h	/^struct WindowUpdateFrame : public IFrame{$/;"	s	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	inherits:IFrame	access:public
WorkerManager	JKYi/worker.cc	/^WorkerManager::WorkerManager()$/;"	f	class:JKYi::WorkerManager	signature:()
WorkerManager	JKYi/worker.h	/^    WorkerManager();$/;"	p	class:JKYi::WorkerManager	access:public	signature:()
WorkerManager	JKYi/worker.h	/^class WorkerManager{$/;"	c	namespace:JKYi
WorkerMgr	JKYi/worker.h	/^typedef JKYi::Singleton<WorkerManager> WorkerMgr;$/;"	t	namespace:JKYi
WriteCompleteCallback	JKYi/reactor/Callbacks.h	/^typedef std::function<void (const TcpConnectionPtr&)> WriteCompleteCallback;$/;"	t	namespace:JKYi::net
WriteLock	JKYi/mutex.h	/^	typedef WriteScopedLockImpl<RWMutex> WriteLock;$/;"	t	class:JKYi::RWMutex	access:public
WriteScopedLockImpl	JKYi/mutex.h	/^  WriteScopedLockImpl(T&mutex)$/;"	f	class:JKYi::WriteScopedLockImpl	access:public	signature:(T&mutex)
WriteScopedLockImpl	JKYi/mutex.h	/^class WriteScopedLockImpl{$/;"	c	namespace:JKYi
WriteString	JKYi/http2/hpack.cc	/^int HPack::WriteString(ByteArray::ptr ba,const std::string& str,bool h){$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba,const std::string& str,bool h)
WriteString	JKYi/http2/hpack.h	/^    static int WriteString(ByteArray::ptr ba,const std::string& str,bool h);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba,const std::string& str,bool h)
WriteVarInt	JKYi/http2/hpack.cc	/^int HPack::WriteVarInt(ByteArray::ptr ba,int32_t prefix,uint64_t value,$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba,int32_t prefix,uint64_t value, uint8_t flags)
WriteVarInt	JKYi/http2/hpack.h	/^    static int WriteVarInt(ByteArray::ptr ba,int32_t prefix,uint64_t value,$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba,int32_t prefix,uint64_t value, uint8_t flag)
XX	JKYi/bytearray.cc	240;"	d	file:
XX	JKYi/bytearray.cc	270;"	d	file:
XX	JKYi/db/mysql.cc	533;"	d	file:
XX	JKYi/db/mysql.cc	547;"	d	file:
XX	JKYi/db/mysql.cc	593;"	d	file:
XX	JKYi/db/mysql.cc	626;"	d	file:
XX	JKYi/hook.cc	/^    HOOK_FUN(XX);$/;"	v
XX	JKYi/hook.cc	176;"	d	file:
XX	JKYi/hook.cc	178;"	d	file:
XX	JKYi/hook.cc	49;"	d	file:
XX	JKYi/hook.cc	51;"	d	file:
XX	JKYi/http/http.cc	14;"	d	file:
XX	JKYi/http/http.cc	19;"	d	file:
XX	JKYi/http/http.cc	24;"	d	file:
XX	JKYi/http/http.cc	30;"	d	file:
XX	JKYi/http/http.cc	32;"	d	file:
XX	JKYi/http/http.cc	44;"	d	file:
XX	JKYi/http/http.cc	48;"	d	file:
XX	JKYi/http/http.cc	9;"	d	file:
XX	JKYi/http/http.h	126;"	d
XX	JKYi/http/http.h	128;"	d
XX	JKYi/http/http.h	134;"	d
XX	JKYi/http/http.h	136;"	d
XX	JKYi/http2/dynamic_table.cc	73;"	d	file:
XX	JKYi/http2/dynamic_table.cc	75;"	d	file:
XX	JKYi/http2/frame.cc	434;"	d	file:
XX	JKYi/log.cc	17;"	d	file:
XX	JKYi/log.cc	27;"	d	file:
XX	JKYi/log.cc	34;"	d	file:
XX	JKYi/log.cc	517;"	d	file:
XX	JKYi/log.cc	52;"	d	file:
XX	JKYi/log.cc	533;"	d	file:
XX	JKYi/reactor/channel.cc	111;"	d	file:
XX	JKYi/reactor/channel.cc	122;"	d	file:
XX	tests/test_bytearray.cc	44;"	d	file:
XX	tests/test_bytearray.cc	48;"	d	file:
XX	tests/test_bytearray.cc	7;"	d	file:
XX	tests/test_bytearray.cc	91;"	d	file:
XX	tests/test_config.cc	46;"	d	file:
XX_END	JKYi/http2/frame.cc	446;"	d	file:
XX_IF	JKYi/http2/frame.cc	439;"	d	file:
XX_M	tests/test_config.cc	55;"	d	file:
YieldToHold	JKYi/fiber.cc	/^void Fiber::YieldToHold(){$/;"	f	class:JKYi::Fiber	signature:()
YieldToHold	JKYi/fiber.h	/^   static void YieldToHold();$/;"	p	class:JKYi::Fiber	access:public	signature:()
YieldToReady	JKYi/fiber.cc	/^void Fiber::YieldToReady(){$/;"	f	class:JKYi::Fiber	signature:()
YieldToReady	JKYi/fiber.h	/^   static void YieldToReady();$/;"	p	class:JKYi::Fiber	access:public	signature:()
ZKClient	JKYi/zk_client.cc	/^ZKClient::ZKClient()$/;"	f	class:JKYi::ZKClient	signature:()
ZKClient	JKYi/zk_client.h	/^    ZKClient();$/;"	p	class:JKYi::ZKClient	access:public	signature:()
ZKClient	JKYi/zk_client.h	/^class ZKClient : public std::enable_shared_from_this<ZKClient>{$/;"	c	namespace:JKYi	inherits:std::enable_shared_from_this
_BLOCKINGQUEUE_H_	JKYi/BlockingQueue.h	2;"	d
_HTTP_PARSER_H_	JKYi/http/http_parser.h	2;"	d
_HookIniter	JKYi/hook.cc	/^   _HookIniter(){$/;"	f	struct:JKYi::_HookIniter	access:public	signature:()
_HookIniter	JKYi/hook.cc	/^struct _HookIniter{$/;"	s	namespace:JKYi	file:
_JKAI_LOG_H_	JKYi/log.h	2;"	d
_JKYI_ACCEPTOR_H_	JKYi/reactor/acceptor.h	2;"	d
_JKYI_ADDRESS_H_	JKYi/address.h	2;"	d
_JKYI_APPLICATION_H_	JKYi/application.h	2;"	d
_JKYI_ATOMIC_H_	JKYi/atomic.h	2;"	d
_JKYI_BLOCKING_QUEUE_H_	JKYi/ds/blocking_queue.h	2;"	d
_JKYI_BOUNDED_BLOCKING_QUEUE_H_	JKYi/BoundedBlockingQueue.h	2;"	d
_JKYI_BUFFER_H_	JKYi/reactor/Buffer.h	2;"	d
_JKYI_BYTEARRAY_H_	JKYi/bytearray.h	2;"	d
_JKYI_CALLBACKS_H_	JKYi/reactor/Callbacks.h	2;"	d
_JKYI_CHANNEL_H_	JKYi/reactor/channel.h	2;"	d
_JKYI_CONDITION_H_	JKYi/condition.h	2;"	d
_JKYI_CONFIG_H_	JKYi/config.h	2;"	d
_JKYI_CONNECTOR_H_	JKYi/reactor/Connector.h	2;"	d
_JKYI_COPYABLE_H_	JKYi/copyable.h	2;"	d
_JKYI_COUNT_DOWN_LATCH_H_	JKYi/CountDownLatch.h	2;"	d
_JKYI_CURRENT_THREAD_H_	JKYi/reactor/CurrentThread.h	2;"	d
_JKYI_DAEMON_H_	JKYi/daemon.h	2;"	d
_JKYI_DB_FOX_THREAD_H_	JKYi/db/fox_thread.h	2;"	d
_JKYI_DB_H_	JKYi/db/db.h	2;"	d
_JKYI_ENDIAN_H_	JKYi/endian.h	2;"	d
_JKYI_ENV_H_	JKYi/env.h	2;"	d
_JKYI_EPOLLPOLLER_H_	JKYi/reactor/poller/epollPoller.h	2;"	d
_JKYI_EVENTLOOP_H_	JKYi/reactor/EventLoop.h	2;"	d
_JKYI_EVENT_LOOP_THREAD_H_	JKYi/reactor/EventLoopThread.h	2;"	d
_JKYI_EVENT_LOOP_THREAD_POOL_H_	JKYi/reactor/EventLoopThreadPool.h	2;"	d
_JKYI_EXAMPLES_IDLECONNECTION_H_	JKYi/reactor/examples/idleconnection/echo.h	2;"	d
_JKYI_EXAMPLES_MAXCONNECTION_H_	JKYi/reactor/examples/maxconnection/echo.h	2;"	d
_JKYI_FDMANAGER_H	JKYi/fdmanager.h	2;"	d
_JKYI_FIBER_H_	JKYi/fiber.h	2;"	d
_JKYI_FRAME_H_	JKYi/http2/frame.h	2;"	d
_JKYI_HASH_UTIL_H_	JKYi/util/hash_util.h	2;"	d
_JKYI_HOOK_H_	JKYi/hook.h	2;"	d
_JKYI_HPACK_H_	JKYi/http2/hpack.h	2;"	d
_JKYI_HTTP_CONNECTION_H_	JKYi/http/http_connection.h	2;"	d
_JKYI_HTTP_H_	JKYi/http/http.h	2;"	d
_JKYI_HTTP_SERVER_H_	JKYi/http/http_server.h	2;"	d
_JKYI_HTTP_SESSION_H_	JKYi/http/http_session.h	2;"	d
_JKYI_IOMANAGER_H_	JKYi/iomanager.h	2;"	d
_JKYI_JKYI_H_	JKYi/JKYi.h	2;"	d
_JKYI_JSON_UTIL_H_	JKYi/util/json_util.h	2;"	d
_JKYI_LIBRARY_H_	JKYi/library.h	2;"	d
_JKYI_MACRO_H_	JKYi/macro.h	2;"	d
_JKYI_MODULE_H_	JKYi/module.h	2;"	d
_JKYI_MUTEX_H_	JKYi/mutex.h	2;"	d
_JKYI_MYSQL_H_	JKYi/db/mysql.h	2;"	d
_JKYI_NONCOPYABLE_H_	JKYi/noncopyable.h	2;"	d
_JKYI_POLLER_H_	JKYi/reactor/poller.h	2;"	d
_JKYI_POLLPOLLER_H_	JKYi/reactor/poller/pollPoller.h	2;"	d
_JKYI_PROTOCOL_H_	JKYi/protocol.h	2;"	d
_JKYI_REDIS_H_	JKYi/db/redis.h	2;"	d
_JKYI_SCHEDULER_H_	JKYi/scheduler.h	2;"	d
_JKYI_SERVLET_H_	JKYi/http/servlet.h	2;"	d
_JKYI_SINGLETON_H_	JKYi/singleton.h	2;"	d
_JKYI_SOCKETSOPS_H_	JKYi/reactor/SocketsOps.h	2;"	d
_JKYI_SOCKET_H_	JKYi/reactor/Socket.h	2;"	d
_JKYI_SOCKET_H_	JKYi/socket.h	2;"	d
_JKYI_SOCKET_STREAM_H_	JKYi/stream/socket_stream.h	2;"	d
_JKYI_STREAM_H_	JKYi/stream.h	2;"	d
_JKYI_STRINGPIECE_H_	JKYi/reactor/StringPiece.h	2;"	d
_JKYI_TCPCLIENT_H_	JKYi/reactor/TcpClient.h	2;"	d
_JKYI_TCPCONNECTION_H_	JKYi/reactor/TcpConnection.h	2;"	d
_JKYI_TCP_SERVER_H_	JKYi/reactor/TcpServer.h	2;"	d
_JKYI_THREAD_H_	JKYi/thread.h	2;"	d
_JKYI_TIMERID_H_	JKYi/reactor/timerId.h	2;"	d
_JKYI_TIMERQUEUE_H_	JKYi/reactor/timerQueue.h	2;"	d
_JKYI_TIMER_H_	JKYi/reactor/timer.h	2;"	d
_JKYI_TIMER_H_	JKYi/timer.h	2;"	d
_JKYI_TIMESTAMP_H_	JKYi/timestamp.h	2;"	d
_JKYI_TYPES_H_	JKYi/Types.h	2;"	d
_JKYI_URI_H_	JKYi/uri.h	2;"	d
_JKYI_UTIL_H_	JKYi/util.h	2;"	d
_JKYI_WEAKCALLBACK_H_	JKYi/WeakCallback.h	2;"	d
_JKYI_WORKER_H_	JKYi/worker.h	2;"	d
_JKYI_WS_CONNECTION_H_	JKYi/http/ws_connection.h	2;"	d
_JKYI_WS_SERVER_H_	JKYi/http/ws_server.h	2;"	d
_JKYI_WS_SERVLET_H_	JKYi/http/ws_servlet.h	2;"	d
_JKYI_WS_SESSION_H_	JKYi/http/ws_session.h	2;"	d
_JKYI_ZK_CLIENT_H_	JKYi/zk_client.h	2;"	d
_RequestSizeIniter	JKYi/http/http_parser.cc	/^        _RequestSizeIniter(){$/;"	f	struct:JKYi::http::__anon1::_RequestSizeIniter	access:public	signature:()
_RequestSizeIniter	JKYi/http/http_parser.cc	/^struct _RequestSizeIniter{$/;"	s	namespace:JKYi::http::__anon1	file:
_SSLInit	JKYi/socket.cc	/^    _SSLInit(){$/;"	f	struct:JKYi::__anon2::_SSLInit	access:public	signature:()
_SSLInit	JKYi/socket.cc	/^struct _SSLInit{$/;"	s	namespace:JKYi::__anon2	file:
_TCP_SERVER_H_	JKYi/tcp_server.h	2;"	d
__JKYI_HTTP2_HUFFMAN_H__	JKYi/http2/huffman.h	2;"	d
__JKYI_HTTP2_TABLES_H__	JKYi/http2/huffman_table.h	2;"	d
__anon19::SA	JKYi/reactor/SocketsOps.cc	/^typedef struct sockaddr SA;$/;"	t	namespace:__anon19	typeref:struct:__anon19::sockaddr	file:
__anon19::setNonBlockAndCloseOnExec	JKYi/reactor/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd){$/;"	f	namespace:__anon19	signature:(int sockfd)
__anon20::IgnoreSigPipe	JKYi/reactor/EventLoop.cc	/^class IgnoreSigPipe{$/;"	c	namespace:__anon20	file:
__anon20::IgnoreSigPipe::IgnoreSigPipe	JKYi/reactor/EventLoop.cc	/^    IgnoreSigPipe(){$/;"	f	class:__anon20::IgnoreSigPipe	access:public	signature:()
__anon20::createEventfd	JKYi/reactor/EventLoop.cc	/^int createEventfd(){$/;"	f	namespace:__anon20	signature:()
__anon20::g_logger	JKYi/reactor/EventLoop.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:__anon20	file:
__anon20::initObj	JKYi/reactor/EventLoop.cc	/^IgnoreSigPipe initObj;$/;"	m	namespace:__anon20	file:
__anon20::kPollTimeMs	JKYi/reactor/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	m	namespace:__anon20	file:
__anon20::t_loopInThisThread	JKYi/reactor/EventLoop.cc	/^__thread JKYi::net::EventLoop* t_loopInThisThread = nullptr; \/\/å¨æ¯ä¸ä¸ªçº¿ç¨ä¸­å­å¨å½åçº¿ç¨çeventloop$/;"	m	namespace:__anon20	file:
__lstat	JKYi/util.cc	/^static int __lstat(const char* file,struct stat* st = nullptr){$/;"	f	namespace:JKYi	signature:(const char* file,struct stat* st = nullptr)
__mkdir	JKYi/util.cc	/^static int __mkdir(const char * dirname){$/;"	f	namespace:JKYi	signature:(const char * dirname)
__type_traits	JKYi/reactor/StringPiece.h	/^template<> struct __type_traits<muduo::StringPiece> {$/;"	s
__type_traits::has_trivial_assignment_operator	JKYi/reactor/StringPiece.h	/^  typedef __true_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_copy_constructor	JKYi/reactor/StringPiece.h	/^  typedef __true_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_default_constructor	JKYi/reactor/StringPiece.h	/^  typedef __true_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_destructor	JKYi/reactor/StringPiece.h	/^  typedef __true_type    has_trivial_destructor;$/;"	t	struct:__type_traits	access:public
__type_traits::is_POD_type	JKYi/reactor/StringPiece.h	/^  typedef __true_type    is_POD_type;$/;"	t	struct:__type_traits	access:public
_hf_add_node	JKYi/http2/huffman.cc	/^static int _hf_add_node(NODE* h_node, unsigned char sym, int code, int code_len){$/;"	f	namespace:JKYi::http2	signature:(NODE* h_node, unsigned char sym, int code, int code_len)
_hf_del_node	JKYi/http2/huffman.cc	/^static int _hf_del_node(NODE* h_node){$/;"	f	namespace:JKYi::http2	signature:(NODE* h_node)
_http11_common_h	JKYi/http/http11_common.h	2;"	d
_init	JKYi/http/http_parser.cc	/^static _RequestSizeIniter _init;$/;"	m	namespace:JKYi::http::__anon1	file:
_log_init	JKYi/log.cc	/^static LogIniter _log_init;\/\/å¨å±å¯¹è±¡$/;"	m	namespace:JKYi	file:
abortNotInLoopThread	JKYi/reactor/EventLoop.cc	/^void EventLoop::abortNotInLoopThread(){$/;"	f	class:JKYi::net::EventLoop	signature:()
abortNotInLoopThread	JKYi/reactor/EventLoop.h	/^    void abortNotInLoopThread();$/;"	p	class:JKYi::net::EventLoop	access:private	signature:()
accept	JKYi/hook.cc	/^int accept(int s, struct sockaddr *addr, socklen_t *addrlen) {$/;"	f	signature:(int s, struct sockaddr *addr, socklen_t *addrlen)
accept	JKYi/reactor/Socket.cc	/^int Socket::accept(Address::ptr& addr){$/;"	f	class:JKYi::net::Socket	signature:(Address::ptr& addr)
accept	JKYi/reactor/Socket.h	/^    int accept(Address::ptr& addr);$/;"	p	class:JKYi::net::Socket	access:public	signature:(Address::ptr& addr)
accept	JKYi/reactor/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in6* addr){$/;"	f	class:sockets	signature:(int sockfd, struct sockaddr_in6* addr)
accept	JKYi/reactor/SocketsOps.h	/^int  accept(int sockfd, struct sockaddr_in6* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, struct sockaddr_in6* addr)
accept	JKYi/socket.cc	/^Socket::ptr SSLSocket::accept(){$/;"	f	class:JKYi::SSLSocket	signature:()
accept	JKYi/socket.cc	/^Socket::ptr Socket::accept(){$/;"	f	class:JKYi::Socket	signature:()
accept	JKYi/socket.h	/^    virtual Socket::ptr accept();$/;"	p	class:JKYi::Socket	access:public	signature:()
acceptChannel_	JKYi/reactor/acceptor.h	/^    Channel acceptChannel_;$/;"	m	class:JKYi::net::Acceptor	access:private
acceptSocket_	JKYi/reactor/acceptor.h	/^    Socket  acceptSocket_;$/;"	m	class:JKYi::net::Acceptor	access:private
accept_fun	JKYi/hook.h	/^typedef int (*accept_fun)(int s, struct sockaddr *addr, socklen_t *addrlen);$/;"	t
accept_worker	JKYi/tcp_server.h	/^    std::string accept_worker;$/;"	m	struct:JKYi::TcpServerConf	access:public
acceptor_	JKYi/reactor/TcpServer.h	/^    std::unique_ptr<Acceptor> acceptor_;   \/\/çå¬å¨$/;"	m	class:JKYi::net::TcpServer	access:private
activeChannels_	JKYi/reactor/EventLoop.h	/^    ChannelList activeChannels_;          $/;"	m	class:JKYi::net::EventLoop	access:private
activeTimers_	JKYi/reactor/timerQueue.h	/^    ActiveTimerSet activeTimers_;   \/\/å½åææçå®æ¶å¨åè¡¨$/;"	m	class:JKYi::net::TimerQueue	access:private
add	JKYi/atomic.h	/^    void add(T x){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:(T x)
add	JKYi/db/fox_thread.cc	/^void FoxThreadManager::add(const std::string& name,IFoxThread::ptr thr){$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name,IFoxThread::ptr thr)
add	JKYi/db/fox_thread.h	/^    void add(const std::string& name,IFoxThread::ptr ptr);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name,IFoxThread::ptr ptr)
add	JKYi/env.cc	/^void Env::add(const std::string& key,const std::string& val){$/;"	f	class:JKYi::Env	signature:(const std::string& key,const std::string& val)
add	JKYi/env.h	/^     void add(const std::string& key,const std::string& val);$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key,const std::string& val)
add	JKYi/module.cc	/^void ModuleManager::add(Module::ptr m){$/;"	f	class:JKYi::ModuleManager	signature:(Module::ptr m)
add	JKYi/module.h	/^    void add(Module::ptr m);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(Module::ptr m)
add	JKYi/worker.cc	/^void WorkerManager::add(Scheduler::ptr s){$/;"	f	class:JKYi::WorkerManager	signature:(Scheduler::ptr s)
add	JKYi/worker.h	/^    void add(Scheduler::ptr s);$/;"	p	class:JKYi::WorkerManager	access:public	signature:(Scheduler::ptr s)
addAndGet	JKYi/atomic.h	/^    T addAndGet(T x){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:(T x)
addAppender	JKYi/log.cc	/^void Logger::addAppender(LogAppender::ptr appender){$/;"	f	class:JKYi::Logger	signature:(LogAppender::ptr appender)
addAppender	JKYi/log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:JKYi::Logger	access:public	signature:(LogAppender::ptr appender)
addCapacity	JKYi/bytearray.cc	/^void ByteArray::addCapacity(size_t size){$/;"	f	class:JKYi::ByteArray	signature:(size_t size)
addCapacity	JKYi/bytearray.h	/^    void addCapacity(size_t size);$/;"	p	class:JKYi::ByteArray	access:private	signature:(size_t size)
addConditionTimer	JKYi/timer.cc	/^Timer::ptr TimerManager::addConditionTimer(uint64_t ms,std::function<void()>cb,std::weak_ptr<void>weak_cond,bool recurring){$/;"	f	class:JKYi::TimerManager	signature:(uint64_t ms,std::function<void()>cb,std::weak_ptr<void>weak_cond,bool recurring)
addConditionTimer	JKYi/timer.h	/^   Timer::ptr addConditionTimer(uint64_t ms,std::function<void()>cb,std::weak_ptr<void>weak_cond,bool recurring = false);$/;"	p	class:JKYi::TimerManager	access:public	signature:(uint64_t ms,std::function<void()>cb,std::weak_ptr<void>weak_cond,bool recurring = false)
addEvent	JKYi/iomanager.cc	/^int IOManager::addEvent(int fd,Event event,std::function<void()>cb){$/;"	f	class:JKYi::IOManager	signature:(int fd,Event event,std::function<void()>cb)
addEvent	JKYi/iomanager.h	/^   int addEvent(int fd,Event event,std::function<void ()>cb = nullptr);$/;"	p	class:JKYi::IOManager	access:public	signature:(int fd,Event event,std::function<void ()>cb = nullptr)
addGlobServlet	JKYi/http/servlet.cc	/^void ServletDispatch::addGlobServlet(const std::string& uri,$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri, FunctionServlet::callback cb)
addGlobServlet	JKYi/http/servlet.cc	/^void ServletDispatch::addGlobServlet(const std::string& uri,Servlet::ptr slt){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri,Servlet::ptr slt)
addGlobServlet	JKYi/http/servlet.h	/^    void addGlobServlet(const std::string& uri,FunctionServlet::callback cb);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri,FunctionServlet::callback cb)
addGlobServlet	JKYi/http/servlet.h	/^    void addGlobServlet(const std::string& uri,JKYi::http::Servlet::ptr slt);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri,JKYi::http::Servlet::ptr slt)
addGlobServlet	JKYi/http/ws_servlet.cc	/^void WSServletDispatch::addGlobServlet(const std::string& uri,$/;"	f	class:JKYi::http::WSServletDispatch	signature:(const std::string& uri, FunctionWSServlet::callback cb, FunctionWSServlet::on_connect_cb connect_cb, FunctionWSServlet::on_close_cb close_cb)
addGlobServlet	JKYi/http/ws_servlet.h	/^    void addGlobServlet(const std::string& uri,$/;"	p	class:JKYi::http::WSServletDispatch	access:public	signature:(const std::string& uri, FunctionWSServlet::callback cb, FunctionWSServlet::on_connect_cb connect_cb = nullptr, FunctionWSServlet::on_close_cb close_cb = nullptr)
addHelp	JKYi/env.cc	/^void Env::addHelp(const std::string& key,const std::string& val){$/;"	f	class:JKYi::Env	signature:(const std::string& key,const std::string& val)
addHelp	JKYi/env.h	/^     void addHelp(const std::string& key,const std::string& val);$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key,const std::string& val)
addListener	JKYi/config.h	/^   uint64_t addListener(on_change_cb cb){$/;"	f	class:JKYi::ConfigVar	access:public	signature:(on_change_cb cb)
addServlet	JKYi/http/servlet.cc	/^void ServletDispatch::addServlet(const std::string& uri,FunctionServlet::callback cb){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri,FunctionServlet::callback cb)
addServlet	JKYi/http/servlet.cc	/^void ServletDispatch::addServlet(const std::string& uri,Servlet::ptr slt){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri,Servlet::ptr slt)
addServlet	JKYi/http/servlet.h	/^    void addServlet(const std::string& uri,FunctionServlet::callback cb);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri,FunctionServlet::callback cb)
addServlet	JKYi/http/servlet.h	/^    void addServlet(const std::string& uri,JKYi::http::Servlet::ptr slt);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri,JKYi::http::Servlet::ptr slt)
addServlet	JKYi/http/ws_servlet.cc	/^void WSServletDispatch::addServlet(const std::string& uri,$/;"	f	class:JKYi::http::WSServletDispatch	signature:(const std::string& uri, FunctionWSServlet::callback cb, FunctionWSServlet::on_connect_cb connect_cb, FunctionWSServlet::on_close_cb close_cb)
addServlet	JKYi/http/ws_servlet.h	/^    void addServlet(const std::string& uri,$/;"	p	class:JKYi::http::WSServletDispatch	access:public	signature:(const std::string& uri, FunctionWSServlet::callback cb, FunctionWSServlet::on_connect_cb connect_cb = nullptr, FunctionWSServlet::on_close_cb close_cb = nullptr)
addTime	JKYi/timestamp.h	/^inline Timestamp addTime(Timestamp timestamp,double seconds){$/;"	f	namespace:JKYi::net	signature:(Timestamp timestamp,double seconds)
addTimer	JKYi/reactor/timerQueue.cc	/^TimerId TimerQueue::addTimer(TimerCallback cb,Timestamp when,double interval){$/;"	f	class:TimerQueue	signature:(TimerCallback cb,Timestamp when,double interval)
addTimer	JKYi/reactor/timerQueue.h	/^    TimerId addTimer(TimerCallback cb,Timestamp when,double interval);$/;"	p	class:JKYi::net::TimerQueue	access:public	signature:(TimerCallback cb,Timestamp when,double interval)
addTimer	JKYi/timer.cc	/^Timer::ptr TimerManager::addTimer(uint64_t ms,std::function<void ()> cb,bool recurring){$/;"	f	class:JKYi::TimerManager	signature:(uint64_t ms,std::function<void ()> cb,bool recurring)
addTimer	JKYi/timer.cc	/^void TimerManager::addTimer(Timer::ptr val,RWMutexType::WriteLock& lock){$/;"	f	class:JKYi::TimerManager	signature:(Timer::ptr val,RWMutexType::WriteLock& lock)
addTimer	JKYi/timer.h	/^   Timer::ptr addTimer(uint64_t ms,std::function<void ()>cb,bool recurring = false);$/;"	p	class:JKYi::TimerManager	access:public	signature:(uint64_t ms,std::function<void ()>cb,bool recurring = false)
addTimer	JKYi/timer.h	/^   void addTimer(Timer::ptr val,RWMutexType::WriteLock &lock);$/;"	p	class:JKYi::TimerManager	access:protected	signature:(Timer::ptr val,RWMutexType::WriteLock &lock)
addTimerInLoop	JKYi/reactor/timerQueue.cc	/^void TimerQueue::addTimerInLoop(Timer* timer){$/;"	f	class:TimerQueue	signature:(Timer* timer)
addTimerInLoop	JKYi/reactor/timerQueue.h	/^    void addTimerInLoop(Timer* timer);$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:(Timer* timer)
addedToLoop_	JKYi/reactor/channel.h	/^    bool addedToLoop_;$/;"	m	class:JKYi::net::Channel	access:private
address	JKYi/tcp_server.h	/^    std::vector<std::string> address;$/;"	m	struct:JKYi::TcpServerConf	access:public
afterFork	JKYi/reactor/Thread.cc	/^void afterFork(){$/;"	f	namespace:JKYi::detail	signature:()
alloc	JKYi/db/mysql.cc	/^void MySQLStmtRes::Data::alloc(size_t size){$/;"	f	class:JKYi::MySQLStmtRes::Data	signature:(size_t size)
alloc	JKYi/db/mysql.h	/^        void alloc(size_t size);$/;"	p	struct:JKYi::MySQLStmtRes::Data	access:public	signature:(size_t size)
append	JKYi/reactor/Buffer.h	/^    void append(const StringPiece& str){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const StringPiece& str)
append	JKYi/reactor/Buffer.h	/^    void append(const char * data,size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const char * data,size_t len)
append	JKYi/reactor/Buffer.h	/^    void append(const void * data,size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const void * data,size_t len)
appendCmd	JKYi/db/redis.cc	/^int Redis::appendCmd(const char * fmt,...){$/;"	f	class:JKYi::Redis	signature:(const char * fmt,...)
appendCmd	JKYi/db/redis.cc	/^int Redis::appendCmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::Redis	signature:(const char * fmt,va_list ap)
appendCmd	JKYi/db/redis.cc	/^int Redis::appendCmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::Redis	signature:(const std::vector<std::string>& argv)
appendCmd	JKYi/db/redis.cc	/^int RedisCluster::appendCmd(const char * fmt,...){$/;"	f	class:JKYi::RedisCluster	signature:(const char * fmt,...)
appendCmd	JKYi/db/redis.cc	/^int RedisCluster::appendCmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::RedisCluster	signature:(const char * fmt,va_list ap)
appendCmd	JKYi/db/redis.cc	/^int RedisCluster::appendCmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::RedisCluster	signature:(const std::vector<std::string>& argv)
appendCmd	JKYi/db/redis.h	/^    virtual int appendCmd(const char * fmd,...) = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:(const char * fmd,...)
appendCmd	JKYi/db/redis.h	/^    virtual int appendCmd(const char * fmt,va_list ap) = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:(const char * fmt,va_list ap)
appendCmd	JKYi/db/redis.h	/^    virtual int appendCmd(const std::vector<std::string>& argv) = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:(const std::vector<std::string>& argv)
appendInt16	JKYi/reactor/Buffer.h	/^    void appendInt16(int16_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int16_t x)
appendInt32	JKYi/reactor/Buffer.h	/^    void appendInt32(int32_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int32_t x)
appendInt64	JKYi/reactor/Buffer.h	/^    void appendInt64(int64_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int64_t x)
appendInt8	JKYi/reactor/Buffer.h	/^    void appendInt8(int8_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int8_t x)
appenders	JKYi/log.cc	/^   std::vector<LogAppenderDefine>appenders;$/;"	m	struct:JKYi::LogDefine	file:	access:public
args	JKYi/tcp_server.h	/^    std::map<std::string,std::string> args;$/;"	m	struct:JKYi::TcpServerConf	access:public
as_string	JKYi/reactor/StringPiece.h	/^  std::string as_string() const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
assertInLoopThread	JKYi/reactor/EventLoop.h	/^    void assertInLoopThread(){$/;"	f	class:JKYi::net::EventLoop	access:public	signature:()
assertInLoopThread	JKYi/reactor/poller.h	/^    void assertInLoopThread()const{ ownerLoop_->assertInLoopThread(); }$/;"	f	class:JKYi::net::Poller	access:public	signature:() const
back	JKYi/fiber.cc	/^void Fiber::back(){$/;"	f	class:JKYi::Fiber	signature:()
back	JKYi/fiber.h	/^	void back();$/;"	p	class:JKYi::Fiber	access:public	signature:()
base64decode	JKYi/util/hash_util.cc	/^std::string base64decode(const std::string &src) {$/;"	f	namespace:JKYi	signature:(const std::string &src)
base64decode	JKYi/util/hash_util.h	/^std::string base64decode(const std::string& src);$/;"	p	namespace:JKYi	signature:(const std::string& src)
base64encode	JKYi/util/hash_util.cc	/^std::string base64encode(const std::string& data) {$/;"	f	namespace:JKYi	signature:(const std::string& data)
base64encode	JKYi/util/hash_util.cc	/^std::string base64encode(const void* data, size_t len) {$/;"	f	namespace:JKYi	signature:(const void* data, size_t len)
base64encode	JKYi/util/hash_util.h	/^std::string base64encode(const std::string& data);$/;"	p	namespace:JKYi	signature:(const std::string& data)
base64encode	JKYi/util/hash_util.h	/^std::string base64encode(const void * data,size_t len);$/;"	p	namespace:JKYi	signature:(const void * data,size_t len)
baseLoop_	JKYi/reactor/EventLoopThreadPool.h	/^    EventLoop* baseLoop_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
batchDispatch	JKYi/db/fox_thread.cc	/^bool FoxThread::batchDispatch(const std::vector<callback>&cbs){$/;"	f	class:JKYi::FoxThread	signature:(const std::vector<callback>&cbs)
batchDispatch	JKYi/db/fox_thread.cc	/^bool FoxThreadPool::batchDispatch(const std::vector<callback>& cbs){$/;"	f	class:JKYi::FoxThreadPool	signature:(const std::vector<callback>& cbs)
batchDispatch	JKYi/db/fox_thread.cc	/^void FoxThreadManager::batchDispatch(const std::string& name,$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name, const std::vector<callback>& cbs)
batchDispatch	JKYi/db/fox_thread.h	/^    virtual bool batchDispatch(const std::vector<callback>& cbs) = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:(const std::vector<callback>& cbs)
batchDispatch	JKYi/db/fox_thread.h	/^    void batchDispatch(const std::string& name,const std::vector<callback>& cbs);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name,const std::vector<callback>& cbs)
begin	JKYi/db/db.h	/^    virtual bool begin() = 0;$/;"	p	class:JKYi::ITransaction	access:public	signature:()
begin	JKYi/db/mysql.cc	/^bool MySQLTransaction::begin(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
begin	JKYi/reactor/Buffer.h	/^    char* begin(){$/;"	f	class:JKYi::net::Buffer	access:private	signature:()
begin	JKYi/reactor/Buffer.h	/^    const char* begin()const{$/;"	f	class:JKYi::net::Buffer	access:private	signature:() const
begin	JKYi/reactor/StringPiece.h	/^  const char* begin() const { return ptr_; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
beginWrite	JKYi/reactor/Buffer.h	/^    char * beginWrite(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
beginWrite	JKYi/reactor/Buffer.h	/^    const char * beginWrite()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const char * value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const char * value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const double& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const double& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const float& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const float& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const int16_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int16_t& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const int32_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int32_t& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const int64_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int64_t& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const int8_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int8_t& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const std::string& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const std::string& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const uint16_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint16_t& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const uint32_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint32_t& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const uint64_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint64_t& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const uint8_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint8_t& value)
bind	JKYi/db/mysql.cc	/^int MySQLStmt::bind(int idx,const void * value,int len){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const void * value,int len)
bind	JKYi/db/mysql.h	/^    int bind(int idx);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const char * value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const char * value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const double& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const double& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const float& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const float& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const int16_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const int16_t& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const int32_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const int32_t& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const int64_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const int64_t& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const int8_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const int8_t& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const std::string& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const std::string& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const uint16_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const uint16_t& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const uint32_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const uint32_t& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const uint64_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const uint64_t& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const uint8_t& value);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const uint8_t& value)
bind	JKYi/db/mysql.h	/^    int bind(int idx,const void * value,int len);$/;"	p	class:JKYi::MySQLStmt	access:public	signature:(int idx,const void * value,int len)
bind	JKYi/socket.cc	/^bool SSLSocket::bind(const Address::ptr addr){$/;"	f	class:JKYi::SSLSocket	signature:(const Address::ptr addr)
bind	JKYi/socket.cc	/^bool Socket::bind(Address::ptr address){$/;"	f	class:JKYi::Socket	signature:(Address::ptr address)
bind	JKYi/socket.h	/^    virtual bool bind(const Address::ptr addr);$/;"	p	class:JKYi::Socket	access:public	signature:(const Address::ptr addr)
bind	JKYi/tcp_server.cc	/^bool TcpServer::bind(Address::ptr addr,bool ssl){$/;"	f	class:JKYi::TcpServer	signature:(Address::ptr addr,bool ssl)
bind	JKYi/tcp_server.cc	/^bool TcpServer::bind(const std::vector<Address::ptr>& addrs,$/;"	f	class:JKYi::TcpServer	signature:(const std::vector<Address::ptr>& addrs, std::vector<Address::ptr>&fails,bool ssl)
bind	JKYi/tcp_server.h	/^    virtual bool bind(Address::ptr addr,bool ssl = false);$/;"	p	class:JKYi::TcpServer	access:public	signature:(Address::ptr addr,bool ssl = false)
bind	JKYi/tcp_server.h	/^    virtual bool bind(const std::vector<Address::ptr>& addrs,std::vector<Address::ptr>& fails,bool ssl = false);$/;"	p	class:JKYi::TcpServer	access:public	signature:(const std::vector<Address::ptr>& addrs,std::vector<Address::ptr>& fails,bool ssl = false)
bindAddress	JKYi/reactor/Socket.cc	/^void Socket::bindAddress(Address::ptr addr){$/;"	f	class:JKYi::net::Socket	signature:(Address::ptr addr)
bindAddress	JKYi/reactor/Socket.h	/^    void bindAddress(const Address::ptr addr);$/;"	p	class:JKYi::net::Socket	access:public	signature:(const Address::ptr addr)
bindBlob	JKYi/db/db.h	/^    virtual int bindBlob(int idx,const std::string& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const std::string& value)
bindBlob	JKYi/db/db.h	/^    virtual int bindBlob(int idx,const void * value,int64_t size) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const void * value,int64_t size)
bindBlob	JKYi/db/mysql.cc	/^int MySQLStmt::bindBlob(int idx,const std::string& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const std::string& value)
bindBlob	JKYi/db/mysql.cc	/^int MySQLStmt::bindBlob(int idx,const void * value,int64_t size){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const void * value,int64_t size)
bindDouble	JKYi/db/db.h	/^    virtual int bindDouble(int idx,const double& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const double& value)
bindDouble	JKYi/db/mysql.cc	/^int MySQLStmt::bindDouble(int idx,const double& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const double& value)
bindFloat	JKYi/db/db.h	/^    virtual int bindFloat(int idx,const float& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const float& value)
bindFloat	JKYi/db/mysql.cc	/^int MySQLStmt::bindFloat(int idx,const float& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const float& value)
bindInt16	JKYi/db/db.h	/^    virtual int bindInt16(int idx,const int16_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const int16_t& value)
bindInt16	JKYi/db/mysql.cc	/^int MySQLStmt::bindInt16(int idx,const int16_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int16_t& value)
bindInt32	JKYi/db/db.h	/^    virtual int bindInt32(int idx,const int32_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const int32_t& value)
bindInt32	JKYi/db/mysql.cc	/^int MySQLStmt::bindInt32(int idx,const int32_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int32_t& value)
bindInt64	JKYi/db/db.h	/^    virtual int bindInt64(int idx,const int64_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const int64_t& value)
bindInt64	JKYi/db/mysql.cc	/^int MySQLStmt::bindInt64(int idx,const int64_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int64_t& value)
bindInt8	JKYi/db/db.h	/^    virtual int bindInt8(int idx,const int8_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const int8_t& value)
bindInt8	JKYi/db/mysql.cc	/^int MySQLStmt::bindInt8(int idx,const int8_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const int8_t& value)
bindNull	JKYi/db/db.h	/^    virtual int bindNull(int idx) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx)
bindNull	JKYi/db/mysql.cc	/^int MySQLStmt::bindNull(int idx){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx)
bindOrDie	JKYi/reactor/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd,const struct sockaddr* addr){$/;"	f	class:sockets	signature:(int sockfd,const struct sockaddr* addr)
bindOrDie	JKYi/reactor/SocketsOps.h	/^void bindOrDie(int sockfd, const struct sockaddr* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, const struct sockaddr* addr)
bindString	JKYi/db/db.h	/^    virtual int bindString(int idx,const char * value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const char * value)
bindString	JKYi/db/db.h	/^    virtual int bindString(int idx,const std::string& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const std::string& value)
bindString	JKYi/db/mysql.cc	/^int MySQLStmt::bindString(int idx,const char * value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const char * value)
bindString	JKYi/db/mysql.cc	/^int MySQLStmt::bindString(int idx,const std::string& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const std::string& value)
bindTime	JKYi/db/db.h	/^    virtual int bindTime(int idx,const time_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const time_t& value)
bindTime	JKYi/db/mysql.cc	/^int MySQLStmt::bindTime(int idx,const time_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const time_t& value)
bindUint16	JKYi/db/db.h	/^    virtual int bindUint16(int idx,const uint16_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const uint16_t& value)
bindUint16	JKYi/db/mysql.cc	/^int MySQLStmt::bindUint16(int idx,const uint16_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint16_t& value)
bindUint32	JKYi/db/db.h	/^    virtual int bindUint32(int idx,const uint32_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const uint32_t& value)
bindUint32	JKYi/db/mysql.cc	/^int MySQLStmt::bindUint32(int idx,const uint32_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint32_t& value)
bindUint64	JKYi/db/db.h	/^    virtual int bindUint64(int idx,const uint64_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const uint64_t& value)
bindUint64	JKYi/db/mysql.cc	/^int MySQLStmt::bindUint64(int idx,const uint64_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint64_t& value)
bindUint8	JKYi/db/db.h	/^    virtual int bindUint8(int idx,const uint8_t& value) = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:(int idx,const uint8_t& value)
bindUint8	JKYi/db/mysql.cc	/^int MySQLStmt::bindUint8(int idx,const uint8_t& value){$/;"	f	class:JKYi::MySQLStmt	signature:(int idx,const uint8_t& value)
body_start	JKYi/http/http11_parser.h	/^      size_t body_start;$/;"	m	struct:http_parser	access:public
body_start	JKYi/http/httpclient_parser.h	/^      size_t body_start;$/;"	m	struct:httpclient_parser	access:public
broadcast	JKYi/db/fox_thread.cc	/^void FoxThread::broadcast(callback cb){$/;"	f	class:JKYi::FoxThread	signature:(callback cb)
broadcast	JKYi/db/fox_thread.cc	/^void FoxThreadManager::broadcast(const std::string& name,callback cb){$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name,callback cb)
broadcast	JKYi/db/fox_thread.cc	/^void FoxThreadPool::broadcast(callback cb){$/;"	f	class:JKYi::FoxThreadPool	signature:(callback cb)
broadcast	JKYi/db/fox_thread.h	/^    virtual void broadcast(callback cb) = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:(callback cb)
broadcast	JKYi/db/fox_thread.h	/^    void broadcast(const std::string& name,callback cb);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name,callback cb)
broadcastAddress	JKYi/address.cc	/^IPAddress::ptr IPv4Address::broadcastAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv4Address	signature:(uint32_t prefix_len)
broadcastAddress	JKYi/address.cc	/^IPAddress::ptr IPv6Address::broadcastAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv6Address	signature:(uint32_t prefix_len)
broadcastAddress	JKYi/address.h	/^	virtual IPAddress::ptr broadcastAddress(uint32_t prefix_len)=0;$/;"	p	class:JKYi::IPAddress	access:public	signature:(uint32_t prefix_len)
buffer_	JKYi/reactor/Buffer.h	/^    std::vector<char> buffer_;$/;"	m	class:JKYi::net::Buffer	access:private
byteswap	JKYi/endian.h	/^typename std::enable_if<sizeof(T) == sizeof(uint16_t),T>::type byteswap(T value){$/;"	f	namespace:JKYi	signature:(T value)
byteswap	JKYi/endian.h	/^typename std::enable_if<sizeof(T) == sizeof(uint32_t),T>::type byteswap(T value){$/;"	f	namespace:JKYi	signature:(T value)
byteswap	JKYi/endian.h	/^typename std::enable_if<sizeof(T) == sizeof(uint64_t),T>::type byteswap(T value){$/;"	f	namespace:JKYi	signature:(T value)
c_str	JKYi/reactor/StringPiece.h	/^  const char* c_str() const { return str_; }$/;"	f	class:JKYi::net::StringArg	access:public	signature:() const
cacheTid	JKYi/reactor/CurrentThread.h	/^void cacheTid();$/;"	p	namespace:JKYi::CurrentThread	signature:()
cacheTid	JKYi/reactor/Thread.cc	/^void cacheTid(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
call	JKYi/fiber.cc	/^void Fiber::call(){$/;"	f	class:JKYi::Fiber	signature:()
call	JKYi/fiber.h	/^	void call();$/;"	p	class:JKYi::Fiber	access:public	signature:()
callback	JKYi/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:JKYi::FoxThread	access:public
callback	JKYi/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:JKYi::FoxThreadManager	access:public
callback	JKYi/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:JKYi::FoxThreadPool	access:public
callback	JKYi/db/fox_thread.h	/^    typedef std::function<void ()> callback;$/;"	t	class:JKYi::IFoxThread	access:public
callback	JKYi/http/servlet.h	/^    typedef std::function<int32_t (JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session)> callback; $/;"	t	class:JKYi::http::FunctionServlet	access:public
callback	JKYi/http/ws_servlet.h	/^    typedef std::function<int32_t (JKYi::http::HttpRequest::ptr header,JKYi::http::WSFrameMessage::ptr msg,JKYi::http::WSSession::ptr session) > callback;$/;"	t	class:JKYi::http::FunctionWSServlet	access:public
callback_	JKYi/reactor/EventLoopThread.h	/^    ThreadInitCallback callback_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
callback_	JKYi/reactor/timer.h	/^    const TimerCallback callback_;$/;"	m	class:JKYi::net::Timer	access:private
callingExpiredTimers_	JKYi/reactor/timerQueue.h	/^    bool callingExpiredTimers_;     \/\/æ¯å¦æ­£å¨å¤çè¶æ¶çå®æ¶å¨$/;"	m	class:JKYi::net::TimerQueue	access:private
callingPendingFunctors_	JKYi/reactor/EventLoop.h	/^    bool callingPendingFunctors_;$/;"	m	class:JKYi::net::EventLoop	access:private
cancel	JKYi/reactor/EventLoop.cc	/^void EventLoop::cancel(TimerId timerId){$/;"	f	class:JKYi::net::EventLoop	signature:(TimerId timerId)
cancel	JKYi/reactor/EventLoop.h	/^    void cancel(TimerId timerId);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(TimerId timerId)
cancel	JKYi/reactor/timerQueue.cc	/^void TimerQueue::cancel(TimerId timerId){$/;"	f	class:TimerQueue	signature:(TimerId timerId)
cancel	JKYi/reactor/timerQueue.h	/^    void cancel(TimerId timerId);$/;"	p	class:JKYi::net::TimerQueue	access:public	signature:(TimerId timerId)
cancel	JKYi/timer.cc	/^bool Timer::cancel(){$/;"	f	class:JKYi::Timer	signature:()
cancel	JKYi/timer.h	/^   bool cancel();$/;"	p	class:JKYi::Timer	access:public	signature:()
cancelAccept	JKYi/socket.cc	/^bool Socket::cancelAccept(){$/;"	f	class:JKYi::Socket	signature:()
cancelAccept	JKYi/socket.h	/^    bool cancelAccept();$/;"	p	class:JKYi::Socket	access:public	signature:()
cancelAll	JKYi/iomanager.cc	/^bool IOManager::cancelAll(int fd){$/;"	f	class:JKYi::IOManager	signature:(int fd)
cancelAll	JKYi/iomanager.h	/^   bool cancelAll(int fd);$/;"	p	class:JKYi::IOManager	access:public	signature:(int fd)
cancelAll	JKYi/socket.cc	/^bool Socket::cancelAll(){$/;"	f	class:JKYi::Socket	signature:()
cancelAll	JKYi/socket.h	/^    bool cancelAll();$/;"	p	class:JKYi::Socket	access:public	signature:()
cancelEvent	JKYi/db/redis.cc	/^void FoxRedis::Ctx::cancelEvent(){$/;"	f	class:JKYi::FoxRedis::Ctx	signature:()
cancelEvent	JKYi/db/redis.cc	/^void FoxRedisCluster::Ctx::cancelEvent(){$/;"	f	class:JKYi::FoxRedisCluster::Ctx	signature:()
cancelEvent	JKYi/db/redis.h	/^        void cancelEvent();$/;"	p	struct:JKYi::FoxRedis::Ctx	access:public	signature:()
cancelEvent	JKYi/db/redis.h	/^        void cancelEvent();$/;"	p	struct:JKYi::FoxRedisCluster::Ctx	access:public	signature:()
cancelEvent	JKYi/iomanager.cc	/^bool IOManager::cancelEvent(int fd,Event event){$/;"	f	class:JKYi::IOManager	signature:(int fd,Event event)
cancelEvent	JKYi/iomanager.h	/^   bool cancelEvent(int fd,Event event);$/;"	p	class:JKYi::IOManager	access:public	signature:(int fd,Event event)
cancelInLoop	JKYi/reactor/timerQueue.cc	/^void TimerQueue::cancelInLoop(TimerId timerId){$/;"	f	class:TimerQueue	signature:(TimerId timerId)
cancelInLoop	JKYi/reactor/timerQueue.h	/^    void cancelInLoop(TimerId timerId);$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:(TimerId timerId)
cancelRead	JKYi/socket.cc	/^bool Socket::cancelRead(){$/;"	f	class:JKYi::Socket	signature:()
cancelRead	JKYi/socket.h	/^    bool cancelRead();$/;"	p	class:JKYi::Socket	access:public	signature:()
cancelWrite	JKYi/socket.cc	/^bool Socket::cancelWrite(){$/;"	f	class:JKYi::Socket	signature:()
cancelWrite	JKYi/socket.h	/^    bool cancelWrite();$/;"	p	class:JKYi::Socket	access:public	signature:()
cancelingTimers_	JKYi/reactor/timerQueue.h	/^    ActiveTimerSet cancelingTimers_; \/\/å¨å¤çè¶æ¶å®æ¶å¨è¿ç¨ä¸­åæ¶çå®æ¶å¨å°±æå­å¨è¿é$/;"	m	class:JKYi::net::TimerQueue	access:private
cancelled	JKYi/hook.cc	/^	int cancelled=0;$/;"	m	struct:timer_info	file:	access:public
capacity	JKYi/BoundedBlockingQueue.h	/^    size_t capacity()const{$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:() const
cb	JKYi/iomanager.h	/^	   std::function<void ()>cb;$/;"	m	struct:JKYi::IOManager::FdContext::EventContext	access:public
cb	JKYi/scheduler.h	/^	 std::function<void ()> cb;$/;"	m	struct:JKYi::Scheduler::FiberAndThread	access:public
cert_file	JKYi/tcp_server.h	/^    std::string cert_file;$/;"	m	struct:JKYi::TcpServerConf	access:public
channel_	JKYi/reactor/Connector.h	/^    std::unique_ptr<Channel> channel_;$/;"	m	class:JKYi::net::Connector	access:private
channel_	JKYi/reactor/TcpConnection.h	/^    std::unique_ptr<Channel> channel_;$/;"	m	class:JKYi::net::TcpConnection	access:private
channels_	JKYi/reactor/poller.h	/^    ChannelMap channels_;$/;"	m	class:JKYi::net::Poller	access:protected
check	JKYi/db/fox_thread.cc	/^void FoxThreadPool::check(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
check	JKYi/db/fox_thread.h	/^    void check();$/;"	p	class:JKYi::FoxThreadPool	access:private	signature:()
check	JKYi/http/httpclient_parser.rl.cc	49;"	d	file:
checkConnection	JKYi/db/mysql.cc	/^void MySQLManager::checkConnection(int sec){$/;"	f	class:JKYi::MySQLManager	signature:(int sec)
checkConnection	JKYi/db/mysql.h	/^    void checkConnection(int sec = 30);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(int sec = 30)
checkGetAs	JKYi/http/http.h	/^bool checkGetAs(const MapType&m,const std::string&key,T& val,const T&def=T()){$/;"	f	namespace:JKYi::http	signature:(const MapType&m,const std::string&key,T& val,const T&def=T())
checkGetCookieAs	JKYi/http/http.h	/^   bool checkGetCookieAs(const std::string& key,T&val,const T& def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,T&val,const T& def=T())
checkGetHeaderAs	JKYi/http/http.h	/^    bool checkGetHeaderAs(const std::string&key,T& val,const T& def=T()){$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(const std::string&key,T& val,const T& def=T())
checkGetHeaderAs	JKYi/http/http.h	/^   bool checkGetHeaderAs(const std::string &key,T&val,const T&def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string &key,T&val,const T&def=T())
checkGetParamAs	JKYi/http/http.h	/^   bool checkGetParamAs(const std::string& key,T& val,const T& def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,T& val,const T& def=T())
children	JKYi/http2/huffman.cc	/^    struct node *children[256];$/;"	m	struct:JKYi::http2::node	typeref:struct:JKYi::http2::node::node	file:	access:public
chunk_size	JKYi/http/httpclient_parser.h	/^      element_cb chunk_size;$/;"	m	struct:httpclient_parser	access:public
chunked	JKYi/http/httpclient_parser.h	/^      int chunked;$/;"	m	struct:httpclient_parser	access:public
chunks_done	JKYi/http/httpclient_parser.h	/^      int chunks_done;$/;"	m	struct:httpclient_parser	access:public
clear	JKYi/bytearray.cc	/^void ByteArray::clear(){$/;"	f	class:JKYi::ByteArray	signature:()
clear	JKYi/bytearray.h	/^    void clear();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
clear	JKYi/reactor/StringPiece.h	/^  void clear() { ptr_ = NULL; length_ = 0; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:()
clearAppender	JKYi/log.cc	/^void Logger::clearAppender(){$/;"	f	class:JKYi::Logger	signature:()
clearAppender	JKYi/log.h	/^    void clearAppender();$/;"	p	class:JKYi::Logger	access:public	signature:()
clearListener	JKYi/config.h	/^   void clearListener(){$/;"	f	class:JKYi::ConfigVar	access:public	signature:()
close	JKYi/hook.cc	/^int close(int fd){$/;"	f	signature:(int fd)
close	JKYi/http/httpclient_parser.h	/^      int close;$/;"	m	struct:httpclient_parser	access:public
close	JKYi/reactor/SocketsOps.cc	/^void sockets::close(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
close	JKYi/reactor/SocketsOps.h	/^void close(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
close	JKYi/socket.cc	/^bool SSLSocket::close(){$/;"	f	class:JKYi::SSLSocket	signature:()
close	JKYi/socket.cc	/^bool Socket::close(){$/;"	f	class:JKYi::Socket	signature:()
close	JKYi/socket.h	/^    virtual bool close();$/;"	p	class:JKYi::Socket	access:public	signature:()
close	JKYi/stream.h	/^    virtual void close() = 0;$/;"	p	class:JKYi::Stream	access:public	signature:()
close	JKYi/stream/socket_stream.cc	/^void SocketStream::close(){$/;"	f	class:JKYi::SocketStream	signature:()
close	JKYi/zk_client.cc	/^int32_t ZKClient::close(){$/;"	f	class:JKYi::ZKClient	signature:()
close	JKYi/zk_client.h	/^    int32_t close();$/;"	p	class:JKYi::ZKClient	access:public	signature:()
closeCallback_	JKYi/reactor/TcpConnection.h	/^    CloseCallback closeCallback_;$/;"	m	class:JKYi::net::TcpConnection	access:private
closeCallback_	JKYi/reactor/channel.h	/^    EventCallback closeCallback_;$/;"	m	class:JKYi::net::Channel	access:private
close_fun	JKYi/hook.h	/^typedef int (*close_fun)(int fd);$/;"	t
cmd	JKYi/db/mysql.cc	/^const char * MySQL::cmd(){$/;"	f	class:JKYi::MySQL	signature:()
cmd	JKYi/db/mysql.h	/^    const char * cmd();$/;"	p	class:JKYi::MySQL	access:public	signature:()
cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const char * fmt,...){$/;"	f	class:JKYi::FoxRedis	signature:(const char * fmt,...)
cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::FoxRedis	signature:(const char * fmt,va_list ap)
cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::FoxRedis	signature:(const std::vector<std::string>& argv)
cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const char * fmt,...){$/;"	f	class:JKYi::FoxRedisCluster	signature:(const char * fmt,...)
cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::FoxRedisCluster	signature:(const char * fmt,va_list ap)
cmd	JKYi/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::FoxRedisCluster	signature:(const std::vector<std::string>& argv)
cmd	JKYi/db/redis.cc	/^ReplyPtr Redis::cmd(const char * fmt,...){$/;"	f	class:JKYi::Redis	signature:(const char * fmt,...)
cmd	JKYi/db/redis.cc	/^ReplyPtr Redis::cmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::Redis	signature:(const char * fmt,va_list ap)
cmd	JKYi/db/redis.cc	/^ReplyPtr Redis::cmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::Redis	signature:(const std::vector<std::string>& argv)
cmd	JKYi/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const char * fmt,...){$/;"	f	class:JKYi::RedisCluster	signature:(const char * fmt,...)
cmd	JKYi/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const char * fmt,va_list ap){$/;"	f	class:JKYi::RedisCluster	signature:(const char * fmt,va_list ap)
cmd	JKYi/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const std::vector<std::string>& argv){$/;"	f	class:JKYi::RedisCluster	signature:(const std::vector<std::string>& argv)
cmd	JKYi/db/redis.h	/^        std::string cmd;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
cmd	JKYi/db/redis.h	/^        std::string cmd;$/;"	m	struct:JKYi::FoxRedis::FCtx	access:public
cmd	JKYi/db/redis.h	/^        std::string cmd;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
cmd	JKYi/db/redis.h	/^        std::string cmd;$/;"	m	struct:JKYi::FoxRedisCluster::FCtx	access:public
cmd	JKYi/db/redis.h	/^    ReplyPtr cmd(const std::vector<std::string>& argv);$/;"	p	class:JKYi::FoxRedisCluster	access:public	signature:(const std::vector<std::string>& argv)
cmd	JKYi/db/redis.h	/^    virtual ReplyPtr cmd(const char * fmt,...) = 0;$/;"	p	class:JKYi::IRedis	access:public	signature:(const char * fmt,...)
cmd	JKYi/db/redis.h	/^    virtual ReplyPtr cmd(const char * fmt,va_list ap) = 0;$/;"	p	class:JKYi::IRedis	access:public	signature:(const char * fmt,va_list ap)
cmd	JKYi/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv) = 0;$/;"	p	class:JKYi::IRedis	access:public	signature:(const std::vector<std::string>& argv)
code	JKYi/http2/huffman.cc	/^    unsigned int code;$/;"	m	struct:JKYi::http2::node	file:	access:public
code_len	JKYi/http2/huffman.cc	/^    int code_len;$/;"	m	struct:JKYi::http2::node	file:	access:public
command_error_exit	generate.sh	/^command_error_exit(){$/;"	f
commit	JKYi/db/db.h	/^    virtual bool commit() = 0;$/;"	p	class:JKYi::ITransaction	access:public	signature:()
commit	JKYi/db/mysql.cc	/^bool MySQLTransaction::commit(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
compare	JKYi/reactor/StringPiece.h	/^  int compare(const StringPiece& x) const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const StringPiece& x) const
condition_	JKYi/BlockingQueue.h	/^    Condition condition_;$/;"	m	class:JKYi::BlockingQueue	access:private
condition_	JKYi/CountDownLatch.h	/^    Condition condition_;$/;"	m	class:JKYi::CountDownLatch	access:private
condition_	JKYi/reactor/EventLoopThread.h	/^    Condition condition_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
connecetion	JKYi/reactor/TcpClient.h	/^    TcpConnection::ptr connecetion()const{$/;"	f	class:JKYi::net::TcpClient	access:public	signature:() const
connect	JKYi/db/mysql.cc	/^bool MySQL::connect(){$/;"	f	class:JKYi::MySQL	signature:()
connect	JKYi/db/mysql.h	/^    bool connect();$/;"	p	class:JKYi::MySQL	access:public	signature:()
connect	JKYi/db/redis.cc	/^bool Redis::connect(){$/;"	f	class:JKYi::Redis	signature:()
connect	JKYi/db/redis.cc	/^bool Redis::connect(const std::string& ip,int port ,uint64_t ms){$/;"	f	class:JKYi::Redis	signature:(const std::string& ip,int port ,uint64_t ms)
connect	JKYi/db/redis.cc	/^bool RedisCluster::connect(){$/;"	f	class:JKYi::RedisCluster	signature:()
connect	JKYi/db/redis.cc	/^bool RedisCluster::connect(const std::string& ip,int port,uint64_t ms){$/;"	f	class:JKYi::RedisCluster	signature:(const std::string& ip,int port,uint64_t ms)
connect	JKYi/db/redis.h	/^    virtual bool connect() = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:()
connect	JKYi/db/redis.h	/^    virtual bool connect(const std::string& ip,int port ,uint64_t ms = 0) = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:(const std::string& ip,int port ,uint64_t ms = 0)
connect	JKYi/hook.cc	/^int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen) {$/;"	f	signature:(int sockfd, const struct sockaddr *addr, socklen_t addrlen)
connect	JKYi/reactor/Connector.cc	/^void Connector::connect(){$/;"	f	class:JKYi::net::Connector	signature:()
connect	JKYi/reactor/Connector.h	/^    void connect();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
connect	JKYi/reactor/SocketsOps.cc	/^int sockets::connect(int sockfd, const struct sockaddr* addr){$/;"	f	class:sockets	signature:(int sockfd, const struct sockaddr* addr)
connect	JKYi/reactor/SocketsOps.h	/^int  connect(int sockfd, const struct sockaddr* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, const struct sockaddr* addr)
connect	JKYi/reactor/TcpClient.cc	/^void TcpClient::connect(){$/;"	f	class:JKYi::net::TcpClient	signature:()
connect	JKYi/reactor/TcpClient.h	/^    void connect();$/;"	p	class:JKYi::net::TcpClient	access:public	signature:()
connect	JKYi/socket.cc	/^bool SSLSocket::connect(const Address::ptr addr,int64_t timeout_ms){$/;"	f	class:JKYi::SSLSocket	signature:(const Address::ptr addr,int64_t timeout_ms)
connect	JKYi/socket.cc	/^bool Socket::connect(const Address::ptr addr,int64_t timeout_ms){$/;"	f	class:JKYi::Socket	signature:(const Address::ptr addr,int64_t timeout_ms)
connect	JKYi/socket.h	/^    virtual bool connect(const Address::ptr addr,int64_t timeout_ms = -1);$/;"	p	class:JKYi::Socket	access:public	signature:(const Address::ptr addr,int64_t timeout_ms = -1)
connectDestroyed	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::connectDestroyed(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
connectDestroyed	JKYi/reactor/TcpConnection.h	/^    void connectDestroyed();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
connectEstablished	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::connectEstablished(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
connectEstablished	JKYi/reactor/TcpConnection.h	/^    void connectEstablished();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
connect_	JKYi/reactor/Connector.h	/^    bool connect_;$/;"	m	class:JKYi::net::Connector	access:private
connect_	JKYi/reactor/TcpClient.h	/^    bool connect_;$/;"	m	class:JKYi::net::TcpClient	access:private
connect_fun	JKYi/hook.h	/^typedef int (*connect_fun)(int sockfd, const struct sockaddr *addr, socklen_t addrlen);$/;"	t
connect_with_timeout	JKYi/hook.cc	/^int connect_with_timeout(int socketfd,const struct sockaddr*addr,socklen_t addrlen,uint64_t timeout_ms){$/;"	f	signature:(int socketfd,const struct sockaddr*addr,socklen_t addrlen,uint64_t timeout_ms)
connect_with_timeout	JKYi/hook.h	/^extern int connect_with_timeout(int fd, const struct sockaddr* addr, socklen_t addrlen, uint64_t timeout_ms);$/;"	p	signature:(int fd, const struct sockaddr* addr, socklen_t addrlen, uint64_t timeout_ms)
connected	JKYi/reactor/TcpConnection.h	/^    bool connected()const { return state_ == kConnected; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
connecting	JKYi/reactor/Connector.cc	/^void Connector::connecting(int sockfd){$/;"	f	class:JKYi::net::Connector	signature:(int sockfd)
connecting	JKYi/reactor/Connector.h	/^    void connecting(int sockfd);$/;"	p	class:JKYi::net::Connector	access:private	signature:(int sockfd)
connectionBuckets_	JKYi/reactor/examples/idleconnection/echo.h	/^    WeakConnectionList connectionBuckets_;   \/\/æ¶é´è½®$/;"	m	class:EchoServer	access:private
connectionCallback_	JKYi/reactor/TcpClient.h	/^    ConnectionCallback connectionCallback_;$/;"	m	class:JKYi::net::TcpClient	access:private
connectionCallback_	JKYi/reactor/TcpConnection.h	/^    ConnectionCallback connectionCallback_;$/;"	m	class:JKYi::net::TcpConnection	access:private
connectionCallback_	JKYi/reactor/TcpServer.h	/^    ConnectionCallback connectionCallback_;$/;"	m	class:JKYi::net::TcpServer	access:private
connection_	JKYi/reactor/TcpClient.h	/^    TcpConnection::ptr connection_;$/;"	m	class:JKYi::net::TcpClient	access:private
connections_	JKYi/reactor/TcpServer.h	/^    ConnectionMap connections_;    $/;"	m	class:JKYi::net::TcpServer	access:private
connector_	JKYi/reactor/TcpClient.h	/^    ConnectorPtr connector_;  \/\/è¿æ¥å¨$/;"	m	class:JKYi::net::TcpClient	access:private
const	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
content_len	JKYi/http/http11_parser.h	/^      int content_len;$/;"	m	struct:http_parser	access:public
content_len	JKYi/http/httpclient_parser.h	/^      int content_len;$/;"	m	struct:httpclient_parser	access:public
contextResize	JKYi/iomanager.cc	/^void IOManager::contextResize(size_t size){$/;"	f	class:JKYi::IOManager	signature:(size_t size)
contextResize	JKYi/iomanager.h	/^   void contextResize(size_t size);$/;"	p	class:JKYi::IOManager	access:protected	signature:(size_t size)
context_	JKYi/reactor/EventLoop.h	/^    boost::any context_;                   \/\/ç¨æ¥æºå¸¦ä¸äºç¨æ·èªå·±çä¸è¥¿$/;"	m	class:JKYi::net::EventLoop	access:private
context_	JKYi/reactor/TcpConnection.h	/^    boost::any context_;    \/\/ç¨æ·èªå®ä¹æºå¸¦çä¸ä¸æä¿¡æ¯$/;"	m	class:JKYi::net::TcpConnection	access:private
count	tests/test_thread.cc	/^int count=0;$/;"	v
count	tests/test_timestamp.cc	/^int count = 1;$/;"	v
countDown	JKYi/CountDownLatch.cc	/^void CountDownLatch::countDown(){$/;"	f	class:JKYi::CountDownLatch	signature:()
countDown	JKYi/CountDownLatch.h	/^    void countDown();$/;"	p	class:JKYi::CountDownLatch	access:public	signature:()
count_	JKYi/CountDownLatch.h	/^    int count_;$/;"	m	class:JKYi::CountDownLatch	access:private
create	JKYi/zk_client.cc	/^int32_t ZKClient::create(const std::string& path,const std::string& val,$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,const std::string& val, std::string& new_path,const struct ACL_vector * acl, int flags)
create	JKYi/zk_client.h	/^    int32_t create(const std::string& path,const std::string& val,std::string& new_path,const struct ACL_vector* acl = &ZOO_OPEN_ACL_UNSAFE,int flags = 0);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,const std::string& val,std::string& new_path,const struct ACL_vector* acl = &ZOO_OPEN_ACL_UNSAFE,int flags = 0)
createAddress	JKYi/uri.h	/^    Address::ptr createAddress()const;$/;"	p	class:JKYi::Uri	access:public	signature:() const
createAddress	JKYi/uri.rl.cc	/^Address::ptr Uri::createAddress() const {$/;"	f	class:JKYi::Uri	signature:() const
createEventfd	JKYi/reactor/EventLoop.cc	/^int createEventfd(){$/;"	f	namespace:__anon20	signature:()
createNonBlockingOrDie	JKYi/reactor/SocketsOps.cc	/^int sockets::createNonBlockingOrDie(sa_family_t  family){$/;"	f	class:sockets	signature:(sa_family_t family)
createNonBlockingOrDie	JKYi/reactor/SocketsOps.h	/^int createNonBlockingOrDie(sa_family_t family);$/;"	p	namespace:JKYi::net::sockets	signature:(sa_family_t family)
createResponse	JKYi/http/http.cc	/^std::shared_ptr<HttpResponse> HttpRequest::createResponse(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
createResponse	JKYi/http/http.h	/^   std::shared_ptr<HttpResponse> createResponse();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
createTimerfd	JKYi/reactor/timerQueue.cc	/^int createTimerfd(){$/;"	f	namespace:JKYi::net::detail	signature:()
create_module	JKYi/library.cc	/^typedef Module* (*create_module)();$/;"	t	namespace:JKYi	file:
cs	JKYi/http/http11_parser.h	/^      int cs;$/;"	m	struct:http_parser	access:public
cs	JKYi/http/httpclient_parser.h	/^      int cs;$/;"	m	struct:httpclient_parser	access:public
currentActiveChannel_	JKYi/reactor/EventLoop.h	/^    Channel* currentActiveChannel_;$/;"	m	class:JKYi::net::EventLoop	access:private
data	JKYi/db/mysql.h	/^        char * data;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
data	JKYi/http/http11_parser.h	/^      void *data;$/;"	m	struct:http_parser	access:public
data	JKYi/http/httpclient_parser.h	/^      void *data;$/;"	m	struct:httpclient_parser	access:public
data	JKYi/http2/frame.h	/^        uint8_t data[8];$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::__anon11	access:public
data	JKYi/http2/frame.h	/^    IFrame::ptr data;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame	access:public
data	JKYi/http2/frame.h	/^    std::string data;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
data	JKYi/http2/frame.h	/^    std::string data;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
data	JKYi/http2/frame.h	/^    std::string data;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
data	JKYi/http2/frame.h	/^    std::string data;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
data	JKYi/reactor/StringPiece.h	/^  const char* data() const { return ptr_; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
data_cb	JKYi/db/mysql.h	/^    typedef std::function<bool(MYSQL_ROW row,int field_count,int row_no)> data_cb;$/;"	t	class:JKYi::MySQLRes	access:public
data_length	JKYi/db/mysql.h	/^        int32_t data_length;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
data_type	JKYi/ds/blocking_queue.h	/^    typedef std::shared_ptr<T> data_type;$/;"	t	class:JKYi::ds::BlockingQueue	access:public
debug	JKYi/log.cc	/^void Logger::debug(LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogEvent::ptr event)
debug	JKYi/log.h	/^    void debug(LogEvent::ptr event);\/\/è¾åºdebugçº§å«çæ¥å¿$/;"	p	class:JKYi::Logger	access:public	signature:(LogEvent::ptr event)
decrement	JKYi/atomic.h	/^    void decrement(){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
decrementAndGet	JKYi/atomic.h	/^    T decrementAndGet(){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
defaultConnectionCallback	JKYi/reactor/Callbacks.h	/^void defaultConnectionCallback(const TcpConnectionPtr& conn);$/;"	p	namespace:JKYi::net	signature:(const TcpConnectionPtr& conn)
defaultConnectionCallback	JKYi/reactor/TcpConnection.cc	/^void defaultConnectionCallback(const TcpConnectionPtr& conn){$/;"	f	namespace:JKYi::net	signature:(const TcpConnectionPtr& conn)
defaultMessageCallback	JKYi/reactor/Callbacks.h	/^void defaultMessageCallback(const TcpConnectionPtr& conn,Buffer*,$/;"	p	namespace:JKYi::net	signature:(const TcpConnectionPtr& conn,Buffer*, Timestamp receiveTime)
defaultMessageCallback	JKYi/reactor/TcpConnection.cc	/^void defaultMessageCallback(const TcpConnectionPtr& conn,Buffer* buf,$/;"	f	namespace:JKYi::net	signature:(const TcpConnectionPtr& conn,Buffer* buf, Timestamp receiveTime)
del	JKYi/env.cc	/^void Env::del(const std::string& key){$/;"	f	class:JKYi::Env	signature:(const std::string& key)
del	JKYi/env.h	/^     void del(const std::string& key); $/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key)
del	JKYi/fdmanager.cc	/^void FdManager::del(int fd){$/;"	f	class:JKYi::FdManager	signature:(int fd)
del	JKYi/fdmanager.h	/^	void del(int fd);$/;"	p	class:JKYi::FdManager	access:public	signature:(int fd)
del	JKYi/module.cc	/^void ModuleManager::del(const std::string& name){$/;"	f	class:JKYi::ModuleManager	signature:(const std::string& name)
del	JKYi/module.h	/^    void del(const std::string& name);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(const std::string& name)
del	JKYi/zk_client.cc	/^int32_t ZKClient::del(const std::string& path,int version){$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,int version)
del	JKYi/zk_client.h	/^    int32_t del(const std::string& path,int version = -1);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,int version = -1)
delAll	JKYi/module.cc	/^void ModuleManager::delAll(){$/;"	f	class:JKYi::ModuleManager	signature:()
delAll	JKYi/module.h	/^    void delAll();$/;"	p	class:JKYi::ModuleManager	access:public	signature:()
delAppender	JKYi/log.cc	/^void Logger::delAppender(LogAppender::ptr appender){$/;"	f	class:JKYi::Logger	signature:(LogAppender::ptr appender)
delAppender	JKYi/log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:JKYi::Logger	access:public	signature:(LogAppender::ptr appender)
delCookie	JKYi/http/http.cc	/^void HttpRequest::delCookie(const std::string& key){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key)
delCookie	JKYi/http/http.h	/^   void delCookie(const std::string& key);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key)
delEvent	JKYi/iomanager.cc	/^bool IOManager::delEvent(int fd,Event event){$/;"	f	class:JKYi::IOManager	signature:(int fd,Event event)
delEvent	JKYi/iomanager.h	/^   bool delEvent(int fd,Event event);$/;"	p	class:JKYi::IOManager	access:public	signature:(int fd,Event event)
delGlobServlet	JKYi/http/servlet.cc	/^void ServletDispatch::delGlobServlet(const std::string& uri){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri)
delGlobServlet	JKYi/http/servlet.h	/^    void delGlobServlet(const std::string& uri);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri)
delHeader	JKYi/http/http.cc	/^void HttpRequest::delHeader(const std::string& key){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key)
delHeader	JKYi/http/http.cc	/^void HttpResponse::delHeader(const std::string& key){$/;"	f	class:JKYi::http::HttpResponse	signature:(const std::string& key)
delHeader	JKYi/http/http.h	/^    void delHeader(const std::string&key);$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(const std::string&key)
delHeader	JKYi/http/http.h	/^   void delHeader(const std::string&key);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string&key)
delListener	JKYi/config.h	/^   void delListener(uint64_t key){$/;"	f	class:JKYi::ConfigVar	access:public	signature:(uint64_t key)
delParam	JKYi/http/http.cc	/^void HttpRequest::delParam(const std::string& key){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key)
delParam	JKYi/http/http.h	/^   void delParam(const std::string& key);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key)
delServlet	JKYi/http/servlet.cc	/^void ServletDispatch::delServlet(const std::string& uri){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri)
delServlet	JKYi/http/servlet.h	/^    void delServlet(const std::string& uri);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri)
delayDelete	JKYi/db/redis.cc	/^void FoxRedis::delayDelete(redisAsyncContext* c){$/;"	f	class:JKYi::FoxRedis	signature:(redisAsyncContext* c)
delayDelete	JKYi/db/redis.cc	/^void FoxRedisCluster::delayDelete(redisClusterAsyncContext* c){$/;"	f	class:JKYi::FoxRedisCluster	signature:(redisClusterAsyncContext* c)
delayDelete	JKYi/db/redis.h	/^    void delayDelete(redisAsyncContext* c);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(redisAsyncContext* c)
delayDelete	JKYi/db/redis.h	/^    void delayDelete(redisClusterAsyncContext* c);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(redisClusterAsyncContext* c)
deleteClockRollover	JKYi/timer.cc	/^bool TimerManager::deleteClockRollover(uint64_t now_ms){$/;"	f	class:JKYi::TimerManager	signature:(uint64_t now_ms)
deleteClockRollover	JKYi/timer.h	/^   bool deleteClockRollover(uint64_t now_ms);$/;"	p	class:JKYi::TimerManager	access:private	signature:(uint64_t now_ms)
destroy_module	JKYi/library.cc	/^typedef void (*destroy_module)(Module*);$/;"	t	namespace:JKYi	file:
detail	JKYi/reactor/TcpClient.cc	/^namespace detail{$/;"	n	namespace:JKYi::net	file:
detail	JKYi/reactor/Thread.cc	/^namespace detail{$/;"	n	namespace:JKYi	file:
detail	JKYi/reactor/timerQueue.cc	/^namespace detail{$/;"	n	namespace:JKYi::net	file:
disableAll	JKYi/reactor/channel.h	/^    void disableAll() { events_ = kNoneEvent; update();}$/;"	f	class:JKYi::net::Channel	access:public	signature:()
disableReading	JKYi/reactor/channel.h	/^    void disableReading() { events_ &= ~kReadEvent; update(); }$/;"	f	class:JKYi::net::Channel	access:public	signature:()
disableWriting	JKYi/reactor/channel.h	/^    void disableWriting() { events_ &= ~kWriteEvent; update(); }$/;"	f	class:JKYi::net::Channel	access:public	signature:()
disconnect	JKYi/reactor/TcpClient.cc	/^void TcpClient::disconnect(){$/;"	f	class:JKYi::net::TcpClient	signature:()
disconnect	JKYi/reactor/TcpClient.h	/^    void disconnect();$/;"	p	class:JKYi::net::TcpClient	access:public	signature:()
disconnected	JKYi/reactor/TcpConnection.h	/^    bool disconnected()const { return state_ == kDisconnected; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
dispatch	JKYi/db/fox_thread.cc	/^bool FoxThread::dispatch(callback cb){$/;"	f	class:JKYi::FoxThread	signature:(callback cb)
dispatch	JKYi/db/fox_thread.cc	/^bool FoxThread::dispatch(uint32_t id,callback cb){$/;"	f	class:JKYi::FoxThread	signature:(uint32_t id,callback cb)
dispatch	JKYi/db/fox_thread.cc	/^bool FoxThreadPool::dispatch(callback cb){$/;"	f	class:JKYi::FoxThreadPool	signature:(callback cb)
dispatch	JKYi/db/fox_thread.cc	/^bool FoxThreadPool::dispatch(uint32_t id,callback cb){$/;"	f	class:JKYi::FoxThreadPool	signature:(uint32_t id,callback cb)
dispatch	JKYi/db/fox_thread.cc	/^void FoxThreadManager::dispatch(const std::string& name,callback cb){$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name,callback cb)
dispatch	JKYi/db/fox_thread.cc	/^void FoxThreadManager::dispatch(const std::string& name,uint32_t id,callback cb){$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name,uint32_t id,callback cb)
dispatch	JKYi/db/fox_thread.h	/^    virtual bool dispatch(callback cb) = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:(callback cb)
dispatch	JKYi/db/fox_thread.h	/^    virtual bool dispatch(uint32_t id,callback cb) = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:(uint32_t id,callback cb)
dispatch	JKYi/db/fox_thread.h	/^    void dispatch(const std::string& name,callback cb);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name,callback cb)
dispatch	JKYi/db/fox_thread.h	/^    void dispatch(const std::string& name,uint32_t id,callback cb);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name,uint32_t id,callback cb)
doGet	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doGet(Uri::ptr uri,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(Uri::ptr uri,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
doGet	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doGet(const std::string& url,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(const std::string& url,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
doGet	JKYi/http/http_connection.h	/^    HttpResult::ptr doGet(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
doGet	JKYi/http/http_connection.h	/^    HttpResult::ptr doGet(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
doPendingFunctors	JKYi/reactor/EventLoop.cc	/^void EventLoop::doPendingFunctors(){$/;"	f	class:JKYi::net::EventLoop	signature:()
doPendingFunctors	JKYi/reactor/EventLoop.h	/^    void doPendingFunctors();$/;"	p	class:JKYi::net::EventLoop	access:private	signature:()
doPost	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doPost(Uri::ptr uri,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(Uri::ptr uri,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
doPost	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doPost(const std::string& url,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(const std::string& url,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
doPost	JKYi/http/http_connection.h	/^    HttpResult::ptr doPost(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
doPost	JKYi/http/http_connection.h	/^    HttpResult::ptr doPost(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
doRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
doRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpMethod method,const std::string& url,uint64_t timeout_ms,$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(HttpMethod method,const std::string& url,uint64_t timeout_ms, const std::map<std::string,std::string>& headers, const std::string& body)
doRequest	JKYi/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpRequest::ptr req,uint64_t timeout_ms){$/;"	f	class:JKYi::http::HttpConnectionPool	signature:(HttpRequest::ptr req,uint64_t timeout_ms)
doRequest	JKYi/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
doRequest	JKYi/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpMethod method,const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = "");$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(HttpMethod method,const std::string& url,uint64_t timeout_ms,const std::map<std::string,std::string>& headers = {},const std::string& body = Ó)
doRequest	JKYi/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpRequest::ptr req,uint64_t timeout_ms);$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:(HttpRequest::ptr req,uint64_t timeout_ms)
do_io	JKYi/hook.cc	/^static ssize_t do_io(int fd,OriginFun&fun,const char * hook_fun_name,uint32_t event,int timeout_so,Args&&...args){$/;"	f	file:	signature:(int fd,OriginFun&fun,const char * hook_fun_name,uint32_t event,int timeout_so,Args&&...args)
down_cast	JKYi/Types.h	/^inline To down_cast(From* f){$/;"	f	namespace:JKYi	signature:(From* f)
drain	JKYi/BlockingQueue.h	/^    std::deque<T> drain(){$/;"	f	class:JKYi::BlockingQueue	access:public	signature:()
ds	JKYi/ds/blocking_queue.h	/^namespace ds{$/;"	n	namespace:JKYi
dump	JKYi/db/fox_thread.cc	/^void FoxThread::dump(std::ostream& os){$/;"	f	class:JKYi::FoxThread	signature:(std::ostream& os)
dump	JKYi/db/fox_thread.cc	/^void FoxThreadPool::dump(std::ostream& os){$/;"	f	class:JKYi::FoxThreadPool	signature:(std::ostream& os)
dump	JKYi/db/fox_thread.h	/^    virtual void dump(std::ostream& os) = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:(std::ostream& os)
dump	JKYi/db/fox_thread.h	/^    void dump(std::ostream& os);$/;"	p	class:JKYi::FoxThread	access:public	signature:(std::ostream& os)
dump	JKYi/db/redis.cc	/^std::ostream& RedisManager::dump(std::ostream& os){$/;"	f	class:JKYi::RedisManager	signature:(std::ostream& os)
dump	JKYi/db/redis.h	/^    std::ostream& dump(std::ostream& os);$/;"	p	class:JKYi::RedisManager	access:public	signature:(std::ostream& os)
dump	JKYi/http/http.cc	/^std::ostream& HttpRequest::dump(std::ostream & os)const{$/;"	f	class:JKYi::http::HttpRequest	signature:(std::ostream & os) const
dump	JKYi/http/http.cc	/^std::ostream& HttpResponse::dump(std::ostream& os)const{$/;"	f	class:JKYi::http::HttpResponse	signature:(std::ostream& os) const
dump	JKYi/http/http.h	/^    std::ostream& dump(std::ostream& os)const;$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(std::ostream& os) const
dump	JKYi/http/http.h	/^   std::ostream& dump(std::ostream& os)const;$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(std::ostream& os) const
dump	JKYi/scheduler.cc	/^std::ostream& Scheduler::dump(std::ostream& os){$/;"	f	class:JKYi::Scheduler	signature:(std::ostream& os)
dump	JKYi/scheduler.h	/^   std::ostream& dump(std::ostream& os);$/;"	p	class:JKYi::Scheduler	access:public	signature:(std::ostream& os)
dump	JKYi/socket.cc	/^std::ostream& SSLSocket::dump(std::ostream& os)const{$/;"	f	class:JKYi::SSLSocket	signature:(std::ostream& os) const
dump	JKYi/socket.cc	/^std::ostream& Socket::dump(std::ostream&os)const{$/;"	f	class:JKYi::Socket	signature:(std::ostream&os) const
dump	JKYi/socket.h	/^    virtual std::ostream& dump(std::ostream&os)const;$/;"	p	class:JKYi::Socket	access:public	signature:(std::ostream&os) const
dump	JKYi/uri.h	/^    std::ostream& dump(std::ostream& os)const ;$/;"	p	class:JKYi::Uri	access:public	signature:(std::ostream& os) const
dump	JKYi/uri.rl.cc	/^std::ostream& Uri::dump(std::ostream& os) const {$/;"	f	class:JKYi::Uri	signature:(std::ostream& os) const
dump	JKYi/worker.cc	/^std::ostream& WorkerManager::dump(std::ostream& os){$/;"	f	class:JKYi::WorkerManager	signature:(std::ostream& os)
dump	JKYi/worker.h	/^    std::ostream& dump(std::ostream& os);$/;"	p	class:JKYi::WorkerManager	access:public	signature:(std::ostream& os)
dumpConnectionBuckets	JKYi/reactor/examples/idleconnection/echo.cc	/^void EchoServer::dumpConnectionBuckets()const{$/;"	f	class:EchoServer	signature:() const
dumpConnectionBuckets	JKYi/reactor/examples/idleconnection/echo.h	/^    void dumpConnectionBuckets()const;\/\/è¯¥å½æ°å¶å®å°±æ¯ç¨æ¥å¯¹å½åæ¶é´è½®ä¸­çè¿æ¥è¿è¡è¾åº$/;"	p	class:EchoServer	access:private	signature:() const
dumpFoxThreadStatus	JKYi/db/fox_thread.cc	/^void FoxThreadManager::dumpFoxThreadStatus(std::ostream& os){$/;"	f	class:JKYi::FoxThreadManager	signature:(std::ostream& os)
dumpFoxThreadStatus	JKYi/db/fox_thread.h	/^    void dumpFoxThreadStatus(std::ostream& os);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(std::ostream& os)
e_stream_dep	JKYi/http2/frame.h	/^        uint32_t e_stream_dep = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::__anon7	access:public
element_cb	JKYi/http/http11_common.h	/^typedef void (*element_cb)(void *data, const char *at, size_t length);$/;"	t
empty	JKYi/BoundedBlockingQueue.h	/^    bool empty()const{$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:() const
empty	JKYi/ds/blocking_queue.h	/^    bool empty(){$/;"	f	class:JKYi::ds::BlockingQueue	access:public	signature:()
empty	JKYi/reactor/StringPiece.h	/^  bool empty() const { return length_ == 0; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
enableReading	JKYi/reactor/channel.h	/^    void enableReading() { events_ |= kReadEvent; update();}$/;"	f	class:JKYi::net::Channel	access:public	signature:()
enableRetry	JKYi/reactor/TcpClient.h	/^    void enableRetry(){$/;"	f	class:JKYi::net::TcpClient	access:public	signature:()
enableWriting	JKYi/reactor/channel.h	/^    void enableWriting() { events_ |= kWriteEvent; update(); }$/;"	f	class:JKYi::net::Channel	access:public	signature:()
end	JKYi/reactor/StringPiece.h	/^  const char* end() const { return ptr_ + length_; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
ensureWritableBytes	JKYi/reactor/Buffer.h	/^    void ensureWritableBytes(size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t len)
epollfd_	JKYi/reactor/poller/epollPoller.h	/^    int epollfd_;$/;"	m	class:JKYi::net::EpollPoller	access:private
error	JKYi/db/mysql.h	/^        my_bool error;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
error	JKYi/http/http_connection.h	/^    std::string error;$/;"	m	struct:JKYi::http::HttpResult	access:public
error	JKYi/log.cc	/^void Logger::error(LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogEvent::ptr event)
error	JKYi/log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:JKYi::Logger	access:public	signature:(LogEvent::ptr event)
errorCallback_	JKYi/reactor/channel.h	/^    EventCallback errorCallback_;$/;"	m	class:JKYi::net::Channel	access:private
error_code	JKYi/http2/frame.h	/^    uint32_t error_code = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
error_code	JKYi/http2/frame.h	/^    uint32_t error_code = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
ev	JKYi/db/redis.h	/^        event* ev;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
ev	JKYi/db/redis.h	/^        event* ev;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
eventHanding	JKYi/reactor/EventLoop.h	/^    bool eventHanding()const { return eventHandling_; }$/;"	f	class:JKYi::net::EventLoop	access:public	signature:() const
eventHanding_	JKYi/reactor/channel.h	/^    bool eventHanding_;$/;"	m	class:JKYi::net::Channel	access:private
eventHandling_	JKYi/reactor/EventLoop.h	/^    bool eventHandling_;$/;"	m	class:JKYi::net::EventLoop	access:private
events	JKYi/iomanager.h	/^	 Event events=NONE;$/;"	m	struct:JKYi::IOManager::FdContext	access:public
eventsToString	JKYi/reactor/channel.cc	/^std::string Channel::eventsToString()const{$/;"	f	class:JKYi::net::Channel	signature:() const
eventsToString	JKYi/reactor/channel.cc	/^std::string Channel::eventsToString(int fd,int ev){$/;"	f	class:JKYi::net::Channel	signature:(int fd,int ev)
eventsToString	JKYi/reactor/channel.h	/^    static std::string eventsToString(int fd,int ev);$/;"	p	class:JKYi::net::Channel	access:private	signature:(int fd,int ev)
eventsToString	JKYi/reactor/channel.h	/^    std::string eventsToString()const;$/;"	p	class:JKYi::net::Channel	access:public	signature:() const
events_	JKYi/reactor/channel.h	/^    int events_;                  \/\/æ³¨åçäºä»¶$/;"	m	class:JKYi::net::Channel	access:private
events_	JKYi/reactor/poller/epollPoller.h	/^    EventList events_;$/;"	m	class:JKYi::net::EpollPoller	access:private
exclusive	JKYi/http2/frame.h	/^            uint32_t exclusive : 1;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::__anon7::__anon8	access:public
execute	JKYi/db/db.h	/^    virtual int execute() = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:()
execute	JKYi/db/db.h	/^    virtual int execute(const char * format,...) = 0;$/;"	p	class:JKYi::ISQLUpdate	access:public	signature:(const char * format,...)
execute	JKYi/db/db.h	/^    virtual int execute(const std::string& sql) = 0;$/;"	p	class:JKYi::ISQLUpdate	access:public	signature:(const std::string& sql)
execute	JKYi/db/mysql.cc	/^int MySQL::execute(const char * format,...){$/;"	f	class:JKYi::MySQL	signature:(const char * format,...)
execute	JKYi/db/mysql.cc	/^int MySQL::execute(const char * format,va_list ap){$/;"	f	class:JKYi::MySQL	signature:(const char * format,va_list ap)
execute	JKYi/db/mysql.cc	/^int MySQL::execute(const std::string& sql){$/;"	f	class:JKYi::MySQL	signature:(const std::string& sql)
execute	JKYi/db/mysql.cc	/^int MySQLManager::execute(const std::string& name,const char * format,...){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const char * format,...)
execute	JKYi/db/mysql.cc	/^int MySQLManager::execute(const std::string& name,const char * format,va_list ap){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const char * format,va_list ap)
execute	JKYi/db/mysql.cc	/^int MySQLManager::execute(const std::string& name,const std::string& sql){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const std::string& sql)
execute	JKYi/db/mysql.cc	/^int MySQLStmt::execute(){$/;"	f	class:JKYi::MySQLStmt	signature:()
execute	JKYi/db/mysql.cc	/^int MySQLTransaction::execute(const char * format,...){$/;"	f	class:JKYi::MySQLTransaction	signature:(const char * format,...)
execute	JKYi/db/mysql.cc	/^int MySQLTransaction::execute(const char * format,va_list ap){$/;"	f	class:JKYi::MySQLTransaction	signature:(const char * format,va_list ap)
execute	JKYi/db/mysql.cc	/^int MySQLTransaction::execute(const std::string& sql){$/;"	f	class:JKYi::MySQLTransaction	signature:(const std::string& sql)
execute	JKYi/db/mysql.h	/^    int execute(const char * format,va_list ap);$/;"	p	class:JKYi::MySQL	access:public	signature:(const char * format,va_list ap)
execute	JKYi/db/mysql.h	/^    int execute(const std::string& name,const char * format,...);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const char * format,...)
execute	JKYi/db/mysql.h	/^    int execute(const std::string& name,const char * format,va_list ap);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const char * format,va_list ap)
execute	JKYi/db/mysql.h	/^    int execute(const std::string& name,const std::string& sql);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const std::string& sql)
execute	JKYi/db/mysql.h	/^   int execute(const char * format,va_list ap);$/;"	p	class:JKYi::MySQLTransaction	access:public	signature:(const char * format,va_list ap)
execute	JKYi/http/http_parser.cc	/^size_t HttpRequestParser::execute(char * data,size_t length){$/;"	f	class:JKYi::http::HttpRequestParser	signature:(char * data,size_t length)
execute	JKYi/http/http_parser.cc	/^size_t HttpResponseParser::execute(char* data,size_t len,bool chunk){$/;"	f	class:JKYi::http::HttpResponseParser	signature:(char* data,size_t len,bool chunk)
execute	JKYi/http/http_parser.h	/^    size_t execute(char * data,size_t len);$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:(char * data,size_t len)
execute	JKYi/http/http_parser.h	/^    size_t execute(char * data,size_t len,bool chunk);$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:(char * data,size_t len,bool chunk)
exists	JKYi/zk_client.cc	/^int32_t ZKClient::exists(const std::string& path,bool watch,Stat * stat ){$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,bool watch,Stat * stat )
exists	JKYi/zk_client.h	/^    int32_t exists(const std::string& path,bool watch,Stat * stat = nullptr);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,bool watch,Stat * stat = nullptr)
exiting_	JKYi/reactor/EventLoopThread.h	/^    bool exiting_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
expiration_	JKYi/reactor/timer.h	/^    Timestamp expiration_;          \/\/è¿ææ¶é´$/;"	m	class:JKYi::net::Timer	access:private
fatal	JKYi/log.cc	/^void Logger::fatal(LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogEvent::ptr event)
fatal	JKYi/log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:JKYi::Logger	access:public	signature:(LogEvent::ptr event)
fcntl	JKYi/hook.cc	/^int fcntl(int fd,int cmd,...){$/;"	f	signature:(int fd,int cmd,...)
fcntl_fun	JKYi/hook.h	/^typedef int (*fcntl_fun)(int fd, int cmd, ... \/* arg *\/ );$/;"	t
fctx	JKYi/db/redis.h	/^        FCtx* fctx;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
fctx	JKYi/db/redis.h	/^        FCtx* fctx;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
fd	JKYi/iomanager.h	/^	 int fd=0;$/;"	m	struct:JKYi::IOManager::FdContext	access:public
fd_	JKYi/reactor/channel.h	/^    const int fd_;                \/\/ æä»£è¡¨çæä»¶æè¿°ç¬¦$/;"	m	class:JKYi::net::Channel	access:private
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
fiber	JKYi/db/redis.h	/^        JKYi::Fiber::ptr fiber;$/;"	m	struct:JKYi::FoxRedis::FCtx	access:public
fiber	JKYi/db/redis.h	/^        JKYi::Fiber::ptr fiber;$/;"	m	struct:JKYi::FoxRedisCluster::FCtx	access:public
fiber	JKYi/iomanager.h	/^	   Fiber::ptr fiber;$/;"	m	struct:JKYi::IOManager::FdContext::EventContext	access:public
fiber	JKYi/scheduler.h	/^     Fiber::ptr fiber; $/;"	m	struct:JKYi::Scheduler::FiberAndThread	access:public
field_cb	JKYi/http/http11_common.h	/^typedef void (*field_cb)(void *data, const char *field, size_t flen, const char *value, size_t vlen);$/;"	t
field_len	JKYi/http/http11_parser.h	/^      size_t field_len;$/;"	m	struct:http_parser	access:public
field_len	JKYi/http/httpclient_parser.h	/^      size_t field_len;$/;"	m	struct:httpclient_parser	access:public
field_start	JKYi/http/http11_parser.h	/^      size_t field_start;$/;"	m	struct:http_parser	access:public
field_start	JKYi/http/httpclient_parser.h	/^      size_t field_start;$/;"	m	struct:httpclient_parser	access:public
file	JKYi/log.cc	/^    std::string file;$/;"	m	struct:JKYi::LogAppenderDefine	file:	access:public
fillActiveChannels	JKYi/reactor/poller/epollPoller.cc	/^void EpollPoller::fillActiveChannels(int numEvents,ChannelList* activeChannels)const{$/;"	f	class:JKYi::net::EpollPoller	signature:(int numEvents,ChannelList* activeChannels) const
fillActiveChannels	JKYi/reactor/poller/epollPoller.h	/^    void fillActiveChannels(int numEvents,ChannelList* activeChannels) const;$/;"	p	class:JKYi::net::EpollPoller	access:private	signature:(int numEvents,ChannelList* activeChannels) const
fillActiveChannels	JKYi/reactor/poller/pollPoller.cc	/^void PollPoller::fillActiveChannels(int numEvents,ChannelList* activeChannels){$/;"	f	class:JKYi::net::PollPoller	signature:(int numEvents,ChannelList* activeChannels)
fillActiveChannels	JKYi/reactor/poller/pollPoller.h	/^   void fillActiveChannels(int numEvents,ChannelList* activeChannels);$/;"	p	class:JKYi::net::PollPoller	access:private	signature:(int numEvents,ChannelList* activeChannels)
fin	JKYi/http/ws_session.h	/^   bool fin: 1;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
findCRLF	JKYi/reactor/Buffer.h	/^    const char * findCRLF()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
findCRLF	JKYi/reactor/Buffer.h	/^    const char * findCRLF(const char * start)const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const char * start) const
findEOL	JKYi/reactor/Buffer.h	/^    const char * findEOL()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
findEOL	JKYi/reactor/Buffer.h	/^    const char * findEOL(const char * start)const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const char * start) const
findIndex	JKYi/http2/dynamic_table.cc	/^int32_t DynamicTable::findIndex(const std::string& name){$/;"	f	class:JKYi::http2::DynamicTable	signature:(const std::string& name)
findIndex	JKYi/http2/dynamic_table.h	/^    int32_t findIndex(const std::string& name);$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(const std::string& name)
findPair	JKYi/http2/dynamic_table.cc	/^std::pair<int32_t,bool> DynamicTable::findPair(const std::string& name,$/;"	f	class:JKYi::http2::DynamicTable	signature:(const std::string& name, const std::string& value) const
findPair	JKYi/http2/dynamic_table.h	/^    std::pair<int32_t,bool> findPair(const std::string& name,const std::string& value)const;$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(const std::string& name,const std::string& value) const
flags	JKYi/http2/frame.h	/^    uint8_t flags = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public
forceClose	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::forceClose(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
forceClose	JKYi/reactor/TcpConnection.h	/^    void forceClose();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
forceCloseInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::forceCloseInLoop(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
forceCloseInLoop	JKYi/reactor/TcpConnection.h	/^    void forceCloseInLoop();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
forceCloseWithDelay	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::forceCloseWithDelay(double seconds){$/;"	f	class:JKYi::net::TcpConnection	signature:(double seconds)
forceCloseWithDelay	JKYi/reactor/TcpConnection.h	/^    void forceCloseWithDelay(double seconds);$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(double seconds)
foreach	JKYi/db/mysql.cc	/^bool MySQLRes::foreach(data_cb cb){$/;"	f	class:JKYi::MySQLRes	signature:(data_cb cb)
foreach	JKYi/db/mysql.h	/^    bool foreach(data_cb cb);$/;"	p	class:JKYi::MySQLRes	access:public	signature:(data_cb cb)
foreach	JKYi/module.cc	/^void ModuleManager::foreach(uint32_t type,std::function<void(Module::ptr)>cb){$/;"	f	class:JKYi::ModuleManager	signature:(uint32_t type,std::function<void(Module::ptr)>cb)
foreach	JKYi/module.h	/^    void foreach(uint32_t type,std::function<void (Module::ptr)>cb);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(uint32_t type,std::function<void (Module::ptr)>cb)
format	JKYi/log.cc	/^std::string LogFormatter::format(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event){$/;"	f	class:JKYi::LogFormatter	signature:(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event)
format	JKYi/log.h	/^       virtual void format(std::ostream&os,std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event) = 0;$/;"	p	class:JKYi::LogFormatter::FormatItem	access:public	signature:(std::ostream&os,std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event)
format	JKYi/log.h	/^    std::string format(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event);$/;"	p	class:JKYi::LogFormatter	access:public	signature:(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event)
formatter	JKYi/log.cc	/^    std::string formatter;$/;"	m	struct:JKYi::LogAppenderDefine	file:	access:public
formatter	JKYi/log.cc	/^   std::string formatter;$/;"	m	struct:JKYi::LogDefine	file:	access:public
fragment	JKYi/http/http11_parser.h	/^      element_cb fragment;$/;"	m	struct:http_parser	access:public
freeMySQL	JKYi/db/mysql.cc	/^void MySQLManager::freeMySQL(const std::string& name,MySQL * m){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,MySQL * m)
freeMySQL	JKYi/db/mysql.h	/^    void freeMySQL(const std::string& name,MySQL* m);$/;"	p	class:JKYi::MySQLManager	access:private	signature:(const std::string& name,MySQL* m)
freeRedis	JKYi/db/redis.cc	/^void RedisManager::freeRedis(IRedis* r){$/;"	f	class:JKYi::RedisManager	signature:(IRedis* r)
freeRedis	JKYi/db/redis.h	/^    void freeRedis(IRedis * r);$/;"	p	class:JKYi::RedisManager	access:private	signature:(IRedis * r)
fromIpPort	JKYi/reactor/SocketsOps.cc	/^void sockets::fromIpPort(const char* ip, uint16_t port,$/;"	f	class:sockets	signature:(const char* ip, uint16_t port, struct sockaddr_in* addr)
fromIpPort	JKYi/reactor/SocketsOps.cc	/^void sockets::fromIpPort(const char* ip, uint16_t port,$/;"	f	class:sockets	signature:(const char* ip, uint16_t port, struct sockaddr_in6* addr)
fromIpPort	JKYi/reactor/SocketsOps.h	/^void fromIpPort(const char* ip, uint16_t port,$/;"	p	namespace:JKYi::net::sockets	signature:(const char* ip, uint16_t port, struct sockaddr_in* addr)
fromIpPort	JKYi/reactor/SocketsOps.h	/^void fromIpPort(const char* ip, uint16_t port,$/;"	p	namespace:JKYi::net::sockets	signature:(const char* ip, uint16_t port, struct sockaddr_in6* addr)
fromString	JKYi/config.h	/^   virtual bool fromString(const std::string&val)=0;$/;"	p	class:JKYi::ConfigVarBase	access:public	signature:(const std::string&val)
fromUnixTime	JKYi/timestamp.h	/^    static Timestamp fromUnixTime(time_t t){ return fromUnixTime(t,0); }$/;"	f	class:JKYi::net::Timestamp	access:public	signature:(time_t t)
fromUnixTime	JKYi/timestamp.h	/^    static Timestamp fromUnixTime(time_t t,int microseconds){ return Timestamp(static_cast<int64_t>(t) * kMicroSecondsPerSecond + microseconds); }$/;"	f	class:JKYi::net::Timestamp	access:public	signature:(time_t t,int microseconds)
full	JKYi/BoundedBlockingQueue.h	/^    bool full()const{$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:() const
fun	tests/test_thread.cc	/^void fun(){$/;"	f	signature:()
func1	tests/test_fiber.cc	/^void func1(){$/;"	f	signature:()
func_	JKYi/reactor/Thread.cc	/^    ThreadFunc func_;$/;"	m	struct:JKYi::detail::ThreadData	file:	access:public
func_	JKYi/reactor/Thread.h	/^    ThreadFunc func_;$/;"	m	class:JKYi::net::Thread	access:private
function_	JKYi/WeakCallback.h	/^    std::function<void (CLASS*,ARGS...)> function_;$/;"	m	class:JKYi::WeakCallback	access:private
g_argc	tests/test_zookeeper.cc	/^int g_argc;$/;"	v
g_conn	tests/test_reactor_tcpClient.cc	/^JKYi::net::TcpConnection::ptr g_conn;$/;"	v
g_daemon_restart_interval	JKYi/daemon.cc	/^static ConfigVar<uint32_t>::ptr g_daemon_restart_interval = $/;"	m	namespace:JKYi	file:
g_fiber_stack_size	JKYi/fiber.cc	/^ static ConfigVar<uint32_t>::ptr g_fiber_stack_size=JKYi::Config::Lookup<uint32_t>("fiber.stack_size",1024*1024,"fiber stack size");$/;"	m	namespace:JKYi	file:
g_float_value_config	tests/test_config.cc	/^JKYi::ConfigVar<float>::ptr g_float_value_config=JKYi::Config::Lookup("system.value",(float)10.2f,"system value");$/;"	v
g_http_request_buffer_size	JKYi/http/http_parser.cc	/^static JKYi::ConfigVar<uint64_t>::ptr g_http_request_buffer_size=JKYi::Config::Lookup("http.request.buffer_size",(uint64_t)(4*1024),"http request buffer size");$/;"	m	namespace:JKYi::http	file:
g_http_request_max_body_size	JKYi/http/http_parser.cc	/^static JKYi::ConfigVar<uint64_t>::ptr g_http_request_max_body_size=JKYi::Config::Lookup("http.request.max_body_size",(uint64_t)(64 * 1024 * 1024),"http request max body size");$/;"	m	namespace:JKYi::http	file:
g_http_response_buffer_size	JKYi/http/http_parser.cc	/^static JKYi::ConfigVar<uint64_t>::ptr g_http_response_buffer_size=JKYi::Config::Lookup("http.response.buffer_size",(uint64_t)(4*1024),"http response buffer size");$/;"	m	namespace:JKYi::http	file:
g_http_response_max_body_size	JKYi/http/http_parser.cc	/^static JKYi::ConfigVar<uint64_t>::ptr g_http_response_max_body_size=JKYi::Config::Lookup("http.response.max_body_size",(uint64_t)(64*1024*1024),"http response max body size");$/;"	m	namespace:JKYi::http	file:
g_int_value_config	tests/test_config.cc	/^JKYi::ConfigVar<int>::ptr g_int_value_config=JKYi::Config::Lookup("system.port",(int)8080,"system port");$/;"	v
g_list_int_config	tests/test_config.cc	/^JKYi::ConfigVar<std::list<int>>::ptr g_list_int_config=JKYi::Config::Lookup("system.list_int",std::list<int>{10,20,30},"system list_int");$/;"	v
g_log_defines	JKYi/log.cc	/^JKYi::ConfigVar<std::set<LogDefine>>::ptr g_log_defines = JKYi::Config::Lookup("logs",std::set<LogDefine>(),"logs config");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/address.cc	/^static JKYi::Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/application.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/bytearray.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/config.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/daemon.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/db/fox_thread.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/db/mysql.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/db/redis.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/env.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/fiber.cc	/^ static JKYi::Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/hook.cc	/^JKYi::Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	v
g_logger	JKYi/http/http_connection.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
g_logger	JKYi/http/http_parser.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
g_logger	JKYi/http/http_server.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
g_logger	JKYi/http/servlet.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
g_logger	JKYi/http/ws_server.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
g_logger	JKYi/http/ws_session.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http	file:
g_logger	JKYi/http2/frame.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http2	file:
g_logger	JKYi/http2/hpack.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::http2	file:
g_logger	JKYi/iomanager.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/library.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/module.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/reactor/Connector.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
g_logger	JKYi/reactor/EventLoop.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:__anon20	file:
g_logger	JKYi/reactor/Socket.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
g_logger	JKYi/reactor/SocketsOps.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	v	file:
g_logger	JKYi/reactor/TcpClient.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
g_logger	JKYi/reactor/TcpConnection.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
g_logger	JKYi/reactor/TcpServer.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
g_logger	JKYi/reactor/Thread.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/reactor/acceptor.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
g_logger	JKYi/reactor/channel.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
g_logger	JKYi/reactor/examples/idleconnection/echo.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	v	file:
g_logger	JKYi/reactor/examples/idleconnection/main.cc	/^JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v
g_logger	JKYi/reactor/poller/epollPoller.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
g_logger	JKYi/reactor/poller/pollPoller.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net	file:
g_logger	JKYi/reactor/timerQueue.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi::net::detail	file:
g_logger	JKYi/scheduler.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system"); $/;"	m	namespace:JKYi	file:
g_logger	JKYi/socket.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/tcp_server.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/thread.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/timer.cc	/^static Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/util.cc	/^static JKYi::Logger::ptr g_logger=JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	JKYi/worker.cc	/^static Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	m	namespace:JKYi	file:
g_logger	sample/my_http_server.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_logger	template/template/my_module.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	m	namespace:name_space	file:
g_logger	tests/test_address.cc	/^static JKYi::Logger::ptr g_logger=JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_bytearray.cc	/^static JKYi::Logger::ptr g_logger=JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_daemon.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_env.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_fiber.cc	/^JKYi::Logger::ptr g_logger=JKYI_LOG_ROOT();$/;"	v
g_logger	tests/test_hook.cc	/^static JKYi::Logger::ptr g_logger=JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_http.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_http_connection.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_http_parser.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_http_server.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_iomanager.cc	/^JKYi::Logger::ptr g_logger=JKYI_LOG_ROOT();$/;"	v
g_logger	tests/test_mysql.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_reactor_tcpClient.cc	/^JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v
g_logger	tests/test_reactor_tcpserver.cc	/^JKYi::Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	v
g_logger	tests/test_reactor_thread.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_redis.cc	/^JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v
g_logger	tests/test_scheduler.cc	/^static JKYi::Logger::ptr  g_logger=JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_socket.cc	/^static JKYi::Logger::ptr g_logger=JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_thread.cc	/^JKYi::Logger::ptr g_logger=JKYI_LOG_ROOT();$/;"	v
g_logger	tests/test_timestamp.cc	/^JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v
g_logger	tests/test_util.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_NAME("system");$/;"	v	file:
g_logger	tests/test_ws_client.cc	/^JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v
g_logger	tests/test_ws_server.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_logger	tests/test_zookeeper.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	v	file:
g_map_str_int_config	tests/test_config.cc	/^JKYi::ConfigVar<std::map<std::string,int>>::ptr g_map_str_int_config=JKYi::Config::Lookup("system.map_str_int",std::map<std::string,int>{{"k",6}},"system map_str_int");$/;"	v
g_module_path	JKYi/module.cc	/^static JKYi::ConfigVar<std::string>::ptr g_module_path = $/;"	m	namespace:JKYi	file:
g_mysql_config	tests/test_mysql.cc	/^static JKYi::ConfigVar<std::map<std::string,std::string>>::ptr g_mysql_config = JKYi::Config::Lookup("mysql",std::map<std::string,std::string>(),"mysql config");$/;"	v	file:
g_mysql_dbs	JKYi/db/mysql.cc	/^                        g_mysql_dbs = JKYi::Config::Lookup("mysql.dbs",std::map<std::string,std::map<std::string,std::string>>(),"mysql dbs");$/;"	m	namespace:JKYi	file:
g_redis	JKYi/db/redis.cc	/^         g_redis = JKYi::Config::Lookup("redis.config",$/;"	m	namespace:JKYi	file:
g_server_pid_file	JKYi/application.cc	/^static JKYi::ConfigVar<std::string>::ptr g_server_pid_file = $/;"	m	namespace:JKYi	file:
g_server_work_path	JKYi/application.cc	/^static JKYi::ConfigVar<std::string>::ptr g_server_work_path = $/;"	m	namespace:JKYi	file:
g_servers_conf	JKYi/application.cc	/^static JKYi::ConfigVar<std::vector<TcpServerConf>>::ptr g_servers_conf = $/;"	m	namespace:JKYi	file:
g_set_int_config	tests/test_config.cc	/^JKYi::ConfigVar<std::set<int>>::ptr g_set_int_config=JKYi::Config::Lookup("system.set_int",std::set<int>{5,6,7},"system set_int");$/;"	v
g_tcp_connect_timeout	JKYi/hook.cc	/^static ConfigVar<int>::ptr g_tcp_connect_timeout=Config::Lookup("tcp.connect.timeout",5000,"tcp connect timeout");$/;"	m	namespace:JKYi	file:
g_tcp_server_read_timeout	JKYi/tcp_server.cc	/^static ConfigVar<uint64_t>::ptr g_tcp_server_read_timeout = $/;"	m	namespace:JKYi	file:
g_thread_info_set	JKYi/db/fox_thread.cc	/^                g_thread_info_set = Config::Lookup("fox_thread",$/;"	m	namespace:JKYi	file:
g_timer	tests/test_daemon.cc	/^JKYi::Timer::ptr g_timer;$/;"	v
g_umap_str_int_config	tests/test_config.cc	/^JKYi::ConfigVar<std::unordered_map<std::string,int>>::ptr g_umap_str_int_config=JKYi::Config::Lookup("system.umap_str_int",std::unordered_map<std::string,int>{{"k",9},{"k2",8}},"syetem umap_str_int");$/;"	v
g_uset_int_config	tests/test_config.cc	/^JKYi::ConfigVar<std::unordered_set<int>>::ptr g_uset_int_config=JKYi::Config::Lookup("system.uset_int",std::unordered_set<int>{7,8,9,9},"system uset_int");$/;"	v
g_vec_int_config	tests/test_config.cc	/^JKYi::ConfigVar<std::vector<int>>::ptr g_vec_int_config=JKYi::Config::Lookup("system.vec_int",std::vector<int>{1,2,3},"system vec_int");$/;"	v
g_websocket_message_max_size	JKYi/http/ws_session.cc	/^ConfigVar<uint32_t>::ptr g_websocket_message_max_size = $/;"	m	namespace:JKYi::http	file:
g_workers_config	JKYi/worker.cc	/^                 g_workers_config = Config::Lookup("workers",$/;"	m	namespace:JKYi	file:
get	JKYi/atomic.h	/^    T get(){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
get	JKYi/db/fox_thread.cc	/^IFoxThread::ptr FoxThreadManager::get(const std::string& name){$/;"	f	class:JKYi::FoxThreadManager	signature:(const std::string& name)
get	JKYi/db/fox_thread.h	/^    IFoxThread::ptr get(const std::string& name);$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:(const std::string& name)
get	JKYi/db/mysql.cc	/^MySQL::ptr MySQLManager::get(const std::string& name){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name)
get	JKYi/db/mysql.h	/^    MYSQL_RES* get()const { return m_data.get(); }$/;"	f	class:JKYi::MySQLRes	access:public	signature:() const
get	JKYi/db/mysql.h	/^    MySQL::ptr get(const std::string& name);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name)
get	JKYi/db/redis.cc	/^IRedis::ptr RedisManager::get(const std::string& name){$/;"	f	class:JKYi::RedisManager	signature:(const std::string& name)
get	JKYi/db/redis.h	/^    IRedis::ptr get(const std::string& name);$/;"	p	class:JKYi::RedisManager	access:public	signature:(const std::string& name)
get	JKYi/env.cc	/^std::string Env::get(const std::string& key,const std::string& default_val){$/;"	f	class:JKYi::Env	signature:(const std::string& key,const std::string& default_val)
get	JKYi/env.h	/^     std::string get(const  std::string& key,const std::string& default_val = "");$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key,const std::string& default_val = Ó)
get	JKYi/fdmanager.cc	/^FdCtx::ptr FdManager::get(int fd,bool auto_create){$/;"	f	class:JKYi::FdManager	signature:(int fd,bool auto_create)
get	JKYi/fdmanager.h	/^	FdCtx::ptr get(int fd,bool auto_create=false);$/;"	p	class:JKYi::FdManager	access:public	signature:(int fd,bool auto_create=false)
get	JKYi/module.cc	/^Module::ptr ModuleManager::get(const std::string& name){$/;"	f	class:JKYi::ModuleManager	signature:(const std::string& name)
get	JKYi/module.h	/^    Module::ptr get(const std::string& name);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(const std::string& name)
get	JKYi/worker.cc	/^Scheduler::ptr WorkerManager::get(const std::string& name){$/;"	f	class:JKYi::WorkerManager	signature:(const std::string& name)
get	JKYi/worker.h	/^    Scheduler::ptr get(const std::string& name);$/;"	p	class:JKYi::WorkerManager	access:public	signature:(const std::string& name)
get	JKYi/zk_client.cc	/^int32_t ZKClient::get(const std::string& path,std::string& val,bool watch,$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,std::string& val,bool watch, Stat * stat)
get	JKYi/zk_client.h	/^    int32_t get(const std::string& path,std::string& val,bool watch,Stat * stat = nullptr);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,std::string& val,bool watch,Stat * stat = nullptr)
getAbsolutePath	JKYi/env.cc	/^std::string Env::getAbsolutePath(const std::string& path)const{$/;"	f	class:JKYi::Env	signature:(const std::string& path) const
getAbsolutePath	JKYi/env.h	/^     std::string getAbsolutePath(const std::string& path)const;$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& path) const
getAbsoluteWorkPath	JKYi/env.cc	/^std::string Env::getAbsoluteWorkPath(const std::string& path)const{$/;"	f	class:JKYi::Env	signature:(const std::string& path) const
getAbsoluteWorkPath	JKYi/env.h	/^     std::string getAbsoluteWorkPath(const std::string& path)const;$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& path) const
getAddr	JKYi/address.cc	/^const sockaddr* IPv4Address::getAddr()const {$/;"	f	class:JKYi::IPv4Address	signature:() const
getAddr	JKYi/address.cc	/^const sockaddr* IPv6Address::getAddr()const{$/;"	f	class:JKYi::IPv6Address	signature:() const
getAddr	JKYi/address.cc	/^const sockaddr* UnixAddress::getAddr()const {$/;"	f	class:JKYi::UnixAddress	signature:() const
getAddr	JKYi/address.cc	/^const sockaddr* UnknowAddress::getAddr()const {$/;"	f	class:JKYi::UnknowAddress	signature:() const
getAddr	JKYi/address.cc	/^sockaddr* IPv4Address::getAddr(){$/;"	f	class:JKYi::IPv4Address	signature:()
getAddr	JKYi/address.cc	/^sockaddr* IPv6Address::getAddr(){$/;"	f	class:JKYi::IPv6Address	signature:()
getAddr	JKYi/address.cc	/^sockaddr* UnixAddress::getAddr(){$/;"	f	class:JKYi::UnixAddress	signature:()
getAddr	JKYi/address.cc	/^sockaddr* UnknowAddress::getAddr(){$/;"	f	class:JKYi::UnknowAddress	signature:()
getAddr	JKYi/address.h	/^	virtual const sockaddr* getAddr()const=0;$/;"	p	class:JKYi::Address	access:public	signature:() const
getAddr	JKYi/address.h	/^	virtual sockaddr* getAddr() = 0;$/;"	p	class:JKYi::Address	access:public	signature:()
getAddrLen	JKYi/address.cc	/^socklen_t IPv4Address::getAddrLen()const {$/;"	f	class:JKYi::IPv4Address	signature:() const
getAddrLen	JKYi/address.cc	/^socklen_t IPv6Address::getAddrLen()const{$/;"	f	class:JKYi::IPv6Address	signature:() const
getAddrLen	JKYi/address.cc	/^socklen_t UnixAddress::getAddrLen()const{$/;"	f	class:JKYi::UnixAddress	signature:() const
getAddrLen	JKYi/address.cc	/^socklen_t UnknowAddress::getAddrLen()const {$/;"	f	class:JKYi::UnknowAddress	signature:() const
getAddrLen	JKYi/address.h	/^	virtual socklen_t getAddrLen()const=0;$/;"	p	class:JKYi::Address	access:public	signature:() const
getAffectedRows	JKYi/db/mysql.cc	/^uint64_t MySQL::getAffectedRows(){$/;"	f	class:JKYi::MySQL	signature:()
getAffectedRows	JKYi/db/mysql.h	/^    uint64_t getAffectedRows();$/;"	p	class:JKYi::MySQL	access:public	signature:()
getAllLoops	JKYi/reactor/EventLoopThreadPool.cc	/^std::vector<EventLoop*> EventLoopThreadPool::getAllLoops(){$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:()
getAllLoops	JKYi/reactor/EventLoopThreadPool.h	/^    std::vector<EventLoop*> getAllLoops();$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:()
getAndAdd	JKYi/atomic.h	/^    T getAndAdd(T x){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:(T x)
getAndSet	JKYi/atomic.h	/^    T getAndSet(T newValue){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:(T newValue)
getAs	JKYi/http/http.h	/^T getAs(const MapType&m,const std::string&key,const T& def=T()){$/;"	f	namespace:JKYi::http	signature:(const MapType&m,const std::string&key,const T& def=T())
getAsIOManager	JKYi/worker.cc	/^IOManager::ptr WorkerManager::getAsIOManager(const std::string& name){$/;"	f	class:JKYi::WorkerManager	signature:(const std::string& name)
getAsIOManager	JKYi/worker.h	/^    IOManager::ptr getAsIOManager(const std::string& name); $/;"	p	class:JKYi::WorkerManager	access:public	signature:(const std::string& name)
getBase	JKYi/db/fox_thread.h	/^    struct event_base* getBase(){ return m_base; }$/;"	f	class:JKYi::FoxThread	access:public	signature:()
getBaseSize	JKYi/bytearray.h	/^    size_t getBaseSize()const { return m_baseSize; };$/;"	f	class:JKYi::ByteArray	access:public	signature:() const
getBlob	JKYi/db/db.h	/^    virtual std::string getBlob(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getBlob	JKYi/db/mysql.cc	/^std::string MySQLRes::getBlob(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getBlob	JKYi/db/mysql.cc	/^std::string MySQLStmtRes::getBlob(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getBody	JKYi/http/http.h	/^    const std::string&  getBody()const { return m_body; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
getBody	JKYi/http/http.h	/^   const std::string getBody()const { return m_body; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
getChildren	JKYi/zk_client.cc	/^int32_t ZKClient::getChildren(const std::string& path,std::vector<std::string>&val,$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,std::vector<std::string>&val, bool watch,Stat * stat)
getChildren	JKYi/zk_client.h	/^    int32_t getChildren(const std::string& path,std::vector<std::string>& val,bool watch,Stat * stat = nullptr);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,std::vector<std::string>& val,bool watch,Stat * stat = nullptr)
getCmd	JKYi/protocol.h	/^    uint32_t getCmd()const { return m_cmd; }$/;"	f	class:JKYi::Request	access:public	signature:() const
getCmd	JKYi/protocol.h	/^    uint32_t getCmd()const { return m_cmd; }$/;"	f	class:JKYi::Response	access:public	signature:() const
getColumnBytes	JKYi/db/db.h	/^    virtual int getColumnBytes(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getColumnBytes	JKYi/db/mysql.cc	/^int MySQLRes::getColumnBytes(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getColumnBytes	JKYi/db/mysql.cc	/^int MySQLStmtRes::getColumnBytes(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getColumnCount	JKYi/db/db.h	/^    virtual int getColumnCount() = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:()
getColumnCount	JKYi/db/mysql.cc	/^int MySQLRes::getColumnCount(){$/;"	f	class:JKYi::MySQLRes	signature:()
getColumnCount	JKYi/db/mysql.cc	/^int MySQLStmtRes::getColumnCount(){$/;"	f	class:JKYi::MySQLStmtRes	signature:()
getColumnName	JKYi/db/db.h	/^    virtual std::string getColumnName(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getColumnName	JKYi/db/mysql.cc	/^std::string MySQLRes::getColumnName(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getColumnName	JKYi/db/mysql.cc	/^std::string MySQLStmtRes::getColumnName(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getColumnType	JKYi/db/db.h	/^    virtual int getColumnType(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getColumnType	JKYi/db/mysql.cc	/^int MySQLRes::getColumnType(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getColumnType	JKYi/db/mysql.cc	/^int MySQLStmtRes::getColumnType(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getConfigPath	JKYi/env.cc	/^std::string Env::getConfigPath(){$/;"	f	class:JKYi::Env	signature:()
getConfigPath	JKYi/env.h	/^     std::string getConfigPath();$/;"	p	class:JKYi::Env	access:public	signature:()
getConnection	JKYi/http/http_connection.cc	/^HttpConnection::ptr HttpConnectionPool::getConnection(){$/;"	f	class:JKYi::http::HttpConnectionPool	signature:()
getConnection	JKYi/http/http_connection.h	/^    HttpConnection::ptr getConnection();$/;"	p	class:JKYi::http::HttpConnectionPool	access:public	signature:()
getContent	JKYi/log.h	/^   std::string getContent() const{return m_ss.str();}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
getContentLength	JKYi/http/http_parser.cc	/^uint64_t HttpRequestParser::getContentLength(){$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
getContentLength	JKYi/http/http_parser.cc	/^uint64_t HttpResponseParser::getContentLength(){$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
getContentLength	JKYi/http/http_parser.h	/^    uint64_t getContentLength();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
getContentLength	JKYi/http/http_parser.h	/^    uint64_t getContentLength();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
getContext	JKYi/iomanager.cc	/^IOManager::FdContext::EventContext& IOManager::FdContext::getContext(IOManager::Event event){$/;"	f	class:JKYi::IOManager::FdContext	signature:(IOManager::Event event)
getContext	JKYi/iomanager.h	/^	 EventContext& getContext(Event event);$/;"	p	struct:JKYi::IOManager::FdContext	access:public	signature:(Event event)
getContext	JKYi/reactor/EventLoop.h	/^    const boost::any& getContext()const{$/;"	f	class:JKYi::net::EventLoop	access:public	signature:() const
getContext	JKYi/reactor/TcpConnection.h	/^    const boost::any& getContext()const{$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
getCookie	JKYi/http/http.cc	/^std::string HttpRequest::getCookie(const std::string& key$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key ,const std::string& def)
getCookie	JKYi/http/http.h	/^   std::string getCookie(const std::string& key,const  std::string & def="");$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const std::string & def=Ó)
getCookieAs	JKYi/http/http.h	/^   T getCookieAs(const std::string& key,const T& def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const T& def=T())
getCookies	JKYi/http/http.h	/^   const MapType& getCookies()const{ return m_cookies; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
getCount	JKYi/CountDownLatch.cc	/^int CountDownLatch::getCount()const{$/;"	f	class:JKYi::CountDownLatch	signature:() const
getCount	JKYi/CountDownLatch.h	/^    int getCount()const;$/;"	p	class:JKYi::CountDownLatch	access:public	signature:() const
getCount	JKYi/worker.cc	/^uint32_t WorkerManager::getCount(){$/;"	f	class:JKYi::WorkerManager	signature:()
getCount	JKYi/worker.h	/^    uint32_t getCount();$/;"	p	class:JKYi::WorkerManager	access:public	signature:()
getCreateTime	JKYi/http/http_connection.h	/^    uint64_t getCreateTime()const { return m_createTime; }$/;"	f	class:JKYi::http::HttpConnection	access:public	signature:() const
getCtxCount	JKYi/db/redis.h	/^    int getCtxCount()const { return m_ctxCount; }$/;"	f	class:JKYi::FoxRedis	access:public	signature:() const
getCtxCount	JKYi/db/redis.h	/^    int getCtxCount()const { return m_ctxCount; };$/;"	f	class:JKYi::FoxRedisCluster	access:public	signature:() const
getCwd	JKYi/env.h	/^     const std::string& getCwd()const { return m_cwd; }$/;"	f	class:JKYi::Env	access:public	signature:() const
getData	JKYi/db/fox_thread.cc	/^void* FoxThread::getData(const std::string& name){$/;"	f	class:JKYi::FoxThread	signature:(const std::string& name)
getData	JKYi/db/fox_thread.h	/^    T* getData(const std::string& name){$/;"	f	class:JKYi::FoxThread	access:public	signature:(const std::string& name)
getData	JKYi/db/fox_thread.h	/^    void* getData(const std::string& name);$/;"	p	class:JKYi::FoxThread	access:public	signature:(const std::string& name)
getData	JKYi/http/http_parser.h	/^    HttpRequest::ptr getData()const { return m_data; }$/;"	f	class:JKYi::http::HttpRequestParser	access:public	signature:() const
getData	JKYi/http/http_parser.h	/^    HttpResponse::ptr getData()const { return m_data; }$/;"	f	class:JKYi::http::HttpResponseParser	access:public	signature:() const
getData	JKYi/http/ws_session.h	/^    const std::string& getData()const { return m_data; }$/;"	f	class:JKYi::http::WSFrameMessage	access:public	signature:() const
getData	JKYi/http/ws_session.h	/^    std::string& getData(){ return m_data; }$/;"	f	class:JKYi::http::WSFrameMessage	access:public	signature:()
getDataCount	JKYi/db/db.h	/^    virtual int getDataCount() = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:()
getDataCount	JKYi/db/mysql.cc	/^int MySQLRes::getDataCount(){$/;"	f	class:JKYi::MySQLRes	signature:()
getDataCount	JKYi/db/mysql.cc	/^int MySQLStmtRes::getDataCount(){$/;"	f	class:JKYi::MySQLStmtRes	signature:()
getDatas	JKYi/config.h	/^    static ConfigVarMap& getDatas(){$/;"	f	class:JKYi::Config	access:private	signature:()
getDefault	JKYi/http/servlet.h	/^    Servlet::ptr getDefault()const { return m_default; }$/;"	f	class:JKYi::http::ServletDispatch	access:public	signature:() const
getDescription	JKYi/config.h	/^   const std::string& getDescription()const {return m_description;}$/;"	f	class:JKYi::ConfigVarBase	access:public	signature:() const
getDouble	JKYi/db/db.h	/^    virtual double getDouble(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getDouble	JKYi/db/mysql.cc	/^double MySQLRes::getDouble(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getDouble	JKYi/db/mysql.cc	/^double MySQLStmtRes::getDouble(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getElapse	JKYi/log.h	/^   uint32_t getElapse()const {return m_elapse;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
getEnv	JKYi/env.cc	/^std::string Env::getEnv(const std::string& key,const std::string& default_val){$/;"	f	class:JKYi::Env	signature:(const std::string& key,const std::string& default_val)
getEnv	JKYi/env.h	/^     std::string getEnv(const std::string& key,const std::string& default_val = "");$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key,const std::string& default_val = Ó)
getErrStr	JKYi/db/db.h	/^    virtual const std::string& getErrStr()const = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:() const
getErrStr	JKYi/db/db.h	/^    virtual std::string getErrStr() = 0;$/;"	p	class:JKYi::IDB	access:public	signature:()
getErrStr	JKYi/db/db.h	/^    virtual std::string getErrStr() = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:()
getErrStr	JKYi/db/mysql.cc	/^std::string MySQL::getErrStr(){$/;"	f	class:JKYi::MySQL	signature:()
getErrStr	JKYi/db/mysql.cc	/^std::string MySQLStmt::getErrStr(){$/;"	f	class:JKYi::MySQLStmt	signature:()
getErrStr	JKYi/db/mysql.h	/^    const std::string& getErrStr()const { return m_errstr; }$/;"	f	class:JKYi::MySQLRes	access:public	signature:() const
getErrStr	JKYi/db/mysql.h	/^    const std::string& getErrStr()const { return m_errstr; }$/;"	f	class:JKYi::MySQLStmtRes	access:public	signature:() const
getErrno	JKYi/db/db.h	/^    virtual int getErrno() = 0;$/;"	p	class:JKYi::IDB	access:public	signature:()
getErrno	JKYi/db/db.h	/^    virtual int getErrno() = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:()
getErrno	JKYi/db/db.h	/^    virtual int getErrno()const = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:() const
getErrno	JKYi/db/mysql.cc	/^int MySQL::getErrno(){$/;"	f	class:JKYi::MySQL	signature:()
getErrno	JKYi/db/mysql.cc	/^int MySQLStmt::getErrno(){$/;"	f	class:JKYi::MySQLStmt	signature:()
getErrno	JKYi/db/mysql.h	/^    int getErrno()const { return m_errno; }$/;"	f	class:JKYi::MySQLRes	access:public	signature:() const
getErrno	JKYi/db/mysql.h	/^    int getErrno()const { return m_errno; };$/;"	f	class:JKYi::MySQLStmtRes	access:public	signature:() const
getError	JKYi/socket.cc	/^int Socket::getError(){$/;"	f	class:JKYi::Socket	signature:()
getError	JKYi/socket.h	/^    int getError();$/;"	p	class:JKYi::Socket	access:public	signature:()
getEvent	JKYi/log.h	/^   LogEvent::ptr getEvent()const {return m_event;}$/;"	f	class:JKYi::LogEventWrap	access:public	signature:() const
getEventLoopOfCurrentThread	JKYi/reactor/EventLoop.cc	/^EventLoop* EventLoop::getEventLoopOfCurrentThread(){$/;"	f	class:JKYi::net::EventLoop	signature:()
getEventLoopOfCurrentThread	JKYi/reactor/EventLoop.h	/^    static EventLoop* getEventLoopOfCurrentThread();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
getEvents	JKYi/reactor/channel.h	/^    int getEvents()const { return events_; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
getExe	JKYi/env.h	/^     const std::string& getExe()const { return m_exe; }$/;"	f	class:JKYi::Env	access:public	signature:() const
getExpiration	JKYi/reactor/timer.h	/^     Timestamp getExpiration()const { return expiration_; }$/;"	f	class:JKYi::net::Timer	access:public	signature:() const
getExpired	JKYi/reactor/timerQueue.cc	/^std::vector<TimerQueue::Entry> TimerQueue::getExpired(Timestamp now){$/;"	f	class:TimerQueue	signature:(Timestamp now)
getExpired	JKYi/reactor/timerQueue.h	/^    std::vector<Entry> getExpired(Timestamp now);$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:(Timestamp now)
getFamily	JKYi/address.cc	/^int Address::getFamily()const{$/;"	f	class:JKYi::Address	signature:() const
getFamily	JKYi/address.h	/^	int getFamily()const;$/;"	p	class:JKYi::Address	access:public	signature:() const
getFamily	JKYi/socket.h	/^    int getFamily()const { return m_family ;};$/;"	f	class:JKYi::Socket	access:public	signature:() const
getFd	JKYi/reactor/Socket.h	/^    int getFd()const { return sockfd_; }$/;"	f	class:JKYi::net::Socket	access:public	signature:() const
getFd	JKYi/reactor/channel.h	/^    int getFd()const { return fd_; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
getFiberId	JKYi/log.h	/^   uint32_t getFiberId()const {return m_fiberId;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
getFile	JKYi/log.h	/^   const char* getFile()const {return m_file;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
getFilename	JKYi/module.h	/^    const std::string& getFilename()const { return m_filename; }$/;"	f	class:JKYi::Module	access:public	signature:() const
getFloat	JKYi/db/db.h	/^    virtual float getFloat(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getFloat	JKYi/db/mysql.cc	/^float MySQLRes::getFloat(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getFloat	JKYi/db/mysql.cc	/^float MySQLStmtRes::getFloat(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getFormatter	JKYi/log.cc	/^LogFormatter::ptr LogAppender::getFormatter(){$/;"	f	class:JKYi::LogAppender	signature:()
getFormatter	JKYi/log.cc	/^LogFormatter::ptr Logger::getFormatter(){$/;"	f	class:JKYi::Logger	signature:()
getFormatter	JKYi/log.h	/^    LogFormatter::ptr getFormatter(); $/;"	p	class:JKYi::LogAppender	access:public	signature:()
getFormatter	JKYi/log.h	/^    LogFormatter::ptr getFormatter();$/;"	p	class:JKYi::Logger	access:public	signature:()
getFragment	JKYi/uri.h	/^    const std::string& getFragment()const { return m_fragment; }$/;"	f	class:JKYi::Uri	access:public	signature:() const
getGlobServlet	JKYi/http/servlet.cc	/^Servlet::ptr ServletDispatch::getGlobServlet(const std::string& uri){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri)
getGlobServlet	JKYi/http/servlet.h	/^    Servlet::ptr getGlobServlet(const std::string& uri);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri)
getHeader	JKYi/http/http.cc	/^std::string HttpRequest::getHeader(const std::string& key,$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key, const std::string& def) const
getHeader	JKYi/http/http.cc	/^std::string HttpResponse::getHeader(const std::string& key,const std::string & def)const{$/;"	f	class:JKYi::http::HttpResponse	signature:(const std::string& key,const std::string & def) const
getHeader	JKYi/http/http.h	/^    std::string getHeader(const std::string& key,const std::string& def="")const;$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(const std::string& key,const std::string& def=Ó) const
getHeader	JKYi/http/http.h	/^   std::string getHeader(const std::string& key,const std::string& def="")const;$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const std::string& def=Ó) const
getHeaderAs	JKYi/http/http.h	/^    T getHeaderAs(const std::string& key,const T& def=T()){$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(const std::string& key,const T& def=T())
getHeaderAs	JKYi/http/http.h	/^   T getHeaderAs(const std::string& key,const T& def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const T& def=T())
getHeaders	JKYi/http/http.h	/^    const MapType& getHeaders()const { return m_headers; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
getHeaders	JKYi/http/http.h	/^   const MapType& getHeaders()const { return m_headers; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
getHeaders	JKYi/http2/hpack.h	/^    const std::vector<HeaderField>& getHeaders()const { return m_headers; }$/;"	f	class:JKYi::http2::IndexType::HPack	access:public	signature:() const
getHost	JKYi/uri.h	/^    const std::string& getHost()const { return m_host; }$/;"	f	class:JKYi::Uri	access:public	signature:() const
getId	JKYi/db/fox_thread.cc	/^std::thread::id FoxThread::getId()const {$/;"	f	class:JKYi::FoxThread	signature:() const
getId	JKYi/db/fox_thread.h	/^    std::thread::id getId()const;$/;"	p	class:JKYi::FoxThread	access:public	signature:() const
getId	JKYi/fiber.h	/^	uint64_t getId()const {return m_id;}$/;"	f	class:JKYi::Fiber	access:public	signature:() const
getId	JKYi/module.h	/^    const std::string& getId()const { return m_id; }$/;"	f	class:JKYi::Module	access:public	signature:() const
getId	JKYi/thread.h	/^   pid_t getId()const{return m_id;}$/;"	f	class:JKYi::Thread	access:public	signature:() const
getIndex	JKYi/reactor/channel.h	/^    int getIndex()const { return index_; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
getInsertId	JKYi/db/mysql.cc	/^uint64_t MySQL::getInsertId(){$/;"	f	class:JKYi::MySQL	signature:()
getInsertId	JKYi/db/mysql.h	/^    uint64_t getInsertId();$/;"	p	class:JKYi::MySQL	access:public	signature:()
getInstance	JKYi/singleton.h	/^    static std::shared_ptr<T> getInstance(){$/;"	f	class:JKYi::SingletonPtr	access:public	signature:()
getInt16	JKYi/db/db.h	/^    virtual int16_t getInt16(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getInt16	JKYi/db/mysql.cc	/^int16_t MySQLRes::getInt16(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getInt16	JKYi/db/mysql.cc	/^int16_t MySQLStmtRes::getInt16(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getInt32	JKYi/db/db.h	/^    virtual int32_t getInt32(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getInt32	JKYi/db/mysql.cc	/^int32_t MySQLRes::getInt32(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getInt32	JKYi/db/mysql.cc	/^int32_t MySQLStmtRes::getInt32(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getInt64	JKYi/db/db.h	/^    virtual int64_t getInt64(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getInt64	JKYi/db/mysql.cc	/^int64_t MySQLRes::getInt64(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getInt64	JKYi/db/mysql.cc	/^int64_t MySQLStmtRes::getInt64(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getInt8	JKYi/db/db.h	/^    virtual int8_t getInt8(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getInt8	JKYi/db/mysql.cc	/^int8_t MySQLRes::getInt8(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getInt8	JKYi/db/mysql.cc	/^int8_t MySQLStmtRes::getInt8(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getLastActiveTime	JKYi/db/redis.h	/^    uint64_t getLastActiveTime()const { return m_lastActiveTime; }$/;"	f	class:JKYi::ISyncRedis	access:public	signature:() const
getLastInsertId	JKYi/db/db.h	/^    virtual int64_t getLastInsertId() = 0;$/;"	p	class:JKYi::ISQLUpdate	access:public	signature:()
getLastInsertId	JKYi/db/db.h	/^    virtual int64_t getLastInsertId() = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:()
getLastInsertId	JKYi/db/mysql.cc	/^int64_t MySQL::getLastInsertId(){$/;"	f	class:JKYi::MySQL	signature:()
getLastInsertId	JKYi/db/mysql.cc	/^int64_t MySQLStmt::getLastInsertId(){$/;"	f	class:JKYi::MySQLStmt	signature:()
getLastInsertId	JKYi/db/mysql.cc	/^int64_t MySQLTransaction::getLastInsertId(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
getLevel	JKYi/log.h	/^    LogLevel::Level getLevel()const {return m_level;}$/;"	f	class:JKYi::Logger	access:public	signature:() const
getLevel	JKYi/log.h	/^    LogLevel::Level getLevel(LogLevel::Level level){return m_level;}$/;"	f	class:JKYi::LogAppender	access:public	signature:(LogLevel::Level level)
getLevel	JKYi/log.h	/^   LogLevel::Level getLevel() const {return m_level;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
getLine	JKYi/log.h	/^   int32_t getLine()const {return m_line;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
getListener	JKYi/config.h	/^   on_change_cb getListener(uint64_t key){$/;"	f	class:JKYi::ConfigVar	access:public	signature:(uint64_t key)
getLocalAddr	JKYi/reactor/SocketsOps.cc	/^struct sockaddr_in6 sockets::getLocalAddr(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
getLocalAddr	JKYi/reactor/SocketsOps.h	/^struct sockaddr_in6 getLocalAddr(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
getLocalAddress	JKYi/socket.cc	/^Address::ptr Socket::getLocalAddress(){$/;"	f	class:JKYi::Socket	signature:()
getLocalAddress	JKYi/socket.h	/^    Address::ptr getLocalAddress();$/;"	p	class:JKYi::Socket	access:public	signature:()
getLocalAddress	JKYi/stream/socket_stream.cc	/^Address::ptr SocketStream::getLocalAddress(){$/;"	f	class:JKYi::SocketStream	signature:()
getLocalAddress	JKYi/stream/socket_stream.h	/^     Address::ptr getLocalAddress();$/;"	p	class:JKYi::SocketStream	access:public	signature:()
getLocalAddressString	JKYi/stream/socket_stream.cc	/^std::string SocketStream::getLocalAddressString(){$/;"	f	class:JKYi::SocketStream	signature:()
getLocalAddressString	JKYi/stream/socket_stream.h	/^     std::string getLocalAddressString();$/;"	p	class:JKYi::SocketStream	access:public	signature:()
getLogger	JKYi/log.cc	/^Logger::ptr LoggerManager::getLogger(const std::string&name){$/;"	f	class:JKYi::LoggerManager	signature:(const std::string&name)
getLogger	JKYi/log.h	/^     Logger::ptr getLogger(const std::string&name);$/;"	p	class:JKYi::LoggerManager	access:public	signature:(const std::string&name)
getLogger	JKYi/log.h	/^   std::shared_ptr<Logger> getLogger()const {return m_logger;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
getLoop	JKYi/reactor/TcpClient.h	/^    EventLoop* getLoop()const{$/;"	f	class:JKYi::net::TcpClient	access:public	signature:() const
getLoop	JKYi/reactor/TcpConnection.h	/^    EventLoop* getLoop()const { return loop_; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
getLoop	JKYi/reactor/TcpServer.h	/^    EventLoop* getLoop()const { return loop_; }$/;"	f	class:JKYi::net::TcpServer	access:public	signature:() const
getLoopForHash	JKYi/reactor/EventLoopThreadPool.cc	/^EventLoop* EventLoopThreadPool::getLoopForHash(size_t hashCode){$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:(size_t hashCode)
getLoopForHash	JKYi/reactor/EventLoopThreadPool.h	/^    EventLoop* getLoopForHash(size_t hashCode); \/\/same hashcode -> same EventLoop$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:(size_t hashCode)
getMatchedServlet	JKYi/http/servlet.cc	/^Servlet::ptr ServletDispatch::getMatchedServlet(const std::string& uri){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri)
getMatchedServlet	JKYi/http/servlet.h	/^    Servlet::ptr getMatchedServlet(const std::string& uri);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri)
getMaxConn	JKYi/db/mysql.h	/^    uint32_t getMaxConn()const { return m_maxConn; }$/;"	f	class:JKYi::MySQLManager	access:public	signature:() const
getMethod	JKYi/http/http.h	/^   HttpMethod getMethod()const{ return m_method; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
getMicroSecondsSinceEpoch	JKYi/timestamp.h	/^    int64_t getMicroSecondsSinceEpoch()const { return m_microSecondsSinceEpoch; }$/;"	f	class:JKYi::net::Timestamp	access:public	signature:() const
getMutableContext	JKYi/reactor/EventLoop.h	/^    boost::any* getMutableContext(){$/;"	f	class:JKYi::net::EventLoop	access:public	signature:()
getMutableContext	JKYi/reactor/TcpConnection.h	/^    boost::any* getMutableContext(){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:()
getMutex	JKYi/config.h	/^	static RWMutexType& getMutex(){$/;"	f	class:JKYi::Config	access:private	signature:()
getMySQL	JKYi/db/mysql.cc	/^std::shared_ptr<MySQL> MySQL::getMySQL(){$/;"	f	class:JKYi::MySQL	signature:()
getMySQL	JKYi/db/mysql.cc	/^std::shared_ptr<MySQL> MySQLTransaction::getMySQL(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
getMySQL	JKYi/db/mysql.h	/^    std::shared_ptr<MySQL> getMySQL();$/;"	p	class:JKYi::MySQL	access:public	signature:()
getMySQL	JKYi/db/mysql.h	/^   std::shared_ptr<MySQL> getMySQL();$/;"	p	class:JKYi::MySQLTransaction	access:public	signature:()
getName	JKYi/config.h	/^   const std::string& getName()const {return m_name;}$/;"	f	class:JKYi::ConfigVarBase	access:public	signature:() const
getName	JKYi/db/redis.h	/^    const std::string& getName()const { return m_name; }$/;"	f	class:JKYi::IRedis	access:public	signature:() const
getName	JKYi/http/servlet.h	/^    const std::string getName()const { return m_name; }$/;"	f	class:JKYi::http::Servlet	access:public	signature:() const
getName	JKYi/http/ws_servlet.h	/^    const std::string& getName()const { return m_name; }$/;"	f	class:JKYi::http::WSServlet	access:public	signature:() const
getName	JKYi/http2/dynamic_table.cc	/^std::string DynamicTable::getName(uint32_t idx)const{$/;"	f	class:JKYi::http2::DynamicTable	signature:(uint32_t idx) const
getName	JKYi/http2/dynamic_table.h	/^    std::string getName(uint32_t idx)const;$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(uint32_t idx) const
getName	JKYi/log.h	/^    std::string getName()const {return m_name;}$/;"	f	class:JKYi::Logger	access:public	signature:() const
getName	JKYi/module.h	/^    const std::string& getName()const { return m_name; }$/;"	f	class:JKYi::Module	access:public	signature:() const
getName	JKYi/protocol.h	/^    virtual const std::string& getName()const = 0;$/;"	p	class:JKYi::Message	access:public	signature:() const
getName	JKYi/scheduler.h	/^   const std::string& getName()const { return m_name; }$/;"	f	class:JKYi::Scheduler	access:public	signature:() const
getName	JKYi/tcp_server.h	/^    std::string getName()const { return m_name; }$/;"	f	class:JKYi::TcpServer	access:public	signature:() const
getName	JKYi/thread.h	/^   const std::string& getName()const{return m_name;} $/;"	f	class:JKYi::Thread	access:public	signature:() const
getNextLoop	JKYi/reactor/EventLoopThreadPool.cc	/^EventLoop* EventLoopThreadPool::getNextLoop(){$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:()
getNextLoop	JKYi/reactor/EventLoopThreadPool.h	/^    EventLoop* getNextLoop();     \/\/round-robin$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:()
getNextTimer	JKYi/timer.cc	/^uint64_t TimerManager::getNextTimer(){$/;"	f	class:JKYi::TimerManager	signature:()
getNextTimer	JKYi/timer.h	/^   uint64_t getNextTimer();$/;"	p	class:JKYi::TimerManager	access:public	signature:()
getNotify	JKYi/protocol.h	/^    uint32_t getNotify()const { return m_notify; }$/;"	f	class:JKYi::Notify	access:public	signature:() const
getNumCreated	JKYi/reactor/timer.h	/^     static int64_t getNumCreated(){ return s_numCreated_.get(); }$/;"	f	class:JKYi::net::Timer	access:public	signature:()
getOpcode	JKYi/http/ws_session.h	/^    int getOpcode()const { return m_opcode; }$/;"	f	class:JKYi::http::WSFrameMessage	access:public	signature:() const
getOption	JKYi/socket.cc	/^bool Socket::getOption(int level,int option,void *result,socklen_t *len){$/;"	f	class:JKYi::Socket	signature:(int level,int option,void *result,socklen_t *len)
getOption	JKYi/socket.h	/^    bool getOption(int level,int option,T&result){$/;"	f	class:JKYi::Socket	access:public	signature:(int level,int option,T&result)
getOption	JKYi/socket.h	/^    bool getOption(int level,int option,void *result,socklen_t *len);$/;"	p	class:JKYi::Socket	access:public	signature:(int level,int option,void *result,socklen_t *len)
getPair	JKYi/http2/dynamic_table.cc	/^std::pair<std::string,std::string> DynamicTable::getPair(uint32_t idx)const{$/;"	f	class:JKYi::http2::DynamicTable	signature:(uint32_t idx) const
getPair	JKYi/http2/dynamic_table.h	/^    std::pair<std::string,std::string> getPair(uint32_t idx)const;$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(uint32_t idx) const
getParam	JKYi/http/http.cc	/^std::string HttpRequest::getParam(const std::string& key$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key ,const std::string &def)
getParam	JKYi/http/http.h	/^   std::string getParam(const std::string& key,const std::string& def="");$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const std::string& def=Ó)
getParamAs	JKYi/http/http.h	/^   T getParamAs(const std::string& key,const T&def=T()){$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const T&def=T())
getParams	JKYi/http/http.h	/^   const MapType& getParams()const{ return m_params; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
getParser	JKYi/http/http_parser.h	/^    const http_parser& getParser()const { return m_parser; }$/;"	f	class:JKYi::http::HttpRequestParser	access:public	signature:() const
getParser	JKYi/http/http_parser.h	/^    const httpclient_parser& getParser()const { return m_parser; }$/;"	f	class:JKYi::http::HttpResponseParser	access:public	signature:() const
getPasswd	JKYi/db/redis.h	/^    const std::string& getPasswd()const { return m_passwd; }$/;"	f	class:JKYi::IRedis	access:public	signature:() const
getPath	JKYi/address.cc	/^std::string UnixAddress::getPath()const{$/;"	f	class:JKYi::UnixAddress	signature:() const
getPath	JKYi/address.h	/^	std::string getPath()const;$/;"	p	class:JKYi::UnixAddress	access:public	signature:() const
getPath	JKYi/http/http.h	/^   const std::string getPath()const { return m_path; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
getPath	JKYi/uri.h	/^    const std::string  getPath()const;$/;"	p	class:JKYi::Uri	access:public	signature:() const
getPath	JKYi/uri.rl.cc	/^const std::string Uri::getPath() const {$/;"	f	class:JKYi::Uri	signature:() const
getPattern	JKYi/log.h	/^    const std::string& getPattern()const{$/;"	f	class:JKYi::LogFormatter	access:public	signature:() const
getPeerAddr	JKYi/reactor/SocketsOps.cc	/^struct sockaddr_in6 sockets::getPeerAddr(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
getPeerAddr	JKYi/reactor/SocketsOps.h	/^struct sockaddr_in6 getPeerAddr(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
getPort	JKYi/address.cc	/^uint16_t IPv4Address::getPort()const{$/;"	f	class:JKYi::IPv4Address	signature:() const
getPort	JKYi/address.cc	/^uint16_t IPv6Address::getPort()const{$/;"	f	class:JKYi::IPv6Address	signature:() const
getPort	JKYi/address.h	/^	virtual uint16_t getPort()const = 0;$/;"	p	class:JKYi::IPAddress	access:public	signature:() const
getPort	JKYi/uri.h	/^    int32_t getPort()const;$/;"	p	class:JKYi::Uri	access:public	signature:() const
getPort	JKYi/uri.rl.cc	/^int32_t Uri::getPort() const {$/;"	f	class:JKYi::Uri	signature:() const
getPosition	JKYi/bytearray.h	/^    size_t getPosition()const { return m_position; }$/;"	f	class:JKYi::ByteArray	access:public	signature:() const
getProtocol	JKYi/socket.h	/^    int getProtocol()const { return m_protocol; }$/;"	f	class:JKYi::Socket	access:public	signature:() const
getPthreadMutex	JKYi/mutex.h	/^   pthread_mutex_t* getPthreadMutex(){$/;"	f	class:JKYi::Mutex	access:public	signature:()
getQuery	JKYi/http/http.h	/^   const std::string getQuery()const { return m_query; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
getQuery	JKYi/uri.h	/^    const std::string& getQuery()const { return m_query; }$/;"	f	class:JKYi::Uri	access:public	signature:() const
getRandFoxThread	JKYi/db/fox_thread.cc	/^FoxThread* FoxThreadPool::getRandFoxThread(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
getRandFoxThread	JKYi/db/fox_thread.h	/^    FoxThread* getRandFoxThread();$/;"	p	class:JKYi::FoxThreadPool	access:public	signature:()
getRaw	JKYi/db/mysql.cc	/^std::shared_ptr<MYSQL> MySQL::getRaw(){$/;"	f	class:JKYi::MySQL	signature:()
getRaw	JKYi/db/mysql.h	/^    MYSQL_STMT* getRaw()const { return m_stmt; }$/;"	f	class:JKYi::MySQLStmt	access:public	signature:() const
getRaw	JKYi/db/mysql.h	/^    std::shared_ptr<MYSQL> getRaw();$/;"	p	class:JKYi::MySQL	access:public	signature:()
getRcvTimeout	JKYi/socket.cc	/^int64_t Socket::getRcvTimeout(){$/;"	f	class:JKYi::Socket	signature:()
getRcvTimeout	JKYi/socket.h	/^    int64_t getRcvTimeout();$/;"	p	class:JKYi::Socket	access:public	signature:()
getReadBuffers	JKYi/bytearray.cc	/^uint64_t ByteArray::getReadBuffers(std::vector<iovec>&buffers,uint64_t len)const{$/;"	f	class:JKYi::ByteArray	signature:(std::vector<iovec>&buffers,uint64_t len) const
getReadBuffers	JKYi/bytearray.cc	/^uint64_t ByteArray::getReadBuffers(std::vector<iovec>&buffers,uint64_t len,uint64_t position)const{$/;"	f	class:JKYi::ByteArray	signature:(std::vector<iovec>&buffers,uint64_t len,uint64_t position) const
getReadBuffers	JKYi/bytearray.h	/^    uint64_t getReadBuffers(std::vector<iovec>&buffers,uint64_t len,uint64_t position)const;$/;"	p	class:JKYi::ByteArray	access:public	signature:(std::vector<iovec>&buffers,uint64_t len,uint64_t position) const
getReadBuffers	JKYi/bytearray.h	/^    uint64_t getReadBuffers(std::vector<iovec>&buffers,uint64_t len= ~011 )const;$/;"	p	class:JKYi::ByteArray	access:public	signature:(std::vector<iovec>&buffers,uint64_t len= ~011 ) const
getReadSize	JKYi/bytearray.h	/^    size_t getReadSize()const { return m_size - m_position; }$/;"	f	class:JKYi::ByteArray	access:public	signature:() const
getReason	JKYi/http/http.h	/^    const std::string& getReason()const { return m_reason; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
getRecvTimeout	JKYi/tcp_server.h	/^    uint64_t getRecvTimeout()const { return m_recvTimeout; }$/;"	f	class:JKYi::TcpServer	access:public	signature:() const
getRemoteAddress	JKYi/socket.cc	/^Address::ptr Socket::getRemoteAddress(){$/;"	f	class:JKYi::Socket	signature:()
getRemoteAddress	JKYi/socket.h	/^    Address::ptr getRemoteAddress();$/;"	p	class:JKYi::Socket	access:public	signature:()
getRemoteAddress	JKYi/stream/socket_stream.cc	/^Address::ptr SocketStream::getRemoteAddress(){$/;"	f	class:JKYi::SocketStream	signature:()
getRemoteAddress	JKYi/stream/socket_stream.h	/^     Address::ptr getRemoteAddress();$/;"	p	class:JKYi::SocketStream	access:public	signature:()
getRemoteAddressString	JKYi/stream/socket_stream.cc	/^std::string SocketStream::getRemoteAddressString(){$/;"	f	class:JKYi::SocketStream	signature:()
getRemoteAddressString	JKYi/stream/socket_stream.h	/^     std::string getRemoteAddressString();$/;"	p	class:JKYi::SocketStream	access:public	signature:()
getReply	JKYi/db/redis.cc	/^ReplyPtr Redis::getReply(){$/;"	f	class:JKYi::Redis	signature:()
getReply	JKYi/db/redis.cc	/^ReplyPtr RedisCluster::getReply(){$/;"	f	class:JKYi::RedisCluster	signature:()
getReply	JKYi/db/redis.h	/^    virtual ReplyPtr getReply() = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:()
getRequests	JKYi/http/http_connection.h	/^    uint64_t getRequests()const { return m_request; }$/;"	f	class:JKYi::http::HttpConnection	access:public	signature:() const
getResult	JKYi/protocol.h	/^    uint32_t getResult()const { return m_result; }$/;"	f	class:JKYi::Response	access:public	signature:() const
getResultStr	JKYi/protocol.h	/^    const std::string& getResultStr()const { return m_resultStr; }$/;"	f	class:JKYi::Response	access:public	signature:() const
getRoot	JKYi/log.h	/^     Logger::ptr getRoot()const {return m_root;}$/;"	f	class:JKYi::LoggerManager	access:public	signature:() const
getSS	JKYi/log.cc	/^std::stringstream& LogEventWrap::getSS(){$/;"	f	class:JKYi::LogEventWrap	signature:()
getSS	JKYi/log.h	/^   std::stringstream& getSS() { return m_ss;}$/;"	f	class:JKYi::LogEvent	access:public	signature:()
getSS	JKYi/log.h	/^   std::stringstream& getSS();$/;"	p	class:JKYi::LogEventWrap	access:public	signature:()
getScheme	JKYi/uri.h	/^    const std::string& getScheme()const { return m_scheme; }$/;"	f	class:JKYi::Uri	access:public	signature:() const
getSecondsSinceEpoch	JKYi/timestamp.h	/^    time_t getSecondsSinceEpoch()const{ $/;"	f	class:JKYi::net::Timestamp	access:public	signature:() const
getSendTimeout	JKYi/socket.cc	/^int64_t Socket::getSendTimeout(){$/;"	f	class:JKYi::Socket	signature:()
getSendTimeout	JKYi/socket.h	/^    int64_t getSendTimeout();$/;"	p	class:JKYi::Socket	access:public	signature:()
getSequence	JKYi/reactor/timer.h	/^     int64_t getSequence()const { return sequence_; }$/;"	f	class:JKYi::net::Timer	access:public	signature:() const
getServer	JKYi/application.cc	/^bool Application::getServer(const std::string& type,std::vector<TcpServer::ptr>&svrs){$/;"	f	class:JKYi::Application	signature:(const std::string& type,std::vector<TcpServer::ptr>&svrs)
getServer	JKYi/application.h	/^    bool getServer(const std::string& type,std::vector<TcpServer::ptr>&svrs);$/;"	p	class:JKYi::Application	access:public	signature:(const std::string& type,std::vector<TcpServer::ptr>&svrs)
getServlet	JKYi/http/servlet.cc	/^Servlet::ptr ServletDispatch::getServlet(const std::string& uri){$/;"	f	class:JKYi::http::ServletDispatch	signature:(const std::string& uri)
getServlet	JKYi/http/servlet.h	/^    Servlet::ptr getServlet(const std::string& uri);$/;"	p	class:JKYi::http::ServletDispatch	access:public	signature:(const std::string& uri)
getServletDispatch	JKYi/http/http_server.h	/^    ServletDispatch::ptr getServletDispatch()const{ return m_dispatch; }$/;"	f	class:JKYi::http::HttpServer	access:public	signature:() const
getSize	JKYi/bytearray.h	/^    size_t getSize()const { return m_size;}$/;"	f	class:JKYi::ByteArray	access:public	signature:() const
getSn	JKYi/protocol.h	/^    uint32_t getSn()const { return m_sn; }$/;"	f	class:JKYi::Request	access:public	signature:() const
getSn	JKYi/protocol.h	/^    uint32_t getSn()const { return m_sn; }$/;"	f	class:JKYi::Response	access:public	signature:() const
getSocket	JKYi/socket.h	/^    int getSocket()const{ return m_sock; }$/;"	f	class:JKYi::Socket	access:public	signature:() const
getSocket	JKYi/stream/socket_stream.h	/^     Socket::ptr getSocket() const { return m_socket; }$/;"	f	class:JKYi::SocketStream	access:public	signature:() const
getSocketError	JKYi/reactor/SocketsOps.cc	/^int sockets::getSocketError(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
getSocketError	JKYi/reactor/SocketsOps.h	/^int getSocketError(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
getSocks	JKYi/tcp_server.h	/^    std::vector<JKYi::Socket::ptr> getSocks()const { return m_socks; }$/;"	f	class:JKYi::TcpServer	access:public	signature:() const
getState	JKYi/fiber.h	/^	State getState()const{return m_state;}$/;"	f	class:JKYi::Fiber	access:public	signature:() const
getState	JKYi/zk_client.cc	/^int32_t ZKClient::getState(){$/;"	f	class:JKYi::ZKClient	signature:()
getState	JKYi/zk_client.h	/^    int32_t getState();$/;"	p	class:JKYi::ZKClient	access:public	signature:()
getStatus	JKYi/http/http.h	/^    HttpStatus getStatus()const { return m_status; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
getString	JKYi/db/db.h	/^    virtual std::string getString(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getString	JKYi/db/mysql.cc	/^std::string MySQLRes::getString(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getString	JKYi/db/mysql.cc	/^std::string MySQLStmtRes::getString(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getSysNonblock	JKYi/fdmanager.h	/^   bool getSysNonblock()const {return m_sysNonblock;}$/;"	f	class:JKYi::FdCtx	access:public	signature:() const
getTcpInfo	JKYi/reactor/Socket.cc	/^bool Socket::getTcpInfo(struct tcp_info* tcpi)const{$/;"	f	class:JKYi::net::Socket	signature:(struct tcp_info* tcpi) const
getTcpInfo	JKYi/reactor/Socket.h	/^    bool getTcpInfo(struct tcp_info*)const;$/;"	p	class:JKYi::net::Socket	access:public	signature:(struct tcp_info*) const
getTcpInfo	JKYi/reactor/TcpConnection.cc	/^bool TcpConnection::getTcpInfo(struct tcp_info* tcpi)const{$/;"	f	class:JKYi::net::TcpConnection	signature:(struct tcp_info* tcpi) const
getTcpInfo	JKYi/reactor/TcpConnection.h	/^    bool getTcpInfo(struct tcp_info* )const;$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(struct tcp_info* ) const
getTcpInfoString	JKYi/reactor/Socket.cc	/^bool Socket::getTcpInfoString(char * buf,int len)const{$/;"	f	class:JKYi::net::Socket	signature:(char * buf,int len) const
getTcpInfoString	JKYi/reactor/Socket.h	/^    bool getTcpInfoString(char * buf,int len)const;$/;"	p	class:JKYi::net::Socket	access:public	signature:(char * buf,int len) const
getTcpInfoString	JKYi/reactor/TcpConnection.cc	/^std::string TcpConnection::getTcpInfoString()const{$/;"	f	class:JKYi::net::TcpConnection	signature:() const
getTcpInfoString	JKYi/reactor/TcpConnection.h	/^    std::string getTcpInfoString()const;$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:() const
getThreadId	JKYi/log.h	/^   uint32_t getThreadId()const {return m_threadId;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
getThreadName	JKYi/log.h	/^   const std::string& getThreadName()const {return m_threadName;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
getTime	JKYi/db/db.h	/^    virtual time_t getTime(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getTime	JKYi/db/mysql.cc	/^time_t MySQLRes::getTime(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getTime	JKYi/db/mysql.cc	/^time_t MySQLStmtRes::getTime(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getTime	JKYi/log.h	/^   uint32_t getTime()const{return m_time;}$/;"	f	class:JKYi::LogEvent	access:public	signature:() const
getTimeout	JKYi/fdmanager.cc	/^uint64_t FdCtx::getTimeout(int type){$/;"	f	class:JKYi::FdCtx	signature:(int type)
getTimeout	JKYi/fdmanager.h	/^   uint64_t getTimeout(int type);$/;"	p	class:JKYi::FdCtx	access:public	signature:(int type)
getTotal	JKYi/db/fox_thread.h	/^    uint64_t getTotal() { return m_total; }$/;"	f	class:JKYi::FoxThread	access:public	signature:()
getTotal	JKYi/db/fox_thread.h	/^    uint64_t getTotal(){ return m_total; }$/;"	f	class:JKYi::FoxThreadPool	access:public	signature:()
getTotal	JKYi/db/fox_thread.h	/^    virtual uint64_t getTotal() = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:()
getTotals	JKYi/http/http_connection.h	/^    const std::atomic<int32_t>& getTotals()const { return m_total; }$/;"	f	class:JKYi::http::HttpConnectionPool	access:public	signature:() const
getType	JKYi/config.h	/^   virtual std::string getType()const=0;$/;"	p	class:JKYi::ConfigVarBase	access:public	signature:() const
getType	JKYi/db/redis.h	/^    Type getType()const { return m_type; }$/;"	f	class:JKYi::IRedis	access:public	signature:() const
getType	JKYi/module.h	/^    uint32_t getType()const { return m_type; }$/;"	f	class:JKYi::Module	access:public	signature:() const
getType	JKYi/protocol.h	/^    virtual int32_t getType()const = 0;$/;"	p	class:JKYi::Message	access:public	signature:() const
getType	JKYi/socket.h	/^    int getType()const { return m_type; }$/;"	f	class:JKYi::Socket	access:public	signature:() const
getUint16	JKYi/db/db.h	/^    virtual uint16_t getUint16(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getUint16	JKYi/db/mysql.cc	/^uint16_t MySQLRes::getUint16(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getUint16	JKYi/db/mysql.cc	/^uint16_t MySQLStmtRes::getUint16(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getUint32	JKYi/db/db.h	/^    virtual uint32_t getUint32(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getUint32	JKYi/db/mysql.cc	/^uint32_t MySQLRes::getUint32(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getUint32	JKYi/db/mysql.cc	/^uint32_t MySQLStmtRes::getUint32(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getUint64	JKYi/db/db.h	/^    virtual uint64_t getUint64(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getUint64	JKYi/db/mysql.cc	/^uint64_t MySQLRes::getUint64(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getUint64	JKYi/db/mysql.cc	/^uint64_t MySQLStmtRes::getUint64(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getUint8	JKYi/db/db.h	/^    virtual uint8_t getUint8(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
getUint8	JKYi/db/mysql.cc	/^uint8_t MySQLRes::getUint8(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
getUint8	JKYi/db/mysql.cc	/^uint8_t MySQLStmtRes::getUint8(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
getUserNonblock	JKYi/fdmanager.h	/^   bool getUserNonblock()const {return m_userNonblock;}$/;"	f	class:JKYi::FdCtx	access:public	signature:() const
getUserinfo	JKYi/uri.h	/^    const std::string& getUserinfo()const { return m_userinfo; }$/;"	f	class:JKYi::Uri	access:public	signature:() const
getValue	JKYi/config.h	/^   const T getValue(){$/;"	f	class:JKYi::ConfigVar	access:public	signature:()
getVersion	JKYi/http/http.h	/^    uint8_t getVersion()const { return m_version; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
getVersion	JKYi/http/http.h	/^   uint8_t getVersion()const { return m_version; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
getVersion	JKYi/module.h	/^    const std::string& getVersion()const { return m_version; }$/;"	f	class:JKYi::Module	access:public	signature:() const
getWSServlet	JKYi/http/ws_servlet.cc	/^WSServlet::ptr WSServletDispatch::getWSServlet(const std::string& uri){$/;"	f	class:JKYi::http::WSServletDispatch	signature:(const std::string& uri)
getWSServlet	JKYi/http/ws_servlet.h	/^    WSServlet::ptr getWSServlet(const std::string& uri);$/;"	p	class:JKYi::http::WSServletDispatch	access:public	signature:(const std::string& uri)
getWSServletDispatch	JKYi/http/ws_server.h	/^    WSServletDispatch::ptr getWSServletDispatch()const { return m_dispatch; }$/;"	f	class:JKYi::http::WSServer	access:public	signature:() const
getWriteBuffers	JKYi/bytearray.cc	/^uint64_t ByteArray::getWriteBuffers(std::vector<iovec>&buffers,uint64_t len){$/;"	f	class:JKYi::ByteArray	signature:(std::vector<iovec>&buffers,uint64_t len)
getWriteBuffers	JKYi/bytearray.h	/^    uint64_t getWriteBuffers(std::vector<iovec>&buffers,uint64_t len);$/;"	p	class:JKYi::ByteArray	access:public	signature:(std::vector<iovec>&buffers,uint64_t len)
getWriteSize	JKYi/bytearray.h	/^    size_t getWriteSize()const { return m_capacity-m_position; }$/;"	f	class:JKYi::ByteArray	access:private	signature:() const
get_pointer	JKYi/reactor/Callbacks.h	/^inline T* get_pointer(const std::shared_ptr<T>& ptr){$/;"	f	namespace:JKYi	signature:(const std::shared_ptr<T>& ptr)
get_pointer	JKYi/reactor/Callbacks.h	/^inline T* get_pointer(const std::unique_ptr<T>& ptr){$/;"	f	namespace:JKYi	signature:(const std::unique_ptr<T>& ptr)
get_value	JKYi/db/redis.cc	/^static std::string get_value(const std::map<std::string,std::string>& m,$/;"	f	namespace:JKYi	signature:(const std::map<std::string,std::string>& m, const std::string& key,const std::string& def = Ó)
getsockopt	JKYi/hook.cc	/^int getsockopt(int fd,int level,int optname,void * optval,socklen_t* optlen){$/;"	f	signature:(int fd,int level,int optname,void * optval,socklen_t* optlen)
getsockopt_fun	JKYi/hook.h	/^typedef int (*getsockopt_fun)(int sockfd, int level, int optname, void *optval, socklen_t *optlen);$/;"	t
gettid	JKYi/reactor/Thread.cc	/^pid_t gettid(){$/;"	f	namespace:JKYi::detail	signature:()
h	JKYi/http2/hpack.h	/^            uint8_t h : 1;$/;"	m	struct:JKYi::http2::IndexType::StringHeader::__anon16::__anon17	access:public
h_len	JKYi/http2/hpack.h	/^        uint8_t h_len;$/;"	m	union:JKYi::http2::IndexType::StringHeader::__anon16	access:public
h_name	JKYi/http2/hpack.h	/^    bool h_name = 0;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
h_value	JKYi/http2/hpack.h	/^    bool h_value = 0;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
handle	JKYi/http/servlet.cc	/^int32_t FunctionServlet::handle(HttpRequest::ptr request,HttpResponse::ptr response,$/;"	f	class:JKYi::http::FunctionServlet	signature:(HttpRequest::ptr request,HttpResponse::ptr response, HttpSession::ptr session)
handle	JKYi/http/servlet.cc	/^int32_t NotFoundServlet::handle(HttpRequest::ptr request,HttpResponse::ptr response$/;"	f	class:JKYi::http::NotFoundServlet	signature:(HttpRequest::ptr request,HttpResponse::ptr response ,HttpSession::ptr session)
handle	JKYi/http/servlet.cc	/^int32_t ServletDispatch::handle(HttpRequest::ptr request,HttpResponse::ptr response,$/;"	f	class:JKYi::http::ServletDispatch	signature:(HttpRequest::ptr request,HttpResponse::ptr response, HttpSession::ptr session)
handle	JKYi/http/servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session) = 0;$/;"	p	class:JKYi::http::Servlet	access:public	signature:(JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session)
handle	JKYi/http/ws_servlet.cc	/^int32_t FunctionWSServlet::handle(JKYi::http::HttpRequest::ptr header,$/;"	f	class:JKYi::http::FunctionWSServlet	signature:(JKYi::http::HttpRequest::ptr header, JKYi::http::WSFrameMessage::ptr msg, JKYi::http::WSSession::ptr session)
handle	JKYi/http/ws_servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr header,JKYi::http::WSFrameMessage::ptr msg,JKYi::http::WSSession::ptr session) = 0;$/;"	p	class:JKYi::http::WSServlet	access:public	signature:(JKYi::http::HttpRequest::ptr header,JKYi::http::WSFrameMessage::ptr msg,JKYi::http::WSSession::ptr session)
handleClient	JKYi/http/http_server.cc	/^void HttpServer::handleClient(Socket::ptr client){$/;"	f	class:JKYi::http::HttpServer	signature:(Socket::ptr client)
handleClient	JKYi/http/ws_server.cc	/^void WSServer::handleClient(Socket::ptr client){$/;"	f	class:JKYi::http::WSServer	signature:(Socket::ptr client)
handleClient	JKYi/tcp_server.cc	/^void TcpServer::handleClient(Socket::ptr client){$/;"	f	class:JKYi::TcpServer	signature:(Socket::ptr client)
handleClient	JKYi/tcp_server.h	/^    virtual void handleClient(Socket::ptr client);$/;"	p	class:JKYi::TcpServer	access:protected	signature:(Socket::ptr client)
handleClientShake	JKYi/http/ws_session.h	/^    bool handleClientShake();$/;"	p	class:JKYi::http::WSSession	access:private	signature:()
handleClose	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::handleClose(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
handleClose	JKYi/reactor/TcpConnection.h	/^    void handleClose();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
handleError	JKYi/reactor/Connector.cc	/^void Connector::handleError(){$/;"	f	class:JKYi::net::Connector	signature:()
handleError	JKYi/reactor/Connector.h	/^    void handleError();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
handleError	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::handleError(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
handleError	JKYi/reactor/TcpConnection.h	/^    void handleError();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
handleEvent	JKYi/reactor/channel.cc	/^void Channel::handleEvent(Timestamp receiveTime){$/;"	f	class:JKYi::net::Channel	signature:(Timestamp receiveTime)
handleEvent	JKYi/reactor/channel.h	/^    void handleEvent(Timestamp receiveTime);$/;"	p	class:JKYi::net::Channel	access:public	signature:(Timestamp receiveTime)
handleEventWithGuard	JKYi/reactor/channel.cc	/^void Channel::handleEventWithGuard(Timestamp receiveTime){$/;"	f	class:JKYi::net::Channel	signature:(Timestamp receiveTime)
handleEventWithGuard	JKYi/reactor/channel.h	/^    void handleEventWithGuard(Timestamp timestamp);$/;"	p	class:JKYi::net::Channel	access:private	signature:(Timestamp timestamp)
handleNotify	JKYi/module.cc	/^bool Module::handleNotify(JKYi::Message::ptr notify,JKYi::Stream::ptr stream){$/;"	f	class:JKYi::Module	signature:(JKYi::Message::ptr notify,JKYi::Stream::ptr stream)
handleNotify	JKYi/module.h	/^    virtual bool handleNotify(JKYi::Message::ptr notify,JKYi::Stream::ptr stream);$/;"	p	class:JKYi::Module	access:public	signature:(JKYi::Message::ptr notify,JKYi::Stream::ptr stream)
handleRead	JKYi/reactor/EventLoop.cc	/^void EventLoop::handleRead(){$/;"	f	class:JKYi::net::EventLoop	signature:()
handleRead	JKYi/reactor/EventLoop.h	/^    void handleRead();$/;"	p	class:JKYi::net::EventLoop	access:private	signature:()
handleRead	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::handleRead(Timestamp receiveTime){$/;"	f	class:JKYi::net::TcpConnection	signature:(Timestamp receiveTime)
handleRead	JKYi/reactor/TcpConnection.h	/^    void handleRead(Timestamp receiveTime);$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:(Timestamp receiveTime)
handleRead	JKYi/reactor/acceptor.cc	/^void Acceptor::handleRead(){$/;"	f	class:JKYi::net::Acceptor	signature:()
handleRead	JKYi/reactor/acceptor.h	/^    void handleRead();$/;"	p	class:JKYi::net::Acceptor	access:private	signature:()
handleRead	JKYi/reactor/timerQueue.cc	/^void TimerQueue::handleRead(){$/;"	f	class:TimerQueue	signature:()
handleRead	JKYi/reactor/timerQueue.h	/^    void handleRead();$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:()
handleRequest	JKYi/module.cc	/^bool Module::handleRequest(JKYi::Message::ptr req,JKYi::Message::ptr rsp,JKYi::Stream::ptr stream){$/;"	f	class:JKYi::Module	signature:(JKYi::Message::ptr req,JKYi::Message::ptr rsp,JKYi::Stream::ptr stream)
handleRequest	JKYi/module.h	/^    virtual bool handleRequest(JKYi::Message::ptr req,JKYi::Message::ptr rsp,JKYi::Stream::ptr stream);$/;"	p	class:JKYi::Module	access:public	signature:(JKYi::Message::ptr req,JKYi::Message::ptr rsp,JKYi::Stream::ptr stream)
handleServerShake	JKYi/http/ws_session.h	/^    bool handleServerShake();$/;"	p	class:JKYi::http::WSSession	access:private	signature:()
handleShake	JKYi/http/ws_session.cc	/^HttpRequest::ptr WSSession::handleShake(){$/;"	f	class:JKYi::http::WSSession	signature:()
handleShake	JKYi/http/ws_session.h	/^    HttpRequest::ptr handleShake();$/;"	p	class:JKYi::http::WSSession	access:public	signature:()
handleWrite	JKYi/reactor/Connector.cc	/^void Connector::handleWrite(){$/;"	f	class:JKYi::net::Connector	signature:()
handleWrite	JKYi/reactor/Connector.h	/^    void handleWrite();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
handleWrite	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::handleWrite(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
handleWrite	JKYi/reactor/TcpConnection.h	/^    void handleWrite();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
has	JKYi/env.cc	/^bool Env::has(const std::string& key){$/;"	f	class:JKYi::Env	signature:(const std::string& key)
has	JKYi/env.h	/^     bool has(const std::string& key);$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key)
hasChannel	JKYi/reactor/EventLoop.cc	/^bool EventLoop::hasChannel(Channel* channel){$/;"	f	class:JKYi::net::EventLoop	signature:(Channel* channel)
hasChannel	JKYi/reactor/EventLoop.h	/^    bool hasChannel(Channel* channel);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Channel* channel)
hasChannel	JKYi/reactor/poller.cc	/^bool Poller::hasChannel(Channel* channel)const{$/;"	f	class:JKYi::net::Poller	signature:(Channel* channel) const
hasChannel	JKYi/reactor/poller.h	/^    virtual bool hasChannel(Channel* channel) const;$/;"	p	class:JKYi::net::Poller	access:public	signature:(Channel* channel) const
hasCookie	JKYi/http/http.cc	/^bool HttpRequest::hasCookie(const std::string& key,std::string * val){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,std::string * val)
hasCookie	JKYi/http/http.h	/^   bool hasCookie(const std::string& key,std::string * val=nullptr );$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,std::string * val=nullptr )
hasError	JKYi/http/http_parser.cc	/^int HttpRequestParser::hasError(){$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
hasError	JKYi/http/http_parser.cc	/^int HttpResponseParser::hasError(){$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
hasError	JKYi/http/http_parser.h	/^    int hasError();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
hasError	JKYi/http/http_parser.h	/^    int hasError();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
hasHeader	JKYi/http/http.cc	/^bool HttpRequest::hasHeader(const std::string& key,std::string * val){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,std::string * val)
hasHeader	JKYi/http/http.h	/^   bool hasHeader(const std::string& key,std::string * val=nullptr );$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,std::string * val=nullptr )
hasIdleThreads	JKYi/scheduler.h	/^   bool hasIdleThreads(){return m_idleThreadCount>0;}$/;"	f	class:JKYi::Scheduler	access:protected	signature:()
hasParam	JKYi/http/http.cc	/^bool HttpRequest::hasParam(const std::string& key,std::string * val){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,std::string * val)
hasParam	JKYi/http/http.h	/^   bool hasParam(const std::string& key,std::string * val=nullptr );$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,std::string * val=nullptr )
hasTimer	JKYi/timer.cc	/^bool TimerManager::hasTimer(){$/;"	f	class:JKYi::TimerManager	signature:()
hasTimer	JKYi/timer.h	/^   bool hasTimer();$/;"	p	class:JKYi::TimerManager	access:public	signature:()
hasWritten	JKYi/reactor/Buffer.h	/^    void hasWritten(size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t len)
has_trivial_assignment_operator	JKYi/reactor/StringPiece.h	/^  typedef __true_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits	access:public
has_trivial_copy_constructor	JKYi/reactor/StringPiece.h	/^  typedef __true_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits	access:public
has_trivial_default_constructor	JKYi/reactor/StringPiece.h	/^  typedef __true_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits	access:public
has_trivial_destructor	JKYi/reactor/StringPiece.h	/^  typedef __true_type    has_trivial_destructor;$/;"	t	struct:__type_traits	access:public
header	JKYi/http2/frame.h	/^    FrameHeader header;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame	access:public
header_done	JKYi/http/http11_parser.h	/^      element_cb header_done;$/;"	m	struct:http_parser	access:public
header_done	JKYi/http/httpclient_parser.h	/^      element_cb header_done;$/;"	m	struct:httpclient_parser	access:public
hf_byte_encode	JKYi/http2/huffman.cc	/^int hf_byte_encode(unsigned char ch, int remain, unsigned char *buff);$/;"	p	namespace:JKYi::http2	file:	signature:(unsigned char ch, int remain, unsigned char *buff)
hf_byte_encode	JKYi/http2/huffman.cc	/^int hf_byte_encode(unsigned char ch, int remain, unsigned char *buff){$/;"	f	namespace:JKYi::http2	signature:(unsigned char ch, int remain, unsigned char *buff)
hf_finish	JKYi/http2/huffman.cc	/^void hf_finish(NODE* h_node);$/;"	p	namespace:JKYi::http2	file:	signature:(NODE* h_node)
hf_finish	JKYi/http2/huffman.cc	/^void hf_finish(NODE* h_node){$/;"	f	namespace:JKYi::http2	signature:(NODE* h_node)
hf_init	JKYi/http2/huffman.cc	/^int hf_init(NODE** h_node);$/;"	p	namespace:JKYi::http2	file:	signature:(NODE** h_node)
hf_init	JKYi/http2/huffman.cc	/^int hf_init(NODE** h_node){$/;"	f	namespace:JKYi::http2	signature:(NODE** h_node)
hf_integer_decode	JKYi/http2/huffman.cc	/^int hf_integer_decode(const char *enc_buff, int nprefix , char *dec_buff);$/;"	p	namespace:JKYi::http2	file:	signature:(const char *enc_buff, int nprefix , char *dec_buff)
hf_integer_decode	JKYi/http2/huffman.cc	/^int hf_integer_decode(const char *enc_buff, int nprefix , char *dec_buff){$/;"	f	namespace:JKYi::http2	signature:(const char *enc_buff, int nprefix , char *dec_buff)
hf_integer_encode	JKYi/http2/huffman.cc	/^int hf_integer_encode(unsigned int enc_binary, int nprefix, unsigned char *buff){$/;"	f	namespace:JKYi::http2	signature:(unsigned int enc_binary, int nprefix, unsigned char *buff)
hf_integer_encode	JKYi/http2/huffman.cc	/^int hf_integer_encode(unsigned int enc_binary,int nprefix, unsigned char *buff);$/;"	p	namespace:JKYi::http2	file:	signature:(unsigned int enc_binary,int nprefix, unsigned char *buff)
hf_print_hex	JKYi/http2/huffman.cc	/^void hf_print_hex(unsigned char *buff, int size);$/;"	p	namespace:JKYi::http2	file:	signature:(unsigned char *buff, int size)
hf_print_hex	JKYi/http2/huffman.cc	/^void hf_print_hex(unsigned char *buff, int size){$/;"	f	namespace:JKYi::http2	signature:(unsigned char *buff, int size)
hf_string_decode	JKYi/http2/huffman.cc	/^int hf_string_decode(NODE* h_node, unsigned char *enc, int enc_sz, char *out_buff, int out_sz);$/;"	p	namespace:JKYi::http2	file:	signature:(NODE* h_node, unsigned char *enc, int enc_sz, char *out_buff, int out_sz)
hf_string_decode	JKYi/http2/huffman.cc	/^int hf_string_decode(NODE* h_node, unsigned char *enc, int enc_sz, char *out_buff, int out_sz){$/;"	f	namespace:JKYi::http2	signature:(NODE* h_node, unsigned char *enc, int enc_sz, char *out_buff, int out_sz)
hf_string_encode	JKYi/http2/huffman.cc	/^int hf_string_encode(const char *buff_in, int size, int prefix, unsigned char *buff_out, int *size_out);$/;"	p	namespace:JKYi::http2	file:	signature:(const char *buff_in, int size, int prefix, unsigned char *buff_out, int *size_out)
hf_string_encode	JKYi/http2/huffman.cc	/^int hf_string_encode(const char *buff_in, int size, int prefix, unsigned char *buff_out, int *size_out){$/;"	f	namespace:JKYi::http2	signature:(const char *buff_in, int size, int prefix, unsigned char *buff_out, int *size_out)
hf_string_encode_len	JKYi/http2/huffman.cc	/^int hf_string_encode_len(unsigned char *enc, int enc_sz);$/;"	p	namespace:JKYi::http2	file:	signature:(unsigned char *enc, int enc_sz)
hf_string_encode_len	JKYi/http2/huffman.cc	/^int hf_string_encode_len(unsigned char *enc, int enc_sz){$/;"	f	namespace:JKYi::http2	signature:(unsigned char *enc, int enc_sz)
highWaterMarkCallback_	JKYi/reactor/TcpConnection.h	/^    HighWaterMarkCallback highWaterMarkCallback_;   \/\/é«æ°´ä½åè°$/;"	m	class:JKYi::net::TcpConnection	access:private
highWaterMark_	JKYi/reactor/TcpConnection.h	/^    size_t highWaterMark_;   \/\/æ°´ä½$/;"	m	class:JKYi::net::TcpConnection	access:private
hook_init	JKYi/hook.cc	/^void hook_init(){$/;"	f	namespace:JKYi	signature:()
howMuchTimeFromNow	JKYi/reactor/timerQueue.cc	/^struct timespec howMuchTimeFromNow(Timestamp when){$/;"	f	namespace:JKYi::net::detail	signature:(Timestamp when)
hpack	JKYi/http2/frame.h	/^    HPack::ptr hpack;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
http	JKYi/http/http.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
http	JKYi/http/http.h	/^namespace http{$/;"	n	namespace:JKYi
http	JKYi/http/http_connection.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
http	JKYi/http/http_connection.h	/^namespace http{$/;"	n	namespace:JKYi
http	JKYi/http/http_parser.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
http	JKYi/http/http_parser.h	/^namespace http{$/;"	n	namespace:JKYi
http	JKYi/http/http_server.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
http	JKYi/http/http_server.h	/^namespace http{$/;"	n	namespace:JKYi
http	JKYi/http/http_session.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
http	JKYi/http/http_session.h	/^namespace http{$/;"	n	namespace:JKYi
http	JKYi/http/servlet.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
http	JKYi/http/servlet.h	/^namespace http{$/;"	n	namespace:JKYi
http	JKYi/http/ws_connection.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
http	JKYi/http/ws_connection.h	/^namespace http{$/;"	n	namespace:JKYi
http	JKYi/http/ws_server.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
http	JKYi/http/ws_server.h	/^namespace http{$/;"	n	namespace:JKYi
http	JKYi/http/ws_servlet.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
http	JKYi/http/ws_servlet.h	/^namespace http{$/;"	n	namespace:JKYi
http	JKYi/http/ws_session.cc	/^namespace http{$/;"	n	namespace:JKYi	file:
http	JKYi/http/ws_session.h	/^namespace http{$/;"	n	namespace:JKYi
http11_parser_h	JKYi/http/http11_parser.h	2;"	d
http2	JKYi/http2/dynamic_table.cc	/^namespace http2{$/;"	n	namespace:JKYi	file:
http2	JKYi/http2/dynamic_table.h	/^namespace http2{$/;"	n	namespace:JKYi
http2	JKYi/http2/frame.cc	/^namespace http2{$/;"	n	namespace:JKYi	file:
http2	JKYi/http2/frame.h	/^namespace http2{$/;"	n	namespace:JKYi
http2	JKYi/http2/hpack.cc	/^namespace http2{$/;"	n	namespace:JKYi	file:
http2	JKYi/http2/hpack.h	/^namespace http2{$/;"	n	namespace:JKYi
http2	JKYi/http2/huffman.cc	/^namespace http2 {$/;"	n	namespace:JKYi	file:
http2	JKYi/http2/huffman.h	/^namespace http2 {$/;"	n	namespace:JKYi
http2	JKYi/http2/huffman_table.h	/^namespace http2 {$/;"	n	namespace:JKYi
http_field	JKYi/http/http11_parser.h	/^      field_cb http_field;$/;"	m	struct:http_parser	access:public
http_field	JKYi/http/httpclient_parser.h	/^      field_cb http_field;$/;"	m	struct:httpclient_parser	access:public
http_parser	JKYi/http/http11_parser.h	/^typedef struct http_parser { $/;"	s
http_parser	JKYi/http/http11_parser.h	/^} http_parser;$/;"	t	typeref:struct:http_parser
http_parser::body_start	JKYi/http/http11_parser.h	/^      size_t body_start;$/;"	m	struct:http_parser	access:public
http_parser::content_len	JKYi/http/http11_parser.h	/^      int content_len;$/;"	m	struct:http_parser	access:public
http_parser::cs	JKYi/http/http11_parser.h	/^      int cs;$/;"	m	struct:http_parser	access:public
http_parser::data	JKYi/http/http11_parser.h	/^      void *data;$/;"	m	struct:http_parser	access:public
http_parser::field_len	JKYi/http/http11_parser.h	/^      size_t field_len;$/;"	m	struct:http_parser	access:public
http_parser::field_start	JKYi/http/http11_parser.h	/^      size_t field_start;$/;"	m	struct:http_parser	access:public
http_parser::fragment	JKYi/http/http11_parser.h	/^      element_cb fragment;$/;"	m	struct:http_parser	access:public
http_parser::header_done	JKYi/http/http11_parser.h	/^      element_cb header_done;$/;"	m	struct:http_parser	access:public
http_parser::http_field	JKYi/http/http11_parser.h	/^      field_cb http_field;$/;"	m	struct:http_parser	access:public
http_parser::http_version	JKYi/http/http11_parser.h	/^      element_cb http_version;$/;"	m	struct:http_parser	access:public
http_parser::json_sent	JKYi/http/http11_parser.h	/^      int json_sent;$/;"	m	struct:http_parser	access:public
http_parser::mark	JKYi/http/http11_parser.h	/^      size_t mark;$/;"	m	struct:http_parser	access:public
http_parser::nread	JKYi/http/http11_parser.h	/^      size_t nread;$/;"	m	struct:http_parser	access:public
http_parser::query_start	JKYi/http/http11_parser.h	/^      size_t query_start;$/;"	m	struct:http_parser	access:public
http_parser::query_string	JKYi/http/http11_parser.h	/^      element_cb query_string;$/;"	m	struct:http_parser	access:public
http_parser::request_method	JKYi/http/http11_parser.h	/^      element_cb request_method;$/;"	m	struct:http_parser	access:public
http_parser::request_path	JKYi/http/http11_parser.h	/^      element_cb request_path;$/;"	m	struct:http_parser	access:public
http_parser::request_uri	JKYi/http/http11_parser.h	/^      element_cb request_uri;$/;"	m	struct:http_parser	access:public
http_parser::uri_relaxed	JKYi/http/http11_parser.h	/^      int uri_relaxed;$/;"	m	struct:http_parser	access:public
http_parser::xml_sent	JKYi/http/http11_parser.h	/^      int xml_sent;$/;"	m	struct:http_parser	access:public
http_parser_en_main	JKYi/http/http11_parser.rl.cc	/^static const int http_parser_en_main = 1;$/;"	v	file:
http_parser_error	JKYi/http/http11_parser.rl.cc	/^static const int http_parser_error = 0;$/;"	v	file:
http_parser_execute	JKYi/http/http11_parser.h	/^size_t http_parser_execute(http_parser *parser, const char *data, size_t len, size_t off);$/;"	p	signature:(http_parser *parser, const char *data, size_t len, size_t off)
http_parser_execute	JKYi/http/http11_parser.rl.cc	/^size_t http_parser_execute(http_parser *parser, const char *buffer, size_t len, size_t off)  $/;"	f	signature:(http_parser *parser, const char *buffer, size_t len, size_t off)
http_parser_finish	JKYi/http/http11_parser.h	/^int http_parser_finish(http_parser *parser);$/;"	p	signature:(http_parser *parser)
http_parser_finish	JKYi/http/http11_parser.rl.cc	/^int http_parser_finish(http_parser *parser)$/;"	f	signature:(http_parser *parser)
http_parser_first_final	JKYi/http/http11_parser.rl.cc	/^static const int http_parser_first_final = 348;$/;"	v	file:
http_parser_has_error	JKYi/http/http11_parser.h	/^int http_parser_has_error(http_parser *parser);$/;"	p	signature:(http_parser *parser)
http_parser_has_error	JKYi/http/http11_parser.rl.cc	/^int http_parser_has_error(http_parser *parser) {$/;"	f	signature:(http_parser *parser)
http_parser_init	JKYi/http/http11_parser.h	/^int http_parser_init(http_parser *parser);$/;"	p	signature:(http_parser *parser)
http_parser_init	JKYi/http/http11_parser.rl.cc	/^int http_parser_init(http_parser *parser) {$/;"	f	signature:(http_parser *parser)
http_parser_is_finished	JKYi/http/http11_parser.h	/^int http_parser_is_finished(http_parser *parser);$/;"	p	signature:(http_parser *parser)
http_parser_is_finished	JKYi/http/http11_parser.rl.cc	/^int http_parser_is_finished(http_parser *parser) {$/;"	f	signature:(http_parser *parser)
http_parser_nread	JKYi/http/http11_parser.h	38;"	d
http_parser_start	JKYi/http/http11_parser.rl.cc	/^static const int http_parser_start = 1;$/;"	v	file:
http_version	JKYi/http/http11_parser.h	/^      element_cb http_version;$/;"	m	struct:http_parser	access:public
http_version	JKYi/http/httpclient_parser.h	/^      element_cb http_version;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser	JKYi/http/httpclient_parser.h	/^typedef struct httpclient_parser { $/;"	s
httpclient_parser	JKYi/http/httpclient_parser.h	/^} httpclient_parser;$/;"	t	typeref:struct:httpclient_parser
httpclient_parser::body_start	JKYi/http/httpclient_parser.h	/^      size_t body_start;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::chunk_size	JKYi/http/httpclient_parser.h	/^      element_cb chunk_size;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::chunked	JKYi/http/httpclient_parser.h	/^      int chunked;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::chunks_done	JKYi/http/httpclient_parser.h	/^      int chunks_done;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::close	JKYi/http/httpclient_parser.h	/^      int close;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::content_len	JKYi/http/httpclient_parser.h	/^      int content_len;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::cs	JKYi/http/httpclient_parser.h	/^      int cs;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::data	JKYi/http/httpclient_parser.h	/^      void *data;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::field_len	JKYi/http/httpclient_parser.h	/^      size_t field_len;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::field_start	JKYi/http/httpclient_parser.h	/^      size_t field_start;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::header_done	JKYi/http/httpclient_parser.h	/^      element_cb header_done;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::http_field	JKYi/http/httpclient_parser.h	/^      field_cb http_field;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::http_version	JKYi/http/httpclient_parser.h	/^      element_cb http_version;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::last_chunk	JKYi/http/httpclient_parser.h	/^      element_cb last_chunk;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::mark	JKYi/http/httpclient_parser.h	/^      size_t mark;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::nread	JKYi/http/httpclient_parser.h	/^      size_t nread;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::reason_phrase	JKYi/http/httpclient_parser.h	/^      element_cb reason_phrase;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::status	JKYi/http/httpclient_parser.h	/^      int status;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser::status_code	JKYi/http/httpclient_parser.h	/^      element_cb status_code;$/;"	m	struct:httpclient_parser	access:public
httpclient_parser_en_main	JKYi/http/httpclient_parser.rl.cc	/^static const int httpclient_parser_en_main = 1;$/;"	v	file:
httpclient_parser_error	JKYi/http/httpclient_parser.rl.cc	/^static const int httpclient_parser_error = 0;$/;"	v	file:
httpclient_parser_execute	JKYi/http/httpclient_parser.h	/^int httpclient_parser_execute(httpclient_parser *parser, const char *data, size_t len, size_t off);$/;"	p	signature:(httpclient_parser *parser, const char *data, size_t len, size_t off)
httpclient_parser_execute	JKYi/http/httpclient_parser.rl.cc	/^int httpclient_parser_execute(httpclient_parser *parser, const char *buffer, size_t len, size_t off)  $/;"	f	signature:(httpclient_parser *parser, const char *buffer, size_t len, size_t off)
httpclient_parser_finish	JKYi/http/httpclient_parser.h	/^int httpclient_parser_finish(httpclient_parser *parser);$/;"	p	signature:(httpclient_parser *parser)
httpclient_parser_finish	JKYi/http/httpclient_parser.rl.cc	/^int httpclient_parser_finish(httpclient_parser *parser)$/;"	f	signature:(httpclient_parser *parser)
httpclient_parser_first_final	JKYi/http/httpclient_parser.rl.cc	/^static const int httpclient_parser_first_final = 120;$/;"	v	file:
httpclient_parser_h	JKYi/http/httpclient_parser.h	36;"	d
httpclient_parser_has_error	JKYi/http/httpclient_parser.h	/^int httpclient_parser_has_error(httpclient_parser *parser);$/;"	p	signature:(httpclient_parser *parser)
httpclient_parser_has_error	JKYi/http/httpclient_parser.rl.cc	/^int httpclient_parser_has_error(httpclient_parser *parser) {$/;"	f	signature:(httpclient_parser *parser)
httpclient_parser_init	JKYi/http/httpclient_parser.h	/^int httpclient_parser_init(httpclient_parser *parser);$/;"	p	signature:(httpclient_parser *parser)
httpclient_parser_init	JKYi/http/httpclient_parser.rl.cc	/^int httpclient_parser_init(httpclient_parser *parser)  {$/;"	f	signature:(httpclient_parser *parser)
httpclient_parser_is_finished	JKYi/http/httpclient_parser.h	/^int httpclient_parser_is_finished(httpclient_parser *parser);$/;"	p	signature:(httpclient_parser *parser)
httpclient_parser_is_finished	JKYi/http/httpclient_parser.rl.cc	/^int httpclient_parser_is_finished(httpclient_parser *parser) {$/;"	f	signature:(httpclient_parser *parser)
httpclient_parser_nread	JKYi/http/httpclient_parser.h	71;"	d
httpclient_parser_start	JKYi/http/httpclient_parser.rl.cc	/^static const int httpclient_parser_start = 1;$/;"	v	file:
huffman_code_len	JKYi/http2/huffman_table.h	/^static int huffman_code_len[256] = {$/;"	m	namespace:JKYi::http2
huffman_codes	JKYi/http2/huffman_table.h	/^static unsigned int huffman_codes[256] = {$/;"	m	namespace:JKYi::http2
id	JKYi/tcp_server.h	/^    std::string id;$/;"	m	struct:JKYi::TcpServerConf	access:public
identifiber	JKYi/http2/frame.h	/^    uint16_t identifiber = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public
identifier	JKYi/http2/frame.h	/^            uint32_t identifier : 31;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon5::__anon6	access:public
idle	JKYi/iomanager.cc	/^void IOManager::idle(){$/;"	f	class:JKYi::IOManager	signature:()
idle	JKYi/scheduler.cc	/^void Scheduler::idle(){$/;"	f	class:JKYi::Scheduler	signature:()
idle	JKYi/scheduler.h	/^   virtual void idle();$/;"	p	class:JKYi::Scheduler	access:protected	signature:()
idleFd_	JKYi/reactor/acceptor.h	/^    int idleFd_;$/;"	m	class:JKYi::net::Acceptor	access:private
implicit_cast	JKYi/Types.h	/^inline To implicit_cast(From const & f){$/;"	f	namespace:JKYi	signature:(From const & f)
increment	JKYi/atomic.h	/^    void increment(){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
increment	JKYi/http2/frame.h	/^            uint32_t increment : 31;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::__anon14::__anon15	access:public
incrementAndGet	JKYi/atomic.h	/^    T incrementAndGet(){$/;"	f	class:JKYi::AtomicIntegerT	access:public	signature:()
index	JKYi/http2/hpack.h	/^    uint32_t index = 0;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
index_	JKYi/reactor/channel.h	/^    int index_;                   \/\/poll ä½ä¸ºåºå±ioå¤ç¨ç³»ç»è°ç¨æ¶ä½¿ç¨$/;"	m	class:JKYi::net::Channel	access:private
info	JKYi/log.cc	/^void Logger::info(LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogEvent::ptr event)
info	JKYi/log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:JKYi::Logger	access:public	signature:(LogEvent::ptr event)
info_arch	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
init	JKYi/application.cc	/^bool Application::init(int argc,char ** argv){$/;"	f	class:JKYi::Application	signature:(int argc,char ** argv)
init	JKYi/application.h	/^    bool init(int argc,char** argv);$/;"	p	class:JKYi::Application	access:public	signature:(int argc,char** argv)
init	JKYi/db/fox_thread.cc	/^void FoxThreadManager::init(){$/;"	f	class:JKYi::FoxThreadManager	signature:()
init	JKYi/db/fox_thread.h	/^    void init();$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:()
init	JKYi/db/redis.cc	/^bool FoxRedis::Ctx::init(){$/;"	f	class:JKYi::FoxRedis::Ctx	signature:()
init	JKYi/db/redis.cc	/^bool FoxRedis::init(){$/;"	f	class:JKYi::FoxRedis	signature:()
init	JKYi/db/redis.cc	/^bool FoxRedisCluster::Ctx::init(){$/;"	f	class:JKYi::FoxRedisCluster::Ctx	signature:()
init	JKYi/db/redis.cc	/^bool FoxRedisCluster::init(){$/;"	f	class:JKYi::FoxRedisCluster	signature:()
init	JKYi/db/redis.cc	/^void RedisManager::init(){$/;"	f	class:JKYi::RedisManager	signature:()
init	JKYi/db/redis.h	/^        bool init();$/;"	p	struct:JKYi::FoxRedis::Ctx	access:public	signature:()
init	JKYi/db/redis.h	/^        bool init();$/;"	p	struct:JKYi::FoxRedisCluster::Ctx	access:public	signature:()
init	JKYi/db/redis.h	/^    bool init();$/;"	p	class:JKYi::FoxRedis	access:public	signature:()
init	JKYi/db/redis.h	/^    bool init();$/;"	p	class:JKYi::FoxRedisCluster	access:public	signature:()
init	JKYi/db/redis.h	/^    void init();$/;"	p	class:JKYi::RedisManager	access:private	signature:()
init	JKYi/env.cc	/^bool Env::init(int argc,char ** argv){$/;"	f	class:JKYi::Env	signature:(int argc,char ** argv)
init	JKYi/env.h	/^     bool init(int argc,char ** argv);$/;"	p	class:JKYi::Env	access:public	signature:(int argc,char ** argv)
init	JKYi/fdmanager.cc	/^bool FdCtx::init(){$/;"	f	class:JKYi::FdCtx	signature:()
init	JKYi/fdmanager.h	/^   bool init();$/;"	p	class:JKYi::FdCtx	access:private	signature:()
init	JKYi/http/http.cc	/^void HttpRequest::init(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
init	JKYi/http/http.h	/^   void init();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
init	JKYi/log.cc	/^void LogFormatter::init(){$/;"	f	class:JKYi::LogFormatter	signature:()
init	JKYi/log.cc	/^void LoggerManager::init(){$/;"	f	class:JKYi::LoggerManager	signature:()
init	JKYi/log.h	/^     void init();$/;"	p	class:JKYi::LoggerManager	access:public	signature:()
init	JKYi/log.h	/^    void init();$/;"	p	class:JKYi::LogFormatter	access:public	signature:()
init	JKYi/module.cc	/^void ModuleManager::init(){$/;"	f	class:JKYi::ModuleManager	signature:()
init	JKYi/module.h	/^    void init();$/;"	p	class:JKYi::ModuleManager	access:public	signature:()
init	JKYi/reactor/Thread.cc	/^ThreadNameInitializer init;$/;"	m	namespace:JKYi::detail	file:
init	JKYi/socket.cc	/^bool SSLSocket::init(int sock){$/;"	f	class:JKYi::SSLSocket	signature:(int sock)
init	JKYi/socket.cc	/^bool Socket::init(int sock){$/;"	f	class:JKYi::Socket	signature:(int sock)
init	JKYi/socket.h	/^    virtual bool init(int sock);$/;"	p	class:JKYi::Socket	access:protected	signature:(int sock)
init	JKYi/worker.cc	/^bool WorkerManager::init(){$/;"	f	class:JKYi::WorkerManager	signature:()
init	JKYi/worker.cc	/^bool WorkerManager::init(const std::unordered_map<std::string,$/;"	f	class:JKYi::WorkerManager	signature:(const std::unordered_map<std::string, std::unordered_map<std::string,std::string>>& v)
init	JKYi/worker.h	/^    bool init();$/;"	p	class:JKYi::WorkerManager	access:public	signature:()
init	JKYi/worker.h	/^    bool init(const std::unordered_map<std::string,std::unordered_map<std::string,std::string> >& v);$/;"	p	class:JKYi::WorkerManager	access:public	signature:(const std::unordered_map<std::string,std::unordered_map<std::string,std::string> >& v)
init	JKYi/zk_client.cc	/^bool ZKClient::init(const std::string& hosts,int recv_timeout,watcher_callback cb$/;"	f	class:JKYi::ZKClient	signature:(const std::string& hosts,int recv_timeout,watcher_callback cb )
init	JKYi/zk_client.h	/^    bool init(const std::string& hosts,int recv_timeout,watcher_callback cb);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& hosts,int recv_timeout,watcher_callback cb)
initBodyParam	JKYi/http/http.cc	/^void HttpRequest::initBodyParam(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
initBodyParam	JKYi/http/http.h	/^   void initBodyParam();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
initCookies	JKYi/http/http.cc	/^void HttpRequest::initCookies(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
initCookies	JKYi/http/http.h	/^   void initCookies();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
initModule	JKYi/module.cc	/^void ModuleManager::initModule(const std::string& path){$/;"	f	class:JKYi::ModuleManager	signature:(const std::string& path)
initModule	JKYi/module.h	/^    void initModule(const std::string& path);$/;"	p	class:JKYi::ModuleManager	access:private	signature:(const std::string& path)
initObj	JKYi/reactor/EventLoop.cc	/^IgnoreSigPipe initObj;$/;"	m	namespace:__anon20	file:
initParam	JKYi/http/http.cc	/^void HttpRequest::initParam(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
initParam	JKYi/http/http.h	/^   void initParam();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
initQueryParam	JKYi/http/http.cc	/^void HttpRequest::initQueryParam(){$/;"	f	class:JKYi::http::HttpRequest	signature:()
initQueryParam	JKYi/http/http.h	/^   void initQueryParam();$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:()
initSock	JKYi/socket.cc	/^void Socket::initSock(){$/;"	f	class:JKYi::Socket	signature:()
initSock	JKYi/socket.h	/^    void initSock();$/;"	p	class:JKYi::Socket	access:protected	signature:()
init_cb	JKYi/db/fox_thread.h	/^    typedef std::function<void (FoxThread*)> init_cb;$/;"	t	class:JKYi::FoxThread	access:public
inputBuffer	JKYi/reactor/TcpConnection.h	/^    Buffer* inputBuffer(){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:()
inputBuffer_	JKYi/reactor/TcpConnection.h	/^    Buffer inputBuffer_;$/;"	m	class:JKYi::net::TcpConnection	access:private
insert	JKYi/address.cc	/^std::ostream& IPv4Address::insert(std::ostream &os)const {$/;"	f	class:JKYi::IPv4Address	signature:(std::ostream &os) const
insert	JKYi/address.cc	/^std::ostream& IPv6Address::insert(std::ostream&os)const{$/;"	f	class:JKYi::IPv6Address	signature:(std::ostream&os) const
insert	JKYi/address.cc	/^std::ostream& UnixAddress::insert(std::ostream&os)const {$/;"	f	class:JKYi::UnixAddress	signature:(std::ostream&os) const
insert	JKYi/address.cc	/^std::ostream& UnknowAddress::insert(std::ostream&os)const{$/;"	f	class:JKYi::UnknowAddress	signature:(std::ostream&os) const
insert	JKYi/address.h	/^	virtual std::ostream& insert(std::ostream& os)const =0;$/;"	p	class:JKYi::Address	access:public	signature:(std::ostream& os) const
insert	JKYi/reactor/timerQueue.cc	/^bool TimerQueue::insert(Timer* timer){$/;"	f	class:TimerQueue	signature:(Timer* timer)
insert	JKYi/reactor/timerQueue.h	/^    bool insert(Timer* timer);$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:(Timer* timer)
internalCapacity	JKYi/reactor/Buffer.h	/^    size_t internalCapacity()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
interval_	JKYi/reactor/timer.h	/^    const double interval_;         \/\/è§¦åçæ¶é´é´é$/;"	m	class:JKYi::net::Timer	access:private
invalid	JKYi/timestamp.h	/^    static Timestamp invalid(){ return Timestamp(); }$/;"	f	class:JKYi::net::Timestamp	access:public	signature:()
io_worker	JKYi/tcp_server.h	/^    std::string io_worker;$/;"	m	struct:JKYi::TcpServerConf	access:public
ioctl	JKYi/hook.cc	/^int ioctl(int fd,unsigned long int request,...){$/;"	f	signature:(int fd,unsigned long int request,...)
ioctl_fun	JKYi/hook.h	/^typedef int (*ioctl_fun)(int d, unsigned long int request, ...);$/;"	t
ipPort	JKYi/reactor/TcpServer.h	/^    const std::string& ipPort()const { return ipPort_; }$/;"	f	class:JKYi::net::TcpServer	access:public	signature:() const
ipPort_	JKYi/reactor/TcpServer.h	/^    const std::string ipPort_;$/;"	m	class:JKYi::net::TcpServer	access:private
isAutoCommit	JKYi/db/mysql.h	/^   bool isAutoCommit()const { return m_autoCommit; };$/;"	f	class:JKYi::MySQLTransaction	access:public	signature:() const
isClose	JKYi/fdmanager.h	/^   bool isClose()const {return m_isClosed;}$/;"	f	class:JKYi::FdCtx	access:public	signature:() const
isClose	JKYi/http/http.h	/^    bool isClose()const { return m_close; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
isClose	JKYi/http/http.h	/^   bool isClose()const { return m_close; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
isConnected	JKYi/socket.h	/^    bool isConnected()const { return m_isConnected; }$/;"	f	class:JKYi::Socket	access:public	signature:() const
isConnected	JKYi/stream/socket_stream.cc	/^bool SocketStream::isConnected()const{$/;"	f	class:JKYi::SocketStream	signature:() const
isConnected	JKYi/stream/socket_stream.h	/^     bool isConnected()const;$/;"	p	class:JKYi::SocketStream	access:public	signature:() const
isDefaultPort	JKYi/uri.h	/^    bool isDefaultPort()const;$/;"	p	class:JKYi::Uri	access:private	signature:() const
isDefaultPort	JKYi/uri.rl.cc	/^bool Uri::isDefaultPort() const {$/;"	f	class:JKYi::Uri	signature:() const
isError	JKYi/db/mysql.h	/^   bool isError()const { return m_hasError; }$/;"	f	class:JKYi::MySQLTransaction	access:public	signature:() const
isError	JKYi/log.h	/^    bool isError()const{return m_error;}$/;"	f	class:JKYi::LogFormatter	access:public	signature:() const
isFinished	JKYi/db/mysql.h	/^   bool isFinished()const { return m_isFinished; }$/;"	f	class:JKYi::MySQLTransaction	access:public	signature:() const
isFinished	JKYi/http/http_parser.cc	/^int HttpRequestParser::isFinished(){$/;"	f	class:JKYi::http::HttpRequestParser	signature:()
isFinished	JKYi/http/http_parser.cc	/^int HttpResponseParser::isFinished(){$/;"	f	class:JKYi::http::HttpResponseParser	signature:()
isFinished	JKYi/http/http_parser.h	/^    int isFinished();$/;"	p	class:JKYi::http::HttpRequestParser	access:public	signature:()
isFinished	JKYi/http/http_parser.h	/^    int isFinished();$/;"	p	class:JKYi::http::HttpResponseParser	access:public	signature:()
isHttps	JKYi/tcp_server.h	/^    bool isHttps()const { return m_ssl == true; }$/;"	f	class:JKYi::TcpServer	access:public	signature:() const
isInLoopThread	JKYi/reactor/EventLoop.h	/^    bool isInLoopThread()const { return threadId_ == CurrentThread::tid(); }$/;"	f	class:JKYi::net::EventLoop	access:public	signature:() const
isInit	JKYi/fdmanager.h	/^   bool isInit()const {return m_isInit;}$/;"	f	class:JKYi::FdCtx	access:public	signature:() const
isLittleEndian	JKYi/bytearray.cc	/^bool ByteArray::isLittleEndian()const{$/;"	f	class:JKYi::ByteArray	signature:() const
isLittleEndian	JKYi/bytearray.h	/^    bool isLittleEndian()const;$/;"	p	class:JKYi::ByteArray	access:public	signature:() const
isMainThread	JKYi/reactor/CurrentThread.h	/^bool isMainThread();$/;"	p	namespace:JKYi::CurrentThread	signature:()
isMainThread	JKYi/reactor/Thread.cc	/^bool isMainThread(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
isNeedCheck	JKYi/db/mysql.cc	/^bool MySQL::isNeedCheck(){$/;"	f	class:JKYi::MySQL	signature:()
isNeedCheck	JKYi/db/mysql.h	/^    bool isNeedCheck();$/;"	p	class:JKYi::MySQL	access:private	signature:()
isNoneEvent	JKYi/reactor/channel.h	/^    bool isNoneEvent()const{ return events_ == kNoneEvent; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
isNull	JKYi/db/db.h	/^    virtual bool isNull(int idx) = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:(int idx)
isNull	JKYi/db/mysql.cc	/^bool MySQLRes::isNull(int idx){$/;"	f	class:JKYi::MySQLRes	signature:(int idx)
isNull	JKYi/db/mysql.cc	/^bool MySQLStmtRes::isNull(int idx){$/;"	f	class:JKYi::MySQLStmtRes	signature:(int idx)
isReading	JKYi/reactor/TcpConnection.h	/^    bool isReading()const{$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
isReading	JKYi/reactor/channel.h	/^    bool isReading()const { return events_ & kReadEvent; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
isRepeat	JKYi/reactor/timer.h	/^     bool isRepeat()const { return repeat_; }$/;"	f	class:JKYi::net::Timer	access:public	signature:() const
isSelfConnect	JKYi/reactor/SocketsOps.cc	/^bool sockets::isSelfConnect(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
isSelfConnect	JKYi/reactor/SocketsOps.h	/^bool isSelfConnect(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
isSocket	JKYi/fdmanager.h	/^   bool isSocket()const{return m_isSocket;}$/;"	f	class:JKYi::FdCtx	access:public	signature:() const
isStart	JKYi/db/fox_thread.h	/^    bool isStart()const { return m_start; }$/;"	f	class:JKYi::FoxThread	access:public	signature:() const
isStop	JKYi/tcp_server.h	/^    bool isStop()const { return m_isStop; }$/;"	f	class:JKYi::TcpServer	access:public	signature:() const
isStop	JKYi/worker.h	/^    bool isStop()const { return m_stop; }$/;"	f	class:JKYi::WorkerManager	access:public	signature:() const
isValid	JKYi/socket.h	/^    bool isValid()const  { return m_sock != -1; }$/;"	f	class:JKYi::Socket	access:public	signature:() const
isValid	JKYi/tcp_server.h	/^    bool isValid()const{$/;"	f	struct:JKYi::TcpServerConf	access:public	signature:() const
isWebSocket	JKYi/http/http.h	/^    bool isWebSocket()const { return m_websocket; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:() const
isWriting	JKYi/reactor/channel.h	/^    bool isWriting()const { return events_ & kWriteEvent; }$/;"	f	class:JKYi::net::Channel	access:public	signature:() const
is_POD_type	JKYi/reactor/StringPiece.h	/^  typedef __true_type    is_POD_type;$/;"	t	struct:__type_traits	access:public
is_hook_enable	JKYi/hook.cc	/^bool is_hook_enable(){$/;"	f	namespace:JKYi	signature:()
is_hook_enable	JKYi/hook.h	/^bool is_hook_enable();$/;"	p	namespace:JKYi	signature:()
is_null	JKYi/db/mysql.h	/^        my_bool is_null;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
iswebsocket	JKYi/http/http.h	/^   bool iswebsocket()const { return m_websocket; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:() const
items	JKYi/http2/frame.h	/^    std::vector<SettingsItem> items;$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
iteration	JKYi/reactor/EventLoop.h	/^    int64_t iteration()const { return iteration_; }$/;"	f	class:JKYi::net::EventLoop	access:public	signature:() const
iteration_	JKYi/reactor/EventLoop.h	/^    int64_t iteration_;                  \/\/pollçæ¬¡æ°$/;"	m	class:JKYi::net::EventLoop	access:private
join	JKYi/db/fox_thread.cc	/^void FoxThread::join(){$/;"	f	class:JKYi::FoxThread	signature:()
join	JKYi/db/fox_thread.cc	/^void FoxThreadPool::join(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
join	JKYi/db/fox_thread.h	/^    virtual void join() = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:()
join	JKYi/reactor/Thread.cc	/^int Thread::join(){$/;"	f	class:JKYi::net::Thread	signature:()
join	JKYi/reactor/Thread.h	/^    int join();$/;"	p	class:JKYi::net::Thread	access:public	signature:()
join	JKYi/thread.cc	/^void Thread::join(){$/;"	f	class:JKYi::Thread	signature:()
join	JKYi/thread.h	/^   void join();$/;"	p	class:JKYi::Thread	access:public	signature:()
joined_	JKYi/reactor/Thread.h	/^    bool joined_;$/;"	m	class:JKYi::net::Thread	access:private
json_sent	JKYi/http/http11_parser.h	/^      int json_sent;$/;"	m	struct:http_parser	access:public
kAdded	JKYi/reactor/poller/epollPoller.cc	/^    const int kAdded = 1;     \/\/å·²æ·»å $/;"	m	namespace:JKYi::net::__anon18	file:
kCRLF	JKYi/reactor/Buffer.cc	/^const char Buffer::kCRLF[] = "\\r\\n";$/;"	m	class:JKYi::net::Buffer	file:
kCRLF	JKYi/reactor/Buffer.h	/^    static const char kCRLF[];      \/\/å­å¨æ¢è¡æ å¿$/;"	m	class:JKYi::net::Buffer	access:private
kCheapPrepend	JKYi/reactor/Buffer.cc	/^const size_t Buffer::kCheapPrepend;$/;"	m	class:JKYi::net::Buffer	file:
kCheapPrepend	JKYi/reactor/Buffer.h	/^    static const size_t kCheapPrepend = 8;           \/\/bufferä¸­é¢ççå¤´é¨çå¤§å°$/;"	m	class:JKYi::net::Buffer	access:public
kConnected	JKYi/reactor/Connector.h	/^        kConnected$/;"	e	enum:JKYi::net::Connector::State
kConnected	JKYi/reactor/TcpConnection.h	/^        kConnected,$/;"	e	enum:JKYi::net::TcpConnection::StateE
kConnecting	JKYi/reactor/Connector.h	/^        kConnecting,$/;"	e	enum:JKYi::net::Connector::State
kConnecting	JKYi/reactor/TcpConnection.h	/^        kConnecting,$/;"	e	enum:JKYi::net::TcpConnection::StateE
kDeleted	JKYi/reactor/poller/epollPoller.cc	/^    const int kDeleted = 2;   \/\/mapä¸­å­å¨è¯¥channelï¼ä½æ¯å¯¹åºçfdå·²ç»epoll_ctl_del$/;"	m	namespace:JKYi::net::__anon18	file:
kDisconnected	JKYi/reactor/Connector.h	/^        kDisconnected,$/;"	e	enum:JKYi::net::Connector::State
kDisconnected	JKYi/reactor/TcpConnection.h	/^        kDisconnected,$/;"	e	enum:JKYi::net::TcpConnection::StateE
kDisconnecting	JKYi/reactor/TcpConnection.h	/^        kDisconnecting$/;"	e	enum:JKYi::net::TcpConnection::StateE
kInitEventListSize	JKYi/reactor/poller/epollPoller.h	/^    static const int kInitEventListSize = 16;$/;"	m	class:JKYi::net::EpollPoller	access:private
kInitRetryDelayMs	JKYi/reactor/Connector.h	/^    static const int kInitRetryDelayMs = 500;$/;"	m	class:JKYi::net::Connector	access:private
kInitialSize	JKYi/reactor/Buffer.cc	/^const size_t Buffer::kInitialSize;$/;"	m	class:JKYi::net::Buffer	file:
kInitialSize	JKYi/reactor/Buffer.h	/^    static const size_t kInitialSize = 1024;         \/\/bufferé»è®¤çå¤§å°$/;"	m	class:JKYi::net::Buffer	access:public
kMaxConnections_	JKYi/reactor/examples/maxconnection/echo.h	/^   const int kMaxConnections_;   \/\/æå¤§è¿æ¥æ°$/;"	m	class:EchoServer	access:private
kMaxRetryDelayMs	JKYi/reactor/Connector.cc	/^const int Connector::kMaxRetryDelayMs;$/;"	m	class:JKYi::net::Connector	file:
kMaxRetryDelayMs	JKYi/reactor/Connector.h	/^    static const int kMaxRetryDelayMs = 30 * 1000;     $/;"	m	class:JKYi::net::Connector	access:private
kMicroSecondsPerSecond	JKYi/timestamp.h	/^    static const int kMicroSecondsPerSecond = 1000 * 1000;$/;"	m	class:JKYi::net::Timestamp	access:public
kNew	JKYi/reactor/poller/epollPoller.cc	/^    const int kNew  = -1;     \/\/æªæ·»å $/;"	m	namespace:JKYi::net::__anon18	file:
kNoReusePort	JKYi/reactor/TcpServer.h	/^        kNoReusePort,$/;"	e	enum:JKYi::net::TcpServer::Option
kNoneEvent	JKYi/reactor/channel.cc	/^const int Channel::kNoneEvent = 0;$/;"	m	class:JKYi::net::Channel	file:
kNoneEvent	JKYi/reactor/channel.h	/^    static const int kNoneEvent;$/;"	m	class:JKYi::net::Channel	access:private
kPollTimeMs	JKYi/reactor/EventLoop.cc	/^const int kPollTimeMs = 10000;$/;"	m	namespace:__anon20	file:
kReadEvent	JKYi/reactor/channel.cc	/^const int Channel::kReadEvent = POLLIN | POLLPRI;$/;"	m	class:JKYi::net::Channel	file:
kReadEvent	JKYi/reactor/channel.h	/^    static const int kReadEvent;$/;"	m	class:JKYi::net::Channel	access:private
kReusePort	JKYi/reactor/TcpServer.h	/^        kReusePort$/;"	e	enum:JKYi::net::TcpServer::Option
kWriteEvent	JKYi/reactor/channel.cc	/^const int Channel::kWriteEvent = POLLOUT;$/;"	m	class:JKYi::net::Channel	file:
kWriteEvent	JKYi/reactor/channel.h	/^    static const int kWriteEvent;$/;"	m	class:JKYi::net::Channel	access:private
keepalive	JKYi/tcp_server.h	/^    int keepalive = 0;$/;"	m	struct:JKYi::TcpServerConf	access:public
key_file	JKYi/tcp_server.h	/^    std::string key_file;$/;"	m	struct:JKYi::TcpServerConf	access:public
kvs	JKYi/http2/frame.h	/^    std::vector<std::pair<std::string,std::string>> kvs;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
last_chunk	JKYi/http/httpclient_parser.h	/^      element_cb last_chunk;$/;"	m	struct:httpclient_parser	access:public
last_stream_id	JKYi/http2/frame.h	/^            uint32_t last_stream_id : 31;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::__anon12::__anon13	access:public
latch_	JKYi/reactor/Thread.cc	/^    CountDownLatch* latch_;$/;"	m	struct:JKYi::detail::ThreadData	file:	access:public
latch_	JKYi/reactor/Thread.h	/^    CountDownLatch latch_;          \/\/ç¨æ¥è®©ä¸»çº¿ç¨ç­å¾å­çº¿ç¨å¾å°èªå·±çtidä¹åå¨å¾ä¸æ§è¡$/;"	m	class:JKYi::net::Thread	access:private
len	JKYi/http2/hpack.h	/^            uint8_t len : 7;$/;"	m	struct:JKYi::http2::IndexType::StringHeader::__anon16::__anon17	access:public
len_type	JKYi/http2/frame.h	/^        uint32_t len_type = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon3	access:public
length	JKYi/db/mysql.h	/^        unsigned long length;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
length	JKYi/http2/frame.h	/^            uint32_t length : 24;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon3::__anon4	access:public
length_	JKYi/reactor/StringPiece.h	/^  int           length_;$/;"	m	class:JKYi::net::StringPiece	access:private
level	JKYi/log.cc	/^    LogLevel::Level level=LogLevel::UNKNOW;$/;"	m	struct:JKYi::LogAppenderDefine	file:	access:public
level	JKYi/log.cc	/^   LogLevel::Level level=LogLevel::UNKNOW;$/;"	m	struct:JKYi::LogDefine	file:	access:public
listAll	JKYi/module.cc	/^void ModuleManager::listAll(std::vector<Module::ptr>& ms){$/;"	f	class:JKYi::ModuleManager	signature:(std::vector<Module::ptr>& ms)
listAll	JKYi/module.h	/^    void listAll(std::vector<Module::ptr>& ms);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(std::vector<Module::ptr>& ms)
listAllServer	JKYi/application.cc	/^void Application::listAllServer(std::map<std::string,std::vector<TcpServer::ptr>>&servers){$/;"	f	class:JKYi::Application	signature:(std::map<std::string,std::vector<TcpServer::ptr>>&servers)
listAllServer	JKYi/application.h	/^    void listAllServer(std::map<std::string,$/;"	p	class:JKYi::Application	access:public	signature:(std::map<std::string, std::vector<TcpServer::ptr>> &servers)
listByType	JKYi/module.cc	/^void ModuleManager::listByType(uint32_t type,std::vector<Module::ptr>& ms){$/;"	f	class:JKYi::ModuleManager	signature:(uint32_t type,std::vector<Module::ptr>& ms)
listByType	JKYi/module.h	/^    void listByType(uint32_t type,std::vector<Module::ptr>& ms);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(uint32_t type,std::vector<Module::ptr>& ms)
listExpiredCb	JKYi/timer.cc	/^void TimerManager::listExpiredCb(std::vector<std::function<void ()>>&cbs){$/;"	f	class:JKYi::TimerManager	signature:(std::vector<std::function<void ()>>&cbs)
listExpiredCb	JKYi/timer.h	/^   void listExpiredCb(std::vector<std::function<void ()>>&cbs);$/;"	p	class:JKYi::TimerManager	access:public	signature:(std::vector<std::function<void ()>>&cbs)
listen	JKYi/reactor/Socket.cc	/^void Socket::listen(){$/;"	f	class:JKYi::net::Socket	signature:()
listen	JKYi/reactor/Socket.h	/^    void listen();$/;"	p	class:JKYi::net::Socket	access:public	signature:()
listen	JKYi/reactor/acceptor.cc	/^void Acceptor::listen(){$/;"	f	class:JKYi::net::Acceptor	signature:()
listen	JKYi/reactor/acceptor.h	/^    void listen();$/;"	p	class:JKYi::net::Acceptor	access:public	signature:()
listen	JKYi/socket.cc	/^bool SSLSocket::listen(int backlog){$/;"	f	class:JKYi::SSLSocket	signature:(int backlog)
listen	JKYi/socket.cc	/^bool Socket::listen(int backlog){$/;"	f	class:JKYi::Socket	signature:(int backlog)
listen	JKYi/socket.h	/^    virtual bool listen(int backlog = SOMAXCONN);$/;"	p	class:JKYi::Socket	access:public	signature:(int backlog = SOMAXCONN)
listenOrDie	JKYi/reactor/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
listenOrDie	JKYi/reactor/SocketsOps.h	/^void listenOrDie(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
listening	JKYi/reactor/acceptor.h	/^    bool listening()const { return listening_; }$/;"	f	class:JKYi::net::Acceptor	access:public	signature:() const
listening_	JKYi/reactor/acceptor.h	/^    bool listening_;$/;"	m	class:JKYi::net::Acceptor	access:private
loadCertificates	JKYi/socket.cc	/^bool SSLSocket::loadCertificates(const std::string& cert_file,$/;"	f	class:JKYi::SSLSocket	signature:(const std::string& cert_file, const std::string& key_file)
loadCertificates	JKYi/socket.h	/^    bool loadCertificates(const std::string& cert_file,const std::string& key_file);$/;"	p	class:JKYi::SSLSocket	access:public	signature:(const std::string& cert_file,const std::string& key_file)
loadCertificates	JKYi/tcp_server.cc	/^bool TcpServer::loadCertificates(const std::string& cert_file,const std::string& key_file){$/;"	f	class:JKYi::TcpServer	signature:(const std::string& cert_file,const std::string& key_file)
loadCertificates	JKYi/tcp_server.h	/^    bool loadCertificates(const std::string& cert_file,const std::string& key_file);$/;"	p	class:JKYi::TcpServer	access:public	signature:(const std::string& cert_file,const std::string& key_file)
localAddr_	JKYi/reactor/TcpConnection.h	/^    const Address::ptr localAddr_;$/;"	m	class:JKYi::net::TcpConnection	access:private
localAddress	JKYi/reactor/TcpConnection.h	/^    const Address::ptr& localAddress()const{ return localAddr_; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
lock	JKYi/mutex.h	/^   void lock(){$/;"	f	class:JKYi::CASLock	access:public	signature:()
lock	JKYi/mutex.h	/^   void lock(){$/;"	f	class:JKYi::Mutex	access:public	signature:()
lock	JKYi/mutex.h	/^   void lock(){$/;"	f	class:JKYi::SpinLock	access:public	signature:()
lock	JKYi/mutex.h	/^  void lock(){$/;"	f	class:JKYi::ReadScopedLockImpl	access:public	signature:()
lock	JKYi/mutex.h	/^  void lock(){$/;"	f	class:JKYi::ScopedLockImpl	access:public	signature:()
lock	JKYi/mutex.h	/^  void lock(){$/;"	f	class:JKYi::WriteScopedLockImpl	access:public	signature:()
log	JKYi/log.cc	/^void FileLogAppender::log(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event){$/;"	f	class:JKYi::FileLogAppender	signature:(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event)
log	JKYi/log.cc	/^void Logger::log(LogLevel::Level level,LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogLevel::Level level,LogEvent::ptr event)
log	JKYi/log.cc	/^void StdoutLogAppender::log(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event){$/;"	f	class:JKYi::StdoutLogAppender	signature:(std::shared_ptr<Logger>logger,LogLevel::Level level,LogEvent::ptr event)
log	JKYi/log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event) = 0;$/;"	p	class:JKYi::LogAppender	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)
log	JKYi/log.h	/^    void log(LogLevel::Level level,LogEvent::ptr event);$/;"	p	class:JKYi::Logger	access:public	signature:(LogLevel::Level level,LogEvent::ptr event)
loop	JKYi/reactor/EventLoop.cc	/^void EventLoop::loop(){$/;"	f	class:JKYi::net::EventLoop	signature:()
loop	JKYi/reactor/EventLoop.h	/^    void loop();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
loop_	JKYi/reactor/Connector.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::Connector	access:private
loop_	JKYi/reactor/EventLoopThread.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
loop_	JKYi/reactor/TcpClient.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::TcpClient	access:private
loop_	JKYi/reactor/TcpConnection.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::TcpConnection	access:private
loop_	JKYi/reactor/TcpServer.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::TcpServer	access:private
loop_	JKYi/reactor/acceptor.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::Acceptor	access:private
loop_	JKYi/reactor/channel.h	/^    EventLoop* loop_;             \/\/å±äºé£ä¸ä¸ªeventloop$/;"	m	class:JKYi::net::Channel	access:private
loop_	JKYi/reactor/timerQueue.h	/^    EventLoop* loop_;$/;"	m	class:JKYi::net::TimerQueue	access:private
looping_	JKYi/reactor/EventLoop.h	/^    bool looping_;$/;"	m	class:JKYi::net::EventLoop	access:private
loops_	JKYi/reactor/EventLoopThreadPool.h	/^    std::vector<EventLoop*> loops_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
m_acceptWorker	JKYi/tcp_server.h	/^    IOManager * m_acceptWorker;$/;"	m	class:JKYi::TcpServer	access:protected
m_activeThreadCount	JKYi/scheduler.h	/^   std::atomic<size_t> m_activeThreadCount={0};$/;"	m	class:JKYi::Scheduler	access:protected
m_addr	JKYi/address.h	/^	sockaddr m_addr;$/;"	m	class:JKYi::UnknowAddress	access:private
m_addr	JKYi/address.h	/^	sockaddr_in m_addr;$/;"	m	class:JKYi::IPv4Address	access:private
m_addr	JKYi/address.h	/^	sockaddr_in6 m_addr;$/;"	m	class:JKYi::IPv6Address	access:private
m_addr	JKYi/address.h	/^	sockaddr_un m_addr;$/;"	m	class:JKYi::UnixAddress	access:private
m_advance	JKYi/db/fox_thread.h	/^    bool m_advance;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_age	tests/test_config.cc	/^    int m_age;$/;"	m	class:Person	file:	access:public
m_appenders	JKYi/log.h	/^    std::list<LogAppender::ptr>m_appenders;\/\/Appenderéå$/;"	m	class:JKYi::Logger	access:private
m_argc	JKYi/application.h	/^    int m_argc = 0;$/;"	m	class:JKYi::Application	access:private
m_args	JKYi/env.h	/^    std::map<std::string,std::string> m_args;$/;"	m	class:JKYi::Env	access:private
m_argv	JKYi/application.h	/^    char ** m_argv = nullptr;$/;"	m	class:JKYi::Application	access:private
m_autoCommit	JKYi/db/mysql.h	/^   bool m_autoCommit;$/;"	m	class:JKYi::MySQLTransaction	access:private
m_autoStop	JKYi/scheduler.h	/^   bool m_autoStop=false;$/;"	m	class:JKYi::Scheduler	access:protected
m_base	JKYi/db/fox_thread.h	/^    struct event_base* m_base;$/;"	m	class:JKYi::FoxThread	typeref:struct:JKYi::FoxThread::event_base	access:private
m_baseSize	JKYi/bytearray.h	/^    size_t m_baseSize;$/;"	m	class:JKYi::ByteArray	access:private
m_binds	JKYi/db/mysql.h	/^    std::vector<MYSQL_BIND> m_binds;$/;"	m	class:JKYi::MySQLStmt	access:private
m_binds	JKYi/db/mysql.h	/^    std::vector<MYSQL_BIND> m_binds;$/;"	m	class:JKYi::MySQLStmtRes	access:private
m_body	JKYi/http/http.h	/^    std::string m_body;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_body	JKYi/http/http.h	/^    std::string m_body;$/;"	m	class:JKYi::http::HttpResponse	access:private
m_callback	JKYi/http/ws_servlet.h	/^    callback m_callback;$/;"	m	class:JKYi::http::FunctionWSServlet	access:protected
m_callbacks	JKYi/db/fox_thread.h	/^    std::list<callback> m_callbacks;$/;"	m	class:JKYi::FoxThread	access:private
m_callbacks	JKYi/db/fox_thread.h	/^    std::list<callback> m_callbacks;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_capacity	JKYi/bytearray.h	/^    size_t m_capacity;$/;"	m	class:JKYi::ByteArray	access:private
m_cb	JKYi/fiber.h	/^   std::function<void ()>m_cb;$/;"	m	class:JKYi::Fiber	access:private
m_cb	JKYi/http/servlet.h	/^    callback m_cb;$/;"	m	class:JKYi::http::FunctionServlet	access:private
m_cb	JKYi/thread.h	/^   std::function<void()>m_cb;$/;"	m	class:JKYi::Thread	access:private
m_cb	JKYi/timer.h	/^   std::function<void()>m_cb;$/;"	m	class:JKYi::Timer	access:private
m_cbs	JKYi/config.h	/^   std::unordered_map<uint64_t,on_change_cb>m_cbs;$/;"	m	class:JKYi::ConfigVar	access:private
m_close	JKYi/http/http.h	/^    bool m_close;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_close	JKYi/http/http.h	/^    bool m_close;$/;"	m	class:JKYi::http::HttpResponse	access:private
m_cmd	JKYi/db/mysql.h	/^    std::string m_cmd;$/;"	m	class:JKYi::MySQL	access:private
m_cmd	JKYi/protocol.h	/^    uint32_t m_cmd;$/;"	m	class:JKYi::Request	access:protected
m_cmd	JKYi/protocol.h	/^    uint32_t m_cmd;$/;"	m	class:JKYi::Response	access:protected
m_cmdTimeout	JKYi/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:JKYi::FoxRedis	typeref:struct:JKYi::FoxRedis::timeval	access:private
m_cmdTimeout	JKYi/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:JKYi::FoxRedisCluster	typeref:struct:JKYi::FoxRedisCluster::timeval	access:private
m_cmdTimeout	JKYi/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:JKYi::Redis	typeref:struct:JKYi::Redis::timeval	access:private
m_cmdTimeout	JKYi/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:JKYi::RedisCluster	typeref:struct:JKYi::RedisCluster::timeval	access:private
m_concurrency	JKYi/mutex.h	/^    size_t m_concurrency;$/;"	m	class:JKYi::FiberSemaphore	access:private
m_conf	JKYi/tcp_server.h	/^    TcpServerConf::ptr m_conf;$/;"	m	class:JKYi::TcpServer	access:protected
m_config	JKYi/db/redis.h	/^    std::map<std::string,std::map<std::string,std::string>> m_config;$/;"	m	class:JKYi::RedisManager	access:private
m_connectMs	JKYi/db/redis.h	/^    uint32_t m_connectMs;$/;"	m	class:JKYi::Redis	access:private
m_connectMs	JKYi/db/redis.h	/^    uint32_t m_connectMs;$/;"	m	class:JKYi::RedisCluster	access:private
m_conns	JKYi/db/mysql.h	/^    std::map<std::string,std::list<MySQL*>> m_conns;$/;"	m	class:JKYi::MySQLManager	access:private
m_conns	JKYi/http/http_connection.h	/^    std::list<HttpConnection*> m_conns;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
m_content	JKYi/http/servlet.h	/^    std::string m_content;$/;"	m	class:JKYi::http::NotFoundServlet	access:private
m_context	JKYi/db/redis.h	/^    std::shared_ptr<redisAsyncContext> m_context;$/;"	m	class:JKYi::FoxRedis	access:private
m_context	JKYi/db/redis.h	/^    std::shared_ptr<redisClusterAsyncContext> m_context;$/;"	m	class:JKYi::FoxRedisCluster	access:private
m_context	JKYi/db/redis.h	/^    std::shared_ptr<redisClusterContext> m_context;$/;"	m	class:JKYi::RedisCluster	access:private
m_context	JKYi/db/redis.h	/^    std::shared_ptr<redisContext> m_context;$/;"	m	class:JKYi::Redis	access:private
m_cookies	JKYi/http/http.h	/^    MapType m_cookies;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_cookies	JKYi/http/http.h	/^    std::vector<std::string>m_cookies;$/;"	m	class:JKYi::http::HttpResponse	access:private
m_createTime	JKYi/http/http_connection.h	/^    uint64_t m_createTime ;$/;"	m	class:JKYi::http::HttpConnection	access:private
m_ctx	JKYi/fiber.h	/^   ucontext_t m_ctx;$/;"	m	class:JKYi::Fiber	access:private
m_ctx	JKYi/socket.h	/^    std::shared_ptr<SSL_CTX> m_ctx;$/;"	m	class:JKYi::SSLSocket	access:private
m_ctxCount	JKYi/db/redis.h	/^    int m_ctxCount;$/;"	m	class:JKYi::FoxRedis	access:private
m_ctxCount	JKYi/db/redis.h	/^    int m_ctxCount;$/;"	m	class:JKYi::FoxRedisCluster	access:private
m_cur	JKYi/bytearray.h	/^    Node * m_cur;$/;"	m	class:JKYi::ByteArray	access:private
m_cur	JKYi/db/fox_thread.h	/^    uint32_t m_cur;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_cur	JKYi/db/mysql.h	/^    MYSQL_ROW m_cur;$/;"	m	class:JKYi::MySQLRes	access:private
m_curLength	JKYi/db/mysql.h	/^    unsigned long * m_curLength;$/;"	m	class:JKYi::MySQLRes	access:private
m_cwd	JKYi/env.h	/^    std::string m_cwd;$/;"	m	class:JKYi::Env	access:private
m_data	JKYi/db/mysql.h	/^    std::shared_ptr<MYSQL_RES> m_data;$/;"	m	class:JKYi::MySQLRes	access:private
m_data	JKYi/http/http_parser.h	/^    HttpRequest::ptr m_data;$/;"	m	class:JKYi::http::HttpRequestParser	access:private
m_data	JKYi/http/http_parser.h	/^    HttpResponse::ptr  m_data;$/;"	m	class:JKYi::http::HttpResponseParser	access:private
m_data	JKYi/http/ws_session.h	/^    std::string m_data;$/;"	m	class:JKYi::http::WSFrameMessage	access:private
m_dataSize	JKYi/http2/dynamic_table.h	/^    int32_t m_dataSize;$/;"	m	class:JKYi::http2::DynamicTable	access:private
m_datas	JKYi/db/fox_thread.h	/^    std::map<std::string,void *> m_datas;$/;"	m	class:JKYi::FoxThread	access:private
m_datas	JKYi/db/mysql.h	/^    std::vector<Data> m_datas;$/;"	m	class:JKYi::MySQLStmtRes	access:private
m_datas	JKYi/db/redis.h	/^    std::map<std::string,std::list<IRedis*>> m_datas;$/;"	m	class:JKYi::RedisManager	access:private
m_datas	JKYi/ds/blocking_queue.h	/^    std::list<data_type> m_datas;$/;"	m	class:JKYi::ds::BlockingQueue	access:private
m_datas	JKYi/fdmanager.h	/^	std::vector<FdCtx::ptr>m_datas;$/;"	m	class:JKYi::FdManager	access:private
m_datas	JKYi/http/servlet.h	/^    std::unordered_map<std::string,Servlet::ptr> m_datas;$/;"	m	class:JKYi::http::ServletDispatch	access:private
m_datas	JKYi/http2/dynamic_table.h	/^    std::vector<std::pair<std::string,std::string>>m_datas;$/;"	m	class:JKYi::http2::DynamicTable	access:private
m_datas	JKYi/worker.h	/^    std::map<std::string,std::vector<Scheduler::ptr> >m_datas;$/;"	m	class:JKYi::WorkerManager	access:private
m_dbDefines	JKYi/db/mysql.h	/^    std::map<std::string,std::map<std::string,std::string> >m_dbDefines;$/;"	m	class:JKYi::MySQLManager	access:private
m_dbname	JKYi/db/mysql.h	/^    std::string m_dbname;$/;"	m	class:JKYi::MySQL	access:private
m_default	JKYi/http/servlet.h	/^    Servlet::ptr m_default;$/;"	m	class:JKYi::http::ServletDispatch	access:private
m_description	JKYi/config.h	/^   std::string m_description;$/;"	m	class:JKYi::ConfigVarBase	access:private
m_destroy	JKYi/library.cc	/^    destroy_module m_destroy;$/;"	m	class:JKYi::ModuleCloser	file:	access:private
m_dispatch	JKYi/http/http_server.h	/^    ServletDispatch::ptr m_dispatch;$/;"	m	class:JKYi::http::HttpServer	access:private
m_dispatch	JKYi/http/ws_server.h	/^    WSServletDispatch::ptr m_dispatch;$/;"	m	class:JKYi::http::WSServer	access:private
m_elapse	JKYi/log.h	/^   uint32_t m_elapse = 0;\/\/ç¨åºå¯å¨å¼å§å°ç°å¨çæ¯«ç§æ°$/;"	m	class:JKYi::LogEvent	access:private
m_endian	JKYi/bytearray.h	/^    int8_t m_endian;$/;"	m	class:JKYi::ByteArray	access:private
m_epfd	JKYi/iomanager.h	/^   int m_epfd=0;$/;"	m	class:JKYi::IOManager	access:private
m_err	JKYi/db/redis.h	/^    std::string m_err;$/;"	m	class:JKYi::FoxRedis	access:private
m_err	JKYi/db/redis.h	/^    std::string m_err;$/;"	m	class:JKYi::FoxRedisCluster	access:private
m_errno	JKYi/db/mysql.h	/^    int m_errno;$/;"	m	class:JKYi::MySQLRes	access:private
m_errno	JKYi/db/mysql.h	/^    int m_errno;$/;"	m	class:JKYi::MySQLStmtRes	access:private
m_error	JKYi/http/http_parser.h	/^    int m_error;$/;"	m	class:JKYi::http::HttpRequestParser	access:private
m_error	JKYi/http/http_parser.h	/^    int m_error;$/;"	m	class:JKYi::http::HttpResponseParser	access:private
m_error	JKYi/log.h	/^    bool m_error = false;$/;"	m	class:JKYi::LogFormatter	access:private
m_errstr	JKYi/db/mysql.h	/^    std::string m_errstr;$/;"	m	class:JKYi::MySQLRes	access:private
m_errstr	JKYi/db/mysql.h	/^    std::string m_errstr;$/;"	m	class:JKYi::MySQLStmtRes	access:private
m_event	JKYi/db/fox_thread.h	/^    struct event* m_event;$/;"	m	class:JKYi::FoxThread	typeref:struct:JKYi::FoxThread::event	access:private
m_event	JKYi/db/redis.h	/^    struct event* m_event;$/;"	m	class:JKYi::FoxRedis	typeref:struct:JKYi::FoxRedis::event	access:private
m_event	JKYi/db/redis.h	/^    struct event* m_event;$/;"	m	class:JKYi::FoxRedisCluster	typeref:struct:JKYi::FoxRedisCluster::event	access:private
m_event	JKYi/log.h	/^   LogEvent::ptr m_event;$/;"	m	class:JKYi::LogEventWrap	access:private
m_exe	JKYi/env.h	/^    std::string m_exe;$/;"	m	class:JKYi::Env	access:private
m_family	JKYi/socket.h	/^    int m_family;$/;"	m	class:JKYi::Socket	access:protected
m_fd	JKYi/fdmanager.h	/^  int m_fd;$/;"	m	class:JKYi::FdCtx	access:private
m_fdContexts	JKYi/iomanager.h	/^   std::vector<FdContext*>m_fdContexts;$/;"	m	class:JKYi::IOManager	access:private
m_fiberId	JKYi/log.h	/^   uint32_t m_fiberId = 0;\/\/åç¨ID$/;"	m	class:JKYi::LogEvent	access:private
m_fibers	JKYi/scheduler.h	/^  std::list<FiberAndThread> m_fibers;$/;"	m	class:JKYi::Scheduler	access:private
m_file	JKYi/log.h	/^   const char* m_file = nullptr;\/\/ç®æ æ¥å¿æä»¶çåç§°$/;"	m	class:JKYi::LogEvent	access:private
m_filename	JKYi/log.h	/^     std::string m_filename;\/\/æä»¶å$/;"	m	class:JKYi::FileLogAppender	access:private
m_filename	JKYi/module.h	/^   std::string m_filename;$/;"	m	class:JKYi::Module	access:protected
m_filestream	JKYi/log.h	/^     std::ofstream m_filestream;$/;"	m	class:JKYi::FileLogAppender	access:private
m_format	JKYi/log.cc	/^    std::string m_format;$/;"	m	class:JKYi::DateTimeFormatItem	file:	access:private
m_formatter	JKYi/log.h	/^    LogFormatter::ptr m_formatter;\/\/å®ä¹æ¥å¿è¾åºçæ ¼å¼$/;"	m	class:JKYi::LogAppender	access:protected
m_formatter	JKYi/log.h	/^    LogFormatter::ptr m_formatter;\/\/æ¥å¿çè¾åºæ ¼å¼$/;"	m	class:JKYi::Logger	access:private
m_fragment	JKYi/http/http.h	/^    std::string m_fragment;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_fragment	JKYi/uri.h	/^    std::string m_fragment;$/;"	m	class:JKYi::Uri	access:private
m_freeFoxThreads	JKYi/db/fox_thread.h	/^    std::list<FoxThread*> m_freeFoxThreads;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_globs	JKYi/http/servlet.h	/^    std::vector<std::pair<std::string,Servlet::ptr>> m_globs;$/;"	m	class:JKYi::http::ServletDispatch	access:private
m_handle	JKYi/library.cc	/^    void * m_handle;$/;"	m	class:JKYi::ModuleCloser	file:	access:private
m_handle	JKYi/zk_client.h	/^    zhandle_t * m_handle;$/;"	m	class:JKYi::ZKClient	access:private
m_hasError	JKYi/db/mysql.h	/^    bool m_hasError;$/;"	m	class:JKYi::MySQL	access:private
m_hasError	JKYi/db/mysql.h	/^   bool m_hasError;$/;"	m	class:JKYi::MySQLTransaction	access:private
m_hasFormatter	JKYi/log.h	/^    bool m_hasFormatter = false;$/;"	m	class:JKYi::LogAppender	access:protected
m_headers	JKYi/http/http.h	/^    MapType m_headers;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_headers	JKYi/http/http.h	/^    MapType m_headers;$/;"	m	class:JKYi::http::HttpResponse	access:private
m_headers	JKYi/http2/hpack.h	/^    std::vector<HeaderField> m_headers;$/;"	m	class:JKYi::http2::IndexType::HPack	access:private
m_helps	JKYi/env.h	/^    std::vector<std::pair<std::string,std::string>> m_helps;$/;"	m	class:JKYi::Env	access:private
m_host	JKYi/db/redis.h	/^    std::string m_host;$/;"	m	class:JKYi::FoxRedis	access:private
m_host	JKYi/db/redis.h	/^    std::string m_host;$/;"	m	class:JKYi::FoxRedisCluster	access:private
m_host	JKYi/db/redis.h	/^    std::string m_host;$/;"	m	class:JKYi::Redis	access:private
m_host	JKYi/db/redis.h	/^    std::string m_host;$/;"	m	class:JKYi::RedisCluster	access:private
m_host	JKYi/http/http_connection.h	/^    std::string m_host;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
m_host	JKYi/uri.h	/^    std::string m_host;$/;"	m	class:JKYi::Uri	access:private
m_hosts	JKYi/zk_client.h	/^    std::string m_hosts;$/;"	m	class:JKYi::ZKClient	access:private
m_id	JKYi/fiber.h	/^   uint64_t m_id = 0;$/;"	m	class:JKYi::Fiber	access:private
m_id	JKYi/module.h	/^   std::string m_id;$/;"	m	class:JKYi::Module	access:protected
m_id	JKYi/thread.h	/^   pid_t m_id = -1;$/;"	m	class:JKYi::Thread	access:private
m_idleThreadCount	JKYi/scheduler.h	/^   std::atomic<size_t> m_idleThreadCount={0};$/;"	m	class:JKYi::Scheduler	access:protected
m_initCb	JKYi/db/fox_thread.h	/^    FoxThread::init_cb m_initCb;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_initCb	JKYi/db/fox_thread.h	/^    init_cb m_initCb;$/;"	m	class:JKYi::FoxThread	access:private
m_instance	JKYi/application.cc	/^Application* Application::m_instance = nullptr;$/;"	m	class:JKYi::Application	file:
m_instance	JKYi/application.h	/^    static Application* m_instance;$/;"	m	class:JKYi::Application	access:private
m_ioWorker	JKYi/tcp_server.h	/^    IOManager * m_ioWorker;$/;"	m	class:JKYi::TcpServer	access:protected
m_isConnected	JKYi/socket.h	/^    bool m_isConnected;$/;"	m	class:JKYi::Socket	access:protected
m_isFinished	JKYi/db/mysql.h	/^   bool m_isFinished;$/;"	m	class:JKYi::MySQLTransaction	access:private
m_isHttps	JKYi/http/http_connection.h	/^    bool m_isHttps;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
m_isKeepalive	JKYi/http/http_server.h	/^    bool m_isKeepalive;$/;"	m	class:JKYi::http::HttpServer	access:private
m_isStop	JKYi/tcp_server.h	/^    bool m_isStop;$/;"	m	class:JKYi::TcpServer	access:protected
m_items	JKYi/log.h	/^    std::vector<FormatItem::ptr>m_items;$/;"	m	class:JKYi::LogFormatter	access:private
m_lastActiveTime	JKYi/db/redis.h	/^    uint64_t m_lastActiveTime;$/;"	m	class:JKYi::ISyncRedis	access:private
m_lastTime	JKYi/log.h	/^	 uint64_t m_lastTime = 0;\/\/è®°å½ä¸ä¸æ¬¡æå¼çæ¶é´$/;"	m	class:JKYi::FileLogAppender	access:private
m_lastUsedTime	JKYi/db/mysql.h	/^    uint64_t m_lastUsedTime;$/;"	m	class:JKYi::MySQL	access:private
m_length	JKYi/address.h	/^	socklen_t m_length;$/;"	m	class:JKYi::UnixAddress	access:private
m_level	JKYi/log.h	/^    LogLevel::Level m_level = LogLevel::DEBUG;\/\/é»è®¤ä¸ºdebugæ¨¡å¼$/;"	m	class:JKYi::LogAppender	access:protected
m_level	JKYi/log.h	/^    LogLevel::Level m_level;  \/\/æ¥å¿ççº§å«ï¼åªææ»¡è¶³çº§å«çæ¥å¿æä¼è¢«è¾åº$/;"	m	class:JKYi::Logger	access:private
m_level	JKYi/log.h	/^   LogLevel::Level m_level;$/;"	m	class:JKYi::LogEvent	access:private
m_line	JKYi/log.h	/^   int32_t m_line = 0;\/\/è¡å·$/;"	m	class:JKYi::LogEvent	access:private
m_localAddress	JKYi/socket.h	/^    Address::ptr m_localAddress;$/;"	m	class:JKYi::Socket	access:protected
m_lock	JKYi/mutex.h	/^   pthread_rwlock_t m_lock;$/;"	m	class:JKYi::RWMutex	access:private
m_locked	JKYi/mutex.h	/^  bool m_locked;$/;"	m	class:JKYi::ReadScopedLockImpl	access:private
m_locked	JKYi/mutex.h	/^  bool m_locked;$/;"	m	class:JKYi::ScopedLockImpl	access:private
m_locked	JKYi/mutex.h	/^  bool m_locked;$/;"	m	class:JKYi::WriteScopedLockImpl	access:private
m_logEnable	JKYi/db/redis.h	/^    bool m_logEnable;$/;"	m	class:JKYi::IRedis	access:protected
m_logger	JKYi/log.h	/^   std::shared_ptr<Logger>m_logger;$/;"	m	class:JKYi::LogEvent	access:private
m_loggers	JKYi/log.h	/^    std::map<std::string,Logger::ptr>m_loggers;$/;"	m	class:JKYi::LoggerManager	access:private
m_mainIOManager	JKYi/application.h	/^    IOManager::ptr m_mainIOManager;$/;"	m	class:JKYi::Application	access:private
m_manager	JKYi/timer.h	/^   TimerManager* m_manager=nullptr;$/;"	m	class:JKYi::Timer	access:private
m_maxAliveTime	JKYi/http/http_connection.h	/^    uint32_t m_maxAliveTime;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
m_maxConn	JKYi/db/mysql.h	/^    uint32_t m_maxConn;$/;"	m	class:JKYi::MySQLManager	access:private
m_maxDataSize	JKYi/http2/dynamic_table.h	/^    int32_t m_maxDataSize;$/;"	m	class:JKYi::http2::DynamicTable	access:private
m_maxRequest	JKYi/http/http_connection.h	/^    uint32_t m_maxRequest;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
m_maxSize	JKYi/http/http_connection.h	/^    uint32_t m_maxSize;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
m_method	JKYi/http/http.h	/^    HttpMethod m_method;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_microSecondsSinceEpoch	JKYi/timestamp.h	/^    int64_t m_microSecondsSinceEpoch;$/;"	m	class:JKYi::net::Timestamp	access:private
m_modules	JKYi/module.h	/^    std::unordered_map<std::string,Module::ptr> m_modules;$/;"	m	class:JKYi::ModuleManager	access:private
m_ms	JKYi/timer.h	/^   uint64_t m_ms=0;$/;"	m	class:JKYi::Timer	access:private
m_mutex	JKYi/config.h	/^   RWMutexType m_mutex;$/;"	m	class:JKYi::ConfigVar	access:private
m_mutex	JKYi/db/fox_thread.h	/^    JKYi::RWMutex m_mutex;$/;"	m	class:JKYi::FoxThread	access:private
m_mutex	JKYi/db/fox_thread.h	/^    RWMutex m_mutex;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_mutex	JKYi/db/mysql.h	/^    MutexType m_mutex;$/;"	m	class:JKYi::MySQLManager	access:private
m_mutex	JKYi/db/redis.h	/^    JKYi::RWMutex m_mutex;$/;"	m	class:JKYi::RedisManager	access:private
m_mutex	JKYi/ds/blocking_queue.h	/^    MutexType m_mutex;$/;"	m	class:JKYi::ds::BlockingQueue	access:private
m_mutex	JKYi/env.h	/^    RWMutexType m_mutex;$/;"	m	class:JKYi::Env	access:private
m_mutex	JKYi/fdmanager.h	/^    RWMutexType m_mutex; $/;"	m	class:JKYi::FdManager	access:private
m_mutex	JKYi/http/http_connection.h	/^    MutexType m_mutex;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
m_mutex	JKYi/http/servlet.h	/^    RWMutex m_mutex;$/;"	m	class:JKYi::http::ServletDispatch	access:private
m_mutex	JKYi/iomanager.h	/^   RWMutexType m_mutex;$/;"	m	class:JKYi::IOManager	access:private
m_mutex	JKYi/log.h	/^	MutexType m_mutex;$/;"	m	class:JKYi::LogAppender	access:protected
m_mutex	JKYi/log.h	/^	MutexType m_mutex;$/;"	m	class:JKYi::Logger	access:private
m_mutex	JKYi/log.h	/^	MutexType m_mutex;$/;"	m	class:JKYi::LoggerManager	access:private
m_mutex	JKYi/module.h	/^    RWMutexType m_mutex; $/;"	m	class:JKYi::ModuleManager	access:private
m_mutex	JKYi/mutex.h	/^    MutexType m_mutex;$/;"	m	class:JKYi::FiberSemaphore	access:private
m_mutex	JKYi/mutex.h	/^   pthread_mutex_t m_mutex;$/;"	m	class:JKYi::Mutex	access:private
m_mutex	JKYi/mutex.h	/^   pthread_spinlock_t m_mutex;$/;"	m	class:JKYi::SpinLock	access:private
m_mutex	JKYi/mutex.h	/^   volatile std::atomic_flag m_mutex;$/;"	m	class:JKYi::CASLock	access:private
m_mutex	JKYi/mutex.h	/^  T& m_mutex;$/;"	m	class:JKYi::ReadScopedLockImpl	access:private
m_mutex	JKYi/mutex.h	/^  T& m_mutex;$/;"	m	class:JKYi::ScopedLockImpl	access:private
m_mutex	JKYi/mutex.h	/^  T& m_mutex;$/;"	m	class:JKYi::WriteScopedLockImpl	access:private
m_mutex	JKYi/scheduler.h	/^   MutexType m_mutex;$/;"	m	class:JKYi::Scheduler	access:private
m_mutex	JKYi/timer.h	/^   RWMutexType m_mutex;$/;"	m	class:JKYi::TimerManager	access:private
m_mysql	JKYi/db/mysql.h	/^    MySQL::ptr m_mysql;$/;"	m	class:JKYi::MySQLStmt	access:private
m_mysql	JKYi/db/mysql.h	/^    std::shared_ptr<MYSQL> m_mysql;$/;"	m	class:JKYi::MySQL	access:private
m_mysql	JKYi/db/mysql.h	/^   MySQL::ptr m_mysql;$/;"	m	class:JKYi::MySQLTransaction	access:private
m_name	JKYi/config.h	/^   std::string m_name;$/;"	m	class:JKYi::ConfigVarBase	access:private
m_name	JKYi/db/fox_thread.h	/^    std::string m_name;$/;"	m	class:JKYi::FoxThread	access:private
m_name	JKYi/db/fox_thread.h	/^    std::string m_name;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_name	JKYi/db/redis.h	/^    std::string m_name;$/;"	m	class:JKYi::IRedis	access:protected
m_name	JKYi/http/servlet.h	/^    std::string m_name;$/;"	m	class:JKYi::http::NotFoundServlet	access:private
m_name	JKYi/http/servlet.h	/^    std::string m_name;$/;"	m	class:JKYi::http::Servlet	access:protected
m_name	JKYi/http/ws_servlet.h	/^    std::string m_name;$/;"	m	class:JKYi::http::WSServlet	access:protected
m_name	JKYi/log.h	/^    std::string m_name;       \/\/æ¥å¿çåç§°$/;"	m	class:JKYi::Logger	access:private
m_name	JKYi/module.h	/^   std::string m_name;$/;"	m	class:JKYi::Module	access:protected
m_name	JKYi/scheduler.h	/^  std::string m_name;$/;"	m	class:JKYi::Scheduler	access:private
m_name	JKYi/tcp_server.h	/^    std::string m_name;$/;"	m	class:JKYi::TcpServer	access:protected
m_name	JKYi/thread.h	/^   std::string m_name;$/;"	m	class:JKYi::Thread	access:private
m_name	tests/test_config.cc	/^    std::string m_name;$/;"	m	class:Person	file:	access:public
m_next	JKYi/timer.h	/^   uint64_t m_next=0;$/;"	m	class:JKYi::Timer	access:private
m_notify	JKYi/protocol.h	/^    uint32_t m_notify;$/;"	m	class:JKYi::Notify	access:protected
m_onClose	JKYi/http/ws_servlet.h	/^    on_close_cb m_onClose;$/;"	m	class:JKYi::http::FunctionWSServlet	access:protected
m_onConnect	JKYi/http/ws_servlet.h	/^    on_connect_cb m_onConnect;$/;"	m	class:JKYi::http::FunctionWSServlet	access:protected
m_opcode	JKYi/http/ws_session.h	/^    int m_opcode;$/;"	m	class:JKYi::http::WSFrameMessage	access:private
m_owner	JKYi/bytearray.h	/^    bool m_owner;$/;"	m	class:JKYi::ByteArray	access:private
m_owner	JKYi/stream/socket_stream.h	/^     bool m_owner;$/;"	m	class:JKYi::SocketStream	access:private
m_params	JKYi/db/mysql.h	/^    std::map<std::string,std::string> m_params;$/;"	m	class:JKYi::MySQL	access:private
m_params	JKYi/http/http.h	/^    MapType m_params;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_parseParamFlag	JKYi/http/http.h	/^    uint8_t m_parseParamFlag;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_parser	JKYi/http/http_parser.h	/^    http_parser m_parser;$/;"	m	class:JKYi::http::HttpRequestParser	access:private
m_parser	JKYi/http/http_parser.h	/^    httpclient_parser m_parser;$/;"	m	class:JKYi::http::HttpResponseParser	access:private
m_passwd	JKYi/db/redis.h	/^    std::string m_passwd;$/;"	m	class:JKYi::IRedis	access:protected
m_path	JKYi/http/http.h	/^    std::string m_path;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_path	JKYi/uri.h	/^    std::string m_path;$/;"	m	class:JKYi::Uri	access:private
m_pattern	JKYi/log.h	/^    std::string m_pattern;$/;"	m	class:JKYi::LogFormatter	access:private
m_pendingEventCount	JKYi/iomanager.h	/^   std::atomic<size_t>m_pendingEventCount={0};$/;"	m	class:JKYi::IOManager	access:private
m_poolSize	JKYi/db/mysql.h	/^    int32_t m_poolSize;$/;"	m	class:JKYi::MySQL	access:private
m_port	JKYi/db/redis.h	/^    uint16_t m_port;$/;"	m	class:JKYi::FoxRedis	access:private
m_port	JKYi/db/redis.h	/^    uint32_t m_port;$/;"	m	class:JKYi::Redis	access:private
m_port	JKYi/db/redis.h	/^    uint32_t m_port;$/;"	m	class:JKYi::RedisCluster	access:private
m_port	JKYi/http/http_connection.h	/^    uint32_t m_port;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
m_port	JKYi/uri.h	/^    int32_t m_port;$/;"	m	class:JKYi::Uri	access:private
m_position	JKYi/bytearray.h	/^    size_t m_position;$/;"	m	class:JKYi::ByteArray	access:private
m_previouseTime	JKYi/timer.h	/^   uint64_t m_previouseTime = 0;$/;"	m	class:JKYi::TimerManager	access:private
m_program	JKYi/env.h	/^    std::string m_program;$/;"	m	class:JKYi::Env	access:private
m_protocol	JKYi/socket.h	/^    int m_protocol;$/;"	m	class:JKYi::Socket	access:protected
m_query	JKYi/http/http.h	/^    std::string m_query;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_query	JKYi/uri.h	/^    std::string m_query;$/;"	m	class:JKYi::Uri	access:private
m_read	JKYi/db/fox_thread.h	/^    evutil_socket_t m_read;$/;"	m	class:JKYi::FoxThread	access:private
m_reason	JKYi/http/http.h	/^    std::string m_reason;$/;"	m	class:JKYi::http::HttpResponse	access:private
m_recurring	JKYi/timer.h	/^   bool m_recurring=false;$/;"	m	class:JKYi::Timer	access:private
m_recvTimeout	JKYi/fdmanager.h	/^  uint64_t m_recvTimeout;$/;"	m	class:JKYi::FdCtx	access:private
m_recvTimeout	JKYi/tcp_server.h	/^    uint64_t m_recvTimeout;$/;"	m	class:JKYi::TcpServer	access:protected
m_recvTimeout	JKYi/zk_client.h	/^    int32_t m_recvTimeout;$/;"	m	class:JKYi::ZKClient	access:private
m_remoteAddress	JKYi/socket.h	/^    Address::ptr m_remoteAddress;$/;"	m	class:JKYi::Socket	access:protected
m_request	JKYi/http/http_connection.h	/^    uint64_t m_request = 0;$/;"	m	class:JKYi::http::HttpConnection	access:private
m_result	JKYi/protocol.h	/^    uint32_t m_result;$/;"	m	class:JKYi::Response	access:protected
m_resultStr	JKYi/protocol.h	/^    std::string m_resultStr;$/;"	m	class:JKYi::Response	access:protected
m_root	JKYi/bytearray.h	/^    Node * m_root;$/;"	m	class:JKYi::ByteArray	access:private
m_root	JKYi/log.h	/^    Logger::ptr m_root;$/;"	m	class:JKYi::Logger	access:private
m_root	JKYi/log.h	/^    Logger::ptr m_root;$/;"	m	class:JKYi::LoggerManager	access:private
m_rootFiber	JKYi/scheduler.h	/^  Fiber::ptr m_rootFiber;$/;"	m	class:JKYi::Scheduler	access:private
m_rootThread	JKYi/scheduler.h	/^   int m_rootThread=0;$/;"	m	class:JKYi::Scheduler	access:protected
m_scheme	JKYi/uri.h	/^    std::string m_scheme;$/;"	m	class:JKYi::Uri	access:private
m_sem	JKYi/ds/blocking_queue.h	/^    JKYi::FiberSemaphore m_sem;$/;"	m	class:JKYi::ds::BlockingQueue	access:private
m_semaphore	JKYi/mutex.h	/^   sem_t m_semaphore; $/;"	m	class:JKYi::Semaphore	access:private
m_semaphore	JKYi/thread.h	/^   Semaphore m_semaphore;$/;"	m	class:JKYi::Thread	access:private
m_sendTimeout	JKYi/fdmanager.h	/^  uint64_t m_sendTimeout;$/;"	m	class:JKYi::FdCtx	access:private
m_servers	JKYi/application.h	/^    std::map<std::string,std::vector<TcpServer::ptr>>m_servers;$/;"	m	class:JKYi::Application	access:private
m_sex	tests/test_config.cc	/^    int m_sex;$/;"	m	class:Person	file:	access:public
m_size	JKYi/bytearray.h	/^    size_t m_size;$/;"	m	class:JKYi::ByteArray	access:private
m_size	JKYi/db/fox_thread.h	/^    uint32_t m_size;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_sn	JKYi/protocol.h	/^    uint32_t m_sn;$/;"	m	class:JKYi::Request	access:protected
m_sn	JKYi/protocol.h	/^    uint32_t m_sn;$/;"	m	class:JKYi::Response	access:protected
m_sock	JKYi/socket.h	/^    int m_sock;$/;"	m	class:JKYi::Socket	access:protected
m_socket	JKYi/stream/socket_stream.h	/^     Socket::ptr m_socket;$/;"	m	class:JKYi::SocketStream	access:private
m_socks	JKYi/tcp_server.h	/^    std::vector<Socket::ptr> m_socks;$/;"	m	class:JKYi::TcpServer	access:protected
m_ss	JKYi/log.h	/^   std::stringstream m_ss;\/\/æµï¼ç¨æ¥å­å¨è¦è¾åºçæ¥å¿$/;"	m	class:JKYi::LogEvent	access:private
m_ssl	JKYi/socket.h	/^    std::shared_ptr<SSL> m_ssl;$/;"	m	class:JKYi::SSLSocket	access:private
m_ssl	JKYi/tcp_server.h	/^    bool m_ssl = false;$/;"	m	class:JKYi::TcpServer	access:protected
m_stack	JKYi/fiber.h	/^   void *m_stack = nullptr;$/;"	m	class:JKYi::Fiber	access:private
m_stacksize	JKYi/fiber.h	/^   uint32_t m_stacksize = 0;$/;"	m	class:JKYi::Fiber	access:private
m_start	JKYi/db/fox_thread.h	/^    bool m_start;$/;"	m	class:JKYi::FoxThread	access:private
m_start	JKYi/db/fox_thread.h	/^    bool m_start;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_state	JKYi/fiber.h	/^   State m_state = INIT;$/;"	m	class:JKYi::Fiber	access:private
m_status	JKYi/db/redis.h	/^    STATUS m_status;$/;"	m	class:JKYi::FoxRedis	access:private
m_status	JKYi/db/redis.h	/^    STATUS m_status;$/;"	m	class:JKYi::FoxRedisCluster	access:private
m_status	JKYi/http/http.h	/^    HttpStatus m_status;$/;"	m	class:JKYi::http::HttpResponse	access:private
m_stmt	JKYi/db/mysql.h	/^    MYSQL_STMT * m_stmt;$/;"	m	class:JKYi::MySQLStmt	access:private
m_stmt	JKYi/db/mysql.h	/^    std::shared_ptr<MySQLStmt> m_stmt;$/;"	m	class:JKYi::MySQLStmtRes	access:private
m_stop	JKYi/worker.h	/^    bool m_stop;$/;"	m	class:JKYi::WorkerManager	access:private
m_stopping	JKYi/scheduler.h	/^   bool m_stopping=true;$/;"	m	class:JKYi::Scheduler	access:protected
m_string	JKYi/log.cc	/^   std::string m_string;$/;"	m	class:JKYi::StringFormatItem	file:	access:private
m_string	JKYi/log.cc	/^   std::string m_string;$/;"	m	class:JKYi::TabFormatItem	file:	access:private
m_table	JKYi/http2/hpack.h	/^    DynamicTable& m_table;$/;"	m	class:JKYi::http2::IndexType::HPack	access:private
m_thread	JKYi/db/fox_thread.h	/^    std::thread* m_thread;$/;"	m	class:JKYi::FoxThread	access:private
m_thread	JKYi/db/redis.h	/^    JKYi::FoxThread* m_thread;$/;"	m	class:JKYi::FoxRedis	access:private
m_thread	JKYi/db/redis.h	/^    JKYi::FoxThread* m_thread;$/;"	m	class:JKYi::FoxRedisCluster	access:private
m_thread	JKYi/thread.h	/^   pthread_t m_thread = 0;$/;"	m	class:JKYi::Thread	access:private
m_threadCount	JKYi/scheduler.h	/^   size_t m_threadCount=0;$/;"	m	class:JKYi::Scheduler	access:protected
m_threadId	JKYi/log.h	/^   uint32_t m_threadId = 0;\/\/çº¿ç¨ID$/;"	m	class:JKYi::LogEvent	access:private
m_threadIds	JKYi/scheduler.h	/^   std::vector<int> m_threadIds;$/;"	m	class:JKYi::Scheduler	access:protected
m_threadName	JKYi/log.h	/^   std::string m_threadName;$/;"	m	class:JKYi::LogEvent	access:private
m_threads	JKYi/db/fox_thread.h	/^    std::map<std::string,IFoxThread::ptr> m_threads;$/;"	m	class:JKYi::FoxThreadManager	access:private
m_threads	JKYi/db/fox_thread.h	/^    std::vector<FoxThread*> m_threads;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_threads	JKYi/scheduler.h	/^  std::vector<Thread::ptr> m_threads;$/;"	m	class:JKYi::Scheduler	access:private
m_tickleFds	JKYi/iomanager.h	/^   int m_tickleFds[2];$/;"	m	class:JKYi::IOManager	access:private
m_tickled	JKYi/timer.h	/^   bool m_tickled = false;$/;"	m	class:JKYi::TimerManager	access:private
m_time	JKYi/log.h	/^   uint32_t m_time = 0;\/\/æ¶é´æ³$/;"	m	class:JKYi::LogEvent	access:private
m_timers	JKYi/timer.h	/^   std::set<Timer::ptr,Timer::Comparator>m_timers;$/;"	m	class:JKYi::TimerManager	access:private
m_total	JKYi/db/fox_thread.h	/^    uint64_t m_total;$/;"	m	class:JKYi::FoxThread	access:private
m_total	JKYi/db/fox_thread.h	/^    uint64_t m_total;$/;"	m	class:JKYi::FoxThreadPool	access:private
m_total	JKYi/http/http_connection.h	/^    std::atomic<int32_t> m_total = {0};$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
m_type	JKYi/db/redis.h	/^    Type m_type;$/;"	m	class:JKYi::IRedis	access:protected
m_type	JKYi/module.h	/^   uint32_t m_type;$/;"	m	class:JKYi::Module	access:protected
m_type	JKYi/socket.h	/^    int m_type;$/;"	m	class:JKYi::Socket	access:protected
m_type	JKYi/tcp_server.h	/^    std::string m_type = "tcp";$/;"	m	class:JKYi::TcpServer	access:protected
m_type2Modules	JKYi/module.h	/^    std::unordered_map<uint32_t,std::unordered_map<std::string,Module::ptr> > m_type2Modules;$/;"	m	class:JKYi::ModuleManager	access:private
m_userinfo	JKYi/uri.h	/^    std::string m_userinfo;$/;"	m	class:JKYi::Uri	access:private
m_val	JKYi/config.h	/^   T m_val;$/;"	m	class:JKYi::ConfigVar	access:private
m_version	JKYi/http/http.h	/^    uint8_t m_version;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_version	JKYi/http/http.h	/^    uint8_t m_version;$/;"	m	class:JKYi::http::HttpResponse	access:private
m_version	JKYi/module.h	/^   std::string m_version;$/;"	m	class:JKYi::Module	access:protected
m_vhost	JKYi/http/http_connection.h	/^    std::string m_vhost;$/;"	m	class:JKYi::http::HttpConnectionPool	access:private
m_waiters	JKYi/mutex.h	/^    std::list<std::pair<Scheduler*,Fiber::ptr> >m_waiters;$/;"	m	class:JKYi::FiberSemaphore	access:private
m_watcherCb	JKYi/zk_client.h	/^    watcher_callback2 m_watcherCb;$/;"	m	class:JKYi::ZKClient	access:private
m_websocket	JKYi/http/http.h	/^    bool m_websocket;$/;"	m	class:JKYi::http::HttpRequest	access:private
m_websocket	JKYi/http/http.h	/^    bool m_websocket;$/;"	m	class:JKYi::http::HttpResponse	access:private
m_worker	JKYi/tcp_server.h	/^    IOManager * m_worker;$/;"	m	class:JKYi::TcpServer	access:protected
m_working	JKYi/db/fox_thread.h	/^    bool m_working;$/;"	m	class:JKYi::FoxThread	access:private
m_write	JKYi/db/fox_thread.h	/^    evutil_socket_t m_write;$/;"	m	class:JKYi::FoxThread	access:private
main	JKYi/application.cc	/^int Application::main(int argc,char ** argv){$/;"	f	class:JKYi::Application	signature:(int argc,char ** argv)
main	JKYi/application.h	/^    int main(int argc,char** argv);$/;"	p	class:JKYi::Application	access:private	signature:(int argc,char** argv)
main	JKYi/reactor/examples/idleconnection/main.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	JKYi/reactor/examples/maxconnection/main.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	signature:(int argc, char** argv)
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	signature:(int argc, char** argv)
main	sample/my_http_server.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test.cc	/^int main(int argc,char**argv){$/;"	f	signature:(int argc,char**argv)
main	tests/test_address.cc	/^int main(int argc,char**argv){$/;"	f	signature:(int argc,char**argv)
main	tests/test_application.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_bytearray.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_config.cc	/^int main(int argc,char **argv){$/;"	f	signature:(int argc,char **argv)
main	tests/test_daemon.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_env.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_fiber.cc	/^int main(int argc,char**argv){$/;"	f	signature:(int argc,char**argv)
main	tests/test_hook.cc	/^int main(int argc,char**argv){$/;"	f	signature:(int argc,char**argv)
main	tests/test_http.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_http_connection.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_http_parser.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_http_server.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_iomanager.cc	/^int main(int argc,char**argv){$/;"	f	signature:(int argc,char**argv)
main	tests/test_mysql.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_reactor_tcpClient.cc	/^int main(int argc,char * *argv){$/;"	f	signature:(int argc,char * *argv)
main	tests/test_reactor_tcpserver.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_reactor_thread.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_redis.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_scheduler.cc	/^int main(int argc,char**argv){$/;"	f	signature:(int argc,char**argv)
main	tests/test_socket.cc	/^int main(int argc,char**argv){$/;"	f	signature:(int argc,char**argv)
main	tests/test_thread.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_timestamp.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_util.cc	/^int main(int argc,char**argv){$/;"	f	signature:(int argc,char**argv)
main	tests/test_ws_client.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_ws_server.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main	tests/test_zookeeper.cc	/^int main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
main_id	JKYi/daemon.h	/^   pid_t main_id = 0;$/;"	m	struct:JKYi::ProcessInfo	access:public
main_start_time	JKYi/daemon.h	/^   uint64_t main_start_time = 0;$/;"	m	struct:JKYi::ProcessInfo	access:public
makeSpace	JKYi/reactor/Buffer.h	/^    void makeSpace(size_t len){$/;"	f	class:JKYi::net::Buffer	access:private	signature:(size_t len)
makeWeakCallback	JKYi/WeakCallback.h	/^WeakCallback<CLASS,ARGS...> makeWeakCallback(const std::shared_ptr<CLASS>& object,void (CLASS::* function)(ARGS...)){$/;"	f	namespace:JKYi	signature:(const std::shared_ptr<CLASS>& object,void (CLASS::* function)(ARGS...))
makeWeakCallback	JKYi/WeakCallback.h	/^WeakCallback<CLASS,ARGS...> makeWeakCallback(const std::shared_ptr<CLASS>& object,void (CLASS::* function)(ARGS...)const){$/;"	f	namespace:JKYi	signature:(const std::shared_ptr<CLASS>& object,void (CLASS::* function)(ARGS...)const)
mark	JKYi/http/http11_parser.h	/^      size_t mark;$/;"	m	struct:http_parser	access:public
mark	JKYi/http/httpclient_parser.h	/^      size_t mark;$/;"	m	struct:httpclient_parser	access:public
mask	JKYi/http/ws_session.h	/^   bool mask: 1;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
messageCallback_	JKYi/reactor/TcpClient.h	/^    MessageCallback messageCallback_;$/;"	m	class:JKYi::net::TcpClient	access:private
messageCallback_	JKYi/reactor/TcpConnection.h	/^    MessageCallback messageCallback_;$/;"	m	class:JKYi::net::TcpConnection	access:private
messageCallback_	JKYi/reactor/TcpServer.h	/^    MessageCallback messageCallback_;$/;"	m	class:JKYi::net::TcpServer	access:private
mutex	JKYi/iomanager.h	/^	 MutexType mutex;$/;"	m	struct:JKYi::IOManager::FdContext	access:public
mutex	tests/test_thread.cc	/^JKYi::RWMutex mutex; $/;"	v
mutex_	JKYi/BlockingQueue.h	/^    mutable Mutex mutex_;$/;"	m	class:JKYi::BlockingQueue	access:private
mutex_	JKYi/BoundedBlockingQueue.h	/^    mutable Mutex mutex_;$/;"	m	class:JKYi::BoundedBlockingQueue	access:private
mutex_	JKYi/CountDownLatch.h	/^    mutable Mutex mutex_;$/;"	m	class:JKYi::CountDownLatch	access:private
mutex_	JKYi/condition.h	/^    Mutex& mutex_;$/;"	m	class:JKYi::Condition	access:private
mutex_	JKYi/reactor/EventLoop.h	/^    mutable Mutex mutex_;$/;"	m	class:JKYi::net::EventLoop	access:private
mutex_	JKYi/reactor/EventLoopThread.h	/^    Mutex mutex_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
mutex_	JKYi/reactor/TcpClient.h	/^    mutable Mutex mutex_;$/;"	m	class:JKYi::net::TcpClient	access:private
my_mysql_query	JKYi/db/mysql.cc	/^static MYSQL_RES* my_mysql_query(MYSQL* mysql,const char * sql){$/;"	f	namespace:JKYi	signature:(MYSQL* mysql,const char * sql)
mysql_init	JKYi/db/mysql.cc	/^static MYSQL* mysql_init(std::map<std::string,std::string>& params,$/;"	f	namespace:JKYi	signature:(std::map<std::string,std::string>& params, const int& timeout)
mysql_time_to_time_t	JKYi/db/mysql.cc	/^bool mysql_time_to_time_t(const MYSQL_TIME& mt,time_t& ts){$/;"	f	namespace:JKYi	signature:(const MYSQL_TIME& mt,time_t& ts)
mysql_time_to_time_t	JKYi/db/mysql.h	/^bool mysql_time_to_time_t(const MYSQL_TIME& mt,time_t& ts);$/;"	p	namespace:JKYi	signature:(const MYSQL_TIME& mt,time_t& ts)
name	JKYi/http2/hpack.h	/^    std::string name;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
name	JKYi/log.cc	/^   std::string name;$/;"	m	struct:JKYi::LogDefine	file:	access:public
name	JKYi/reactor/CurrentThread.h	/^inline const char * name(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
name	JKYi/reactor/EventLoopThreadPool.h	/^    const std::string& name()const{$/;"	f	class:JKYi::net::EventLoopThreadPool	access:public	signature:() const
name	JKYi/reactor/TcpClient.h	/^    const std::string& name()const{$/;"	f	class:JKYi::net::TcpClient	access:public	signature:() const
name	JKYi/reactor/TcpConnection.h	/^    const std::string& name()const { return name_; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
name	JKYi/reactor/TcpServer.h	/^    const std::string& name()const { return name_; }$/;"	f	class:JKYi::net::TcpServer	access:public	signature:() const
name	JKYi/reactor/Thread.h	/^    const std::string& name(){ return name_; }$/;"	f	class:JKYi::net::Thread	access:public	signature:()
name	JKYi/tcp_server.h	/^    std::string name ;$/;"	m	struct:JKYi::TcpServerConf	access:public
name_	JKYi/reactor/EventLoopThreadPool.h	/^    std::string name_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
name_	JKYi/reactor/TcpClient.h	/^    const std::string name_;$/;"	m	class:JKYi::net::TcpClient	access:private
name_	JKYi/reactor/TcpConnection.h	/^    const std::string name_;$/;"	m	class:JKYi::net::TcpConnection	access:private
name_	JKYi/reactor/TcpServer.h	/^    const std::string name_;$/;"	m	class:JKYi::net::TcpServer	access:private
name_	JKYi/reactor/Thread.cc	/^    std::string name_;$/;"	m	struct:JKYi::detail::ThreadData	file:	access:public
name_	JKYi/reactor/Thread.h	/^    std::string name_;$/;"	m	class:JKYi::net::Thread	access:private
name_space	template/template/my_module.cc	/^namespace name_space{$/;"	n	file:
name_space	template/template/my_module.h	/^namespace name_space{$/;"	n
name_space::MyModule	template/template/my_module.h	/^class MyModule:public JKYi::Module{$/;"	c	namespace:name_space	inherits:JKYi::Module
name_space::MyModule::MyModule	template/template/my_module.cc	/^MyModule::MyModule()$/;"	f	class:name_space::MyModule	signature:()
name_space::MyModule::MyModule	template/template/my_module.h	/^    MyModule();$/;"	p	class:name_space::MyModule	access:public	signature:()
name_space::MyModule::onLoad	template/template/my_module.cc	/^bool MyModule::onLoad(){$/;"	f	class:name_space::MyModule	signature:()
name_space::MyModule::onServerReady	template/template/my_module.cc	/^bool MyModule::onServerReady(){$/;"	f	class:name_space::MyModule	signature:()
name_space::MyModule::onServerUp	template/template/my_module.cc	/^bool MyModule::onServerUp(){$/;"	f	class:name_space::MyModule	signature:()
name_space::MyModule::onUnload	template/template/my_module.cc	/^bool MyModule::onUnload(){$/;"	f	class:name_space::MyModule	signature:()
name_space::MyModule::override	template/template/my_module.h	/^    bool onLoad()override;$/;"	m	class:name_space::MyModule	access:public
name_space::MyModule::override	template/template/my_module.h	/^    bool onServerReady()override;$/;"	m	class:name_space::MyModule	access:public
name_space::MyModule::override	template/template/my_module.h	/^    bool onServerUp()override;$/;"	m	class:name_space::MyModule	access:public
name_space::MyModule::override	template/template/my_module.h	/^    bool onUnload()override;$/;"	m	class:name_space::MyModule	access:public
name_space::MyModule::ptr	template/template/my_module.h	/^    typedef std::shared_ptr<MyModule> ptr;$/;"	t	class:name_space::MyModule	access:public
name_space::g_logger	template/template/my_module.cc	/^static JKYi::Logger::ptr g_logger = JKYI_LOG_ROOT();$/;"	m	namespace:name_space	file:
nanosleep	JKYi/hook.cc	/^int nanosleep(const struct timespec*req,struct timespec *rem){$/;"	f	signature:(const struct timespec*req,struct timespec *rem)
nanosleep_fun	JKYi/hook.h	/^typedef int (*nanosleep_fun)(const struct timespec *req, struct timespec *rem);$/;"	t
net	JKYi/reactor/Buffer.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/Buffer.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/Callbacks.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/Connector.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/Connector.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/EventLoop.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/EventLoop.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/EventLoopThread.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/EventLoopThread.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/EventLoopThreadPool.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/EventLoopThreadPool.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/Socket.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/Socket.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/SocketsOps.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/StringPiece.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/TcpClient.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/TcpClient.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/TcpConnection.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/TcpConnection.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/TcpServer.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/TcpServer.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/Thread.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/Thread.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/acceptor.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/acceptor.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/channel.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/channel.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/poller.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/poller.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/poller/epollPoller.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/poller/epollPoller.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/poller/pollPoller.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/poller/pollPoller.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/timer.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/timer.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/timerId.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/reactor/timerQueue.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/reactor/timerQueue.h	/^namespace net{$/;"	n	namespace:JKYi
net	JKYi/timestamp.cc	/^namespace net{$/;"	n	namespace:JKYi	file:
net	JKYi/timestamp.h	/^namespace net{$/;"	n	namespace:JKYi
networkAddress	JKYi/address.cc	/^IPAddress::ptr IPv4Address::networkAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv4Address	signature:(uint32_t prefix_len)
networkAddress	JKYi/address.cc	/^IPAddress::ptr IPv6Address::networkAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv6Address	signature:(uint32_t prefix_len)
networkAddress	JKYi/address.h	/^	virtual IPAddress::ptr networkAddress(uint32_t prefix_len)=0;$/;"	p	class:JKYi::IPAddress	access:public	signature:(uint32_t prefix_len)
newConnection	JKYi/reactor/TcpClient.cc	/^void TcpClient::newConnection(int sockfd){$/;"	f	class:JKYi::net::TcpClient	signature:(int sockfd)
newConnection	JKYi/reactor/TcpClient.h	/^    void newConnection(int sockfd);$/;"	p	class:JKYi::net::TcpClient	access:private	signature:(int sockfd)
newConnection	JKYi/reactor/TcpServer.cc	/^void TcpServer::newConnection(int sockfd,const Address::ptr& peerAddr){$/;"	f	class:JKYi::net::TcpServer	signature:(int sockfd,const Address::ptr& peerAddr)
newConnection	JKYi/reactor/TcpServer.h	/^    void newConnection(int sockfd,const Address::ptr& peerAddr);$/;"	p	class:JKYi::net::TcpServer	access:private	signature:(int sockfd,const Address::ptr& peerAddr)
newConnectionCallback_	JKYi/reactor/Connector.h	/^    NewConnectionCallback newConnectionCallback_;$/;"	m	class:JKYi::net::Connector	access:private
newConnectionCallback_	JKYi/reactor/acceptor.h	/^    NewConnectionCallback newConnectionCallback_;$/;"	m	class:JKYi::net::Acceptor	access:private
newDefaultPoller	JKYi/reactor/poller.h	/^    static Poller* newDefaultPoller(EventLoop* loop);$/;"	p	class:JKYi::net::Poller	access:public	signature:(EventLoop* loop)
newSock	JKYi/socket.cc	/^void Socket::newSock(){$/;"	f	class:JKYi::Socket	signature:()
newSock	JKYi/socket.h	/^    void newSock();$/;"	p	class:JKYi::Socket	access:protected	signature:()
next	JKYi/bytearray.h	/^        Node* next;$/;"	m	struct:JKYi::ByteArray::Node	access:public
next	JKYi/db/db.h	/^    virtual bool next() = 0;$/;"	p	class:JKYi::ISQLData	access:public	signature:()
next	JKYi/db/mysql.cc	/^bool MySQLRes::next(){$/;"	f	class:JKYi::MySQLRes	signature:()
next	JKYi/db/mysql.cc	/^bool MySQLStmtRes::next(){$/;"	f	class:JKYi::MySQLStmtRes	signature:()
nextConnId_	JKYi/reactor/TcpClient.h	/^    int nextConnId_;$/;"	m	class:JKYi::net::TcpClient	access:private
nextConnId_	JKYi/reactor/TcpServer.h	/^    int nextConnId_;$/;"	m	class:JKYi::net::TcpServer	access:private
next_	JKYi/reactor/EventLoopThreadPool.h	/^    int next_;          \/\/ç¨äºå®ç°round-robin$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
node	JKYi/http2/huffman.cc	/^struct node{$/;"	s	namespace:JKYi::http2	file:
node_create	JKYi/http2/huffman.cc	/^static NODE * node_create(){$/;"	f	namespace:JKYi::http2	signature:()
nop	JKYi/util.h	/^void nop(T * t){$/;"	f	namespace:JKYi	signature:(T * t)
notEpmty_	JKYi/BoundedBlockingQueue.h	/^    Condition notEpmty_;$/;"	m	class:JKYi::BoundedBlockingQueue	access:private
notFull_	JKYi/BoundedBlockingQueue.h	/^    Condition notFull_;$/;"	m	class:JKYi::BoundedBlockingQueue	access:private
notify	JKYi/condition.h	/^    void notify(){$/;"	f	class:JKYi::Condition	access:public	signature:()
notify	JKYi/mutex.cc	/^void FiberSemaphore::notify(){$/;"	f	class:JKYi::FiberSemaphore	signature:()
notify	JKYi/mutex.cc	/^void Semaphore::notify(){$/;"	f	class:JKYi::Semaphore	signature:()
notify	JKYi/mutex.h	/^    void notify();$/;"	p	class:JKYi::FiberSemaphore	access:public	signature:()
notify	JKYi/mutex.h	/^   void notify();$/;"	p	class:JKYi::Semaphore	access:public	signature:()
notifyAll	JKYi/condition.h	/^    void notifyAll(){$/;"	f	class:JKYi::Condition	access:public	signature:()
now	JKYi/timestamp.cc	/^Timestamp Timestamp::now(){$/;"	f	class:JKYi::net::Timestamp	signature:()
now	JKYi/timestamp.h	/^    static Timestamp now();$/;"	p	class:JKYi::net::Timestamp	access:public	signature:()
nread	JKYi/http/http11_parser.h	/^      size_t nread;$/;"	m	struct:http_parser	access:public
nread	JKYi/http/httpclient_parser.h	/^      size_t nread;$/;"	m	struct:httpclient_parser	access:public
numConnected_	JKYi/reactor/examples/maxconnection/echo.h	/^   int numConnected_;$/;"	m	class:EchoServer	access:private
numCreated	JKYi/reactor/Thread.h	/^    static int numCreated(){ return numCreated_.get(); }$/;"	f	class:JKYi::net::Thread	access:public	signature:()
numCreated_	JKYi/reactor/Thread.cc	/^AtomicInt32 JKYi::net::Thread::numCreated_;$/;"	m	class:JKYi::net::JKYi::net::Thread	file:
numCreated_	JKYi/reactor/Thread.h	/^    static AtomicInt32 numCreated_; \/\/ ç»´æ¤å½ååå»ºççº¿ç¨æ°ç®$/;"	m	class:JKYi::net::Thread	access:private
numThreads_	JKYi/reactor/EventLoopThreadPool.h	/^    int numThreads_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
object_	JKYi/WeakCallback.h	/^    std::weak_ptr<CLASS> object_;$/;"	m	class:JKYi::WeakCallback	access:private
onAfterArgsParse	JKYi/module.cc	/^void Module::onAfterArgsParse(int argc,char ** argv){$/;"	f	class:JKYi::Module	signature:(int argc,char ** argv)
onAfterArgsParse	JKYi/module.h	/^    virtual void onAfterArgsParse(int argc,char ** argv);$/;"	p	class:JKYi::Module	access:public	signature:(int argc,char ** argv)
onBeforeArgsParse	JKYi/module.cc	/^void Module::onBeforeArgsParse(int argc,char ** argv){$/;"	f	class:JKYi::Module	signature:(int argc,char ** argv)
onBeforeArgsParse	JKYi/module.h	/^    virtual void onBeforeArgsParse(int argc,char ** argv);$/;"	p	class:JKYi::Module	access:public	signature:(int argc,char ** argv)
onClose	JKYi/http/ws_servlet.cc	/^int32_t FunctionWSServlet::onClose(JKYi::http::HttpRequest::ptr header,$/;"	f	class:JKYi::http::FunctionWSServlet	signature:(JKYi::http::HttpRequest::ptr header, JKYi::http::WSSession::ptr session)
onClose	JKYi/http/ws_servlet.h	/^    virtual int32_t onClose(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session) = 0;$/;"	p	class:JKYi::http::WSServlet	access:public	signature:(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session)
onConnect	JKYi/http/ws_servlet.cc	/^int32_t FunctionWSServlet::onConnect(JKYi::http::HttpRequest::ptr header,$/;"	f	class:JKYi::http::FunctionWSServlet	signature:(JKYi::http::HttpRequest::ptr header, JKYi::http::WSSession::ptr session)
onConnect	JKYi/http/ws_servlet.h	/^    virtual int32_t onConnect(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session) = 0;$/;"	p	class:JKYi::http::WSServlet	access:public	signature:(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session)
onConnect	JKYi/module.cc	/^bool Module::onConnect(JKYi::Stream::ptr stream){$/;"	f	class:JKYi::Module	signature:(JKYi::Stream::ptr stream)
onConnect	JKYi/module.cc	/^void ModuleManager::onConnect(Stream::ptr stream){$/;"	f	class:JKYi::ModuleManager	signature:(Stream::ptr stream)
onConnect	JKYi/module.h	/^    virtual bool onConnect(JKYi::Stream::ptr stream);$/;"	p	class:JKYi::Module	access:public	signature:(JKYi::Stream::ptr stream)
onConnect	JKYi/module.h	/^    void onConnect(Stream::ptr stream);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(Stream::ptr stream)
onConnection	JKYi/reactor/examples/idleconnection/echo.cc	/^void EchoServer::onConnection(const TcpConnection::ptr& conn){$/;"	f	class:EchoServer	signature:(const TcpConnection::ptr& conn)
onConnection	JKYi/reactor/examples/idleconnection/echo.h	/^    void onConnection(const JKYi::net::TcpConnection::ptr& conn);$/;"	p	class:EchoServer	access:private	signature:(const JKYi::net::TcpConnection::ptr& conn)
onConnection	JKYi/reactor/examples/maxconnection/echo.cc	/^void EchoServer::onConnection(const TcpConnection::ptr& conn){$/;"	f	class:EchoServer	signature:(const TcpConnection::ptr& conn)
onConnection	JKYi/reactor/examples/maxconnection/echo.h	/^   void onConnection(const JKYi::net::TcpConnection::ptr& conn);$/;"	p	class:EchoServer	access:private	signature:(const JKYi::net::TcpConnection::ptr& conn)
onConnection	tests/test_reactor_tcpClient.cc	/^void onConnection(const JKYi::net::TcpConnection::ptr& conn){$/;"	f	signature:(const JKYi::net::TcpConnection::ptr& conn)
onDisconnect	JKYi/module.cc	/^bool Module::onDisconnect(JKYi::Stream::ptr stream){$/;"	f	class:JKYi::Module	signature:(JKYi::Stream::ptr stream)
onDisconnect	JKYi/module.cc	/^void ModuleManager::onDisconnect(Stream::ptr stream){$/;"	f	class:JKYi::ModuleManager	signature:(Stream::ptr stream)
onDisconnect	JKYi/module.h	/^    virtual bool onDisconnect(JKYi::Stream::ptr stream);$/;"	p	class:JKYi::Module	access:public	signature:(JKYi::Stream::ptr stream)
onDisconnect	JKYi/module.h	/^    void onDisconnect(Stream::ptr stream);$/;"	p	class:JKYi::ModuleManager	access:public	signature:(Stream::ptr stream)
onLoad	JKYi/module.cc	/^bool Module::onLoad(){$/;"	f	class:JKYi::Module	signature:()
onLoad	JKYi/module.h	/^    virtual bool onLoad();$/;"	p	class:JKYi::Module	access:public	signature:()
onLoad	template/template/my_module.cc	/^bool MyModule::onLoad(){$/;"	f	class:name_space::MyModule	signature:()
onMessage	JKYi/reactor/examples/idleconnection/echo.cc	/^void EchoServer::onMessage(const TcpConnection::ptr& conn,$/;"	f	class:EchoServer	signature:(const TcpConnection::ptr& conn, Buffer* buf,Timestamp receiveTime)
onMessage	JKYi/reactor/examples/idleconnection/echo.h	/^    void onMessage(const JKYi::net::TcpConnection::ptr& conn,JKYi::net::Buffer* buf,JKYi::net::Timestamp receiveTime);$/;"	p	class:EchoServer	access:private	signature:(const JKYi::net::TcpConnection::ptr& conn,JKYi::net::Buffer* buf,JKYi::net::Timestamp receiveTime)
onMessage	JKYi/reactor/examples/maxconnection/echo.cc	/^void EchoServer::onMessage(const TcpConnection::ptr& conn,$/;"	f	class:EchoServer	signature:(const TcpConnection::ptr& conn, Buffer* buf, Timestamp receiveTime)
onMessage	JKYi/reactor/examples/maxconnection/echo.h	/^   void onMessage(const JKYi::net::TcpConnection::ptr& conn,$/;"	p	class:EchoServer	access:private	signature:(const JKYi::net::TcpConnection::ptr& conn, JKYi::net::Buffer* buf, JKYi::net::Timestamp receiveTime)
onMessage	tests/test_reactor_tcpClient.cc	/^void onMessage(const JKYi::net::TcpConnection::ptr& conn,JKYi::net::Buffer* buf,JKYi::net::Timestamp receiveTime){$/;"	f	signature:(const JKYi::net::TcpConnection::ptr& conn,JKYi::net::Buffer* buf,JKYi::net::Timestamp receiveTime)
onServerReady	JKYi/module.cc	/^bool Module::onServerReady(){$/;"	f	class:JKYi::Module	signature:()
onServerReady	JKYi/module.h	/^    virtual bool onServerReady();$/;"	p	class:JKYi::Module	access:public	signature:()
onServerReady	template/template/my_module.cc	/^bool MyModule::onServerReady(){$/;"	f	class:name_space::MyModule	signature:()
onServerUp	JKYi/module.cc	/^bool Module::onServerUp(){$/;"	f	class:JKYi::Module	signature:()
onServerUp	JKYi/module.h	/^    virtual bool onServerUp();$/;"	p	class:JKYi::Module	access:public	signature:()
onServerUp	template/template/my_module.cc	/^bool MyModule::onServerUp(){$/;"	f	class:name_space::MyModule	signature:()
onTimer	JKYi/reactor/examples/idleconnection/echo.cc	/^void EchoServer::onTimer(){$/;"	f	class:EchoServer	signature:()
onTimer	JKYi/reactor/examples/idleconnection/echo.h	/^    void onTimer();$/;"	p	class:EchoServer	access:private	signature:()
onTimerInsertedAtFront	JKYi/iomanager.cc	/^void IOManager::onTimerInsertedAtFront(){$/;"	f	class:JKYi::IOManager	signature:()
onTimerInsertedAtFront	JKYi/timer.h	/^   virtual void onTimerInsertedAtFront() = 0;$/;"	p	class:JKYi::TimerManager	access:protected	signature:()
onUnload	JKYi/module.cc	/^bool Module::onUnload(){$/;"	f	class:JKYi::Module	signature:()
onUnload	JKYi/module.h	/^    virtual bool onUnload();$/;"	p	class:JKYi::Module	access:public	signature:()
onUnload	template/template/my_module.cc	/^bool MyModule::onUnload(){$/;"	f	class:name_space::MyModule	signature:()
on_change_cb	JKYi/config.h	/^   typedef std::function<void (const  T&oldValue,const T&newValue)> on_change_cb;$/;"	t	class:JKYi::ConfigVar	access:public
on_close_cb	JKYi/http/ws_servlet.h	/^    typedef std::function<int32_t (JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session)> on_close_cb;$/;"	t	class:JKYi::http::FunctionWSServlet	access:public
on_connect_cb	JKYi/http/ws_servlet.h	/^    typedef std::function<int32_t (JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session) > on_connect_cb;$/;"	t	class:JKYi::http::FunctionWSServlet	access:public
on_request_fragment	JKYi/http/http_parser.cc	/^void on_request_fragment(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_request_header_done	JKYi/http/http_parser.cc	/^void on_request_header_done(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_request_http_field	JKYi/http/http_parser.cc	/^void on_request_http_field(void * data,const char * field,size_t flen,$/;"	f	namespace:JKYi::http	signature:(void * data,const char * field,size_t flen, const char * value,size_t vlen)
on_request_method	JKYi/http/http_parser.cc	/^void on_request_method(void * data,const char* at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char* at,size_t length)
on_request_path	JKYi/http/http_parser.cc	/^void on_request_path(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_request_query	JKYi/http/http_parser.cc	/^void on_request_query(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_request_uri	JKYi/http/http_parser.cc	/^void on_request_uri(void *data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void *data,const char * at,size_t length)
on_request_version	JKYi/http/http_parser.cc	/^void on_request_version(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_response_chunk	JKYi/http/http_parser.cc	/^void on_response_chunk(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_response_header_done	JKYi/http/http_parser.cc	/^void on_response_header_done(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_response_http_field	JKYi/http/http_parser.cc	/^void on_response_http_field(void * data,const char * field,size_t flen,$/;"	f	namespace:JKYi::http	signature:(void * data,const char * field,size_t flen, const char * value,size_t vlen)
on_response_last_chunk	JKYi/http/http_parser.cc	/^void on_response_last_chunk(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_response_reason	JKYi/http/http_parser.cc	/^void on_response_reason(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_response_status	JKYi/http/http_parser.cc	/^void on_response_status(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_response_version	JKYi/http/http_parser.cc	/^void on_response_version(void * data,const char * at,size_t length){$/;"	f	namespace:JKYi::http	signature:(void * data,const char * at,size_t length)
on_watcher	tests/test_zookeeper.cc	/^void on_watcher(int type,int stat,const std::string& path,JKYi::ZKClient::ptr client){$/;"	f	signature:(int type,int stat,const std::string& path,JKYi::ZKClient::ptr client)
opcode	JKYi/http/ws_session.h	/^   uint32_t opcode: 4; $/;"	m	struct:JKYi::http::WSFrameHead	access:public
openTransaction	JKYi/db/db.h	/^    virtual ITransaction::ptr openTransaction(bool auto_commit = false) = 0;$/;"	p	class:JKYi::IDB	access:public	signature:(bool auto_commit = false)
openTransaction	JKYi/db/mysql.cc	/^ITransaction::ptr MySQL::openTransaction(bool auto_commit){$/;"	f	class:JKYi::MySQL	signature:(bool auto_commit)
openTransaction	JKYi/db/mysql.cc	/^MySQLTransaction::ptr MySQLManager::openTransaction(const std::string& name,$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name, bool auto_commit)
openTransaction	JKYi/db/mysql.h	/^    MySQLTransaction::ptr openTransaction(const std::string& name,bool auto_commit);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,bool auto_commit)
operationToString	JKYi/reactor/poller/epollPoller.cc	/^const char * EpollPoller::operationToString(int op){$/;"	f	class:JKYi::net::EpollPoller	signature:(int op)
operationToString	JKYi/reactor/poller/epollPoller.h	/^    static const char * operationToString(int op);$/;"	p	class:JKYi::net::EpollPoller	access:private	signature:(int op)
operator !=	JKYi/address.cc	/^bool Address::operator!= (const Address&rhv)const{$/;"	f	class:JKYi::Address	signature:(const Address&rhv) const
operator !=	JKYi/address.h	/^   bool operator!= (const Address&rhv)const;$/;"	p	class:JKYi::Address	access:public	signature:(const Address&rhv) const
operator !=	JKYi/reactor/StringPiece.h	/^  bool operator!=(const StringPiece& x) const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const StringPiece& x) const
operator ()	JKYi/WeakCallback.h	/^    void operator() (ARGS&&... args)const{$/;"	f	class:JKYi::WeakCallback	access:public	signature:(ARGS&&.... args) const
operator ()	JKYi/config.h	/^    std::string operator()(const std::map<std::string, T>& v) {$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::map<std::string, T>& v)
operator ()	JKYi/config.h	/^    std::string operator()(const std::unordered_map<std::string, T>& v) {$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::unordered_map<std::string, T>& v)
operator ()	JKYi/config.h	/^   T operator()(const F&f){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const F&f)
operator ()	JKYi/config.h	/^   std::list<T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
operator ()	JKYi/config.h	/^   std::map<std::string,T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
operator ()	JKYi/config.h	/^   std::set<T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
operator ()	JKYi/config.h	/^   std::string operator()(std::list<T>&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(std::list<T>&v)
operator ()	JKYi/config.h	/^   std::string operator()(std::set<T>&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(std::set<T>&v)
operator ()	JKYi/config.h	/^   std::string operator()(std::unordered_set<T>&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(std::unordered_set<T>&v)
operator ()	JKYi/config.h	/^   std::string operator()(std::vector<T>&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(std::vector<T>&v)
operator ()	JKYi/config.h	/^   std::unordered_map<std::string,T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
operator ()	JKYi/config.h	/^   std::unordered_set<T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
operator ()	JKYi/config.h	/^   std::vector<T> operator()(const std::string&v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&v)
operator ()	JKYi/http/http.cc	/^bool CaseInsensitiveLess::operator() (const std::string&lhv$/;"	f	class:JKYi::http::CaseInsensitiveLess	signature:(const std::string&lhv ,const std::string& rhv) const
operator ()	JKYi/http/http.h	/^    bool operator() (const std::string&lhv,const std::string& rhv)const;$/;"	p	struct:JKYi::http::CaseInsensitiveLess	access:public	signature:(const std::string&lhv,const std::string& rhv) const
operator ()	JKYi/library.cc	/^    void operator()(Module * module){$/;"	f	class:JKYi::ModuleCloser	access:public	signature:(Module * module)
operator ()	JKYi/log.cc	/^      LogDefine operator()(const std::string&str){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&str)
operator ()	JKYi/log.cc	/^     std::string operator()(const LogDefine&ld){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const LogDefine&ld)
operator ()	JKYi/tcp_server.h	/^    TcpServerConf operator() (const std::string& v){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string& v)
operator ()	JKYi/tcp_server.h	/^    std::string operator() (TcpServerConf& conf){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(TcpServerConf& conf)
operator ()	JKYi/timer.cc	/^bool Timer::Comparator::operator()(const Timer::ptr &lhv,$/;"	f	class:JKYi::Timer::Comparator	signature:(const Timer::ptr &lhv, const Timer::ptr&rhv) const
operator ()	JKYi/timer.h	/^     bool operator()(const Timer::ptr&lhv,const Timer::ptr &rhv)const;$/;"	p	struct:JKYi::Timer::Comparator	access:public	signature:(const Timer::ptr&lhv,const Timer::ptr &rhv) const
operator ()	tests/test_config.cc	/^    Person operator()(const std::string&s){$/;"	f	class:JKYi::LexicalCast	access:public	signature:(const std::string&s)
operator ()	tests/test_config.cc	/^   std::string operator()(Person&p) {$/;"	f	class:JKYi::LexicalCast	access:public	signature:(Person&p)
operator <	JKYi/address.cc	/^bool Address::operator< (const Address&rhv)const {$/;"	f	class:JKYi::Address	signature:(const Address&rhv) const
operator <	JKYi/address.h	/^   bool operator< (const Address&rhv)const;$/;"	p	class:JKYi::Address	access:public	signature:(const Address&rhv) const
operator <	JKYi/log.cc	/^   bool operator< (const LogDefine&rhv)const{$/;"	f	struct:JKYi::LogDefine	access:public	signature:(const LogDefine&rhv) const
operator <	JKYi/timestamp.h	/^inline bool operator< (const Timestamp& lhv,const Timestamp& rhv){$/;"	f	namespace:JKYi::net	signature:(const Timestamp& lhv,const Timestamp& rhv)
operator <<	JKYi/address.cc	/^std::ostream& operator<< (std::ostream&os,const Address&addr){$/;"	f	namespace:JKYi	signature:(std::ostream&os,const Address&addr)
operator <<	JKYi/address.h	/^std::ostream& operator<< (std::ostream&os,const Address&rhv);$/;"	p	namespace:JKYi	signature:(std::ostream&os,const Address&rhv)
operator <<	JKYi/http/http.cc	/^std::ostream& operator<< (std::ostream& os,const HttpRequest& req){$/;"	f	namespace:JKYi::http	signature:(std::ostream& os,const HttpRequest& req)
operator <<	JKYi/http/http.cc	/^std::ostream& operator<< (std::ostream& os,const HttpResponse& rsp){$/;"	f	namespace:JKYi::http	signature:(std::ostream& os,const HttpResponse& rsp)
operator <<	JKYi/http/http.h	/^std::ostream& operator<< (std::ostream& os,const HttpRequest&req);$/;"	p	namespace:JKYi::http	signature:(std::ostream& os,const HttpRequest&req)
operator <<	JKYi/http/http.h	/^std::ostream& operator<< (std::ostream& os,const HttpStatus& rsp);$/;"	p	namespace:JKYi::http	signature:(std::ostream& os,const HttpStatus& rsp)
operator =	JKYi/noncopyable.h	/^  Noncopyable& operator= (const Noncopyable&) = delete;$/;"	p	class:JKYi::Noncopyable	access:public	signature:(const Noncopyable&)
operator ==	JKYi/address.cc	/^bool Address::operator== (const Address&rhv)const{$/;"	f	class:JKYi::Address	signature:(const Address&rhv) const
operator ==	JKYi/address.h	/^   bool operator== (const Address&rhv)const;$/;"	p	class:JKYi::Address	access:public	signature:(const Address&rhv) const
operator ==	JKYi/log.cc	/^    bool operator== (const LogAppenderDefine&rhv)const {$/;"	f	struct:JKYi::LogAppenderDefine	access:public	signature:(const LogAppenderDefine&rhv) const
operator ==	JKYi/log.cc	/^   bool operator== (const LogDefine&rhv)const {$/;"	f	struct:JKYi::LogDefine	access:public	signature:(const LogDefine&rhv) const
operator ==	JKYi/reactor/StringPiece.h	/^  bool operator==(const StringPiece& x) const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const StringPiece& x) const
operator ==	JKYi/tcp_server.h	/^    bool operator == (const TcpServerConf& rhv)const {$/;"	f	struct:JKYi::TcpServerConf	access:public	signature:(const TcpServerConf& rhv) const
operator ==	JKYi/timestamp.h	/^inline bool operator== (const Timestamp& lhv,const Timestamp& rhv){$/;"	f	namespace:JKYi::net	signature:(const Timestamp& lhv,const Timestamp& rhv)
operator ==	tests/test_config.cc	/^     bool operator== (const Person&rhv)const {$/;"	f	class:Person	access:public	signature:(const Person&rhv) const
operator []	JKYi/reactor/StringPiece.h	/^  char operator[](int i) const { return ptr_[i]; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(int i) const
outputBuffer	JKYi/reactor/TcpConnection.h	/^    Buffer* outputBuffer(){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:()
outputBuffer_	JKYi/reactor/TcpConnection.h	/^    Buffer outputBuffer_;$/;"	m	class:JKYi::net::TcpConnection	access:private
override	JKYi/address.h	/^	IPAddress::ptr broadcastAddress(uint32_t prefix_len)override;$/;"	m	class:JKYi::IPv4Address	access:public
override	JKYi/address.h	/^	IPAddress::ptr broadcastAddress(uint32_t prefix_len)override;$/;"	m	class:JKYi::IPv6Address	access:public
override	JKYi/address.h	/^	IPAddress::ptr networkAddress(uint32_t prefix_len)override;$/;"	m	class:JKYi::IPv4Address	access:public
override	JKYi/address.h	/^	IPAddress::ptr networkAddress(uint32_t prefix_len)override;$/;"	m	class:JKYi::IPv6Address	access:public
override	JKYi/address.h	/^	IPAddress::ptr subnetMaskAddress(uint32_t predix_len)override;$/;"	m	class:JKYi::IPv6Address	access:public
override	JKYi/address.h	/^	IPAddress::ptr subnetMaskAddress(uint32_t prefix_len)override;$/;"	m	class:JKYi::IPv4Address	access:public
override	JKYi/address.h	/^	const sockaddr* getAddr()const override;$/;"	m	class:JKYi::IPv4Address	access:public
override	JKYi/address.h	/^	const sockaddr* getAddr()const override;$/;"	m	class:JKYi::IPv6Address	access:public
override	JKYi/address.h	/^	const sockaddr* getAddr()const override;$/;"	m	class:JKYi::UnixAddress	access:public
override	JKYi/address.h	/^	const sockaddr* getAddr()const override;$/;"	m	class:JKYi::UnknowAddress	access:public
override	JKYi/address.h	/^	sockaddr* getAddr()override;$/;"	m	class:JKYi::IPv4Address	access:public
override	JKYi/address.h	/^	sockaddr* getAddr()override;$/;"	m	class:JKYi::IPv6Address	access:public
override	JKYi/address.h	/^	sockaddr* getAddr()override;$/;"	m	class:JKYi::UnixAddress	access:public
override	JKYi/address.h	/^	sockaddr* getAddr()override;$/;"	m	class:JKYi::UnknowAddress	access:public
override	JKYi/address.h	/^	socklen_t getAddrLen()const override;$/;"	m	class:JKYi::IPv4Address	access:public
override	JKYi/address.h	/^	socklen_t getAddrLen()const override;$/;"	m	class:JKYi::IPv6Address	access:public
override	JKYi/address.h	/^	socklen_t getAddrLen()const override;$/;"	m	class:JKYi::UnixAddress	access:public
override	JKYi/address.h	/^	std::ostream& insert(std::ostream&os)const override;$/;"	m	class:JKYi::IPv4Address	access:public
override	JKYi/address.h	/^	std::ostream& insert(std::ostream&os)const override;$/;"	m	class:JKYi::IPv6Address	access:public
override	JKYi/address.h	/^	std::ostream& insert(std::ostream&os)const override;$/;"	m	class:JKYi::UnixAddress	access:public
override	JKYi/address.h	/^	std::ostream& insert(std::ostream&os)const override;$/;"	m	class:JKYi::UnknowAddress	access:public
override	JKYi/address.h	/^	uint16_t getPort()const override;$/;"	m	class:JKYi::IPv4Address	access:public
override	JKYi/address.h	/^	void setPort(uint16_t v)override;$/;"	m	class:JKYi::IPv4Address	access:public
override	JKYi/address.h	/^	void setPort(uint16_t v)override;$/;"	m	class:JKYi::IPv6Address	access:public
override	JKYi/address.h	/^    socklen_t getAddrLen()const override;$/;"	m	class:JKYi::UnknowAddress	access:public
override	JKYi/address.h	/^    uint16_t getPort()const override;$/;"	m	class:JKYi::IPv6Address	access:public
override	JKYi/db/fox_thread.h	/^    bool batchDispatch(const std::vector<callback>& cbs)override;$/;"	m	class:JKYi::FoxThreadPool	access:public
override	JKYi/db/fox_thread.h	/^    bool batchDispatch(const std::vector<callback>&cbs) override;$/;"	m	class:JKYi::FoxThread	access:public
override	JKYi/db/fox_thread.h	/^    bool dispatch(callback cb) override;$/;"	m	class:JKYi::FoxThread	access:public
override	JKYi/db/fox_thread.h	/^    bool dispatch(callback cb)override;$/;"	m	class:JKYi::FoxThreadPool	access:public
override	JKYi/db/fox_thread.h	/^    bool dispatch(uint32_t id,callback cb) override;$/;"	m	class:JKYi::FoxThread	access:public
override	JKYi/db/fox_thread.h	/^    bool dispatch(uint32_t id,callback cb)override;$/;"	m	class:JKYi::FoxThreadPool	access:public
override	JKYi/db/fox_thread.h	/^    void broadcast(callback cb) override;$/;"	m	class:JKYi::FoxThread	access:public
override	JKYi/db/fox_thread.h	/^    void broadcast(callback cb)override;$/;"	m	class:JKYi::FoxThreadPool	access:public
override	JKYi/db/fox_thread.h	/^    void dump(std::ostream& os)override;$/;"	m	class:JKYi::FoxThreadPool	access:public
override	JKYi/db/fox_thread.h	/^    void join() override;$/;"	m	class:JKYi::FoxThread	access:public
override	JKYi/db/fox_thread.h	/^    void join()override;$/;"	m	class:JKYi::FoxThreadPool	access:public
override	JKYi/db/fox_thread.h	/^    void start()override;$/;"	m	class:JKYi::FoxThread	access:public
override	JKYi/db/fox_thread.h	/^    void start()override;$/;"	m	class:JKYi::FoxThreadPool	access:public
override	JKYi/db/fox_thread.h	/^    void stop() override;$/;"	m	class:JKYi::FoxThread	access:public
override	JKYi/db/fox_thread.h	/^    void stop()override;$/;"	m	class:JKYi::FoxThreadPool	access:public
override	JKYi/db/mysql.h	/^    ISQLData::ptr query()override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    ISQLData::ptr query(const char * format,...)override;$/;"	m	class:JKYi::MySQL	access:public
override	JKYi/db/mysql.h	/^    ISQLData::ptr query(const std::string& sql)override;$/;"	m	class:JKYi::MySQL	access:public
override	JKYi/db/mysql.h	/^    ITransaction::ptr openTransaction(bool auto_commit)override;$/;"	m	class:JKYi::MySQL	access:public
override	JKYi/db/mysql.h	/^    JKYi::IStmt::ptr prepare(const std::string& sql)override;$/;"	m	class:JKYi::MySQL	access:public
override	JKYi/db/mysql.h	/^    bool isNull(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    bool isNull(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    bool next()override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    bool next()override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    double getDouble(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    double getDouble(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    float getFloat(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    float getFloat(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    int execute()override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    int getColumnBytes(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    int getColumnBytes(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    int getColumnCount()override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    int getColumnCount()override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    int getColumnType(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    int getColumnType(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    int getDataCount()override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    int getDataCount()override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    int getErrno()override;$/;"	m	class:JKYi::MySQL	access:public
override	JKYi/db/mysql.h	/^    int getErrno()override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    int16_t getInt16(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    int16_t getInt16(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    int32_t getInt32(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    int32_t getInt32(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    int64_t getInt64(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    int64_t getInt64(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    int64_t getLastInsertId()override;$/;"	m	class:JKYi::MySQL	access:public
override	JKYi/db/mysql.h	/^    int64_t getLastInsertId()override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    int8_t getInt8(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    int8_t getInt8(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    std::string getBlob(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    std::string getBlob(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    std::string getColumnName(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    std::string getColumnName(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    std::string getErrStr()override;$/;"	m	class:JKYi::MySQL	access:public
override	JKYi/db/mysql.h	/^    std::string getErrStr()override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    std::string getString(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    std::string getString(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    time_t getTime(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    time_t getTime(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    uint16_t getUint16(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    uint16_t getUint16(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    uint32_t getUint32(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    uint32_t getUint32(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    uint64_t getUint64(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    uint64_t getUint64(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    uint8_t getUint8(int idx)override;$/;"	m	class:JKYi::MySQLRes	access:public
override	JKYi/db/mysql.h	/^    uint8_t getUint8(int idx)override;$/;"	m	class:JKYi::MySQLStmtRes	access:public
override	JKYi/db/mysql.h	/^    virtual int bindBlob(int idx,const std::string& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindBlob(int idx,const void * value,int64_t size)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindDouble(int idx,const double& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindFloat(int idx,const float& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindInt16(int idx,const int16_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindInt32(int idx,const int32_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindInt64(int idx,const int64_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindInt8(int idx,const int8_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindNull(int idx)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindString(int idx,const char * value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindString(int idx,const std::string& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindTime(int idx,const time_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindUint16(int idx,const uint16_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindUint32(int idx,const uint32_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindUint64(int idx,const uint64_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int bindUint8(int idx,const uint8_t& value)override;$/;"	m	class:JKYi::MySQLStmt	access:public
override	JKYi/db/mysql.h	/^    virtual int execute(const char * format,...)override;$/;"	m	class:JKYi::MySQL	access:public
override	JKYi/db/mysql.h	/^    virtual int execute(const std::string& sql)override;$/;"	m	class:JKYi::MySQL	access:public
override	JKYi/db/mysql.h	/^   bool begin()override;$/;"	m	class:JKYi::MySQLTransaction	access:public
override	JKYi/db/mysql.h	/^   bool commit()override;$/;"	m	class:JKYi::MySQLTransaction	access:public
override	JKYi/db/mysql.h	/^   bool rollback()override;$/;"	m	class:JKYi::MySQLTransaction	access:public
override	JKYi/db/mysql.h	/^   int64_t getLastInsertId()override;$/;"	m	class:JKYi::MySQLTransaction	access:public
override	JKYi/db/mysql.h	/^   virtual int execute(const char * format,...)override;$/;"	m	class:JKYi::MySQLTransaction	access:public
override	JKYi/db/mysql.h	/^   virtual int execute(const std::string& sql)override;$/;"	m	class:JKYi::MySQLTransaction	access:public
override	JKYi/db/redis.h	/^     ReplyPtr getReply()override;$/;"	m	class:JKYi::Redis	access:public
override	JKYi/db/redis.h	/^     int appendCmd(const char * fmd,...)override;$/;"	m	class:JKYi::Redis	access:public
override	JKYi/db/redis.h	/^     int appendCmd(const char * fmt,va_list ap)override;$/;"	m	class:JKYi::Redis	access:public
override	JKYi/db/redis.h	/^     int appendCmd(const std::vector<std::string>& argv)override ;$/;"	m	class:JKYi::Redis	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,...) override;$/;"	m	class:JKYi::FoxRedis	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,...) override;$/;"	m	class:JKYi::Redis	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,...)override;$/;"	m	class:JKYi::FoxRedisCluster	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,...)override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,va_list ap) override;$/;"	m	class:JKYi::Redis	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,va_list ap) override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,va_list ap)override ;$/;"	m	class:JKYi::FoxRedis	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const char * fmt,va_list ap)override;$/;"	m	class:JKYi::FoxRedisCluster	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const std::vector<std::string>& argv) override;;$/;"	m	class:JKYi::Redis	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const std::vector<std::string>& argv)override;$/;"	m	class:JKYi::FoxRedis	access:public
override	JKYi/db/redis.h	/^    ReplyPtr cmd(const std::vector<std::string>& argv)override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/db/redis.h	/^    ReplyPtr getReply()override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/db/redis.h	/^    bool connect()override;$/;"	m	class:JKYi::Redis	access:public
override	JKYi/db/redis.h	/^    bool connect()override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/db/redis.h	/^    bool connect(const std::string& ip,int port ,uint64_t ms = 0)override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/db/redis.h	/^    bool connect(const std::string& ip,int port,uint64_t ms = 0)override;$/;"	m	class:JKYi::Redis	access:public
override	JKYi/db/redis.h	/^    bool reconnect() override;$/;"	m	class:JKYi::Redis	access:public
override	JKYi/db/redis.h	/^    bool reconnect()override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/db/redis.h	/^    int appendCmd(const char * fmd,...)override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/db/redis.h	/^    int appendCmd(const char * fmt,va_list ap)override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/db/redis.h	/^    int appendCmd(const std::vector<std::string>& argv)override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/db/redis.h	/^    void setTimeout(uint64_t ms)override;$/;"	m	class:JKYi::RedisCluster	access:public
override	JKYi/http/http_server.h	/^    virtual void handleClient(Socket::ptr client)override;$/;"	m	class:JKYi::http::HttpServer	access:private
override	JKYi/http/http_server.h	/^    virtual void setName(const std::string& name)override;$/;"	m	class:JKYi::http::HttpServer	access:public
override	JKYi/http/servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session) override;$/;"	m	class:JKYi::http::FunctionServlet	access:public
override	JKYi/http/servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session) override;$/;"	m	class:JKYi::http::ServletDispatch	access:public
override	JKYi/http/servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr request,JKYi::http::HttpResponse::ptr response,JKYi::http::HttpSession::ptr session)override;$/;"	m	class:JKYi::http::NotFoundServlet	access:public
override	JKYi/http/ws_server.h	/^    virtual void handleClient(Socket::ptr client)override;$/;"	m	class:JKYi::http::WSServer	access:protected
override	JKYi/http/ws_servlet.h	/^    virtual int32_t handle(JKYi::http::HttpRequest::ptr header,JKYi::http::WSFrameMessage::ptr msg,JKYi::http::WSSession::ptr session)override;$/;"	m	class:JKYi::http::FunctionWSServlet	access:public
override	JKYi/http/ws_servlet.h	/^    virtual int32_t onClose(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session)override;$/;"	m	class:JKYi::http::FunctionWSServlet	access:public
override	JKYi/http/ws_servlet.h	/^    virtual int32_t onConnect(JKYi::http::HttpRequest::ptr header,JKYi::http::WSSession::ptr session)override;$/;"	m	class:JKYi::http::FunctionWSServlet	access:public
override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	access:public
override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
override	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	access:public
override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	access:public
override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
override	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba,const FrameHeader& header) override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	access:public
override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::Settings	access:private
override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	access:public
override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
override	JKYi/http2/frame.h	/^    std::string toString()const override;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	access:public
override	JKYi/iomanager.h	/^   bool stopping()override;$/;"	m	class:JKYi::IOManager	access:protected
override	JKYi/iomanager.h	/^   void idle()override;$/;"	m	class:JKYi::IOManager	access:protected
override	JKYi/iomanager.h	/^   void onTimerInsertedAtFront()override;$/;"	m	class:JKYi::IOManager	access:protected
override	JKYi/iomanager.h	/^   void tickle()override;$/;"	m	class:JKYi::IOManager	access:protected
override	JKYi/log.h	/^     std::string toYamlString()override;$/;"	m	class:JKYi::FileLogAppender	access:public
override	JKYi/log.h	/^     void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:JKYi::FileLogAppender	access:public
override	JKYi/log.h	/^    std::string toYamlString()override;$/;"	m	class:JKYi::StdoutLogAppender	access:public
override	JKYi/log.h	/^    void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	m	class:JKYi::StdoutLogAppender	access:public
override	JKYi/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	m	class:JKYi::Response	access:public
override	JKYi/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray)override;$/;"	m	class:JKYi::Notify	access:public
override	JKYi/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray)override;$/;"	m	class:JKYi::Request	access:public
override	JKYi/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr byetarray)override;$/;"	m	class:JKYi::Request	access:public
override	JKYi/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	m	class:JKYi::Notify	access:public
override	JKYi/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray)override;$/;"	m	class:JKYi::Response	access:public
override	JKYi/reactor/poller/epollPoller.h	/^    Timestamp poll(int timeoutMs,ChannelList* activeChannels)override;$/;"	m	class:JKYi::net::EpollPoller	access:public
override	JKYi/reactor/poller/epollPoller.h	/^    void removeChannel(Channel* channel)override;$/;"	m	class:JKYi::net::EpollPoller	access:public
override	JKYi/reactor/poller/epollPoller.h	/^    void updateChannel(Channel* channel)override;$/;"	m	class:JKYi::net::EpollPoller	access:public
override	JKYi/reactor/poller/epollPoller.h	/^    ~EpollPoller()override;$/;"	m	class:JKYi::net::EpollPoller	access:public
override	JKYi/reactor/poller/pollPoller.h	/^    Timestamp poll(int timeoutMs,ChannelList* activeChannels)override;$/;"	m	class:JKYi::net::PollPoller	access:public
override	JKYi/reactor/poller/pollPoller.h	/^    void removeChannel(Channel* channel)override;$/;"	m	class:JKYi::net::PollPoller	access:public
override	JKYi/reactor/poller/pollPoller.h	/^    void updateChannel(Channel* channel)override;$/;"	m	class:JKYi::net::PollPoller	access:public
override	JKYi/reactor/poller/pollPoller.h	/^    ~PollPoller()override;$/;"	m	class:JKYi::net::PollPoller	access:public
override	JKYi/socket.h	/^    virtual Socket::ptr accept()override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual bool bind(const Address::ptr addr)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual bool close()override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual bool connect(const Address::ptr addr,int64_t timeout_ms = -1)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual bool init(int sock)override;$/;"	m	class:JKYi::SSLSocket	access:protected
override	JKYi/socket.h	/^    virtual bool listen(int backlog = SOMAXCONN)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual int recv(iovec * buffers,size_t length,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual int recv(void * buffer,size_t length,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual int recvFrom(iovec * buffers,size_t length,Address::ptr from,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual int recvFrom(void * buffer,size_t length,Address::ptr from,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual int send(const iovec* buffers,size_t length,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual int send(const void * buffer,size_t length,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual int sendTo(const iovec * buffers,size_t length,const Address::ptr to,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual int sendTo(const void * buffer,size_t length,const Address::ptr to,int flags = 0)override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/socket.h	/^    virtual std::ostream& dump(std::ostream& os)const override;$/;"	m	class:JKYi::SSLSocket	access:public
override	JKYi/stream/socket_stream.h	/^     virtual int read(ByteArray::ptr ba,size_t length) override;$/;"	m	class:JKYi::SocketStream	access:public
override	JKYi/stream/socket_stream.h	/^     virtual int read(void * buffer,size_t length) override;$/;"	m	class:JKYi::SocketStream	access:public
override	JKYi/stream/socket_stream.h	/^     virtual int write(ByteArray::ptr ba,size_t length) override;$/;"	m	class:JKYi::SocketStream	access:public
override	JKYi/stream/socket_stream.h	/^     virtual int write(const void * buffer,size_t length) override;$/;"	m	class:JKYi::SocketStream	access:public
override	JKYi/stream/socket_stream.h	/^     virtual void close() override;$/;"	m	class:JKYi::SocketStream	access:public
override	template/template/my_module.h	/^    bool onLoad()override;$/;"	m	class:name_space::MyModule	access:public
override	template/template/my_module.h	/^    bool onServerReady()override;$/;"	m	class:name_space::MyModule	access:public
override	template/template/my_module.h	/^    bool onServerUp()override;$/;"	m	class:name_space::MyModule	access:public
override	template/template/my_module.h	/^    bool onUnload()override;$/;"	m	class:name_space::MyModule	access:public
ownerLoop	JKYi/reactor/channel.h	/^    EventLoop* ownerLoop(){ return loop_; }$/;"	f	class:JKYi::net::Channel	access:public	signature:()
ownerLoop_	JKYi/reactor/poller.h	/^    EventLoop* ownerLoop_;$/;"	m	class:JKYi::net::Poller	access:private
pack	JKYi/http2/hpack.cc	/^int HPack::pack(HeaderField * header,ByteArray::ptr ba){$/;"	f	class:JKYi::http2::HPack	signature:(HeaderField * header,ByteArray::ptr ba)
pack	JKYi/http2/hpack.cc	/^int HPack::pack(const std::vector<std::pair<std::string,std::string>>& headers,$/;"	f	class:JKYi::http2::HPack	signature:(const std::vector<std::pair<std::string,std::string>>& headers, ByteArray::ptr ba)
pack	JKYi/http2/hpack.cc	/^int HPack::pack(const std::vector<std::pair<std::string,std::string>>& headers,$/;"	f	class:JKYi::http2::HPack	signature:(const std::vector<std::pair<std::string,std::string>>& headers, std::string& out)
pack	JKYi/http2/hpack.h	/^    int pack(HeaderField * header,ByteArray::ptr ba);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(HeaderField * header,ByteArray::ptr ba)
pack	JKYi/http2/hpack.h	/^    int pack(const std::vector<std::pair<std::string,std::string>>&headers,$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(const std::vector<std::pair<std::string,std::string>>&headers, ByteArray::ptr ba)
pack	JKYi/http2/hpack.h	/^    int pack(const std::vector<std::pair<std::string,std::string>>&headers,$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(const std::vector<std::pair<std::string,std::string>>&headers, std::string& out)
pad	JKYi/http2/frame.h	/^    uint8_t pad = 0;                        \/\/Flag & FrameFlagData::PADDED$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
pad	JKYi/http2/frame.h	/^    uint8_t pad = 0;        \/\/flag & FrameFlagHeaders::PADDED$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
pad	JKYi/http2/frame.h	/^    uint8_t pad = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
padding	JKYi/http2/frame.h	/^    std::string padding; $/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
padding	JKYi/http2/frame.h	/^    std::string padding;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
padding	JKYi/http2/frame.h	/^    std::string padding;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
parent_id	JKYi/daemon.h	/^   pid_t parent_id = 0;$/;"	m	struct:JKYi::ProcessInfo	access:public
parent_start_time	JKYi/daemon.h	/^   uint64_t parent_start_time = 0;$/;"	m	struct:JKYi::ProcessInfo	access:public
parse	JKYi/http2/hpack.cc	/^int HPack::parse(ByteArray::ptr ba,int length){$/;"	f	class:JKYi::http2::HPack	signature:(ByteArray::ptr ba,int length)
parse	JKYi/http2/hpack.cc	/^int HPack::parse(std::string& data){$/;"	f	class:JKYi::http2::HPack	signature:(std::string& data)
parse	JKYi/http2/hpack.h	/^    int parse(ByteArray::ptr ba,int length);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(ByteArray::ptr ba,int length)
parse	JKYi/http2/hpack.h	/^    int parse(std::string & data);$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:(std::string & data)
parseFrom	JKYi/http2/frame.cc	/^Frame::ptr FrameCodec::parseFrom(Stream::ptr stream){$/;"	f	class:JKYi::http2::FrameCodec	signature:(Stream::ptr stream)
parseFrom	JKYi/http2/frame.h	/^    Frame::ptr parseFrom(Stream::ptr stream);$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameCodec	access:public	signature:(Stream::ptr stream)
parseFrom	JKYi/protocol.h	/^    virtual Message::ptr parseFrom(Stream::ptr stream) = 0;$/;"	p	class:JKYi::MessageDecoder	access:public	signature:(Stream::ptr stream)
parseFromByteArray	JKYi/protocol.cc	/^bool Notify::parseFromByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Notify	signature:(ByteArray::ptr bytearray)
parseFromByteArray	JKYi/protocol.cc	/^bool Request::parseFromByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Request	signature:(ByteArray::ptr bytearray)
parseFromByteArray	JKYi/protocol.cc	/^bool Response::parseFromByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Response	signature:(ByteArray::ptr bytearray)
parseFromByteArray	JKYi/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) = 0;$/;"	p	class:JKYi::Message	access:public	signature:(ByteArray::ptr bytearray)
payload	JKYi/http/ws_session.h	/^   uint32_t payload: 7;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
pcmd	JKYi/db/redis.cc	/^void FoxRedis::pcmd(FCtx * fctx){$/;"	f	class:JKYi::FoxRedis	signature:(FCtx * fctx)
pcmd	JKYi/db/redis.cc	/^void FoxRedisCluster::pcmd(FCtx* fctx){$/;"	f	class:JKYi::FoxRedisCluster	signature:(FCtx* fctx)
pcmd	JKYi/db/redis.h	/^    virtual void pcmd(FCtx* ctx);$/;"	p	class:JKYi::FoxRedis	access:private	signature:(FCtx* ctx)
pcmd	JKYi/db/redis.h	/^    virtual void pcmd(FCtx* ctx);$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:(FCtx* ctx)
pcond_	JKYi/condition.h	/^    pthread_cond_t pcond_;$/;"	m	class:JKYi::Condition	access:private
peek	JKYi/reactor/Buffer.h	/^    const char * peek()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
peekInt16	JKYi/reactor/Buffer.h	/^    int16_t peekInt16()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
peekInt32	JKYi/reactor/Buffer.h	/^    int32_t peekInt32()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
peekInt64	JKYi/reactor/Buffer.h	/^    int64_t peekInt64()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
peekInt8	JKYi/reactor/Buffer.h	/^    int8_t peekInt8()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
peerAddr_	JKYi/reactor/TcpConnection.h	/^    const Address::ptr peerAddr_;$/;"	m	class:JKYi::net::TcpConnection	access:private
peerAddress	JKYi/reactor/TcpConnection.h	/^    const Address::ptr& peerAddress() const{ return peerAddr_; }$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:() const
pendingFunctors_	JKYi/reactor/EventLoop.h	/^    std::vector<Functor> pendingFunctors_;$/;"	m	class:JKYi::net::EventLoop	access:private
ping	JKYi/db/mysql.cc	/^bool MySQL::ping(){$/;"	f	class:JKYi::MySQL	signature:()
ping	JKYi/db/mysql.h	/^    bool ping();$/;"	p	class:JKYi::MySQL	access:public	signature:()
ping	JKYi/http/ws_connection.cc	/^int32_t WSConnection::ping(){$/;"	f	class:JKYi::http::WSConnection	signature:()
ping	JKYi/http/ws_connection.h	/^    int32_t ping();$/;"	p	class:JKYi::http::WSConnection	access:public	signature:()
ping	JKYi/http/ws_session.cc	/^int32_t WSSession::ping(){$/;"	f	class:JKYi::http::WSSession	signature:()
ping	JKYi/http/ws_session.h	/^    int32_t ping();$/;"	p	class:JKYi::http::WSSession	access:public	signature:()
pinit	JKYi/db/redis.cc	/^bool FoxRedis::pinit(){$/;"	f	class:JKYi::FoxRedis	signature:()
pinit	JKYi/db/redis.cc	/^bool FoxRedisCluster::pinit(){$/;"	f	class:JKYi::FoxRedisCluster	signature:()
pinit	JKYi/db/redis.h	/^    bool pinit();$/;"	p	class:JKYi::FoxRedis	access:private	signature:()
pinit	JKYi/db/redis.h	/^    bool pinit();$/;"	p	class:JKYi::FoxRedisCluster	access:private	signature:()
poll	JKYi/reactor/poller.h	/^    virtual Timestamp poll(int timeoutMs,ChannelList* activeChannels) = 0;$/;"	p	class:JKYi::net::Poller	access:public	signature:(int timeoutMs,ChannelList* activeChannels)
poll	JKYi/reactor/poller/epollPoller.cc	/^Timestamp EpollPoller::poll(int timeoutMs,ChannelList* activeChannels){$/;"	f	class:JKYi::net::EpollPoller	signature:(int timeoutMs,ChannelList* activeChannels)
poll	JKYi/reactor/poller/pollPoller.cc	/^Timestamp PollPoller::poll(int timeoutMs,ChannelList* activeChannels){$/;"	f	class:JKYi::net::PollPoller	signature:(int timeoutMs,ChannelList* activeChannels)
pollReturnTime	JKYi/reactor/EventLoop.h	/^    Timestamp pollReturnTime()const { return pollReturnTime_; }$/;"	f	class:JKYi::net::EventLoop	access:public	signature:() const
pollReturnTime_	JKYi/reactor/EventLoop.h	/^    Timestamp pollReturnTime_;$/;"	m	class:JKYi::net::EventLoop	access:private
poller_	JKYi/reactor/EventLoop.h	/^    std::unique_ptr<Poller> poller_;$/;"	m	class:JKYi::net::EventLoop	access:private
pollfds_	JKYi/reactor/poller/pollPoller.h	/^   PollFdList pollfds_;$/;"	m	class:JKYi::net::PollPoller	access:private
pong	JKYi/http/ws_connection.cc	/^int32_t WSConnection::pong(){$/;"	f	class:JKYi::http::WSConnection	signature:()
pong	JKYi/http/ws_connection.h	/^    int32_t pong();$/;"	p	class:JKYi::http::WSConnection	access:public	signature:()
pong	JKYi/http/ws_session.cc	/^int32_t WSSession::pong(){$/;"	f	class:JKYi::http::WSSession	signature:()
pong	JKYi/http/ws_session.h	/^    int32_t pong();$/;"	p	class:JKYi::http::WSSession	access:public	signature:()
pop	JKYi/ds/blocking_queue.h	/^    data_type pop(){$/;"	f	class:JKYi::ds::BlockingQueue	access:public	signature:()
prepare	JKYi/db/db.h	/^    virtual IStmt::ptr prepare(const std::string& stmt) = 0;$/;"	p	class:JKYi::IDB	access:public	signature:(const std::string& stmt)
prepare	JKYi/db/mysql.cc	/^JKYi::IStmt::ptr MySQL::prepare(const std::string& sql){$/;"	f	class:JKYi::MySQL	signature:(const std::string& sql)
prepend	JKYi/reactor/Buffer.h	/^    void prepend(const void * data,size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const void * data,size_t len)
prependInt16	JKYi/reactor/Buffer.h	/^    void prependInt16(int16_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int16_t x)
prependInt32	JKYi/reactor/Buffer.h	/^    void prependInt32(int32_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int32_t x)
prependInt64	JKYi/reactor/Buffer.h	/^    void prependInt64(int64_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int64_t x)
prependInt8	JKYi/reactor/Buffer.h	/^    void prependInt8(int8_t x){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(int8_t x)
prependableBytes	JKYi/reactor/Buffer.h	/^    size_t prependableBytes()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
printActiveChannels	JKYi/reactor/EventLoop.cc	/^void EventLoop::printActiveChannels()const{$/;"	f	class:JKYi::net::EventLoop	signature:() const
printActiveChannels	JKYi/reactor/EventLoop.h	/^    void printActiveChannels()const;$/;"	p	class:JKYi::net::EventLoop	access:private	signature:() const
printData	tests/test_mysql.cc	/^void printData(JKYi::ISQLData::ptr data){$/;"	f	signature:(JKYi::ISQLData::ptr data)
printHelp	JKYi/env.cc	/^void Env::printHelp(){$/;"	f	class:JKYi::Env	signature:()
printHelp	JKYi/env.h	/^     void printHelp();$/;"	p	class:JKYi::Env	access:public	signature:()
print_yaml	tests/test_config.cc	/^void print_yaml(const YAML::Node&node,int level){$/;"	f	signature:(const YAML::Node&node,int level)
priority	JKYi/http2/frame.h	/^    PriorityFrame priority; \/\/flag & FrameFlagHeaders::PRIORITY$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
process_worker	JKYi/tcp_server.h	/^    std::string process_worker;$/;"	m	struct:JKYi::TcpServerConf	access:public
pthreadId_	JKYi/reactor/Thread.h	/^    pthread_t pthreadId_;$/;"	m	class:JKYi::net::Thread	access:private
ptr	JKYi/address.h	/^	typedef std::shared_ptr<Address> ptr;$/;"	t	class:JKYi::Address	access:public
ptr	JKYi/address.h	/^	typedef std::shared_ptr<IPAddress> ptr;$/;"	t	class:JKYi::IPAddress	access:public
ptr	JKYi/address.h	/^	typedef std::shared_ptr<IPv4Address> ptr;$/;"	t	class:JKYi::IPv4Address	access:public
ptr	JKYi/address.h	/^	typedef std::shared_ptr<IPv6Address> ptr;$/;"	t	class:JKYi::IPv6Address	access:public
ptr	JKYi/address.h	/^	typedef std::shared_ptr<UnixAddress> ptr;$/;"	t	class:JKYi::UnixAddress	access:public
ptr	JKYi/address.h	/^	typedef std::shared_ptr<UnknowAddress> ptr;$/;"	t	class:JKYi::UnknowAddress	access:public
ptr	JKYi/bytearray.h	/^        char * ptr;$/;"	m	struct:JKYi::ByteArray::Node	access:public
ptr	JKYi/bytearray.h	/^    typedef std::shared_ptr<ByteArray> ptr;$/;"	t	class:JKYi::ByteArray	access:public
ptr	JKYi/config.h	/^   typedef std::shared_ptr<ConfigVar<T>> ptr;$/;"	t	class:JKYi::ConfigVar	access:public
ptr	JKYi/config.h	/^   typedef std::shared_ptr<ConfigVarBase> ptr;$/;"	t	class:JKYi::ConfigVarBase	access:public
ptr	JKYi/db/db.h	/^    typedef std::shared_ptr<IDB> ptr;$/;"	t	class:JKYi::IDB	access:public
ptr	JKYi/db/db.h	/^    typedef std::shared_ptr<ISQLData> ptr;$/;"	t	class:JKYi::ISQLData	access:public
ptr	JKYi/db/db.h	/^    typedef std::shared_ptr<IStmt> ptr;$/;"	t	class:JKYi::IStmt	access:public
ptr	JKYi/db/db.h	/^    typedef std::shared_ptr<ITransaction> ptr;$/;"	t	class:JKYi::ITransaction	access:public
ptr	JKYi/db/fox_thread.h	/^    typedef std::shared_ptr<FoxThread> ptr;$/;"	t	class:JKYi::FoxThread	access:public
ptr	JKYi/db/fox_thread.h	/^    typedef std::shared_ptr<FoxThreadPool> ptr;$/;"	t	class:JKYi::FoxThreadPool	access:public
ptr	JKYi/db/fox_thread.h	/^    typedef std::shared_ptr<IFoxThread> ptr;$/;"	t	class:JKYi::IFoxThread	access:public
ptr	JKYi/db/mysql.h	/^    typedef std::shared_ptr<MySQL> ptr;$/;"	t	class:JKYi::MySQL	access:public
ptr	JKYi/db/mysql.h	/^    typedef std::shared_ptr<MySQLRes> ptr;$/;"	t	class:JKYi::MySQLRes	access:public
ptr	JKYi/db/mysql.h	/^    typedef std::shared_ptr<MySQLStmt> ptr;$/;"	t	class:JKYi::MySQLStmt	access:public
ptr	JKYi/db/mysql.h	/^    typedef std::shared_ptr<MySQLStmtRes> ptr;$/;"	t	class:JKYi::MySQLStmtRes	access:public
ptr	JKYi/db/mysql.h	/^   typedef std::shared_ptr<MySQLTransaction> ptr;$/;"	t	class:JKYi::MySQLTransaction	access:public
ptr	JKYi/db/redis.h	/^        typedef std::shared_ptr<Ctx> ptr;$/;"	t	struct:JKYi::FoxRedis::Ctx	access:public
ptr	JKYi/db/redis.h	/^        typedef std::shared_ptr<Ctx> ptr;$/;"	t	struct:JKYi::FoxRedisCluster::Ctx	access:public
ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr <ISyncRedis> ptr;$/;"	t	class:JKYi::ISyncRedis	access:public
ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr<FoxRedis> ptr;$/;"	t	class:JKYi::FoxRedis	access:public
ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr<FoxRedisCluster> ptr;$/;"	t	class:JKYi::FoxRedisCluster	access:public
ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr<IRedis> ptr;$/;"	t	class:JKYi::IRedis	access:public
ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr<Redis> ptr;$/;"	t	class:JKYi::Redis	access:public
ptr	JKYi/db/redis.h	/^    typedef std::shared_ptr<RedisCluster> ptr;$/;"	t	class:JKYi::RedisCluster	access:public
ptr	JKYi/ds/blocking_queue.h	/^    typedef std::shared_ptr<BlockingQueue> ptr;$/;"	t	class:JKYi::ds::BlockingQueue	access:public
ptr	JKYi/fdmanager.h	/^   typedef std::shared_ptr<FdCtx> ptr;$/;"	t	class:JKYi::FdCtx	access:public
ptr	JKYi/fiber.h	/^   typedef std::shared_ptr<Fiber> ptr;$/;"	t	class:JKYi::Fiber	access:public
ptr	JKYi/http/http.h	/^    typedef std::shared_ptr<HttpRequest> ptr;$/;"	t	class:JKYi::http::HttpRequest	access:public
ptr	JKYi/http/http.h	/^    typedef std::shared_ptr<HttpResponse> ptr;$/;"	t	class:JKYi::http::HttpResponse	access:public
ptr	JKYi/http/http_connection.h	/^    typedef std::shared_ptr<HttpConnection> ptr;$/;"	t	class:JKYi::http::HttpConnection	access:public
ptr	JKYi/http/http_connection.h	/^    typedef std::shared_ptr<HttpConnectionPool> ptr;$/;"	t	class:JKYi::http::HttpConnectionPool	access:public
ptr	JKYi/http/http_connection.h	/^    typedef std::shared_ptr<HttpResult> ptr;$/;"	t	struct:JKYi::http::HttpResult	access:public
ptr	JKYi/http/http_parser.h	/^    typedef std::shared_ptr<HttpRequestParser> ptr;$/;"	t	class:JKYi::http::HttpRequestParser	access:public
ptr	JKYi/http/http_parser.h	/^    typedef std::shared_ptr<HttpResponseParser> ptr;$/;"	t	class:JKYi::http::HttpResponseParser	access:public
ptr	JKYi/http/http_server.h	/^    typedef std::shared_ptr<HttpServer> ptr;$/;"	t	class:JKYi::http::HttpServer	access:public
ptr	JKYi/http/http_session.h	/^    typedef std::shared_ptr<HttpSession> ptr;$/;"	t	class:JKYi::http::HttpSession	access:public
ptr	JKYi/http/servlet.h	/^    typedef std::shared_ptr<FunctionServlet> ptr;$/;"	t	class:JKYi::http::FunctionServlet	access:public
ptr	JKYi/http/servlet.h	/^    typedef std::shared_ptr<NotFoundServlet> ptr;$/;"	t	class:JKYi::http::NotFoundServlet	access:public
ptr	JKYi/http/servlet.h	/^    typedef std::shared_ptr<Servlet> ptr;$/;"	t	class:JKYi::http::Servlet	access:public
ptr	JKYi/http/servlet.h	/^    typedef std::shared_ptr<ServletDispatch> ptr;$/;"	t	class:JKYi::http::ServletDispatch	access:public
ptr	JKYi/http/ws_connection.h	/^    typedef std::shared_ptr<WSConnection> ptr;$/;"	t	class:JKYi::http::WSConnection	access:public
ptr	JKYi/http/ws_server.h	/^    typedef std::shared_ptr<WSServer> ptr;$/;"	t	class:JKYi::http::WSServer	access:public
ptr	JKYi/http/ws_servlet.h	/^    typedef std::shared_ptr<FunctionWSServlet> ptr;$/;"	t	class:JKYi::http::FunctionWSServlet	access:public
ptr	JKYi/http/ws_servlet.h	/^    typedef std::shared_ptr<WSServlet> ptr;$/;"	t	class:JKYi::http::WSServlet	access:public
ptr	JKYi/http/ws_servlet.h	/^    typedef std::shared_ptr<WSServletDispatch> ptr;$/;"	t	class:JKYi::http::WSServletDispatch	access:public
ptr	JKYi/http/ws_session.h	/^    typedef std::shared_ptr<WSFrameMessage> ptr;$/;"	t	class:JKYi::http::WSFrameMessage	access:public
ptr	JKYi/http/ws_session.h	/^    typedef std::shared_ptr<WSSession> ptr;$/;"	t	class:JKYi::http::WSSession	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<DataFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::DataFrame	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<Frame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<FrameCodec> ptr;$/;"	t	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameCodec	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<FrameHeader> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<GoAwayFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<HeadersFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::HeadersFrame	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<IFrame> ptr;$/;"	t	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<PingFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<PriorityFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<PushPromisedFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<RstStreamFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::RstStreamFrame	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<SettingsFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame	access:public
ptr	JKYi/http2/frame.h	/^    typedef std::shared_ptr<WindowUpdateFrame> ptr;$/;"	t	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame	access:public
ptr	JKYi/http2/hpack.h	/^    typedef std::shared_ptr<HPack> ptr;$/;"	t	class:JKYi::http2::IndexType::HPack	access:public
ptr	JKYi/iomanager.h	/^   typedef std::shared_ptr<IOManager> ptr;$/;"	t	class:JKYi::IOManager	access:public
ptr	JKYi/log.h	/^       typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:JKYi::LogFormatter::FormatItem	access:public
ptr	JKYi/log.h	/^     typedef std::shared_ptr<FileLogAppender> ptr;$/;"	t	class:JKYi::FileLogAppender	access:public
ptr	JKYi/log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:JKYi::LogAppender	access:public
ptr	JKYi/log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:JKYi::LogFormatter	access:public
ptr	JKYi/log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:JKYi::Logger	access:public
ptr	JKYi/log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:JKYi::StdoutLogAppender	access:public
ptr	JKYi/log.h	/^   typedef std::shared_ptr<LogEvent> ptr; $/;"	t	class:JKYi::LogEvent	access:public
ptr	JKYi/module.h	/^    typedef std::shared_ptr<Module> ptr;$/;"	t	class:JKYi::Module	access:public
ptr	JKYi/protocol.h	/^    typedef std::shared_ptr<Message> ptr;$/;"	t	class:JKYi::Message	access:public
ptr	JKYi/protocol.h	/^    typedef std::shared_ptr<MessageDecoder> ptr;$/;"	t	class:JKYi::MessageDecoder	access:public
ptr	JKYi/protocol.h	/^    typedef std::shared_ptr<Notify> ptr;$/;"	t	class:JKYi::Notify	access:public
ptr	JKYi/protocol.h	/^    typedef std::shared_ptr<Request> ptr;$/;"	t	class:JKYi::Request	access:public
ptr	JKYi/protocol.h	/^    typedef std::shared_ptr<Response> ptr;$/;"	t	class:JKYi::Response	access:public
ptr	JKYi/reactor/TcpConnection.h	/^    typedef std::shared_ptr<TcpConnection> ptr;$/;"	t	class:JKYi::net::TcpConnection	access:public
ptr	JKYi/reactor/channel.h	/^    typedef std::shared_ptr<Channel> ptr;$/;"	t	class:JKYi::net::Channel	access:public
ptr	JKYi/scheduler.h	/^   typedef std::shared_ptr<Scheduler> ptr;$/;"	t	class:JKYi::Scheduler	access:public
ptr	JKYi/socket.h	/^    typedef std::shared_ptr<SSLSocket> ptr;$/;"	t	class:JKYi::SSLSocket	access:public
ptr	JKYi/socket.h	/^    typedef std::shared_ptr<Socket> ptr;$/;"	t	class:JKYi::Socket	access:public
ptr	JKYi/stream.h	/^    typedef std::shared_ptr<Stream> ptr;$/;"	t	class:JKYi::Stream	access:public
ptr	JKYi/stream/socket_stream.h	/^     typedef std::shared_ptr<SocketStream> ptr;$/;"	t	class:JKYi::SocketStream	access:public
ptr	JKYi/tcp_server.h	/^    typedef std::shared_ptr<TcpServer> ptr;$/;"	t	class:JKYi::TcpServer	access:public
ptr	JKYi/tcp_server.h	/^    typedef std::shared_ptr<TcpServerConf> ptr;$/;"	t	struct:JKYi::TcpServerConf	access:public
ptr	JKYi/thread.h	/^   typedef std::shared_ptr<Thread> ptr;$/;"	t	class:JKYi::Thread	access:public
ptr	JKYi/timer.h	/^   typedef std::shared_ptr<Timer> ptr;$/;"	t	class:JKYi::Timer	access:public
ptr	JKYi/uri.h	/^    typedef std::shared_ptr<Uri> ptr;$/;"	t	class:JKYi::Uri	access:public
ptr	JKYi/worker.h	/^    typedef std::shared_ptr<WorkerManager> ptr;$/;"	t	class:JKYi::WorkerManager	access:public
ptr	JKYi/zk_client.h	/^    typedef std::shared_ptr<ZKClient> ptr;$/;"	t	class:JKYi::ZKClient	access:public
ptr	template/template/my_module.h	/^    typedef std::shared_ptr<MyModule> ptr;$/;"	t	class:name_space::MyModule	access:public
ptr_	JKYi/reactor/StringPiece.h	/^  const char*   ptr_;$/;"	m	class:JKYi::net::StringPiece	access:private
push	JKYi/BlockingQueue.h	/^    void push(T&& t){$/;"	f	class:JKYi::BlockingQueue	access:public	signature:(T&& t)
push	JKYi/BlockingQueue.h	/^    void push(const T& t){$/;"	f	class:JKYi::BlockingQueue	access:public	signature:(const T& t)
push	JKYi/BoundedBlockingQueue.h	/^    void push(T&& t){$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:(T&& t)
push	JKYi/BoundedBlockingQueue.h	/^    void push(const T& t){$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:(const T& t)
push	JKYi/ds/blocking_queue.h	/^    size_t push(const data_type& data){$/;"	f	class:JKYi::ds::BlockingQueue	access:public	signature:(const data_type& data)
qnxnto	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.12.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
query	JKYi/db/db.h	/^    virtual ISQLData::ptr query() = 0;$/;"	p	class:JKYi::IStmt	access:public	signature:()
query	JKYi/db/db.h	/^    virtual ISQLData::ptr query(const char * format,...) = 0;$/;"	p	class:JKYi::ISQLQuery	access:public	signature:(const char * format,...)
query	JKYi/db/db.h	/^    virtual ISQLData::ptr query(const std::string& sql) = 0;$/;"	p	class:JKYi::ISQLQuery	access:public	signature:(const std::string& sql)
query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQL::query(const char * format,...){$/;"	f	class:JKYi::MySQL	signature:(const char * format,...)
query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQL::query(const char * format,va_list ap){$/;"	f	class:JKYi::MySQL	signature:(const char * format,va_list ap)
query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQL::query(const std::string& sql){$/;"	f	class:JKYi::MySQL	signature:(const std::string& sql)
query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name,const char * format,$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const char * format, va_list ap)
query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name,const char * format,...){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const char * format,...)
query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name,const std::string& sql){$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const std::string& sql)
query	JKYi/db/mysql.cc	/^ISQLData::ptr MySQLStmt::query(){$/;"	f	class:JKYi::MySQLStmt	signature:()
query	JKYi/db/mysql.h	/^    ISQLData::ptr query(const char * format,va_list ap);$/;"	p	class:JKYi::MySQL	access:public	signature:(const char * format,va_list ap)
query	JKYi/db/mysql.h	/^    ISQLData::ptr query(const std::string& name,const char * format,...);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const char * format,...)
query	JKYi/db/mysql.h	/^    ISQLData::ptr query(const std::string& name,const char * format,va_list ap);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const char * format,va_list ap)
query	JKYi/db/mysql.h	/^    ISQLData::ptr query(const std::string& name,const std::string& sql);$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const std::string& sql)
query_start	JKYi/http/http11_parser.h	/^      size_t query_start;$/;"	m	struct:http_parser	access:public
query_string	JKYi/http/http11_parser.h	/^      element_cb query_string;$/;"	m	struct:http_parser	access:public
queueInLoop	JKYi/reactor/EventLoop.cc	/^void EventLoop::queueInLoop(Functor cb){$/;"	f	class:JKYi::net::EventLoop	signature:(Functor cb)
queueInLoop	JKYi/reactor/EventLoop.h	/^    void queueInLoop(Functor cb);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Functor cb)
queueSize	JKYi/reactor/EventLoop.cc	/^size_t EventLoop::queueSize()const{$/;"	f	class:JKYi::net::EventLoop	signature:() const
queueSize	JKYi/reactor/EventLoop.h	/^    size_t queueSize()const;$/;"	p	class:JKYi::net::EventLoop	access:public	signature:() const
queue_	JKYi/BlockingQueue.h	/^    std::deque<T> queue_;$/;"	m	class:JKYi::BlockingQueue	access:private
queue_	JKYi/BoundedBlockingQueue.h	/^    boost::circular_buffer<T> queue_;$/;"	m	class:JKYi::BoundedBlockingQueue	access:private
quit	JKYi/reactor/EventLoop.cc	/^void EventLoop::quit(){$/;"	f	class:JKYi::net::EventLoop	signature:()
quit	JKYi/reactor/EventLoop.h	/^    void quit();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
quit_	JKYi/reactor/EventLoop.h	/^    std::atomic<bool> quit_;$/;"	m	class:JKYi::net::EventLoop	access:private
r	JKYi/http2/frame.h	/^            uint32_t r : 1;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon5::__anon6	access:public
r	JKYi/http2/frame.h	/^            uint32_t r : 1;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::__anon12::__anon13	access:public
r	JKYi/http2/frame.h	/^            uint32_t r : 1;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::__anon9::__anon10	access:public
r	JKYi/http2/frame.h	/^            uint32_t r : 1;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::__anon14::__anon15	access:public
r_id	JKYi/http2/frame.h	/^        uint32_t r_id = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon5	access:public
r_increment	JKYi/http2/frame.h	/^        uint32_t r_increment = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::WindowUpdateFrame::__anon14	access:public
r_last_stream_id	JKYi/http2/frame.h	/^        uint32_t r_last_stream_id = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::GoAwayFrame::__anon12	access:public
r_stream_id	JKYi/http2/frame.h	/^        uint32_t r_stream_id = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::__anon9	access:public
random_string	JKYi/util/hash_util.cc	/^std::string random_string(size_t len,const std::string& chars){$/;"	f	namespace:JKYi	signature:(size_t len,const std::string& chars)
random_string	JKYi/util/hash_util.h	/^std::string random_string(size_t len,$/;"	p	namespace:JKYi	signature:(size_t len, const std::string& chars = Ó)
rdlock	JKYi/mutex.h	/^	void rdlock(){$/;"	f	class:JKYi::RWMutex	access:public	signature:()
rds	JKYi/db/redis.h	/^        FoxRedis* rds;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
rds	JKYi/db/redis.h	/^        FoxRedisCluster* rds;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
read	JKYi/bytearray.cc	/^void ByteArray::read(void * buf,size_t len){$/;"	f	class:JKYi::ByteArray	signature:(void * buf,size_t len)
read	JKYi/bytearray.cc	/^void ByteArray::read(void *buf,size_t len,size_t position)const{$/;"	f	class:JKYi::ByteArray	signature:(void *buf,size_t len,size_t position) const
read	JKYi/bytearray.h	/^    void read(void * buf,size_t len);$/;"	p	class:JKYi::ByteArray	access:public	signature:(void * buf,size_t len)
read	JKYi/bytearray.h	/^    void read(void * buf,size_t len,size_t position)const;$/;"	p	class:JKYi::ByteArray	access:public	signature:(void * buf,size_t len,size_t position) const
read	JKYi/hook.cc	/^ssize_t read(int fd,void *buf,size_t count){$/;"	f	signature:(int fd,void *buf,size_t count)
read	JKYi/iomanager.h	/^	 EventContext read;$/;"	m	struct:JKYi::IOManager::FdContext	access:public
read	JKYi/reactor/SocketsOps.cc	/^ssize_t sockets::read(int sockfd, void *buf, size_t count){$/;"	f	class:sockets	signature:(int sockfd, void *buf, size_t count)
read	JKYi/reactor/SocketsOps.h	/^ssize_t read(int sockfd, void *buf, size_t count);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, void *buf, size_t count)
read	JKYi/stream.h	/^    virtual int read(ByteArray::ptr ba,size_t length) = 0;$/;"	p	class:JKYi::Stream	access:public	signature:(ByteArray::ptr ba,size_t length)
read	JKYi/stream.h	/^    virtual int read(void * buffer,size_t length) = 0;$/;"	p	class:JKYi::Stream	access:public	signature:(void * buffer,size_t length)
read	JKYi/stream/socket_stream.cc	/^int SocketStream::read(ByteArray::ptr ba,size_t length){$/;"	f	class:JKYi::SocketStream	signature:(ByteArray::ptr ba,size_t length)
read	JKYi/stream/socket_stream.cc	/^int SocketStream::read(void * buffer,size_t length){$/;"	f	class:JKYi::SocketStream	signature:(void * buffer,size_t length)
readCallback_	JKYi/reactor/channel.h	/^    ReadEventCallback readCallback_;  \/\/æåºå±çè¯»åè°$/;"	m	class:JKYi::net::Channel	access:private
readDouble	JKYi/bytearray.cc	/^double ByteArray::readDouble(){$/;"	f	class:JKYi::ByteArray	signature:()
readDouble	JKYi/bytearray.h	/^    double  readDouble();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readFd	JKYi/reactor/Buffer.cc	/^ssize_t Buffer::readFd(int fd,int * savedErrno){$/;"	f	class:JKYi::net::Buffer	signature:(int fd,int * savedErrno)
readFd	JKYi/reactor/Buffer.h	/^    ssize_t readFd(int fd,int* savedErrno);$/;"	p	class:JKYi::net::Buffer	access:public	signature:(int fd,int* savedErrno)
readFint16	JKYi/bytearray.cc	/^int16_t ByteArray::readFint16(){$/;"	f	class:JKYi::ByteArray	signature:()
readFint16	JKYi/bytearray.h	/^    int16_t  readFint16();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readFint32	JKYi/bytearray.cc	/^int32_t ByteArray::readFint32(){$/;"	f	class:JKYi::ByteArray	signature:()
readFint32	JKYi/bytearray.h	/^    int32_t  readFint32();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readFint64	JKYi/bytearray.cc	/^int64_t ByteArray::readFint64(){$/;"	f	class:JKYi::ByteArray	signature:()
readFint64	JKYi/bytearray.h	/^    int64_t  readFint64();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readFint8	JKYi/bytearray.cc	/^int8_t ByteArray::readFint8(){$/;"	f	class:JKYi::ByteArray	signature:()
readFint8	JKYi/bytearray.h	/^    int8_t   readFint8();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readFixSize	JKYi/stream.cc	/^int Stream::readFixSize(ByteArray::ptr ba,size_t length){$/;"	f	class:JKYi::Stream	signature:(ByteArray::ptr ba,size_t length)
readFixSize	JKYi/stream.cc	/^int Stream::readFixSize(void * buffer,size_t length){$/;"	f	class:JKYi::Stream	signature:(void * buffer,size_t length)
readFixSize	JKYi/stream.h	/^    virtual int readFixSize(ByteArray::ptr ba,size_t length);$/;"	p	class:JKYi::Stream	access:public	signature:(ByteArray::ptr ba,size_t length)
readFixSize	JKYi/stream.h	/^    virtual int readFixSize(void * buffer,size_t length);$/;"	p	class:JKYi::Stream	access:public	signature:(void * buffer,size_t length)
readFloat	JKYi/bytearray.cc	/^float ByteArray::readFloat(){$/;"	f	class:JKYi::ByteArray	signature:()
readFloat	JKYi/bytearray.h	/^    float   readFloat();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readFrom	JKYi/http2/frame.cc	/^bool DataFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::DataFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
readFrom	JKYi/http2/frame.cc	/^bool FrameHeader::readFrom(ByteArray::ptr ba){$/;"	f	class:JKYi::http2::FrameHeader	signature:(ByteArray::ptr ba)
readFrom	JKYi/http2/frame.cc	/^bool GoAwayFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::GoAwayFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
readFrom	JKYi/http2/frame.cc	/^bool HeadersFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::HeadersFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
readFrom	JKYi/http2/frame.cc	/^bool PingFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PingFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
readFrom	JKYi/http2/frame.cc	/^bool PriorityFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PriorityFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
readFrom	JKYi/http2/frame.cc	/^bool PushPromisedFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PushPromisedFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
readFrom	JKYi/http2/frame.cc	/^bool RstStreamFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::RstStreamFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
readFrom	JKYi/http2/frame.cc	/^bool SettingsFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::SettingsFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
readFrom	JKYi/http2/frame.cc	/^bool SettingsItem::readFrom(ByteArray::ptr ba){$/;"	f	class:JKYi::http2::SettingsItem	signature:(ByteArray::ptr ba)
readFrom	JKYi/http2/frame.cc	/^bool WindowUpdateFrame::readFrom(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::WindowUpdateFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
readFrom	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public	signature:(ByteArray::ptr ba)
readFrom	JKYi/http2/frame.h	/^    bool readFrom(ByteArray::ptr ba);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public	signature:(ByteArray::ptr ba)
readFrom	JKYi/http2/frame.h	/^    virtual bool readFrom(ByteArray::ptr ba,const FrameHeader& header) = 0;$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	access:public	signature:(ByteArray::ptr ba,const FrameHeader& header)
readFromFile	JKYi/bytearray.cc	/^bool ByteArray::readFromFile(const std::string& name){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& name)
readFromFile	JKYi/bytearray.h	/^    bool readFromFile(const std::string& name);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& name)
readFuint16	JKYi/bytearray.cc	/^uint16_t ByteArray::readFuint16(){$/;"	f	class:JKYi::ByteArray	signature:()
readFuint16	JKYi/bytearray.h	/^    uint16_t readFuint16();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readFuint32	JKYi/bytearray.cc	/^uint32_t ByteArray::readFuint32(){$/;"	f	class:JKYi::ByteArray	signature:()
readFuint32	JKYi/bytearray.h	/^    uint32_t readFuint32();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readFuint64	JKYi/bytearray.cc	/^uint64_t ByteArray::readFuint64(){$/;"	f	class:JKYi::ByteArray	signature:()
readFuint64	JKYi/bytearray.h	/^    uint64_t readFuint64();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readFuint8	JKYi/bytearray.cc	/^uint8_t ByteArray::readFuint8(){$/;"	f	class:JKYi::ByteArray	signature:()
readFuint8	JKYi/bytearray.h	/^    uint8_t  readFuint8();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readInt16	JKYi/reactor/Buffer.h	/^    int16_t readInt16(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
readInt32	JKYi/bytearray.cc	/^int32_t ByteArray::readInt32(){$/;"	f	class:JKYi::ByteArray	signature:()
readInt32	JKYi/bytearray.h	/^    int32_t  readInt32();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readInt32	JKYi/reactor/Buffer.h	/^    int32_t readInt32(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
readInt64	JKYi/bytearray.cc	/^int64_t ByteArray::readInt64(){$/;"	f	class:JKYi::ByteArray	signature:()
readInt64	JKYi/bytearray.h	/^    int64_t  readInt64();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readInt64	JKYi/reactor/Buffer.h	/^    int64_t readInt64(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
readInt8	JKYi/reactor/Buffer.h	/^    int8_t readInt8(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
readStringF16	JKYi/bytearray.cc	/^std::string ByteArray::readStringF16(){$/;"	f	class:JKYi::ByteArray	signature:()
readStringF16	JKYi/bytearray.h	/^    std::string readStringF16();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readStringF32	JKYi/bytearray.cc	/^std::string ByteArray::readStringF32(){$/;"	f	class:JKYi::ByteArray	signature:()
readStringF32	JKYi/bytearray.h	/^    std::string readStringF32();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readStringF64	JKYi/bytearray.cc	/^std::string ByteArray::readStringF64(){$/;"	f	class:JKYi::ByteArray	signature:()
readStringF64	JKYi/bytearray.h	/^    std::string readStringF64();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readStringVint	JKYi/bytearray.cc	/^std::string ByteArray::readStringVint(){$/;"	f	class:JKYi::ByteArray	signature:()
readStringVint	JKYi/bytearray.h	/^    std::string readStringVint();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readTimerfd	JKYi/reactor/timerQueue.cc	/^void readTimerfd(int timerfd,Timestamp now){$/;"	f	namespace:JKYi::net::detail	signature:(int timerfd,Timestamp now)
readUint32	JKYi/bytearray.cc	/^uint32_t ByteArray::readUint32(){$/;"	f	class:JKYi::ByteArray	signature:()
readUint32	JKYi/bytearray.h	/^    uint32_t readUint32();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
readUint64	JKYi/bytearray.cc	/^uint64_t ByteArray::readUint64(){$/;"	f	class:JKYi::ByteArray	signature:()
readUint64	JKYi/bytearray.h	/^    uint64_t readUint64();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
read_cb	JKYi/db/fox_thread.cc	/^void FoxThread::read_cb(evutil_socket_t sock,short which,void * args){$/;"	f	class:JKYi::FoxThread	signature:(evutil_socket_t sock,short which,void * args)
read_cb	JKYi/db/fox_thread.h	/^    static void read_cb(evutil_socket_t sock,short which,void * args);$/;"	p	class:JKYi::FoxThread	access:private	signature:(evutil_socket_t sock,short which,void * args)
read_fun	JKYi/hook.h	/^typedef ssize_t (*read_fun)(int fd, void *buf, size_t count);$/;"	t
readableBytes	JKYi/reactor/Buffer.h	/^    size_t readableBytes()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
readerIndex_	JKYi/reactor/Buffer.h	/^    size_t readerIndex_;            \/\/å½åå¯ä»¥è¯»çç¬¬ä¸ä¸ªå­è$/;"	m	class:JKYi::net::Buffer	access:private
reading_	JKYi/reactor/TcpConnection.h	/^    bool reading_;$/;"	m	class:JKYi::net::TcpConnection	access:private
readv	JKYi/hook.cc	/^ssize_t readv(int fd, const struct iovec *iov, int iovcnt) {$/;"	f	signature:(int fd, const struct iovec *iov, int iovcnt)
readv	JKYi/reactor/SocketsOps.cc	/^ssize_t sockets::readv(int sockfd, const struct iovec *iov, int iovcnt){$/;"	f	class:sockets	signature:(int sockfd, const struct iovec *iov, int iovcnt)
readv	JKYi/reactor/SocketsOps.h	/^ssize_t readv(int sockfd, const struct iovec *iov, int iovcnt);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, const struct iovec *iov, int iovcnt)
readv_fun	JKYi/hook.h	/^typedef ssize_t (*readv_fun)(int fd, const struct iovec *iov, int iovcnt);$/;"	t
real_daemon	JKYi/daemon.cc	/^static int real_daemon(int argc,char** argv,$/;"	f	namespace:JKYi	signature:(int argc,char** argv, std::function<int (int argc,char ** argv)>main_cb)
real_start	JKYi/daemon.cc	/^static int real_start(int argc,char ** argv,$/;"	f	namespace:JKYi	signature:(int argc,char ** argv, std::function<int(int argc,char** argv)>main_cb)
reason_phrase	JKYi/http/httpclient_parser.h	/^      element_cb reason_phrase;$/;"	m	struct:httpclient_parser	access:public
reconnect	JKYi/db/redis.cc	/^bool Redis::reconnect(){$/;"	f	class:JKYi::Redis	signature:()
reconnect	JKYi/db/redis.cc	/^bool RedisCluster::reconnect(){$/;"	f	class:JKYi::RedisCluster	signature:()
reconnect	JKYi/db/redis.h	/^    virtual bool reconnect() = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:()
reconnect	JKYi/socket.cc	/^bool Socket::reconnect(int64_t timeout_ms){$/;"	f	class:JKYi::Socket	signature:(int64_t timeout_ms)
reconnect	JKYi/socket.h	/^    virtual bool reconnect(int64_t timeout_ms=-1);$/;"	p	class:JKYi::Socket	access:public	signature:(int64_t timeout_ms=-1)
reconnect	JKYi/zk_client.cc	/^bool ZKClient::reconnect(){$/;"	f	class:JKYi::ZKClient	signature:()
reconnect	JKYi/zk_client.h	/^    bool reconnect();$/;"	p	class:JKYi::ZKClient	access:public	signature:()
recv	JKYi/hook.cc	/^ssize_t recv(int sockfd, void *buf, size_t len, int flags) {$/;"	f	signature:(int sockfd, void *buf, size_t len, int flags)
recv	JKYi/socket.cc	/^int SSLSocket::recv(iovec * buffers,size_t length,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(iovec * buffers,size_t length,int flags)
recv	JKYi/socket.cc	/^int SSLSocket::recv(void * buffer,size_t length,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(void * buffer,size_t length,int flags)
recv	JKYi/socket.cc	/^int Socket::recv(struct iovec*buffers,size_t len,int flags){$/;"	f	class:JKYi::Socket	signature:(struct iovec*buffers,size_t len,int flags)
recv	JKYi/socket.cc	/^int Socket::recv(void *buffer,size_t len,int flags){$/;"	f	class:JKYi::Socket	signature:(void *buffer,size_t len,int flags)
recv	JKYi/socket.h	/^    virtual int recv(iovec*buffers,size_t len,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(iovec*buffers,size_t len,int flags=0)
recv	JKYi/socket.h	/^    virtual int recv(void * buffer,size_t len,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(void * buffer,size_t len,int flags=0)
recvFrom	JKYi/socket.cc	/^int SSLSocket::recvFrom(iovec * buffers,size_t length,Address::ptr from,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(iovec * buffers,size_t length,Address::ptr from,int flags)
recvFrom	JKYi/socket.cc	/^int SSLSocket::recvFrom(void * buffer,size_t length,Address::ptr from,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(void * buffer,size_t length,Address::ptr from,int flags)
recvFrom	JKYi/socket.cc	/^int Socket::recvFrom(iovec*buffers,size_t len,Address::ptr from,int flags){$/;"	f	class:JKYi::Socket	signature:(iovec*buffers,size_t len,Address::ptr from,int flags)
recvFrom	JKYi/socket.cc	/^int Socket::recvFrom(void *buffer,size_t len,Address::ptr from,int flags){$/;"	f	class:JKYi::Socket	signature:(void *buffer,size_t len,Address::ptr from,int flags)
recvFrom	JKYi/socket.h	/^    virtual int recvFrom(iovec*buffers,size_t len,Address::ptr from,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(iovec*buffers,size_t len,Address::ptr from,int flags=0)
recvFrom	JKYi/socket.h	/^    virtual int recvFrom(void *buffer,size_t len,Address::ptr from,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(void *buffer,size_t len,Address::ptr from,int flags=0)
recvMessage	JKYi/http/ws_connection.cc	/^WSFrameMessage::ptr WSConnection::recvMessage(){$/;"	f	class:JKYi::http::WSConnection	signature:()
recvMessage	JKYi/http/ws_connection.h	/^    WSFrameMessage::ptr recvMessage();$/;"	p	class:JKYi::http::WSConnection	access:public	signature:()
recvMessage	JKYi/http/ws_session.cc	/^WSFrameMessage::ptr WSSession::recvMessage(){$/;"	f	class:JKYi::http::WSSession	signature:()
recvMessage	JKYi/http/ws_session.h	/^    WSFrameMessage::ptr recvMessage();$/;"	p	class:JKYi::http::WSSession	access:public	signature:()
recvRequest	JKYi/http/http_session.cc	/^HttpRequest::ptr HttpSession::recvRequest(){$/;"	f	class:JKYi::http::HttpSession	signature:()
recvRequest	JKYi/http/http_session.h	/^    HttpRequest::ptr recvRequest();$/;"	p	class:JKYi::http::HttpSession	access:public	signature:()
recvResponse	JKYi/http/http_connection.cc	/^HttpResponse::ptr HttpConnection::recvResponse(){$/;"	f	class:JKYi::http::HttpConnection	signature:()
recvResponse	JKYi/http/http_connection.h	/^    HttpResponse::ptr recvResponse();$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:()
recv_fun	JKYi/hook.h	/^typedef ssize_t (*recv_fun)(int sockfd, void *buf, size_t len, int flags);$/;"	t
recvfrom	JKYi/hook.cc	/^ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen) {$/;"	f	signature:(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen)
recvfrom_fun	JKYi/hook.h	/^typedef ssize_t (*recvfrom_fun)(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);$/;"	t
recvmsg	JKYi/hook.cc	/^ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags) {$/;"	f	signature:(int sockfd, struct msghdr *msg, int flags)
recvmsg_fun	JKYi/hook.h	/^typedef ssize_t (*recvmsg_fun)(int sockfd, struct msghdr *msg, int flags);$/;"	t
refresh	JKYi/timer.cc	/^bool Timer::refresh(){$/;"	f	class:JKYi::Timer	signature:()
refresh	JKYi/timer.h	/^   bool refresh();$/;"	p	class:JKYi::Timer	access:public	signature:()
registerMySQL	JKYi/db/mysql.cc	/^void MySQLManager::registerMySQL(const std::string& name,const std::map<std::string,$/;"	f	class:JKYi::MySQLManager	signature:(const std::string& name,const std::map<std::string, std::string>& params)
registerMySQL	JKYi/db/mysql.h	/^    void registerMySQL(const std::string& name,const std::map<std::string,$/;"	p	class:JKYi::MySQLManager	access:public	signature:(const std::string& name,const std::map<std::string, std::string>& params)
releaseFoxThread	JKYi/db/fox_thread.cc	/^void FoxThreadPool::releaseFoxThread(FoxThread * t){$/;"	f	class:JKYi::FoxThreadPool	signature:(FoxThread * t)
releaseFoxThread	JKYi/db/fox_thread.h	/^    void releaseFoxThread(FoxThread * t);$/;"	p	class:JKYi::FoxThreadPool	access:private	signature:(FoxThread * t)
remove	JKYi/reactor/channel.cc	/^void Channel::remove(){$/;"	f	class:JKYi::net::Channel	signature:()
remove	JKYi/reactor/channel.h	/^    void remove();$/;"	p	class:JKYi::net::Channel	access:public	signature:()
removeAndResetChannel	JKYi/reactor/Connector.cc	/^int Connector::removeAndResetChannel(){$/;"	f	class:JKYi::net::Connector	signature:()
removeAndResetChannel	JKYi/reactor/Connector.h	/^    int removeAndResetChannel();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
removeChannel	JKYi/reactor/EventLoop.cc	/^void EventLoop::removeChannel(Channel* channel){$/;"	f	class:JKYi::net::EventLoop	signature:(Channel* channel)
removeChannel	JKYi/reactor/EventLoop.h	/^    void removeChannel(Channel* channel);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Channel* channel)
removeChannel	JKYi/reactor/poller.h	/^    virtual void removeChannel(Channel* channel) = 0;$/;"	p	class:JKYi::net::Poller	access:public	signature:(Channel* channel)
removeChannel	JKYi/reactor/poller/epollPoller.cc	/^void EpollPoller::removeChannel(Channel* channel){$/;"	f	class:JKYi::net::EpollPoller	signature:(Channel* channel)
removeChannel	JKYi/reactor/poller/pollPoller.cc	/^void PollPoller::removeChannel(Channel * channel){$/;"	f	class:JKYi::net::PollPoller	signature:(Channel * channel)
removeConnection	JKYi/reactor/TcpClient.cc	/^void TcpClient::removeConnection(const TcpConnection::ptr& conn){$/;"	f	class:JKYi::net::TcpClient	signature:(const TcpConnection::ptr& conn)
removeConnection	JKYi/reactor/TcpClient.cc	/^void removeConnection(EventLoop* loop,const TcpConnection::ptr& conn){$/;"	f	namespace:JKYi::net::detail	signature:(EventLoop* loop,const TcpConnection::ptr& conn)
removeConnection	JKYi/reactor/TcpClient.h	/^    void removeConnection(const TcpConnection::ptr& conn);$/;"	p	class:JKYi::net::TcpClient	access:private	signature:(const TcpConnection::ptr& conn)
removeConnection	JKYi/reactor/TcpServer.cc	/^void TcpServer::removeConnection(const TcpConnection::ptr& conn){$/;"	f	class:JKYi::net::TcpServer	signature:(const TcpConnection::ptr& conn)
removeConnection	JKYi/reactor/TcpServer.h	/^    void removeConnection(const TcpConnection::ptr& conn);$/;"	p	class:JKYi::net::TcpServer	access:private	signature:(const TcpConnection::ptr& conn)
removeConnectionInLoop	JKYi/reactor/TcpServer.cc	/^void TcpServer::removeConnectionInLoop(const TcpConnection::ptr& conn){$/;"	f	class:JKYi::net::TcpServer	signature:(const TcpConnection::ptr& conn)
removeConnectionInLoop	JKYi/reactor/TcpServer.h	/^    void removeConnectionInLoop(const TcpConnection::ptr& conn);$/;"	p	class:JKYi::net::TcpServer	access:private	signature:(const TcpConnection::ptr& conn)
removeConnector	JKYi/reactor/TcpClient.cc	/^void removeConnector(const ConnectorPtr& connector){$/;"	f	namespace:JKYi::net::detail	signature:(const ConnectorPtr& connector)
removeHelp	JKYi/env.cc	/^void Env::removeHelp(const std::string& key){$/;"	f	class:JKYi::Env	signature:(const std::string& key)
removeHelp	JKYi/env.h	/^     void removeHelp(const std::string& key);$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key)
remove_prefix	JKYi/reactor/StringPiece.h	/^  void remove_prefix(int n) {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(int n)
remove_suffix	JKYi/reactor/StringPiece.h	/^  void remove_suffix(int n) {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(int n)
reopen	JKYi/log.cc	/^bool FileLogAppender::reopen(){$/;"	f	class:JKYi::FileLogAppender	signature:()
reopen	JKYi/log.h	/^     bool reopen();\/\/éæ°å¯¹æä»¶è¿è¡æå¼ï¼æå¼æåè¿åtrue$/;"	p	class:JKYi::FileLogAppender	access:public	signature:()
repeat_	JKYi/reactor/timer.h	/^    const bool repeat_;             \/\/æ¯å¦éè¦å¾ªç¯è§¦å$/;"	m	class:JKYi::net::Timer	access:private
request_method	JKYi/http/http11_parser.h	/^      element_cb request_method;$/;"	m	struct:http_parser	access:public
request_path	JKYi/http/http11_parser.h	/^      element_cb request_path;$/;"	m	struct:http_parser	access:public
request_uri	JKYi/http/http11_parser.h	/^      element_cb request_uri;$/;"	m	struct:http_parser	access:public
reset	JKYi/fiber.cc	/^void Fiber::reset(std::function<void()>cb){$/;"	f	class:JKYi::Fiber	signature:(std::function<void()>cb)
reset	JKYi/fiber.h	/^	void reset(std::function<void ()>cb);$/;"	p	class:JKYi::Fiber	access:public	signature:(std::function<void ()>cb)
reset	JKYi/reactor/timerQueue.cc	/^void TimerQueue::reset(const std::vector<Entry>& expired,Timestamp now){$/;"	f	class:TimerQueue	signature:(const std::vector<Entry>& expired,Timestamp now)
reset	JKYi/reactor/timerQueue.h	/^    void reset(const std::vector<Entry>& expired,Timestamp now);$/;"	p	class:JKYi::net::TimerQueue	access:private	signature:(const std::vector<Entry>& expired,Timestamp now)
reset	JKYi/scheduler.h	/^	 void reset(){$/;"	f	struct:JKYi::Scheduler::FiberAndThread	access:public	signature:()
reset	JKYi/timer.cc	/^bool Timer::reset(uint64_t ms,bool from_now){$/;"	f	class:JKYi::Timer	signature:(uint64_t ms,bool from_now)
reset	JKYi/timer.h	/^   bool reset(uint64_t ms,bool from_now);$/;"	p	class:JKYi::Timer	access:public	signature:(uint64_t ms,bool from_now)
resetChannel	JKYi/reactor/Connector.cc	/^void Connector::resetChannel(){$/;"	f	class:JKYi::net::Connector	signature:()
resetChannel	JKYi/reactor/Connector.h	/^    void resetChannel();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
resetContext	JKYi/iomanager.cc	/^void IOManager::FdContext::resetContext(EventContext&ctx){$/;"	f	class:JKYi::IOManager::FdContext	signature:(EventContext&ctx)
resetContext	JKYi/iomanager.h	/^	 void resetContext(EventContext&ctx);$/;"	p	struct:JKYi::IOManager::FdContext	access:public	signature:(EventContext&ctx)
resetTimerfd	JKYi/reactor/timerQueue.cc	/^void resetTimerfd(int timerfd,Timestamp expiration){$/;"	f	namespace:JKYi::net::detail	signature:(int timerfd,Timestamp expiration)
restart	JKYi/reactor/Connector.cc	/^void Connector::restart(){$/;"	f	class:JKYi::net::Connector	signature:()
restart	JKYi/reactor/Connector.h	/^    void restart();     \/\/must be called in loop thread$/;"	p	class:JKYi::net::Connector	access:public	signature:()
restart	JKYi/reactor/timer.cc	/^void Timer::restart(Timestamp now){$/;"	f	class:JKYi::net::Timer	signature:(Timestamp now)
restart	JKYi/reactor/timer.h	/^     void restart(Timestamp now);$/;"	p	class:JKYi::net::Timer	access:public	signature:(Timestamp now)
restart_count	JKYi/daemon.h	/^   uint32_t restart_count = 0;$/;"	m	struct:JKYi::ProcessInfo	access:public
result	JKYi/http/http_connection.h	/^    int result;$/;"	m	struct:JKYi::http::HttpResult	access:public
retrieve	JKYi/reactor/Buffer.h	/^    void retrieve(size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t len)
retrieveAll	JKYi/reactor/Buffer.h	/^    void retrieveAll(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
retrieveAllAsString	JKYi/reactor/Buffer.h	/^    std::string retrieveAllAsString(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
retrieveAsString	JKYi/reactor/Buffer.h	/^    std::string retrieveAsString(size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t len)
retrieveInt16	JKYi/reactor/Buffer.h	/^    void retrieveInt16(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
retrieveInt32	JKYi/reactor/Buffer.h	/^    void retrieveInt32(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
retrieveInt64	JKYi/reactor/Buffer.h	/^    void retrieveInt64(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
retrieveInt8	JKYi/reactor/Buffer.h	/^    void retrieveInt8(){$/;"	f	class:JKYi::net::Buffer	access:public	signature:()
retrieveUntil	JKYi/reactor/Buffer.h	/^    void retrieveUntil(const char * end){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(const char * end)
retry	JKYi/reactor/Connector.cc	/^void Connector::retry(int sockfd){$/;"	f	class:JKYi::net::Connector	signature:(int sockfd)
retry	JKYi/reactor/Connector.h	/^    void retry(int sockfd);$/;"	p	class:JKYi::net::Connector	access:private	signature:(int sockfd)
retry	JKYi/reactor/TcpClient.h	/^    bool retry()const{$/;"	f	class:JKYi::net::TcpClient	access:public	signature:() const
retryDelayMs_	JKYi/reactor/Connector.h	/^    int retryDelayMs_;$/;"	m	class:JKYi::net::Connector	access:private
retry_	JKYi/reactor/TcpClient.h	/^    bool retry_;$/;"	m	class:JKYi::net::TcpClient	access:private
reventsToString	JKYi/reactor/channel.cc	/^std::string Channel::reventsToString()const{$/;"	f	class:JKYi::net::Channel	signature:() const
reventsToString	JKYi/reactor/channel.h	/^    std::string reventsToString()const;$/;"	p	class:JKYi::net::Channel	access:public	signature:() const
revents_	JKYi/reactor/channel.h	/^    int revents_;                 \/\/å®éåççäºä»¶$/;"	m	class:JKYi::net::Channel	access:private
rollback	JKYi/db/db.h	/^    virtual bool rollback() = 0; $/;"	p	class:JKYi::ITransaction	access:public	signature:()
rollback	JKYi/db/mysql.cc	/^bool MySQLTransaction::rollback(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
rpy	JKYi/db/redis.h	/^        ReplyPtr rpy;$/;"	m	struct:JKYi::FoxRedis::FCtx	access:public
rpy	JKYi/db/redis.h	/^        ReplyPtr rpy;$/;"	m	struct:JKYi::FoxRedisCluster::FCtx	access:public
rsp	JKYi/http/http_connection.h	/^    HttpResponse::ptr rsp;$/;"	m	struct:JKYi::http::HttpResult	access:public
rsv1	JKYi/http/ws_session.h	/^   bool rsv1: 1;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
rsv2	JKYi/http/ws_session.h	/^   bool rsv2: 1;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
rsv3	JKYi/http/ws_session.h	/^   bool rsv3: 1;$/;"	m	struct:JKYi::http::WSFrameHead	access:public
run	JKYi/application.cc	/^bool Application::run(){$/;"	f	class:JKYi::Application	signature:()
run	JKYi/application.h	/^    bool run();$/;"	p	class:JKYi::Application	access:public	signature:()
run	JKYi/reactor/timer.h	/^     void run()const{$/;"	f	class:JKYi::net::Timer	access:public	signature:() const
run	JKYi/scheduler.cc	/^void Scheduler::run(){$/;"	f	class:JKYi::Scheduler	signature:()
run	JKYi/scheduler.h	/^   void run();$/;"	p	class:JKYi::Scheduler	access:protected	signature:()
run	JKYi/thread.cc	/^void * Thread::run(void*arg){$/;"	f	class:JKYi::Thread	signature:(void*arg)
run	JKYi/thread.h	/^   static void * run(void*arg);$/;"	p	class:JKYi::Thread	access:private	signature:(void*arg)
run	sample/my_http_server.cc	/^void run(){$/;"	f	signature:()
run	tests/test_http_connection.cc	/^void run(){$/;"	f	signature:()
run	tests/test_http_server.cc	/^void run(){$/;"	f	signature:()
run	tests/test_mysql.cc	/^void run(){$/;"	f	signature:()
run	tests/test_reactor_thread.cc	/^void run(){$/;"	f	signature:()
run	tests/test_redis.cc	/^void run(){$/;"	f	signature:()
run	tests/test_timestamp.cc	/^void run(JKYi::net::EventLoop* loop){$/;"	f	signature:(JKYi::net::EventLoop* loop)
run	tests/test_ws_client.cc	/^void run(){$/;"	f	signature:()
run	tests/test_ws_server.cc	/^void run(){$/;"	f	signature:()
run1	tests/test_timestamp.cc	/^void run1(){$/;"	f	signature:()
runAfter	JKYi/reactor/EventLoop.cc	/^TimerId EventLoop::runAfter(double delay,TimerCallback cb){$/;"	f	class:JKYi::net::EventLoop	signature:(double delay,TimerCallback cb)
runAfter	JKYi/reactor/EventLoop.h	/^    TimerId runAfter(double delay,TimerCallback cb);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(double delay,TimerCallback cb)
runAt	JKYi/reactor/EventLoop.cc	/^TimerId EventLoop::runAt(Timestamp time,TimerCallback cb){$/;"	f	class:JKYi::net::EventLoop	signature:(Timestamp time,TimerCallback cb)
runAt	JKYi/reactor/EventLoop.h	/^    TimerId runAt(Timestamp time,TimerCallback cb);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Timestamp time,TimerCallback cb)
runEvery	JKYi/reactor/EventLoop.cc	/^TimerId EventLoop::runEvery(double interval,TimerCallback cb){$/;"	f	class:JKYi::net::EventLoop	signature:(double interval,TimerCallback cb)
runEvery	JKYi/reactor/EventLoop.h	/^    TimerId runEvery(double interval,TimerCallback cb);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(double interval,TimerCallback cb)
runInLoop	JKYi/reactor/EventLoop.cc	/^void EventLoop::runInLoop(Functor cb){$/;"	f	class:JKYi::net::EventLoop	signature:(Functor cb)
runInLoop	JKYi/reactor/EventLoop.h	/^    void runInLoop(Functor cb);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Functor cb)
runInThread	JKYi/reactor/Thread.cc	/^    void runInThread(){$/;"	f	struct:JKYi::detail::ThreadData	access:public	signature:()
run_fiber	JKYi/application.cc	/^int Application::run_fiber(){$/;"	f	class:JKYi::Application	signature:()
run_fiber	JKYi/application.h	/^    int run_fiber();$/;"	p	class:JKYi::Application	access:private	signature:()
s_connect_timeout	JKYi/hook.cc	/^static uint64_t s_connect_timeout=-1;$/;"	m	namespace:JKYi	file:
s_file2modifytime	JKYi/config.cc	/^static std::map<std::string,uint64_t> s_file2modifytime;$/;"	m	namespace:JKYi	file:
s_frame_types	JKYi/http2/frame.cc	/^static const std::vector<std::string> s_frame_types = {$/;"	m	namespace:JKYi::http2	file:
s_hook_initer	JKYi/hook.cc	/^static _HookIniter s_hook_initer;$/;"	m	namespace:JKYi	file:
s_http_request_buffer_size	JKYi/http/http_parser.cc	/^static uint64_t s_http_request_buffer_size=0;$/;"	m	namespace:JKYi::http	file:
s_http_request_max_body_size	JKYi/http/http_parser.cc	/^static uint64_t s_http_request_max_body_size=0;$/;"	m	namespace:JKYi::http	file:
s_http_response_buffer_size	JKYi/http/http_parser.cc	/^static uint64_t s_http_response_buffer_size=0;$/;"	m	namespace:JKYi::http	file:
s_http_response_max_body_size	JKYi/http/http_parser.cc	/^static uint64_t s_http_response_max_body_size=0;$/;"	m	namespace:JKYi::http	file:
s_index_type_strings	JKYi/http2/hpack.cc	/^static std::vector<std::string> s_index_type_strings = {$/;"	m	namespace:JKYi::http2	file:
s_init	JKYi/socket.cc	/^static _SSLInit s_init;$/;"	m	namespace:JKYi::__anon2	file:
s_method_string	JKYi/http/http.cc	/^static const char*s_method_string[]={$/;"	m	namespace:JKYi::http	file:
s_mutex	JKYi/config.cc	/^static JKYi::Mutex s_mutex;   $/;"	m	namespace:JKYi	file:
s_numCreated_	JKYi/reactor/timer.cc	/^AtomicInt64 Timer::s_numCreated_;$/;"	m	class:JKYi::net::Timer	file:
s_numCreated_	JKYi/reactor/timer.h	/^    static AtomicInt64 s_numCreated_;  \/\/è®°å½ä¸å±åå»ºçå®æ¶å¨çæ°ç®$/;"	m	class:JKYi::net::Timer	access:private
s_setting_string	JKYi/http2/frame.cc	/^static std::vector<std::string> s_setting_string = {$/;"	m	namespace:JKYi::http2	file:
s_static_headers	JKYi/http2/dynamic_table.cc	/^static std::vector<std::pair<std::string,std::string>> s_static_headers = {$/;"	m	namespace:JKYi::http2	file:
s_thread	JKYi/db/fox_thread.cc	/^thread_local FoxThread* s_thread = nullptr;$/;"	m	namespace:JKYi	file:
s_thread_mutex	JKYi/db/fox_thread.cc	/^static RWMutex s_thread_mutex;$/;"	m	namespace:JKYi	file:
s_thread_names	JKYi/db/fox_thread.cc	/^static std::map<uint64_t,std::string>s_thread_names;$/;"	m	namespace:JKYi	file:
s_timer	tests/test_iomanager.cc	/^JKYi::Timer::ptr s_timer;$/;"	v
schedule	JKYi/scheduler.h	/^   void schedule(FiberOrCb fc,int thread = -1){$/;"	f	class:JKYi::Scheduler	access:public	signature:(FiberOrCb fc,int thread = -1)
schedule	JKYi/scheduler.h	/^   void schedule(InputIterator begin,InputIterator end){$/;"	f	class:JKYi::Scheduler	access:public	signature:(InputIterator begin,InputIterator end)
schedule	JKYi/worker.h	/^    void schedule(const std::string& name,FiberOrCb fc,int thread = -1){$/;"	f	class:JKYi::WorkerManager	access:public	signature:(const std::string& name,FiberOrCb fc,int thread = -1)
schedule	JKYi/worker.h	/^    void schedule(const std::string& name,Iter begin,Iter end){$/;"	f	class:JKYi::WorkerManager	access:public	signature:(const std::string& name,Iter begin,Iter end)
scheduleNoLock	JKYi/scheduler.h	/^   bool scheduleNoLock(FiberOrCb fc,int thread){$/;"	f	class:JKYi::Scheduler	access:private	signature:(FiberOrCb fc,int thread)
scheduler	JKYi/db/redis.h	/^        JKYi::Scheduler * scheduler;$/;"	m	struct:JKYi::FoxRedis::FCtx	access:public
scheduler	JKYi/db/redis.h	/^        JKYi::Scheduler* scheduler;$/;"	m	struct:JKYi::FoxRedisCluster::FCtx	access:public
scheduler	JKYi/iomanager.h	/^       Scheduler* scheduler = nullptr;$/;"	m	struct:JKYi::IOManager::FdContext::EventContext	access:public
send	JKYi/hook.cc	/^ssize_t send(int s, const void *msg, size_t len, int flags) {$/;"	f	signature:(int s, const void *msg, size_t len, int flags)
send	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::send(Buffer * buf){$/;"	f	class:JKYi::net::TcpConnection	signature:(Buffer * buf)
send	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::send(const StringPiece& message){$/;"	f	class:JKYi::net::TcpConnection	signature:(const StringPiece& message)
send	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::send(const void * data,int len){$/;"	f	class:JKYi::net::TcpConnection	signature:(const void * data,int len)
send	JKYi/reactor/TcpConnection.h	/^    void send(Buffer* message);$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(Buffer* message)
send	JKYi/reactor/TcpConnection.h	/^    void send(const StringPiece& message);$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(const StringPiece& message)
send	JKYi/reactor/TcpConnection.h	/^    void send(const void * message,int len);$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(const void * message,int len)
send	JKYi/socket.cc	/^int SSLSocket::send(const iovec * buffers,size_t length,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(const iovec * buffers,size_t length,int flags)
send	JKYi/socket.cc	/^int SSLSocket::send(const void * buffer,size_t length,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(const void * buffer,size_t length,int flags)
send	JKYi/socket.cc	/^int Socket::send(const iovec*buffers,size_t len,int flags){$/;"	f	class:JKYi::Socket	signature:(const iovec*buffers,size_t len,int flags)
send	JKYi/socket.cc	/^int Socket::send(const void *buffer,size_t len,int flags){$/;"	f	class:JKYi::Socket	signature:(const void *buffer,size_t len,int flags)
send	JKYi/socket.h	/^    virtual int send(const iovec*buffers,size_t len,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(const iovec*buffers,size_t len,int flags=0)
send	JKYi/socket.h	/^    virtual int send(const void *buffer,size_t len,int flag=0);$/;"	p	class:JKYi::Socket	access:public	signature:(const void *buffer,size_t len,int flag=0)
sendInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::sendInLoop(const StringPiece& message){$/;"	f	class:JKYi::net::TcpConnection	signature:(const StringPiece& message)
sendInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::sendInLoop(const void * message,size_t len){$/;"	f	class:JKYi::net::TcpConnection	signature:(const void * message,size_t len)
sendInLoop	JKYi/reactor/TcpConnection.h	/^    void sendInLoop(const StringPiece& message);$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:(const StringPiece& message)
sendInLoop	JKYi/reactor/TcpConnection.h	/^    void sendInLoop(const void * message,size_t len);$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:(const void * message,size_t len)
sendMessage	JKYi/http/ws_connection.cc	/^int32_t WSConnection::sendMessage(WSFrameMessage::ptr msg,bool fin){$/;"	f	class:JKYi::http::WSConnection	signature:(WSFrameMessage::ptr msg,bool fin)
sendMessage	JKYi/http/ws_connection.cc	/^int32_t WSConnection::sendMessage(const std::string& msg,int32_t opcode,bool fin){$/;"	f	class:JKYi::http::WSConnection	signature:(const std::string& msg,int32_t opcode,bool fin)
sendMessage	JKYi/http/ws_connection.h	/^    int32_t sendMessage(WSFrameMessage::ptr msg,bool fin = true);$/;"	p	class:JKYi::http::WSConnection	access:public	signature:(WSFrameMessage::ptr msg,bool fin = true)
sendMessage	JKYi/http/ws_connection.h	/^    int32_t sendMessage(const std::string& msg,int32_t opcode = WSFrameHead::TEXT_FRAME,$/;"	p	class:JKYi::http::WSConnection	access:public	signature:(const std::string& msg,int32_t opcode = WSFrameHead::TEXT_FRAME, bool fin = true)
sendMessage	JKYi/http/ws_session.cc	/^int32_t WSSession::sendMessage(WSFrameMessage::ptr msg,$/;"	f	class:JKYi::http::WSSession	signature:(WSFrameMessage::ptr msg, bool fin)
sendMessage	JKYi/http/ws_session.cc	/^int32_t WSSession::sendMessage(const std::string& msg,int32_t opcode,bool fin){$/;"	f	class:JKYi::http::WSSession	signature:(const std::string& msg,int32_t opcode,bool fin)
sendMessage	JKYi/http/ws_session.h	/^    int32_t sendMessage(WSFrameMessage::ptr msg,bool fin = true);$/;"	p	class:JKYi::http::WSSession	access:public	signature:(WSFrameMessage::ptr msg,bool fin = true)
sendMessage	JKYi/http/ws_session.h	/^    int32_t sendMessage(const std::string& msg,int32_t opcode = WSFrameHead::TEXT_FRAME,bool fin = true);$/;"	p	class:JKYi::http::WSSession	access:public	signature:(const std::string& msg,int32_t opcode = WSFrameHead::TEXT_FRAME,bool fin = true)
sendRequest	JKYi/http/http_connection.cc	/^int HttpConnection::sendRequest(HttpRequest::ptr req){$/;"	f	class:JKYi::http::HttpConnection	signature:(HttpRequest::ptr req)
sendRequest	JKYi/http/http_connection.h	/^    int sendRequest(HttpRequest::ptr req);$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:(HttpRequest::ptr req)
sendResponse	JKYi/http/http_session.cc	/^int  HttpSession::sendResponse(const HttpResponse::ptr rsp){$/;"	f	class:JKYi::http::HttpSession	signature:(const HttpResponse::ptr rsp)
sendResponse	JKYi/http/http_session.h	/^    int sendResponse(HttpResponse::ptr rsp);$/;"	p	class:JKYi::http::HttpSession	access:public	signature:(HttpResponse::ptr rsp)
sendTo	JKYi/socket.cc	/^int SSLSocket::sendTo(const iovec * buffers,size_t length,const Address::ptr to$/;"	f	class:JKYi::SSLSocket	signature:(const iovec * buffers,size_t length,const Address::ptr to ,int flags)
sendTo	JKYi/socket.cc	/^int SSLSocket::sendTo(const void * buffer,size_t length,const Address::ptr to,int flags){$/;"	f	class:JKYi::SSLSocket	signature:(const void * buffer,size_t length,const Address::ptr to,int flags)
sendTo	JKYi/socket.cc	/^int Socket::sendTo(const struct iovec*buffers,size_t len,const Address::ptr to,int flags){$/;"	f	class:JKYi::Socket	signature:(const struct iovec*buffers,size_t len,const Address::ptr to,int flags)
sendTo	JKYi/socket.cc	/^int Socket::sendTo(const void *buffer,size_t len,const Address::ptr to,int flags){$/;"	f	class:JKYi::Socket	signature:(const void *buffer,size_t len,const Address::ptr to,int flags)
sendTo	JKYi/socket.h	/^    virtual int sendTo(const iovec*buffers,size_t len,const Address::ptr to,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(const iovec*buffers,size_t len,const Address::ptr to,int flags=0)
sendTo	JKYi/socket.h	/^    virtual int sendTo(const void * buffer,size_t len,const Address::ptr to,int flags=0);$/;"	p	class:JKYi::Socket	access:public	signature:(const void * buffer,size_t len,const Address::ptr to,int flags=0)
send_fun	JKYi/hook.h	/^typedef ssize_t (*send_fun)(int s, const void *msg, size_t len, int flags);$/;"	t
sendmsg	JKYi/hook.cc	/^ssize_t sendmsg(int s, const struct msghdr *msg, int flags) {$/;"	f	signature:(int s, const struct msghdr *msg, int flags)
sendmsg_fun	JKYi/hook.h	/^typedef ssize_t (*sendmsg_fun)(int s, const struct msghdr *msg, int flags);$/;"	t
sendto	JKYi/hook.cc	/^ssize_t sendto(int s, const void *msg, size_t len, int flags, const struct sockaddr *to, socklen_t tolen) {$/;"	f	signature:(int s, const void *msg, size_t len, int flags, const struct sockaddr *to, socklen_t tolen)
sendto_fun	JKYi/hook.h	/^typedef ssize_t (*sendto_fun)(int s, const void *msg, size_t len, int flags, const struct sockaddr *to, socklen_t tolen);$/;"	t
sequence_	JKYi/reactor/timer.h	/^    const int64_t sequence_;        \/\/$/;"	m	class:JKYi::net::Timer	access:private
sequence_	JKYi/reactor/timerId.h	/^    int64_t sequence_;$/;"	m	class:JKYi::net::TimerId	access:private
serializeTo	JKYi/http2/frame.cc	/^int32_t FrameCodec::serializeTo(Stream::ptr stream,Frame::ptr frame){$/;"	f	class:JKYi::http2::FrameCodec	signature:(Stream::ptr stream,Frame::ptr frame)
serializeTo	JKYi/http2/frame.h	/^    int32_t serializeTo(Stream::ptr stream,Frame::ptr frame);$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::FrameCodec	access:public	signature:(Stream::ptr stream,Frame::ptr frame)
serializeTo	JKYi/protocol.h	/^    virtual int32_t serializeTo(Stream::ptr stream,Message::ptr msg) = 0;$/;"	p	class:JKYi::MessageDecoder	access:public	signature:(Stream::ptr stream,Message::ptr msg)
serializeToByteArray	JKYi/protocol.cc	/^bool Notify::serializeToByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Notify	signature:(ByteArray::ptr bytearray)
serializeToByteArray	JKYi/protocol.cc	/^bool Request::serializeToByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Request	signature:(ByteArray::ptr bytearray)
serializeToByteArray	JKYi/protocol.cc	/^bool Response::serializeToByteArray(ByteArray::ptr bytearray){$/;"	f	class:JKYi::Response	signature:(ByteArray::ptr bytearray)
serializeToByteArray	JKYi/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) = 0;$/;"	p	class:JKYi::Message	access:public	signature:(ByteArray::ptr bytearray)
serverAddr_	JKYi/reactor/Connector.h	/^    Address::ptr serverAddr_;  \/\/è¦è¿æ¥çæå¡å¨ç«¯çå°å$/;"	m	class:JKYi::net::Connector	access:private
serverAddress	JKYi/reactor/Connector.h	/^    const Address::ptr& serverAddress()const { return serverAddr_; }$/;"	f	class:JKYi::net::Connector	access:public	signature:() const
server_	JKYi/reactor/examples/idleconnection/echo.h	/^    JKYi::net::TcpServer server_;$/;"	m	class:EchoServer	access:private
server_	JKYi/reactor/examples/maxconnection/echo.h	/^   JKYi::net::TcpServer server_;$/;"	m	class:EchoServer	access:private
server_main	tests/test_daemon.cc	/^int server_main(int argc,char ** argv){$/;"	f	signature:(int argc,char ** argv)
set	JKYi/reactor/StringPiece.h	/^  void set(const char* buffer, int len) { ptr_ = buffer; length_ = len; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const char* buffer, int len)
set	JKYi/reactor/StringPiece.h	/^  void set(const char* str) {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const char* str)
set	JKYi/reactor/StringPiece.h	/^  void set(const void* buffer, int len) {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const void* buffer, int len)
set	JKYi/zk_client.cc	/^int32_t ZKClient::set(const std::string& path,const std::string& val,int version,$/;"	f	class:JKYi::ZKClient	signature:(const std::string& path,const std::string& val,int version, Stat * stat)
set	JKYi/zk_client.h	/^    int32_t set(const std::string& path,const std::string& val,int version = -1,Stat * stat = nullptr);$/;"	p	class:JKYi::ZKClient	access:public	signature:(const std::string& path,const std::string& val,int version = -1,Stat * stat = nullptr)
setAddrLen	JKYi/address.cc	/^void UnixAddress::setAddrLen(uint32_t len){$/;"	f	class:JKYi::UnixAddress	signature:(uint32_t len)
setAddrLen	JKYi/address.h	/^	void setAddrLen(uint32_t v);$/;"	p	class:JKYi::UnixAddress	access:public	signature:(uint32_t v)
setBody	JKYi/http/http.h	/^    void setBody(const std::string& v) { m_body=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(const std::string& v)
setBody	JKYi/http/http.h	/^   void setBody(const std::string& v){ m_body=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& v)
setClose	JKYi/http/http.h	/^    void setClose(bool v) { m_close=v; } $/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(bool v)
setClose	JKYi/http/http.h	/^   void setClose(bool v){ m_close=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(bool v)
setCloseCallback	JKYi/reactor/TcpConnection.h	/^    void setCloseCallback(const CloseCallback& cb){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const CloseCallback& cb)
setCloseCallback	JKYi/reactor/channel.h	/^    void setCloseCallback(EventCallback cb) { closeCallback_ = std::move(cb); } $/;"	f	class:JKYi::net::Channel	access:public	signature:(EventCallback cb)
setCmd	JKYi/protocol.h	/^    void setCmd(uint32_t v) { m_cmd = v; }$/;"	f	class:JKYi::Request	access:public	signature:(uint32_t v)
setCmd	JKYi/protocol.h	/^    void setCmd(uint32_t v) { m_cmd = v; }$/;"	f	class:JKYi::Response	access:public	signature:(uint32_t v)
setConf	JKYi/tcp_server.cc	/^void TcpServer::setConf(const TcpServerConf& v){$/;"	f	class:JKYi::TcpServer	signature:(const TcpServerConf& v)
setConf	JKYi/tcp_server.h	/^    void setConf(TcpServerConf::ptr v) { m_conf = v; }$/;"	f	class:JKYi::TcpServer	access:public	signature:(TcpServerConf::ptr v)
setConf	JKYi/tcp_server.h	/^    void setConf(const TcpServerConf& v);$/;"	p	class:JKYi::TcpServer	access:public	signature:(const TcpServerConf& v)
setConnectionCallback	JKYi/reactor/TcpClient.h	/^    void setConnectionCallback(ConnectionCallback cb){$/;"	f	class:JKYi::net::TcpClient	access:public	signature:(ConnectionCallback cb)
setConnectionCallback	JKYi/reactor/TcpConnection.h	/^    void setConnectionCallback(const ConnectionCallback& cb){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const ConnectionCallback& cb)
setConnectionCallback	JKYi/reactor/TcpServer.h	/^    void setConnectionCallback(const ConnectionCallback& cb){$/;"	f	class:JKYi::net::TcpServer	access:public	signature:(const ConnectionCallback& cb)
setContext	JKYi/reactor/EventLoop.h	/^    void setContext(const boost::any& context){$/;"	f	class:JKYi::net::EventLoop	access:public	signature:(const boost::any& context)
setContext	JKYi/reactor/TcpConnection.h	/^    void setContext(const boost::any& context){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const boost::any& context)
setCookie	JKYi/http/http.cc	/^void HttpRequest::setCookie(const std::string& key,const std::string& value){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,const std::string& value)
setCookie	JKYi/http/http.cc	/^void HttpResponse::setCookie(const std::string& key,const std::string& value$/;"	f	class:JKYi::http::HttpResponse	signature:(const std::string& key,const std::string& value ,time_t expired,const std::string& path ,const std::string& domain,bool secure)
setCookie	JKYi/http/http.h	/^    void setCookie(const std::string & key,const std::string & value,time_t expired = 0$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(const std::string & key,const std::string & value,time_t expired = 0 ,const std::string& path = Ó,const std::string & domain = Ó ,bool secure = false)
setCookie	JKYi/http/http.h	/^   void setCookie(const std::string&key,const std::string& value);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string&key,const std::string& value)
setCookies	JKYi/http/http.h	/^   void setCookies(const MapType& v){ m_cookies=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const MapType& v)
setData	JKYi/db/fox_thread.cc	/^void FoxThread::setData(const std::string& name,void * v){$/;"	f	class:JKYi::FoxThread	signature:(const std::string& name,void * v)
setData	JKYi/db/fox_thread.h	/^    void setData(const std::string& name,void * v);$/;"	p	class:JKYi::FoxThread	access:public	signature:(const std::string& name,void * v)
setData	JKYi/http/ws_session.h	/^    void setData(const std::string& data){ m_data = data; }$/;"	f	class:JKYi::http::WSFrameMessage	access:public	signature:(const std::string& data)
setDefault	JKYi/http/servlet.h	/^    void setDefault(Servlet::ptr v){ m_default = v; }$/;"	f	class:JKYi::http::ServletDispatch	access:public	signature:(Servlet::ptr v)
setDefaultName	JKYi/reactor/Thread.cc	/^void Thread::setDefaultName(){$/;"	f	class:JKYi::net::Thread	signature:()
setDefaultName	JKYi/reactor/Thread.h	/^    void setDefaultName();$/;"	p	class:JKYi::net::Thread	access:private	signature:()
setEnv	JKYi/env.cc	/^bool Env::setEnv(const std::string& key,const std::string& val){$/;"	f	class:JKYi::Env	signature:(const std::string& key,const std::string& val)
setEnv	JKYi/env.h	/^     bool setEnv(const std::string& key,const std::string& val);$/;"	p	class:JKYi::Env	access:public	signature:(const std::string& key,const std::string& val)
setError	JKYi/http/http_parser.h	/^    void setError(int v) { m_error=v; }$/;"	f	class:JKYi::http::HttpResponseParser	access:public	signature:(int v)
setError	JKYi/http/http_parser.h	/^    void setError(int v){ m_error=v; }$/;"	f	class:JKYi::http::HttpRequestParser	access:public	signature:(int v)
setErrorCallback	JKYi/reactor/channel.h	/^    void setErrorCallback(EventCallback cb) { errorCallback_ = std::move(cb); }$/;"	f	class:JKYi::net::Channel	access:public	signature:(EventCallback cb)
setFilename	JKYi/module.h	/^    void setFilename(const std::string& v) { m_filename = v; }$/;"	f	class:JKYi::Module	access:public	signature:(const std::string& v)
setFormatter	JKYi/log.cc	/^void LogAppender::setFormatter(LogFormatter::ptr formatter){$/;"	f	class:JKYi::LogAppender	signature:(LogFormatter::ptr formatter)
setFormatter	JKYi/log.cc	/^void Logger::setFormatter(LogFormatter::ptr formatter){$/;"	f	class:JKYi::Logger	signature:(LogFormatter::ptr formatter)
setFormatter	JKYi/log.cc	/^void Logger::setFormatter(const std::string&str){$/;"	f	class:JKYi::Logger	signature:(const std::string&str)
setFormatter	JKYi/log.h	/^    void setFormatter(LogFormatter::ptr formatter);$/;"	p	class:JKYi::LogAppender	access:public	signature:(LogFormatter::ptr formatter)
setFormatter	JKYi/log.h	/^    void setFormatter(LogFormatter::ptr formatter);$/;"	p	class:JKYi::Logger	access:public	signature:(LogFormatter::ptr formatter)
setFormatter	JKYi/log.h	/^    void setFormatter(const std::string &str);$/;"	p	class:JKYi::Logger	access:public	signature:(const std::string &str)
setFragment	JKYi/http/http.h	/^   void setFragment(const std::string& v){ m_fragment=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& v)
setFragment	JKYi/uri.h	/^    void setFragment(const std::string& v) { m_fragment = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
setHeader	JKYi/http/http.cc	/^void HttpRequest::setHeader(const std::string& key,const std::string& value){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,const std::string& value)
setHeader	JKYi/http/http.cc	/^void HttpResponse::setHeader(const std::string& key,const std::string& value){$/;"	f	class:JKYi::http::HttpResponse	signature:(const std::string& key,const std::string& value)
setHeader	JKYi/http/http.h	/^    void setHeader(const std::string&key,const std::string& value);$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(const std::string&key,const std::string& value)
setHeader	JKYi/http/http.h	/^   void setHeader(const std::string& key,const std::string&value);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& key,const std::string&value)
setHeaders	JKYi/http/http.h	/^    void setHeaders(const MapType& v) { m_headers=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(const MapType& v)
setHeaders	JKYi/http/http.h	/^   void setHeaders(const MapType& v){ m_headers=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const MapType& v)
setHighWaterMarkCallback	JKYi/reactor/TcpConnection.h	/^    void setHighWaterMarkCallback(const HighWaterMarkCallback& cb,size_t highWaterMark){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const HighWaterMarkCallback& cb,size_t highWaterMark)
setHost	JKYi/uri.h	/^    void setHost(const std::string& v) { m_host = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
setIndex	JKYi/reactor/channel.h	/^    void setIndex(int idx){ index_ = idx; }$/;"	f	class:JKYi::net::Channel	access:public	signature:(int idx)
setInitCb	JKYi/db/fox_thread.h	/^    void setInitCb(FoxThread::init_cb v){ m_initCb = v; }$/;"	f	class:JKYi::FoxThreadPool	access:public	signature:(FoxThread::init_cb v)
setInitCb	JKYi/db/fox_thread.h	/^    void setInitCb(init_cb v) { m_initCb = v; };$/;"	f	class:JKYi::FoxThread	access:public	signature:(init_cb v)
setIsLittleEndian	JKYi/bytearray.cc	/^void ByteArray::setIsLittleEndian(bool v){$/;"	f	class:JKYi::ByteArray	signature:(bool v)
setIsLittleEndian	JKYi/bytearray.h	/^    void setIsLittleEndian(bool val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(bool val)
setKeepAlive	JKYi/reactor/Socket.cc	/^void Socket::setKeepAlive(bool on){$/;"	f	class:JKYi::net::Socket	signature:(bool on)
setKeepAlive	JKYi/reactor/Socket.h	/^    void setKeepAlive(bool on);$/;"	p	class:JKYi::net::Socket	access:public	signature:(bool on)
setLastActiveTime	JKYi/db/redis.h	/^    void setLastActiveTime(uint64_t v) { m_lastActiveTime = v; }$/;"	f	class:JKYi::ISyncRedis	access:public	signature:(uint64_t v)
setLevel	JKYi/log.h	/^    void setLevel(LogLevel::Level level){m_level = level;}$/;"	f	class:JKYi::LogAppender	access:public	signature:(LogLevel::Level level)
setLevel	JKYi/log.h	/^    void setLevel(LogLevel::Level level){m_level=level;}$/;"	f	class:JKYi::Logger	access:public	signature:(LogLevel::Level level)
setMaxConn	JKYi/db/mysql.h	/^    void setMaxConn(uint32_t v) { m_maxConn = v; }$/;"	f	class:JKYi::MySQLManager	access:public	signature:(uint32_t v)
setMaxDataSize	JKYi/http2/dynamic_table.h	/^    void setMaxDataSize(int32_t v) { m_maxDataSize = v; }$/;"	f	class:JKYi::http2::DynamicTable	access:public	signature:(int32_t v)
setMessageCallback	JKYi/reactor/TcpClient.h	/^    void setMessageCallback(MessageCallback cb){$/;"	f	class:JKYi::net::TcpClient	access:public	signature:(MessageCallback cb)
setMessageCallback	JKYi/reactor/TcpConnection.h	/^    void setMessageCallback(const MessageCallback& cb){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const MessageCallback& cb)
setMessageCallback	JKYi/reactor/TcpServer.h	/^    void setMessageCallback(const MessageCallback& cb){$/;"	f	class:JKYi::net::TcpServer	access:public	signature:(const MessageCallback& cb)
setMethod	JKYi/http/http.h	/^   void setMethod(HttpMethod m){ m_method=m; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(HttpMethod m)
setName	JKYi/db/redis.h	/^    void setName(const std::string& name) { m_name = name; }$/;"	f	class:JKYi::IRedis	access:public	signature:(const std::string& name)
setName	JKYi/http/http_server.cc	/^void HttpServer::setName(const std::string& name){$/;"	f	class:JKYi::http::HttpServer	signature:(const std::string& name)
setName	JKYi/tcp_server.h	/^    virtual void setName(const std::string& name){ m_name = name; }$/;"	f	class:JKYi::TcpServer	access:public	signature:(const std::string& name)
setName	JKYi/thread.cc	/^void Thread::setName(const std::string&name){$/;"	f	class:JKYi::Thread	signature:(const std::string&name)
setName	JKYi/thread.h	/^   static void setName(const std::string&name);$/;"	p	class:JKYi::Thread	access:public	signature:(const std::string&name)
setNewConnectionCallback	JKYi/reactor/Connector.h	/^    void setNewConnectionCallback(const NewConnectionCallback& cb){$/;"	f	class:JKYi::net::Connector	access:public	signature:(const NewConnectionCallback& cb)
setNewConnectionCallback	JKYi/reactor/acceptor.h	/^    void setNewConnectionCallback(const NewConnectionCallback& cb){$/;"	f	class:JKYi::net::Acceptor	access:public	signature:(const NewConnectionCallback& cb)
setNonBlockAndCloseOnExec	JKYi/reactor/SocketsOps.cc	/^void setNonBlockAndCloseOnExec(int sockfd){$/;"	f	namespace:__anon19	signature:(int sockfd)
setNotify	JKYi/protocol.h	/^    void setNotify(uint32_t v) { m_notify = v; }$/;"	f	class:JKYi::Notify	access:public	signature:(uint32_t v)
setOpcode	JKYi/http/ws_session.h	/^    void setOpcode(int v) { m_opcode = v; }$/;"	f	class:JKYi::http::WSFrameMessage	access:public	signature:(int v)
setOption	JKYi/socket.cc	/^bool Socket::setOption(int level,int option,const void * result,socklen_t len){$/;"	f	class:JKYi::Socket	signature:(int level,int option,const void * result,socklen_t len)
setOption	JKYi/socket.h	/^    bool setOption(int level,int option,const T&result){$/;"	f	class:JKYi::Socket	access:public	signature:(int level,int option,const T&result)
setOption	JKYi/socket.h	/^    bool setOption(int level,int option,const void *result,socklen_t len);$/;"	p	class:JKYi::Socket	access:public	signature:(int level,int option,const void *result,socklen_t len)
setParam	JKYi/http/http.cc	/^void HttpRequest::setParam(const std::string& key,const std::string& value){$/;"	f	class:JKYi::http::HttpRequest	signature:(const std::string& key,const std::string& value)
setParam	JKYi/http/http.h	/^   void setParam(const std::string&key,const std::string&value);$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:(const std::string&key,const std::string&value)
setParams	JKYi/http/http.h	/^   void setParams(const MapType& v){ m_params=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const MapType& v)
setPasswd	JKYi/db/redis.h	/^    void setPasswd(const std::string& v) { m_passwd = v; }$/;"	f	class:JKYi::IRedis	access:public	signature:(const std::string& v)
setPath	JKYi/http/http.h	/^   void setPath(const std::string& path){ m_path=path; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& path)
setPath	JKYi/uri.h	/^    void setPath(const std::string& v) { m_path = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
setPort	JKYi/address.cc	/^void IPv4Address::setPort(uint16_t v){$/;"	f	class:JKYi::IPv4Address	signature:(uint16_t v)
setPort	JKYi/address.cc	/^void IPv6Address::setPort(uint16_t v){$/;"	f	class:JKYi::IPv6Address	signature:(uint16_t v)
setPort	JKYi/address.h	/^	virtual void setPort(uint16_t v) = 0;$/;"	p	class:JKYi::IPAddress	access:public	signature:(uint16_t v)
setPort	JKYi/uri.h	/^    void setPort(int32_t v) { m_port = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(int32_t v)
setPosition	JKYi/bytearray.cc	/^void ByteArray::setPosition(size_t v){$/;"	f	class:JKYi::ByteArray	signature:(size_t v)
setPosition	JKYi/bytearray.h	/^    void setPosition(size_t v);$/;"	p	class:JKYi::ByteArray	access:public	signature:(size_t v)
setQuery	JKYi/http/http.h	/^   void setQuery(const std::string& v){ m_query=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(const std::string& v)
setQuery	JKYi/uri.h	/^    void setQuery(const std::string& v) { m_query = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
setRcvTimeout	JKYi/socket.cc	/^void Socket::setRcvTimeout(int64_t v){$/;"	f	class:JKYi::Socket	signature:(int64_t v)
setRcvTimeout	JKYi/socket.h	/^    void setRcvTimeout(int64_t v);$/;"	p	class:JKYi::Socket	access:public	signature:(int64_t v)
setReadCallback	JKYi/reactor/channel.h	/^    void setReadCallback(ReadEventCallback cb){ readCallback_ = std::move(cb); }$/;"	f	class:JKYi::net::Channel	access:public	signature:(ReadEventCallback cb)
setReason	JKYi/http/http.h	/^    void setReason(const std::string & v) { m_reason=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(const std::string & v)
setRecvTimeout	JKYi/tcp_server.h	/^    void setRecvTimeout(uint64_t v){ m_recvTimeout = v; }$/;"	f	class:JKYi::TcpServer	access:public	signature:(uint64_t v)
setRedirect	JKYi/http/http.cc	/^void HttpResponse::setRedirect(const std::string& uri){$/;"	f	class:JKYi::http::HttpResponse	signature:(const std::string& uri)
setRedirect	JKYi/http/http.h	/^    void setRedirect(const std::string& uri);$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:(const std::string& uri)
setResult	JKYi/protocol.h	/^    void setResult(uint32_t v) { m_result = v; }$/;"	f	class:JKYi::Response	access:public	signature:(uint32_t v)
setResultStr	JKYi/protocol.h	/^    void setResultStr(const std::string& str) { m_resultStr = str; }$/;"	f	class:JKYi::Response	access:public	signature:(const std::string& str)
setReuseAddr	JKYi/reactor/Socket.cc	/^void Socket::setReuseAddr(bool on){$/;"	f	class:JKYi::net::Socket	signature:(bool on)
setReuseAddr	JKYi/reactor/Socket.h	/^    void setReuseAddr(bool on);$/;"	p	class:JKYi::net::Socket	access:public	signature:(bool on)
setReusePort	JKYi/reactor/Socket.cc	/^void Socket::setReusePort(bool on){$/;"	f	class:JKYi::net::Socket	signature:(bool on)
setReusePort	JKYi/reactor/Socket.h	/^    void setReusePort(bool on);$/;"	p	class:JKYi::net::Socket	access:public	signature:(bool on)
setRevents	JKYi/reactor/channel.h	/^    void setRevents(int rvt) { revents_ = rvt; }$/;"	f	class:JKYi::net::Channel	access:public	signature:(int rvt)
setScheme	JKYi/uri.h	/^    void setScheme(const std::string& v){ m_scheme = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
setSendTimeout	JKYi/socket.cc	/^void Socket::setSendTimeout(int64_t v){$/;"	f	class:JKYi::Socket	signature:(int64_t v)
setSendTimeout	JKYi/socket.h	/^    void setSendTimeout(int64_t v);$/;"	p	class:JKYi::Socket	access:public	signature:(int64_t v)
setServletDispatch	JKYi/http/http_server.h	/^    void setServletDispatch(ServletDispatch::ptr v){ m_dispatch = v; }$/;"	f	class:JKYi::http::HttpServer	access:public	signature:(ServletDispatch::ptr v)
setSn	JKYi/protocol.h	/^    void setSn(uint32_t v) { m_sn = v; }$/;"	f	class:JKYi::Request	access:public	signature:(uint32_t v)
setSn	JKYi/protocol.h	/^    void setSn(uint32_t v) { m_sn = v; }$/;"	f	class:JKYi::Response	access:public	signature:(uint32_t v)
setState	JKYi/reactor/Connector.h	/^    void setState(State s){ state_ = s; }$/;"	f	class:JKYi::net::Connector	access:private	signature:(State s)
setState	JKYi/reactor/TcpConnection.h	/^    void setState(StateE s){$/;"	f	class:JKYi::net::TcpConnection	access:private	signature:(StateE s)
setStatus	JKYi/http/http.h	/^    void setStatus(HttpStatus v) { m_status=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(HttpStatus v)
setSysNonblock	JKYi/fdmanager.h	/^   void setSysNonblock(bool flag) {m_sysNonblock=flag;}$/;"	f	class:JKYi::FdCtx	access:public	signature:(bool flag)
setTcpNoDelay	JKYi/reactor/Socket.cc	/^void Socket::setTcpNoDelay(bool on){$/;"	f	class:JKYi::net::Socket	signature:(bool on)
setTcpNoDelay	JKYi/reactor/Socket.h	/^    void setTcpNoDelay(bool on);$/;"	p	class:JKYi::net::Socket	access:public	signature:(bool on)
setTcpNoDelay	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::setTcpNoDelay(bool on){$/;"	f	class:JKYi::net::TcpConnection	signature:(bool on)
setTcpNoDelay	JKYi/reactor/TcpConnection.h	/^    void setTcpNoDelay(bool on);$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:(bool on)
setThis	JKYi/db/fox_thread.cc	/^void FoxThread::setThis(){$/;"	f	class:JKYi::FoxThread	signature:()
setThis	JKYi/db/fox_thread.h	/^    void setThis();$/;"	p	class:JKYi::FoxThread	access:public	signature:()
setThis	JKYi/scheduler.cc	/^void Scheduler::setThis(){$/;"	f	class:JKYi::Scheduler	signature:()
setThis	JKYi/scheduler.h	/^   void setThis();$/;"	p	class:JKYi::Scheduler	access:protected	signature:()
setThreadInitCallback	JKYi/reactor/TcpServer.h	/^    void setThreadInitCallback(const ThreadInitCallback& cb){$/;"	f	class:JKYi::net::TcpServer	access:public	signature:(const ThreadInitCallback& cb)
setThreadNum	JKYi/reactor/EventLoopThreadPool.h	/^    void setThreadNum(int numThreads){ numThreads_ = numThreads; }$/;"	f	class:JKYi::net::EventLoopThreadPool	access:public	signature:(int numThreads)
setThreadNum	JKYi/reactor/TcpServer.cc	/^void TcpServer::setThreadNum(int numThreads){$/;"	f	class:JKYi::net::TcpServer	signature:(int numThreads)
setThreadNum	JKYi/reactor/TcpServer.h	/^    void setThreadNum(int numThreads);$/;"	p	class:JKYi::net::TcpServer	access:public	signature:(int numThreads)
setTimeout	JKYi/db/redis.cc	/^void Redis::setTimeout(uint64_t v){$/;"	f	class:JKYi::Redis	signature:(uint64_t v)
setTimeout	JKYi/db/redis.cc	/^void RedisCluster::setTimeout(uint64_t ms){$/;"	f	class:JKYi::RedisCluster	signature:(uint64_t ms)
setTimeout	JKYi/db/redis.h	/^    virtual void setTimeout(uint64_t ms) = 0;$/;"	p	class:JKYi::ISyncRedis	access:public	signature:(uint64_t ms)
setTimeout	JKYi/db/redis.h	/^    void setTimeout(uint64_t ms); $/;"	p	class:JKYi::Redis	access:public	signature:(uint64_t ms)
setTimeout	JKYi/fdmanager.cc	/^void FdCtx::setTimeout(int type,uint64_t t){$/;"	f	class:JKYi::FdCtx	signature:(int type,uint64_t t)
setTimeout	JKYi/fdmanager.h	/^   void setTimeout(int type,uint64_t v);$/;"	p	class:JKYi::FdCtx	access:public	signature:(int type,uint64_t v)
setUserNonblock	JKYi/fdmanager.h	/^   void setUserNonblock(bool flag){m_userNonblock=flag;}$/;"	f	class:JKYi::FdCtx	access:public	signature:(bool flag)
setUserinfo	JKYi/uri.h	/^    void setUserinfo(const std::string& v) { m_userinfo = v; }$/;"	f	class:JKYi::Uri	access:public	signature:(const std::string& v)
setValue	JKYi/config.h	/^   void setValue(const T&t){$/;"	f	class:JKYi::ConfigVar	access:public	signature:(const T&t)
setVersion	JKYi/http/http.h	/^    void setVersion(uint8_t v) { m_version=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(uint8_t v)
setVersion	JKYi/http/http.h	/^   void setVersion(uint8_t version){ m_version=version; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(uint8_t version)
setWSServletDispatch	JKYi/http/ws_server.h	/^    void setWSServletDispatch(WSServletDispatch::ptr v) { m_dispatch = v; }$/;"	f	class:JKYi::http::WSServer	access:public	signature:(WSServletDispatch::ptr v)
setWebsocket	JKYi/http/http.h	/^    void setWebsocket(bool v) { m_websocket=v; }$/;"	f	class:JKYi::http::HttpResponse	access:public	signature:(bool v)
setWebsocket	JKYi/http/http.h	/^   void setWebsocket(bool v) { m_websocket=v; }$/;"	f	class:JKYi::http::HttpRequest	access:public	signature:(bool v)
setWriteCallback	JKYi/reactor/TcpClient.h	/^    void setWriteCallback(WriteCompleteCallback cb){$/;"	f	class:JKYi::net::TcpClient	access:public	signature:(WriteCompleteCallback cb)
setWriteCallback	JKYi/reactor/channel.h	/^    void setWriteCallback(EventCallback cb) { writeCallback_ = std::move(cb); }$/;"	f	class:JKYi::net::Channel	access:public	signature:(EventCallback cb)
setWriteCompleteCallback	JKYi/reactor/TcpConnection.h	/^    void setWriteCompleteCallback(const WriteCompleteCallback& cb){$/;"	f	class:JKYi::net::TcpConnection	access:public	signature:(const WriteCompleteCallback& cb)
setWriteCompleteCallback	JKYi/reactor/TcpServer.h	/^    void setWriteCompleteCallback(const WriteCompleteCallback& cb){$/;"	f	class:JKYi::net::TcpServer	access:public	signature:(const WriteCompleteCallback& cb)
set_hook_enable	JKYi/hook.cc	/^void set_hook_enable(bool flag){$/;"	f	namespace:JKYi	signature:(bool flag)
set_hook_enable	JKYi/hook.h	/^void set_hook_enable(bool flag);$/;"	p	namespace:JKYi	signature:(bool flag)
setsockopt	JKYi/hook.cc	/^int setsockopt(int fd,int level,int optname,const void * optval,socklen_t optlen){$/;"	f	signature:(int fd,int level,int optname,const void * optval,socklen_t optlen)
setsockopt_fun	JKYi/hook.h	/^typedef int (*setsockopt_fun)(int sockfd, int level, int optname, const void *optval, socklen_t optlen);$/;"	t
sha1sum	JKYi/util/hash_util.cc	/^std::string sha1sum(const std::string &data) {$/;"	f	namespace:JKYi	signature:(const std::string &data)
sha1sum	JKYi/util/hash_util.cc	/^std::string sha1sum(const void *data, size_t len) {$/;"	f	namespace:JKYi	signature:(const void *data, size_t len)
sha1sum	JKYi/util/hash_util.h	/^std::string sha1sum(const std::string& data);$/;"	p	namespace:JKYi	signature:(const std::string& data)
sha1sum	JKYi/util/hash_util.h	/^std::string sha1sum(const void * data,size_t len);$/;"	p	namespace:JKYi	signature:(const void * data,size_t len)
shrink	JKYi/reactor/Buffer.h	/^    void shrink(size_t reserve){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t reserve)
shutdown	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::shutdown(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
shutdown	JKYi/reactor/TcpConnection.h	/^    void shutdown();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
shutdownInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::shutdownInLoop(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
shutdownInLoop	JKYi/reactor/TcpConnection.h	/^    void shutdownInLoop();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
shutdownWrite	JKYi/reactor/Socket.cc	/^void Socket::shutdownWrite(){$/;"	f	class:JKYi::net::Socket	signature:()
shutdownWrite	JKYi/reactor/Socket.h	/^    void shutdownWrite();$/;"	p	class:JKYi::net::Socket	access:public	signature:()
shutdownWrite	JKYi/reactor/SocketsOps.cc	/^void sockets::shutdownWrite(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
shutdownWrite	JKYi/reactor/SocketsOps.h	/^void shutdownWrite(int sockfd);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd)
size	JKYi/BlockingQueue.h	/^    size_t size()const{$/;"	f	class:JKYi::BlockingQueue	access:public	signature:() const
size	JKYi/BoundedBlockingQueue.h	/^    size_t size()const{$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:() const
size	JKYi/bytearray.h	/^        size_t size;$/;"	m	struct:JKYi::ByteArray::Node	access:public
size	JKYi/ds/blocking_queue.h	/^    size_t size(){$/;"	f	class:JKYi::ds::BlockingQueue	access:public	signature:()
size	JKYi/http2/huffman.cc	/^    int size;$/;"	m	struct:JKYi::http2::node	file:	access:public
size	JKYi/reactor/StringPiece.h	/^  int size() const { return length_; }$/;"	f	class:JKYi::net::StringPiece	access:public	signature:() const
sleep	JKYi/hook.cc	/^unsigned sleep(unsigned int second){$/;"	f	signature:(unsigned int second)
sleep_fun	JKYi/hook.h	/^typedef unsigned int (*sleep_fun)(unsigned int seconds);$/;"	t
sock	tests/test_iomanager.cc	/^int sock=0;$/;"	v
sockaddr_cast	JKYi/reactor/SocketsOps.cc	/^const struct sockaddr* sockets::sockaddr_cast(const struct sockaddr_in* addr){$/;"	f	class:sockets	signature:(const struct sockaddr_in* addr)
sockaddr_cast	JKYi/reactor/SocketsOps.cc	/^const struct sockaddr* sockets::sockaddr_cast(const struct sockaddr_in6* addr){$/;"	f	class:sockets	signature:(const struct sockaddr_in6* addr)
sockaddr_cast	JKYi/reactor/SocketsOps.cc	/^struct sockaddr* sockets::sockaddr_cast(struct sockaddr_in6* addr){$/;"	f	class:sockets	signature:(struct sockaddr_in6* addr)
sockaddr_cast	JKYi/reactor/SocketsOps.h	/^const struct sockaddr* sockaddr_cast(const struct sockaddr_in* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(const struct sockaddr_in* addr)
sockaddr_cast	JKYi/reactor/SocketsOps.h	/^const struct sockaddr* sockaddr_cast(const struct sockaddr_in6* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(const struct sockaddr_in6* addr)
sockaddr_cast	JKYi/reactor/SocketsOps.h	/^struct sockaddr* sockaddr_cast(struct sockaddr_in6* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(struct sockaddr_in6* addr)
sockaddr_in6_cast	JKYi/reactor/SocketsOps.cc	/^const struct sockaddr_in6* sockets::sockaddr_in6_cast(const struct sockaddr* addr){$/;"	f	class:sockets	signature:(const struct sockaddr* addr)
sockaddr_in6_cast	JKYi/reactor/SocketsOps.h	/^const struct sockaddr_in6* sockaddr_in6_cast(const struct sockaddr* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(const struct sockaddr* addr)
sockaddr_in_cast	JKYi/reactor/SocketsOps.cc	/^const struct sockaddr_in* sockets::sockaddr_in_cast(const struct sockaddr* addr){$/;"	f	class:sockets	signature:(const struct sockaddr* addr)
sockaddr_in_cast	JKYi/reactor/SocketsOps.h	/^const struct sockaddr_in* sockaddr_in_cast(const struct sockaddr* addr);$/;"	p	namespace:JKYi::net::sockets	signature:(const struct sockaddr* addr)
socket	JKYi/hook.cc	/^int socket(int domain,int type,int protocol){$/;"	f	signature:(int domain,int type,int protocol)
socket_	JKYi/reactor/TcpConnection.h	/^    std::unique_ptr<Socket>  socket_;$/;"	m	class:JKYi::net::TcpConnection	access:private
socket_fun	JKYi/hook.h	/^typedef int (*socket_fun)(int domain, int type, int protocol);$/;"	t
sockets	JKYi/reactor/SocketsOps.h	/^namespace sockets{$/;"	n	namespace:JKYi::net
sockets::accept	JKYi/reactor/SocketsOps.cc	/^int sockets::accept(int sockfd, struct sockaddr_in6* addr){$/;"	f	class:sockets	signature:(int sockfd, struct sockaddr_in6* addr)
sockets::bindOrDie	JKYi/reactor/SocketsOps.cc	/^void sockets::bindOrDie(int sockfd,const struct sockaddr* addr){$/;"	f	class:sockets	signature:(int sockfd,const struct sockaddr* addr)
sockets::close	JKYi/reactor/SocketsOps.cc	/^void sockets::close(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
sockets::connect	JKYi/reactor/SocketsOps.cc	/^int sockets::connect(int sockfd, const struct sockaddr* addr){$/;"	f	class:sockets	signature:(int sockfd, const struct sockaddr* addr)
sockets::createNonBlockingOrDie	JKYi/reactor/SocketsOps.cc	/^int sockets::createNonBlockingOrDie(sa_family_t  family){$/;"	f	class:sockets	signature:(sa_family_t family)
sockets::fromIpPort	JKYi/reactor/SocketsOps.cc	/^void sockets::fromIpPort(const char* ip, uint16_t port,$/;"	f	class:sockets	signature:(const char* ip, uint16_t port, struct sockaddr_in* addr)
sockets::fromIpPort	JKYi/reactor/SocketsOps.cc	/^void sockets::fromIpPort(const char* ip, uint16_t port,$/;"	f	class:sockets	signature:(const char* ip, uint16_t port, struct sockaddr_in6* addr)
sockets::getLocalAddr	JKYi/reactor/SocketsOps.cc	/^struct sockaddr_in6 sockets::getLocalAddr(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
sockets::getPeerAddr	JKYi/reactor/SocketsOps.cc	/^struct sockaddr_in6 sockets::getPeerAddr(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
sockets::getSocketError	JKYi/reactor/SocketsOps.cc	/^int sockets::getSocketError(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
sockets::isSelfConnect	JKYi/reactor/SocketsOps.cc	/^bool sockets::isSelfConnect(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
sockets::listenOrDie	JKYi/reactor/SocketsOps.cc	/^void sockets::listenOrDie(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
sockets::read	JKYi/reactor/SocketsOps.cc	/^ssize_t sockets::read(int sockfd, void *buf, size_t count){$/;"	f	class:sockets	signature:(int sockfd, void *buf, size_t count)
sockets::readv	JKYi/reactor/SocketsOps.cc	/^ssize_t sockets::readv(int sockfd, const struct iovec *iov, int iovcnt){$/;"	f	class:sockets	signature:(int sockfd, const struct iovec *iov, int iovcnt)
sockets::shutdownWrite	JKYi/reactor/SocketsOps.cc	/^void sockets::shutdownWrite(int sockfd){$/;"	f	class:sockets	signature:(int sockfd)
sockets::sockaddr_cast	JKYi/reactor/SocketsOps.cc	/^const struct sockaddr* sockets::sockaddr_cast(const struct sockaddr_in* addr){$/;"	f	class:sockets	signature:(const struct sockaddr_in* addr)
sockets::sockaddr_cast	JKYi/reactor/SocketsOps.cc	/^const struct sockaddr* sockets::sockaddr_cast(const struct sockaddr_in6* addr){$/;"	f	class:sockets	signature:(const struct sockaddr_in6* addr)
sockets::sockaddr_cast	JKYi/reactor/SocketsOps.cc	/^struct sockaddr* sockets::sockaddr_cast(struct sockaddr_in6* addr){$/;"	f	class:sockets	signature:(struct sockaddr_in6* addr)
sockets::sockaddr_in6_cast	JKYi/reactor/SocketsOps.cc	/^const struct sockaddr_in6* sockets::sockaddr_in6_cast(const struct sockaddr* addr){$/;"	f	class:sockets	signature:(const struct sockaddr* addr)
sockets::sockaddr_in_cast	JKYi/reactor/SocketsOps.cc	/^const struct sockaddr_in* sockets::sockaddr_in_cast(const struct sockaddr* addr){$/;"	f	class:sockets	signature:(const struct sockaddr* addr)
sockets::toIp	JKYi/reactor/SocketsOps.cc	/^void sockets::toIp(char * buf,size_t size,const struct sockaddr* addr){$/;"	f	class:sockets	signature:(char * buf,size_t size,const struct sockaddr* addr)
sockets::toIpPort	JKYi/reactor/SocketsOps.cc	/^void sockets::toIpPort(char * buf,size_t size,const struct sockaddr* addr){$/;"	f	class:sockets	signature:(char * buf,size_t size,const struct sockaddr* addr)
sockets::write	JKYi/reactor/SocketsOps.cc	/^ssize_t sockets::write(int sockfd, const void *buf, size_t count){$/;"	f	class:sockets	signature:(int sockfd, const void *buf, size_t count)
sockfd_	JKYi/reactor/Socket.h	/^    const int sockfd_;$/;"	m	class:JKYi::net::Socket	access:private
ssl	JKYi/tcp_server.h	/^    int ssl = 0;$/;"	m	struct:JKYi::TcpServerConf	access:public
start	JKYi/db/fox_thread.cc	/^void FoxThread::start(){$/;"	f	class:JKYi::FoxThread	signature:()
start	JKYi/db/fox_thread.cc	/^void FoxThreadManager::start(){$/;"	f	class:JKYi::FoxThreadManager	signature:()
start	JKYi/db/fox_thread.cc	/^void FoxThreadPool::start(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
start	JKYi/db/fox_thread.h	/^    virtual void start() = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:()
start	JKYi/db/fox_thread.h	/^    void start();$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:()
start	JKYi/reactor/Connector.cc	/^void Connector::start(){$/;"	f	class:JKYi::net::Connector	signature:()
start	JKYi/reactor/Connector.h	/^    void start();       \/\/can be called in any thread$/;"	p	class:JKYi::net::Connector	access:public	signature:()
start	JKYi/reactor/EventLoopThreadPool.cc	/^void EventLoopThreadPool::start(const ThreadInitCallback& cb){$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:(const ThreadInitCallback& cb)
start	JKYi/reactor/EventLoopThreadPool.h	/^    void start(const ThreadInitCallback& cb = ThreadInitCallback());$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:(const ThreadInitCallback& cb = ThreadInitCallback())
start	JKYi/reactor/TcpServer.cc	/^void TcpServer::start(){$/;"	f	class:JKYi::net::TcpServer	signature:()
start	JKYi/reactor/TcpServer.h	/^    void start();$/;"	p	class:JKYi::net::TcpServer	access:public	signature:()
start	JKYi/reactor/Thread.cc	/^void Thread::start(){$/;"	f	class:JKYi::net::Thread	signature:()
start	JKYi/reactor/Thread.h	/^    void start();$/;"	p	class:JKYi::net::Thread	access:public	signature:()
start	JKYi/reactor/examples/idleconnection/echo.cc	/^void EchoServer::start(){$/;"	f	class:EchoServer	signature:()
start	JKYi/reactor/examples/idleconnection/echo.h	/^    void start();$/;"	p	class:EchoServer	access:public	signature:()
start	JKYi/reactor/examples/maxconnection/echo.cc	/^void EchoServer::start(){$/;"	f	class:EchoServer	signature:()
start	JKYi/reactor/examples/maxconnection/echo.h	/^    void start();$/;"	p	class:EchoServer	access:public	signature:()
start	JKYi/scheduler.cc	/^void Scheduler::start(){$/;"	f	class:JKYi::Scheduler	signature:()
start	JKYi/scheduler.h	/^   void start();$/;"	p	class:JKYi::Scheduler	access:public	signature:()
start	JKYi/tcp_server.cc	/^bool TcpServer::start(){$/;"	f	class:JKYi::TcpServer	signature:()
start	JKYi/tcp_server.h	/^    virtual bool start();$/;"	p	class:JKYi::TcpServer	access:public	signature:()
startAccept	JKYi/tcp_server.cc	/^void TcpServer::startAccept(Socket::ptr sock){$/;"	f	class:JKYi::TcpServer	signature:(Socket::ptr sock)
startAccept	JKYi/tcp_server.h	/^    virtual void startAccept(Socket::ptr sock);$/;"	p	class:JKYi::TcpServer	access:protected	signature:(Socket::ptr sock)
startInLoop	JKYi/reactor/Connector.cc	/^void Connector::startInLoop(){$/;"	f	class:JKYi::net::Connector	signature:()
startInLoop	JKYi/reactor/Connector.h	/^    void startInLoop();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
startLoop	JKYi/reactor/EventLoopThread.cc	/^EventLoop* EventLoopThread::startLoop(){$/;"	f	class:JKYi::net::EventLoopThread	signature:()
startLoop	JKYi/reactor/EventLoopThread.h	/^    EventLoop* startLoop();$/;"	p	class:JKYi::net::EventLoopThread	access:public	signature:()
startRead	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::startRead(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
startRead	JKYi/reactor/TcpConnection.h	/^    void startRead();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
startReadInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::startReadInLoop(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
startReadInLoop	JKYi/reactor/TcpConnection.h	/^    void startReadInLoop();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
startThread	JKYi/reactor/Thread.cc	/^void * startThread(void * obj){$/;"	f	namespace:JKYi::detail	signature:(void * obj)
start_daemon	JKYi/daemon.cc	/^int start_daemon(int argc,char ** argv,$/;"	f	namespace:JKYi	signature:(int argc,char ** argv, std::function<int(int argc,char ** argv)>main_cb, bool is_daemon)
start_daemon	JKYi/daemon.h	/^int start_daemon(int argc,char ** argv,std::function<int(int argc,char ** argv)>main_cb,bool is_daemon);$/;"	p	namespace:JKYi	signature:(int argc,char ** argv,std::function<int(int argc,char ** argv)>main_cb,bool is_daemon)
started	JKYi/reactor/EventLoopThreadPool.h	/^    bool started()const{$/;"	f	class:JKYi::net::EventLoopThreadPool	access:public	signature:() const
started	JKYi/reactor/Thread.h	/^    bool started()const { return started_; }$/;"	f	class:JKYi::net::Thread	access:public	signature:() const
started_	JKYi/reactor/EventLoopThreadPool.h	/^    bool started_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
started_	JKYi/reactor/TcpServer.h	/^    AtomicInt32 started_;$/;"	m	class:JKYi::net::TcpServer	access:private
started_	JKYi/reactor/Thread.h	/^    bool started_;$/;"	m	class:JKYi::net::Thread	access:private
starts_with	JKYi/reactor/StringPiece.h	/^  bool starts_with(const StringPiece& x) const {$/;"	f	class:JKYi::net::StringPiece	access:public	signature:(const StringPiece& x) const
stateToString	JKYi/reactor/TcpConnection.cc	/^const char * TcpConnection::stateToString()const{$/;"	f	class:JKYi::net::TcpConnection	signature:() const
stateToString	JKYi/reactor/TcpConnection.h	/^    const char * stateToString()const;$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:() const
state_	JKYi/reactor/Connector.h	/^    State state_;$/;"	m	class:JKYi::net::Connector	access:private
state_	JKYi/reactor/TcpConnection.h	/^    StateE state_;$/;"	m	class:JKYi::net::TcpConnection	access:private
static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLERR == POLLERR,      "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLERR == POLLERR, Ó)
static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLHUP == POLLHUP,      "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLHUP == POLLHUP, Ó)
static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLIN == POLLIN,        "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLIN == POLLIN, Ó)
static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLOUT == POLLOUT,      "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLOUT == POLLOUT, Ó)
static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLPRI == POLLPRI,      "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLPRI == POLLPRI, Ó)
static_assert	JKYi/reactor/poller/epollPoller.cc	/^static_assert(EPOLLRDHUP == POLLRDHUP,  "epoll uses same flag values as poll");$/;"	p	namespace:JKYi::net	file:	signature:(EPOLLRDHUP == POLLRDHUP, Ó)
status	JKYi/http/httpclient_parser.h	/^      int status;$/;"	m	struct:httpclient_parser	access:public
statusString	JKYi/module.cc	/^std::string Module::statusString(){$/;"	f	class:JKYi::Module	signature:()
statusString	JKYi/module.h	/^    virtual std::string statusString();$/;"	p	class:JKYi::Module	access:public	signature:()
status_code	JKYi/http/httpclient_parser.h	/^      element_cb status_code;$/;"	m	struct:httpclient_parser	access:public
stop	JKYi/db/fox_thread.cc	/^void FoxThread::stop(){$/;"	f	class:JKYi::FoxThread	signature:()
stop	JKYi/db/fox_thread.cc	/^void FoxThreadManager::stop(){$/;"	f	class:JKYi::FoxThreadManager	signature:()
stop	JKYi/db/fox_thread.cc	/^void FoxThreadPool::stop(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
stop	JKYi/db/fox_thread.h	/^    virtual void stop() = 0;$/;"	p	class:JKYi::IFoxThread	access:public	signature:()
stop	JKYi/db/fox_thread.h	/^    void stop();$/;"	p	class:JKYi::FoxThreadManager	access:public	signature:()
stop	JKYi/reactor/Connector.cc	/^void Connector::stop(){$/;"	f	class:JKYi::net::Connector	signature:()
stop	JKYi/reactor/Connector.h	/^    void stop();        \/\/can be called in any thread$/;"	p	class:JKYi::net::Connector	access:public	signature:()
stop	JKYi/reactor/TcpClient.cc	/^void TcpClient::stop(){$/;"	f	class:JKYi::net::TcpClient	signature:()
stop	JKYi/reactor/TcpClient.h	/^    void stop();$/;"	p	class:JKYi::net::TcpClient	access:public	signature:()
stop	JKYi/scheduler.cc	/^void Scheduler::stop(){$/;"	f	class:JKYi::Scheduler	signature:()
stop	JKYi/scheduler.h	/^   void stop();$/;"	p	class:JKYi::Scheduler	access:public	signature:()
stop	JKYi/tcp_server.cc	/^void TcpServer::stop(){$/;"	f	class:JKYi::TcpServer	signature:()
stop	JKYi/tcp_server.h	/^    virtual void stop();$/;"	p	class:JKYi::TcpServer	access:public	signature:()
stop	JKYi/worker.cc	/^void WorkerManager::stop(){$/;"	f	class:JKYi::WorkerManager	signature:()
stop	JKYi/worker.h	/^    void stop();$/;"	p	class:JKYi::WorkerManager	access:public	signature:()
stopInLoop	JKYi/reactor/Connector.cc	/^void Connector::stopInLoop(){$/;"	f	class:JKYi::net::Connector	signature:()
stopInLoop	JKYi/reactor/Connector.h	/^    void stopInLoop();$/;"	p	class:JKYi::net::Connector	access:private	signature:()
stopRead	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::stopRead(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
stopRead	JKYi/reactor/TcpConnection.h	/^    void stopRead();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
stopReadInLoop	JKYi/reactor/TcpConnection.cc	/^void TcpConnection::stopReadInLoop(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
stopReadInLoop	JKYi/reactor/TcpConnection.h	/^    void stopReadInLoop();$/;"	p	class:JKYi::net::TcpConnection	access:private	signature:()
stopping	JKYi/iomanager.cc	/^bool IOManager::stopping(){$/;"	f	class:JKYi::IOManager	signature:()
stopping	JKYi/iomanager.cc	/^bool IOManager::stopping(uint64_t &timeout){$/;"	f	class:JKYi::IOManager	signature:(uint64_t &timeout)
stopping	JKYi/iomanager.h	/^   bool stopping(uint64_t&timeout);$/;"	p	class:JKYi::IOManager	access:protected	signature:(uint64_t&timeout)
stopping	JKYi/scheduler.cc	/^bool Scheduler::stopping(){$/;"	f	class:JKYi::Scheduler	signature:()
stopping	JKYi/scheduler.h	/^   virtual bool stopping();$/;"	p	class:JKYi::Scheduler	access:protected	signature:()
str_	JKYi/reactor/StringPiece.h	/^  const char* str_;$/;"	m	class:JKYi::net::StringArg	access:private
stream_dep	JKYi/http2/frame.h	/^            uint32_t stream_dep : 31;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame::__anon7::__anon8	access:public
stream_id	JKYi/http2/frame.h	/^            uint32_t stream_id : 31;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PushPromisedFrame::__anon9::__anon10	access:public
subnetMaskAddress	JKYi/address.cc	/^IPAddress::ptr IPv4Address::subnetMaskAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv4Address	signature:(uint32_t prefix_len)
subnetMaskAddress	JKYi/address.cc	/^IPAddress::ptr IPv6Address::subnetMaskAddress(uint32_t prefix_len){$/;"	f	class:JKYi::IPv6Address	signature:(uint32_t prefix_len)
subnetMaskAddress	JKYi/address.h	/^	virtual IPAddress::ptr subnetMaskAddress(uint32_t prefix_len)=0;$/;"	p	class:JKYi::IPAddress	access:public	signature:(uint32_t prefix_len)
sum	tests/test_scheduler.cc	/^uint64_t sum=0;$/;"	v
swap	JKYi/reactor/Buffer.h	/^    void swap(Buffer& rhv){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(Buffer& rhv)
swap	JKYi/timestamp.h	/^    void swap(Timestamp& rhv){$/;"	f	class:JKYi::net::Timestamp	access:public	signature:(Timestamp& rhv)
swapIn	JKYi/fiber.cc	/^void Fiber::swapIn(){$/;"	f	class:JKYi::Fiber	signature:()
swapIn	JKYi/fiber.h	/^	void swapIn();$/;"	p	class:JKYi::Fiber	access:public	signature:()
swapOut	JKYi/fiber.cc	/^void Fiber::swapOut(){$/;"	f	class:JKYi::Fiber	signature:()
swapOut	JKYi/fiber.h	/^	void swapOut();$/;"	p	class:JKYi::Fiber	access:public	signature:()
sym	JKYi/http2/huffman.cc	/^    unsigned char sym;$/;"	m	struct:JKYi::http2::node	file:	access:public
t_cachedTid	JKYi/reactor/CurrentThread.cc	/^__thread int t_cachedTid = 0;$/;"	m	namespace:JKYi::CurrentThread	file:
t_fiber	JKYi/fiber.cc	/^ static thread_local Fiber* t_fiber = nullptr;$/;"	m	namespace:JKYi	file:
t_hook_enable	JKYi/hook.cc	/^static thread_local bool t_hook_enable=false;$/;"	m	namespace:JKYi	file:
t_loopInThisThread	JKYi/reactor/EventLoop.cc	/^__thread JKYi::net::EventLoop* t_loopInThisThread = nullptr; \/\/å¨æ¯ä¸ä¸ªçº¿ç¨ä¸­å­å¨å½åçº¿ç¨çeventloop$/;"	m	namespace:__anon20	file:
t_scheduler	JKYi/scheduler.cc	/^static thread_local Scheduler* t_scheduler = nullptr;$/;"	m	namespace:JKYi	file:
t_scheduler_fiber	JKYi/scheduler.cc	/^static thread_local Fiber* t_scheduler_fiber = nullptr;$/;"	m	namespace:JKYi	file:
t_thread	JKYi/thread.cc	/^static thread_local Thread* t_thread = nullptr;$/;"	m	namespace:JKYi	file:
t_threadFiber	JKYi/fiber.cc	/^ static thread_local Fiber::ptr t_threadFiber = nullptr;$/;"	m	namespace:JKYi	file:
t_threadName	JKYi/reactor/CurrentThread.cc	/^__thread const char * t_threadName = "unknow";$/;"	m	namespace:JKYi::CurrentThread	file:
t_thread_name	JKYi/thread.cc	/^static thread_local std::string t_thread_name = "UNKNOW";$/;"	m	namespace:JKYi	file:
t_tidString	JKYi/reactor/CurrentThread.cc	/^__thread char t_tidString[32];$/;"	m	namespace:JKYi::CurrentThread	file:
t_tidStringLength	JKYi/reactor/CurrentThread.cc	/^__thread int t_tidStringLength = 6;$/;"	m	namespace:JKYi::CurrentThread	file:
take	JKYi/BlockingQueue.h	/^    T take(){$/;"	f	class:JKYi::BlockingQueue	access:public	signature:()
take	JKYi/BoundedBlockingQueue.h	/^    T take(){$/;"	f	class:JKYi::BoundedBlockingQueue	access:public	signature:()
test	tests/test_address.cc	/^void test(){$/;"	f	signature:()
test	tests/test_bytearray.cc	/^void test(){$/;"	f	signature:()
test	tests/test_scheduler.cc	/^void test(){$/;"	f	signature:()
test	tests/test_socket.cc	/^void test(){$/;"	f	signature:()
test1	tests/test_iomanager.cc	/^void test1(){$/;"	f	signature:()
test_assert	tests/test_util.cc	/^void test_assert(){$/;"	f	signature:()
test_class	tests/test_config.cc	/^void test_class(){$/;"	f	signature:()
test_config	tests/test_config.cc	/^void test_config(){$/;"	f	signature:()
test_fiber	tests/test_fiber.cc	/^void test_fiber(){$/;"	f	signature:()
test_fiber	tests/test_iomanager.cc	/^void test_fiber(){$/;"	f	signature:()
test_fiber	tests/test_scheduler.cc	/^void test_fiber(){$/;"	f	signature:()
test_iface	tests/test_address.cc	/^void test_iface(){$/;"	f	signature:()
test_ipv4	tests/test_address.cc	/^void test_ipv4(){$/;"	f	signature:()
test_loadconf	tests/test_config.cc	/^void test_loadconf(){$/;"	f	signature:()
test_log	tests/test_config.cc	/^void test_log(){$/;"	f	signature:()
test_mysql_mgr	tests/test_mysql.cc	/^void test_mysql_mgr(){$/;"	f	signature:()
test_pool	tests/test_http_connection.cc	/^void test_pool(){$/;"	f	signature:()
test_request	tests/test_http.cc	/^void test_request(){$/;"	f	signature:()
test_request	tests/test_http_parser.cc	/^void test_request(){$/;"	f	signature:()
test_request_data	tests/test_http_parser.cc	/^const char test_request_data[] = "POST \/ HTTP\/1.1\\r\\n"$/;"	v
test_response	tests/test_http.cc	/^void test_response(){$/;"	f	signature:()
test_response	tests/test_http_parser.cc	/^void test_response(){$/;"	f	signature:()
test_response_data	tests/test_http_parser.cc	/^const char test_response_data[] = "HTTP\/1.1 200 OK\\r\\n"$/;"	v
test_sleep	tests/test_hook.cc	/^void test_sleep(){$/;"	f	signature:()
test_sock	tests/test_hook.cc	/^void test_sock(){$/;"	f	signature:()
test_sum	tests/test_scheduler.cc	/^void test_sum(){$/;"	f	signature:()
test_timer	tests/test_iomanager.cc	/^void test_timer(){$/;"	f	signature:()
test_yaml	tests/test_config.cc	/^void test_yaml(){$/;"	f	signature:()
thread	JKYi/db/redis.h	/^        FoxThread * thread;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
thread	JKYi/db/redis.h	/^        FoxThread* thread;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
thread	JKYi/scheduler.h	/^	 int thread;$/;"	m	struct:JKYi::Scheduler::FiberAndThread	access:public
threadFunc	JKYi/reactor/EventLoopThread.cc	/^void EventLoopThread::threadFunc(){$/;"	f	class:JKYi::net::EventLoopThread	signature:()
threadFunc	JKYi/reactor/EventLoopThread.h	/^    void threadFunc();$/;"	p	class:JKYi::net::EventLoopThread	access:private	signature:()
threadId_	JKYi/reactor/EventLoop.h	/^    const pid_t threadId_;$/;"	m	class:JKYi::net::EventLoop	access:private
threadInitCallback_	JKYi/reactor/TcpServer.h	/^    ThreadInitCallback threadInitCallback_;$/;"	m	class:JKYi::net::TcpServer	access:private
threadPool	JKYi/reactor/TcpServer.h	/^    std::shared_ptr<EventLoopThreadPool> threadPool(){$/;"	f	class:JKYi::net::TcpServer	access:public	signature:()
threadPool_	JKYi/reactor/TcpServer.h	/^    std::shared_ptr<EventLoopThreadPool> threadPool_;  \/\/çº¿ç¨æ± $/;"	m	class:JKYi::net::TcpServer	access:private
thread_	JKYi/reactor/EventLoopThread.h	/^    Thread thread_;$/;"	m	class:JKYi::net::EventLoopThread	access:private
thread_cb	JKYi/db/fox_thread.cc	/^void FoxThread::thread_cb(){$/;"	f	class:JKYi::FoxThread	signature:()
thread_cb	JKYi/db/fox_thread.h	/^    void thread_cb();$/;"	p	class:JKYi::FoxThread	access:private	signature:()
threads_	JKYi/reactor/EventLoopThreadPool.h	/^    std::vector<std::unique_ptr<EventLoopThread>> threads_;$/;"	m	class:JKYi::net::EventLoopThreadPool	access:private
tickle	JKYi/iomanager.cc	/^void IOManager::tickle(){$/;"	f	class:JKYi::IOManager	signature:()
tickle	JKYi/scheduler.cc	/^void Scheduler::tickle(){$/;"	f	class:JKYi::Scheduler	signature:()
tickle	JKYi/scheduler.h	/^   virtual void tickle();$/;"	p	class:JKYi::Scheduler	access:protected	signature:()
tid	JKYi/reactor/CurrentThread.h	/^inline int tid(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
tid	JKYi/reactor/Thread.h	/^    pid_t tid()const { return tid_; }$/;"	f	class:JKYi::net::Thread	access:public	signature:() const
tidString	JKYi/reactor/CurrentThread.h	/^inline const char * tidString(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
tidStringLength	JKYi/reactor/CurrentThread.h	/^inline int tidStringLength(){$/;"	f	namespace:JKYi::CurrentThread	signature:()
tid_	JKYi/reactor/Thread.cc	/^    pid_t* tid_;$/;"	m	struct:JKYi::detail::ThreadData	file:	access:public
tid_	JKYi/reactor/Thread.h	/^    pid_t tid_;$/;"	m	class:JKYi::net::Thread	access:private
tie	JKYi/reactor/channel.cc	/^void Channel::tie(const std::shared_ptr<void>& obj){$/;"	f	class:JKYi::net::Channel	signature:(const std::shared_ptr<void>& obj)
tie	JKYi/reactor/channel.h	/^    void tie(const std::shared_ptr<void>&);$/;"	p	class:JKYi::net::Channel	access:public	signature:(const std::shared_ptr<void>&)
tie_	JKYi/reactor/channel.h	/^    std::weak_ptr<void> tie_;$/;"	m	class:JKYi::net::Channel	access:private
tied_	JKYi/reactor/channel.h	/^    bool tied_;$/;"	m	class:JKYi::net::Channel	access:private
timeDifference	JKYi/timestamp.h	/^inline double timeDifference(const Timestamp& high,const Timestamp& low){$/;"	f	namespace:JKYi::net	signature:(const Timestamp& high,const Timestamp& low)
time_t_to_mysql_time	JKYi/db/mysql.h	/^bool time_t_to_mysql_time(const time_t& ts,MYSQL_TIME& mt);$/;"	p	namespace:JKYi	signature:(const time_t& ts,MYSQL_TIME& mt)
time_to_mysql_time	JKYi/db/mysql.cc	/^bool time_to_mysql_time(const time_t& ts,MYSQL_TIME& mt){$/;"	f	namespace:JKYi	signature:(const time_t& ts,MYSQL_TIME& mt)
timeout	JKYi/db/redis.h	/^        bool timeout;$/;"	m	struct:JKYi::FoxRedis::Ctx	access:public
timeout	JKYi/db/redis.h	/^        bool timeout;$/;"	m	struct:JKYi::FoxRedisCluster::Ctx	access:public
timeout	JKYi/tcp_server.h	/^    int timeout = 1000 * 2 * 60;$/;"	m	struct:JKYi::TcpServerConf	access:public
timerQueue_	JKYi/reactor/EventLoop.h	/^    std::unique_ptr<TimerQueue> timerQueue_;$/;"	m	class:JKYi::net::EventLoop	access:private
timer_	JKYi/reactor/timerId.h	/^    Timer* timer_;$/;"	m	class:JKYi::net::TimerId	access:private
timer_info	JKYi/hook.cc	/^struct timer_info{$/;"	s	file:
timer_info::cancelled	JKYi/hook.cc	/^	int cancelled=0;$/;"	m	struct:timer_info	file:	access:public
timerfdChannel_	JKYi/reactor/timerQueue.h	/^    Channel* timerfdChannel_;$/;"	m	class:JKYi::net::TimerQueue	access:private
timerfd_	JKYi/reactor/timerQueue.h	/^    const int timerfd_;$/;"	m	class:JKYi::net::TimerQueue	access:private
timers_	JKYi/reactor/timerQueue.h	/^    TimerList timers_;              \/\/å å¥çå®æ¶å¨åè¡¨$/;"	m	class:JKYi::net::TimerQueue	access:private
toByteArray	JKYi/protocol.cc	/^ByteArray::ptr Message::toByteArray(){$/;"	f	class:JKYi::Message	signature:()
toByteArray	JKYi/protocol.h	/^    virtual ByteArray::ptr toByteArray();$/;"	p	class:JKYi::Message	access:public	signature:()
toFormattedString	JKYi/timestamp.cc	/^std::string Timestamp::toFormattedString(bool showMicroseconds)const{$/;"	f	class:JKYi::net::Timestamp	signature:(bool showMicroseconds) const
toFormattedString	JKYi/timestamp.h	/^    std::string toFormattedString(bool showMicroseconds = true)const;$/;"	p	class:JKYi::net::Timestamp	access:public	signature:(bool showMicroseconds = true) const
toHexString	JKYi/bytearray.cc	/^std::string ByteArray::toHexString()const{$/;"	f	class:JKYi::ByteArray	signature:() const
toHexString	JKYi/bytearray.h	/^    std::string toHexString()const;$/;"	p	class:JKYi::ByteArray	access:public	signature:() const
toIp	JKYi/reactor/SocketsOps.cc	/^void sockets::toIp(char * buf,size_t size,const struct sockaddr* addr){$/;"	f	class:sockets	signature:(char * buf,size_t size,const struct sockaddr* addr)
toIp	JKYi/reactor/SocketsOps.h	/^void toIp(char* buf, size_t size,$/;"	p	namespace:JKYi::net::sockets	signature:(char* buf, size_t size, const struct sockaddr* addr)
toIpPort	JKYi/reactor/SocketsOps.cc	/^void sockets::toIpPort(char * buf,size_t size,const struct sockaddr* addr){$/;"	f	class:sockets	signature:(char * buf,size_t size,const struct sockaddr* addr)
toIpPort	JKYi/reactor/SocketsOps.h	/^void toIpPort(char* buf, size_t size,$/;"	p	namespace:JKYi::net::sockets	signature:(char* buf, size_t size, const struct sockaddr* addr)
toLittleEndian	JKYi/endian.h	/^T toLittleEndian(T t){$/;"	f	namespace:JKYi	signature:(T t)
toNetEndian	JKYi/endian.h	/^T toNetEndian(T t){$/;"	f	namespace:JKYi	signature:(T t)
toString	JKYi/address.cc	/^std::string Address::toString()const {$/;"	f	class:JKYi::Address	signature:() const
toString	JKYi/address.h	/^	std::string toString()const;$/;"	p	class:JKYi::Address	access:public	signature:() const
toString	JKYi/bytearray.cc	/^std::string ByteArray::toString()const{$/;"	f	class:JKYi::ByteArray	signature:() const
toString	JKYi/bytearray.h	/^    std::string toString()const;$/;"	p	class:JKYi::ByteArray	access:public	signature:() const
toString	JKYi/config.h	/^   virtual std::string toString()=0;$/;"	p	class:JKYi::ConfigVarBase	access:public	signature:()
toString	JKYi/daemon.cc	/^std::string ProcessInfo::toString()const{$/;"	f	class:JKYi::ProcessInfo	signature:() const
toString	JKYi/daemon.h	/^   std::string toString()const;$/;"	p	struct:JKYi::ProcessInfo	access:public	signature:() const
toString	JKYi/http/http.cc	/^std::string HttpRequest::toString()const {$/;"	f	class:JKYi::http::HttpRequest	signature:() const
toString	JKYi/http/http.cc	/^std::string HttpResponse::toString()const{$/;"	f	class:JKYi::http::HttpResponse	signature:() const
toString	JKYi/http/http.h	/^    std::string toString()const;$/;"	p	class:JKYi::http::HttpResponse	access:public	signature:() const
toString	JKYi/http/http.h	/^   std::string toString()const;$/;"	p	class:JKYi::http::HttpRequest	access:public	signature:() const
toString	JKYi/http/http_connection.cc	/^std::string HttpResult::toString()const{$/;"	f	class:JKYi::http::HttpResult	signature:() const
toString	JKYi/http/http_connection.h	/^    std::string toString()const;$/;"	p	struct:JKYi::http::HttpResult	access:public	signature:() const
toString	JKYi/http/ws_session.cc	/^std::string WSFrameHead::toString()const {$/;"	f	class:JKYi::http::WSFrameHead	signature:() const
toString	JKYi/http/ws_session.h	/^   std::string toString()const;$/;"	p	struct:JKYi::http::WSFrameHead	access:public	signature:() const
toString	JKYi/http2/dynamic_table.cc	/^std::string DynamicTable::toString()const{$/;"	f	class:JKYi::http2::DynamicTable	signature:() const
toString	JKYi/http2/dynamic_table.h	/^    std::string toString()const;$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:() const
toString	JKYi/http2/frame.cc	/^std::string DataFrame::toString()const{$/;"	f	class:JKYi::http2::DataFrame	signature:() const
toString	JKYi/http2/frame.cc	/^std::string Frame::toString(){$/;"	f	class:JKYi::http2::Frame	signature:()
toString	JKYi/http2/frame.cc	/^std::string FrameHeader::toString()const{$/;"	f	class:JKYi::http2::FrameHeader	signature:() const
toString	JKYi/http2/frame.cc	/^std::string GoAwayFrame::toString()const{$/;"	f	class:JKYi::http2::GoAwayFrame	signature:() const
toString	JKYi/http2/frame.cc	/^std::string HeadersFrame::toString()const{$/;"	f	class:JKYi::http2::HeadersFrame	signature:() const
toString	JKYi/http2/frame.cc	/^std::string PingFrame::toString()const {$/;"	f	class:JKYi::http2::PingFrame	signature:() const
toString	JKYi/http2/frame.cc	/^std::string PriorityFrame::toString()const{$/;"	f	class:JKYi::http2::PriorityFrame	signature:() const
toString	JKYi/http2/frame.cc	/^std::string PushPromisedFrame::toString()const{$/;"	f	class:JKYi::http2::PushPromisedFrame	signature:() const
toString	JKYi/http2/frame.cc	/^std::string RstStreamFrame::toString()const{$/;"	f	class:JKYi::http2::RstStreamFrame	signature:() const
toString	JKYi/http2/frame.cc	/^std::string SettingsFrame::toString()const{$/;"	f	class:JKYi::http2::SettingsFrame	signature:() const
toString	JKYi/http2/frame.cc	/^std::string SettingsItem::toString()const{$/;"	f	class:JKYi::http2::SettingsItem	signature:() const
toString	JKYi/http2/frame.cc	/^std::string WindowUpdateFrame::toString()const{$/;"	f	class:JKYi::http2::WindowUpdateFrame	signature:() const
toString	JKYi/http2/frame.h	/^    std::string toString();$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::Frame	access:public	signature:()
toString	JKYi/http2/frame.h	/^    std::string toString()const;$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public	signature:() const
toString	JKYi/http2/frame.h	/^    std::string toString()const;$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public	signature:() const
toString	JKYi/http2/frame.h	/^    virtual std::string toString()const = 0;$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	access:public	signature:() const
toString	JKYi/http2/hpack.cc	/^std::string HPack::toString()const{$/;"	f	class:JKYi::http2::HPack	signature:() const
toString	JKYi/http2/hpack.cc	/^std::string HeaderField::toString()const{$/;"	f	class:JKYi::http2::HeaderField	signature:() const
toString	JKYi/http2/hpack.h	/^    std::string toString()const;$/;"	p	class:JKYi::http2::IndexType::HPack	access:public	signature:() const
toString	JKYi/http2/hpack.h	/^    std::string toString()const;$/;"	p	struct:JKYi::http2::IndexType::HeaderField	access:public	signature:() const
toString	JKYi/protocol.h	/^    virtual std::string toString()const = 0;$/;"	p	class:JKYi::Message	access:public	signature:() const
toString	JKYi/socket.cc	/^std::string Socket::toString()const{$/;"	f	class:JKYi::Socket	signature:() const
toString	JKYi/socket.h	/^    virtual std::string toString()const;$/;"	p	class:JKYi::Socket	access:public	signature:() const
toString	JKYi/tcp_server.cc	/^std::string TcpServer::toString(const std::string &prefix){$/;"	f	class:JKYi::TcpServer	signature:(const std::string &prefix)
toString	JKYi/tcp_server.h	/^    virtual std::string toString(const std::string& prefix = "");$/;"	p	class:JKYi::TcpServer	access:public	signature:(const std::string& prefix = Ó)
toString	JKYi/timestamp.cc	/^std::string Timestamp::toString()const {$/;"	f	class:JKYi::net::Timestamp	signature:() const
toString	JKYi/timestamp.h	/^    std::string toString()const;$/;"	p	class:JKYi::net::Timestamp	access:public	signature:() const
toString	JKYi/uri.h	/^    std::string toString()const;$/;"	p	class:JKYi::Uri	access:public	signature:() const
toString	JKYi/uri.rl.cc	/^std::string Uri::toString() const {$/;"	f	class:JKYi::Uri	signature:() const
toString	tests/test_config.cc	/^    std::string toString()const {$/;"	f	class:Person	access:public	signature:() const
toStringPiece	JKYi/reactor/Buffer.h	/^    StringPiece toStringPiece()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
toYamlString	JKYi/log.cc	/^std::string FileLogAppender::toYamlString(){$/;"	f	class:JKYi::FileLogAppender	signature:()
toYamlString	JKYi/log.cc	/^std::string Logger::toYamlString(){$/;"	f	class:JKYi::Logger	signature:()
toYamlString	JKYi/log.cc	/^std::string LoggerManager::toYamlString(){$/;"	f	class:JKYi::LoggerManager	signature:()
toYamlString	JKYi/log.cc	/^std::string StdoutLogAppender::toYamlString(){$/;"	f	class:JKYi::StdoutLogAppender	signature:()
toYamlString	JKYi/log.h	/^     std::string toYamlString();$/;"	p	class:JKYi::LoggerManager	access:public	signature:()
toYamlString	JKYi/log.h	/^    std::string toYamlString();$/;"	p	class:JKYi::Logger	access:public	signature:()
toYamlString	JKYi/log.h	/^    virtual std::string toYamlString() = 0;$/;"	p	class:JKYi::LogAppender	access:public	signature:()
triggerEvent	JKYi/iomanager.cc	/^void IOManager::FdContext::triggerEvent(IOManager::Event event){$/;"	f	class:JKYi::IOManager::FdContext	signature:(IOManager::Event event)
triggerEvent	JKYi/iomanager.h	/^	 void triggerEvent(Event event);$/;"	p	struct:JKYi::IOManager::FdContext	access:public	signature:(Event event)
tryWait	JKYi/mutex.cc	/^bool FiberSemaphore::tryWait(){$/;"	f	class:JKYi::FiberSemaphore	signature:()
tryWait	JKYi/mutex.h	/^    bool tryWait();$/;"	p	class:JKYi::FiberSemaphore	access:public	signature:()
ts	JKYi/db/mysql.h	/^    time_t ts;$/;"	m	struct:JKYi::MySQLTime	access:public
type	JKYi/db/mysql.h	/^        enum_field_types type;$/;"	m	struct:JKYi::MySQLStmtRes::Data	access:public
type	JKYi/http2/frame.h	/^            uint8_t type;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader::__anon3::__anon4	access:public
type	JKYi/http2/hpack.h	/^    IndexType type = IndexType::ERROR;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
type	JKYi/log.cc	/^    int type=0;\/\/2è¡¨ç¤ºStdoutï¼1è¡¨ç¤ºfile$/;"	m	struct:JKYi::LogAppenderDefine	file:	access:public
type	JKYi/tcp_server.h	/^    std::string type = "http";$/;"	m	struct:JKYi::TcpServerConf	access:public
uint64	JKYi/http2/frame.h	/^        uint64_t uint64 = 0;$/;"	m	union:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsFrame::PingFrame::__anon11	access:public
unlock	JKYi/mutex.h	/^	void unlock(){$/;"	f	class:JKYi::RWMutex	access:public	signature:()
unlock	JKYi/mutex.h	/^   void unlock(){$/;"	f	class:JKYi::CASLock	access:public	signature:()
unlock	JKYi/mutex.h	/^   void unlock(){$/;"	f	class:JKYi::Mutex	access:public	signature:()
unlock	JKYi/mutex.h	/^   void unlock(){$/;"	f	class:JKYi::SpinLock	access:public	signature:()
unlock	JKYi/mutex.h	/^  void unlock(){$/;"	f	class:JKYi::ReadScopedLockImpl	access:public	signature:()
unlock	JKYi/mutex.h	/^  void unlock(){$/;"	f	class:JKYi::ScopedLockImpl	access:public	signature:()
unlock	JKYi/mutex.h	/^  void unlock(){$/;"	f	class:JKYi::WriteScopedLockImpl	access:public	signature:()
unsetThis	JKYi/db/fox_thread.cc	/^void FoxThread::unsetThis(){$/;"	f	class:JKYi::FoxThread	signature:()
unsetThis	JKYi/db/fox_thread.h	/^    void unsetThis();$/;"	p	class:JKYi::FoxThread	access:public	signature:()
unwrite	JKYi/reactor/Buffer.h	/^    void unwrite(size_t len){$/;"	f	class:JKYi::net::Buffer	access:public	signature:(size_t len)
update	JKYi/http2/dynamic_table.cc	/^int32_t DynamicTable::update(const std::string& name,const std::string& value){$/;"	f	class:JKYi::http2::DynamicTable	signature:(const std::string& name,const std::string& value)
update	JKYi/http2/dynamic_table.h	/^    int32_t update(const std::string& name,const std::string& value);$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:(const std::string& name,const std::string& value)
update	JKYi/reactor/channel.cc	/^void Channel::update(){$/;"	f	class:JKYi::net::Channel	signature:()
update	JKYi/reactor/channel.h	/^    void update();$/;"	p	class:JKYi::net::Channel	access:private	signature:()
update	JKYi/reactor/poller/epollPoller.cc	/^void EpollPoller::update(int operation,Channel* channel){$/;"	f	class:JKYi::net::EpollPoller	signature:(int operation,Channel* channel)
update	JKYi/reactor/poller/epollPoller.h	/^    void update(int operation,Channel* channel);$/;"	p	class:JKYi::net::EpollPoller	access:private	signature:(int operation,Channel* channel)
updateChannel	JKYi/reactor/EventLoop.cc	/^void EventLoop::updateChannel(Channel* channel){$/;"	f	class:JKYi::net::EventLoop	signature:(Channel* channel)
updateChannel	JKYi/reactor/EventLoop.h	/^    void updateChannel(Channel* channel);$/;"	p	class:JKYi::net::EventLoop	access:public	signature:(Channel* channel)
updateChannel	JKYi/reactor/poller.h	/^    virtual void updateChannel(Channel* channel) = 0;$/;"	p	class:JKYi::net::Poller	access:public	signature:(Channel* channel)
updateChannel	JKYi/reactor/poller/epollPoller.cc	/^void EpollPoller::updateChannel(Channel* channel){$/;"	f	class:JKYi::net::EpollPoller	signature:(Channel* channel)
updateChannel	JKYi/reactor/poller/pollPoller.cc	/^void PollPoller::updateChannel(Channel * channel){$/;"	f	class:JKYi::net::PollPoller	signature:(Channel * channel)
uri_parser_en_main	JKYi/uri.rl.cc	/^static const int uri_parser_en_main = 451;$/;"	m	namespace:JKYi	file:
uri_parser_error	JKYi/uri.rl.cc	/^static const int uri_parser_error = 0;$/;"	m	namespace:JKYi	file:
uri_parser_first_final	JKYi/uri.rl.cc	/^static const int uri_parser_first_final = 451;$/;"	m	namespace:JKYi	file:
uri_parser_start	JKYi/uri.rl.cc	/^static const int uri_parser_start = 451;$/;"	m	namespace:JKYi	file:
uri_relaxed	JKYi/http/http11_parser.h	/^      int uri_relaxed;$/;"	m	struct:http_parser	access:public
use	JKYi/db/mysql.cc	/^bool MySQL::use(const std::string& dbname){$/;"	f	class:JKYi::MySQL	signature:(const std::string& dbname)
use	JKYi/db/mysql.h	/^    bool use(const std::string& dbname);$/;"	p	class:JKYi::MySQL	access:public	signature:(const std::string& dbname)
usleep	JKYi/hook.cc	/^int usleep(useconds_t usec){$/;"	f	signature:(useconds_t usec)
usleep_fun	JKYi/hook.h	/^typedef int (*usleep_fun)(useconds_t usec);$/;"	t
valid	JKYi/timestamp.h	/^    bool valid()const { return m_microSecondsSinceEpoch > 0; }$/;"	f	class:JKYi::net::Timestamp	access:public	signature:() const
value	JKYi/http2/frame.h	/^    uint32_t value = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public
value	JKYi/http2/hpack.h	/^    std::string value;$/;"	m	struct:JKYi::http2::IndexType::HeaderField	access:public
value_	JKYi/atomic.h	/^    volatile T value_;$/;"	m	class:JKYi::AtomicIntegerT	access:private
volatile	build/CMakeFiles/3.12.3/CompilerIdC/CMakeCCompilerId.c	11;"	d	file:
wait	JKYi/CountDownLatch.cc	/^void CountDownLatch::wait(){$/;"	f	class:JKYi::CountDownLatch	signature:()
wait	JKYi/CountDownLatch.h	/^    void wait();$/;"	p	class:JKYi::CountDownLatch	access:public	signature:()
wait	JKYi/condition.h	/^    void wait(){$/;"	f	class:JKYi::Condition	access:public	signature:()
wait	JKYi/mutex.cc	/^void FiberSemaphore::wait(){$/;"	f	class:JKYi::FiberSemaphore	signature:()
wait	JKYi/mutex.cc	/^void Semaphore::wait(){$/;"	f	class:JKYi::Semaphore	signature:()
wait	JKYi/mutex.h	/^    void wait();$/;"	p	class:JKYi::FiberSemaphore	access:public	signature:()
wait	JKYi/mutex.h	/^   void wait();$/;"	p	class:JKYi::Semaphore	access:public	signature:()
waitForSeconds	JKYi/condition.cc	/^void Condition::waitForSeconds(double seconds){$/;"	f	class:JKYi::Condition	signature:(double seconds)
waitForSeconds	JKYi/condition.h	/^    void waitForSeconds(double seconds);$/;"	p	class:JKYi::Condition	access:public	signature:(double seconds)
wakeup	JKYi/reactor/EventLoop.cc	/^void EventLoop::wakeup(){$/;"	f	class:JKYi::net::EventLoop	signature:()
wakeup	JKYi/reactor/EventLoop.h	/^    void wakeup();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
wakeupChannel_	JKYi/reactor/EventLoop.h	/^    std::unique_ptr<Channel> wakeupChannel_;$/;"	m	class:JKYi::net::EventLoop	access:private
wakeupFd_	JKYi/reactor/EventLoop.h	/^    int wakeupFd_;$/;"	m	class:JKYi::net::EventLoop	access:private
warn	JKYi/log.cc	/^void Logger::warn(LogEvent::ptr event){$/;"	f	class:JKYi::Logger	signature:(LogEvent::ptr event)
warn	JKYi/log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:JKYi::Logger	access:public	signature:(LogEvent::ptr event)
watcher_callback	JKYi/zk_client.h	/^    typedef std::function<void (int type,int stat,const std::string& path,ZKClient::ptr)>watcher_callback;$/;"	t	class:JKYi::ZKClient	access:public
watcher_callback2	JKYi/zk_client.h	/^    typedef std::function<void (int type,int stat,const std::string& path)> watcher_callback2;$/;"	t	class:JKYi::ZKClient	access:private
weakConn_	JKYi/reactor/examples/idleconnection/echo.h	/^        WeakTcpConnectionPtr weakConn_;$/;"	m	struct:EchoServer::Entry	access:public
weak_ptr	JKYi/socket.h	/^    typedef std::weak_ptr<Socket> weak_ptr;$/;"	t	class:JKYi::Socket	access:public
weight	JKYi/http2/frame.h	/^    uint8_t weight = 0;$/;"	m	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::PriorityFrame	access:public
wrapCb	JKYi/db/fox_thread.cc	/^void FoxThreadPool::wrapCb(std::shared_ptr<FoxThread>thr,callback cb){$/;"	f	class:JKYi::FoxThreadPool	signature:(std::shared_ptr<FoxThread>thr,callback cb)
wrapCb	JKYi/db/fox_thread.h	/^    void wrapCb(std::shared_ptr<FoxThread>,callback cb);$/;"	p	class:JKYi::FoxThreadPool	access:private	signature:(std::shared_ptr<FoxThread>,callback cb)
writableBytes	JKYi/reactor/Buffer.h	/^    size_t writableBytes()const{$/;"	f	class:JKYi::net::Buffer	access:public	signature:() const
write	JKYi/bytearray.cc	/^void ByteArray::write(const void * buf,size_t len){$/;"	f	class:JKYi::ByteArray	signature:(const void * buf,size_t len)
write	JKYi/bytearray.h	/^    void write(const void * buf,size_t len);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const void * buf,size_t len)
write	JKYi/hook.cc	/^ssize_t write(int fd, const void *buf, size_t count) {$/;"	f	signature:(int fd, const void *buf, size_t count)
write	JKYi/iomanager.h	/^	 EventContext write;$/;"	m	struct:JKYi::IOManager::FdContext	access:public
write	JKYi/reactor/SocketsOps.cc	/^ssize_t sockets::write(int sockfd, const void *buf, size_t count){$/;"	f	class:sockets	signature:(int sockfd, const void *buf, size_t count)
write	JKYi/reactor/SocketsOps.h	/^ssize_t write(int sockfd, const void *buf, size_t count);$/;"	p	namespace:JKYi::net::sockets	signature:(int sockfd, const void *buf, size_t count)
write	JKYi/stream.h	/^    virtual int write(ByteArray::ptr ba,size_t length) = 0;$/;"	p	class:JKYi::Stream	access:public	signature:(ByteArray::ptr ba,size_t length)
write	JKYi/stream.h	/^    virtual int write(const void * buffer,size_t length) = 0;$/;"	p	class:JKYi::Stream	access:public	signature:(const void * buffer,size_t length)
write	JKYi/stream/socket_stream.cc	/^int SocketStream::write(ByteArray::ptr ba,size_t length){$/;"	f	class:JKYi::SocketStream	signature:(ByteArray::ptr ba,size_t length)
write	JKYi/stream/socket_stream.cc	/^int SocketStream::write(const void * buffer,size_t length){$/;"	f	class:JKYi::SocketStream	signature:(const void * buffer,size_t length)
writeCallback_	JKYi/reactor/channel.h	/^    EventCallback writeCallback_;$/;"	m	class:JKYi::net::Channel	access:private
writeCompleteCallback_	JKYi/reactor/TcpClient.h	/^    WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:JKYi::net::TcpClient	access:private
writeCompleteCallback_	JKYi/reactor/TcpConnection.h	/^    WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:JKYi::net::TcpConnection	access:private
writeCompleteCallback_	JKYi/reactor/TcpServer.h	/^    WriteCompleteCallback writeCompleteCallback_;$/;"	m	class:JKYi::net::TcpServer	access:private
writeDouble	JKYi/bytearray.cc	/^void ByteArray::writeDouble(double value){$/;"	f	class:JKYi::ByteArray	signature:(double value)
writeDouble	JKYi/bytearray.h	/^    void writeDouble(double val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(double val)
writeFint16	JKYi/bytearray.cc	/^void ByteArray::writeFint16(int16_t val){$/;"	f	class:JKYi::ByteArray	signature:(int16_t val)
writeFint16	JKYi/bytearray.h	/^    void writeFint16(int16_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int16_t val)
writeFint32	JKYi/bytearray.cc	/^void ByteArray::writeFint32(int32_t val){$/;"	f	class:JKYi::ByteArray	signature:(int32_t val)
writeFint32	JKYi/bytearray.h	/^    void writeFint32(int32_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int32_t val)
writeFint64	JKYi/bytearray.cc	/^void ByteArray::writeFint64(int64_t val){$/;"	f	class:JKYi::ByteArray	signature:(int64_t val)
writeFint64	JKYi/bytearray.h	/^    void writeFint64(int64_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int64_t val)
writeFint8	JKYi/bytearray.cc	/^void ByteArray::writeFint8(int8_t val){$/;"	f	class:JKYi::ByteArray	signature:(int8_t val)
writeFint8	JKYi/bytearray.h	/^    void writeFint8(int8_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int8_t val)
writeFixSize	JKYi/stream.cc	/^int Stream::writeFixSize(ByteArray::ptr ba,size_t length){$/;"	f	class:JKYi::Stream	signature:(ByteArray::ptr ba,size_t length)
writeFixSize	JKYi/stream.cc	/^int Stream::writeFixSize(const void * buffer,size_t length){$/;"	f	class:JKYi::Stream	signature:(const void * buffer,size_t length)
writeFixSize	JKYi/stream.h	/^    virtual int writeFixSize(ByteArray::ptr ba,size_t length);$/;"	p	class:JKYi::Stream	access:public	signature:(ByteArray::ptr ba,size_t length)
writeFixSize	JKYi/stream.h	/^    virtual int writeFixSize(const void * buffer,size_t length);$/;"	p	class:JKYi::Stream	access:public	signature:(const void * buffer,size_t length)
writeFloat	JKYi/bytearray.cc	/^void ByteArray::writeFloat(float value){$/;"	f	class:JKYi::ByteArray	signature:(float value)
writeFloat	JKYi/bytearray.h	/^    void writeFloat(float val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(float val)
writeFuint16	JKYi/bytearray.cc	/^void ByteArray::writeFuint16(uint16_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint16_t val)
writeFuint16	JKYi/bytearray.h	/^    void writeFuint16(uint16_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint16_t val)
writeFuint32	JKYi/bytearray.cc	/^void ByteArray::writeFuint32(uint32_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint32_t val)
writeFuint32	JKYi/bytearray.h	/^    void writeFuint32(uint32_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint32_t val)
writeFuint64	JKYi/bytearray.cc	/^void ByteArray::writeFuint64(uint64_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint64_t val)
writeFuint64	JKYi/bytearray.h	/^    void writeFuint64(uint64_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint64_t val)
writeFuint8	JKYi/bytearray.cc	/^void ByteArray::writeFuint8(uint8_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint8_t val)
writeFuint8	JKYi/bytearray.h	/^    void writeFuint8(uint8_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint8_t val)
writeInt32	JKYi/bytearray.cc	/^void ByteArray::writeInt32(int32_t val){$/;"	f	class:JKYi::ByteArray	signature:(int32_t val)
writeInt32	JKYi/bytearray.h	/^    void writeInt32(int32_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int32_t val)
writeInt64	JKYi/bytearray.cc	/^void ByteArray::writeInt64(int64_t val){$/;"	f	class:JKYi::ByteArray	signature:(int64_t val)
writeInt64	JKYi/bytearray.h	/^    void writeInt64(int64_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(int64_t val)
writeStringF16	JKYi/bytearray.cc	/^void ByteArray::writeStringF16(const std::string& value){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& value)
writeStringF16	JKYi/bytearray.h	/^    void writeStringF16(const std::string& val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& val)
writeStringF32	JKYi/bytearray.cc	/^void ByteArray::writeStringF32(const std::string& value){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& value)
writeStringF32	JKYi/bytearray.h	/^    void writeStringF32(const std::string& val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& val)
writeStringF64	JKYi/bytearray.cc	/^void ByteArray::writeStringF64(const std::string& value){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& value)
writeStringF64	JKYi/bytearray.h	/^    void writeStringF64(const std::string& val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& val)
writeStringVint	JKYi/bytearray.cc	/^void ByteArray::writeStringVint(const std::string& value){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& value)
writeStringVint	JKYi/bytearray.h	/^    void writeStringVint(const std::string& val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& val)
writeStringWithoutLength	JKYi/bytearray.cc	/^void ByteArray::writeStringWithoutLength(const std::string& value){$/;"	f	class:JKYi::ByteArray	signature:(const std::string& value)
writeStringWithoutLength	JKYi/bytearray.h	/^    void writeStringWithoutLength(const std::string& val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& val)
writeTo	JKYi/http2/frame.cc	/^bool DataFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::DataFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
writeTo	JKYi/http2/frame.cc	/^bool FrameHeader::writeTo(ByteArray::ptr ba){$/;"	f	class:JKYi::http2::FrameHeader	signature:(ByteArray::ptr ba)
writeTo	JKYi/http2/frame.cc	/^bool GoAwayFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::GoAwayFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
writeTo	JKYi/http2/frame.cc	/^bool HeadersFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::HeadersFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
writeTo	JKYi/http2/frame.cc	/^bool PingFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PingFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
writeTo	JKYi/http2/frame.cc	/^bool PriorityFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PriorityFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
writeTo	JKYi/http2/frame.cc	/^bool PushPromisedFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::PushPromisedFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
writeTo	JKYi/http2/frame.cc	/^bool RstStreamFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::RstStreamFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
writeTo	JKYi/http2/frame.cc	/^bool SettingsFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::SettingsFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
writeTo	JKYi/http2/frame.cc	/^bool SettingsItem::writeTo(ByteArray::ptr ba){$/;"	f	class:JKYi::http2::SettingsItem	signature:(ByteArray::ptr ba)
writeTo	JKYi/http2/frame.cc	/^bool WindowUpdateFrame::writeTo(ByteArray::ptr ba,const FrameHeader& header){$/;"	f	class:JKYi::http2::WindowUpdateFrame	signature:(ByteArray::ptr ba,const FrameHeader& header)
writeTo	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::FrameHeader	access:public	signature:(ByteArray::ptr ba)
writeTo	JKYi/http2/frame.h	/^    bool writeTo(ByteArray::ptr ba);$/;"	p	struct:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::SettingsItem	access:public	signature:(ByteArray::ptr ba)
writeTo	JKYi/http2/frame.h	/^    virtual bool writeTo(ByteArray::ptr ba,const FrameHeader& header) = 0;$/;"	p	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	access:public	signature:(ByteArray::ptr ba,const FrameHeader& header)
writeToFile	JKYi/bytearray.cc	/^bool ByteArray::writeToFile(const std::string& name)const{$/;"	f	class:JKYi::ByteArray	signature:(const std::string& name) const
writeToFile	JKYi/bytearray.h	/^    bool writeToFile(const std::string& name)const;$/;"	p	class:JKYi::ByteArray	access:public	signature:(const std::string& name) const
writeUint32	JKYi/bytearray.cc	/^void ByteArray::writeUint32(uint32_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint32_t val)
writeUint32	JKYi/bytearray.h	/^    void writeUint32(uint32_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint32_t val)
writeUint64	JKYi/bytearray.cc	/^void ByteArray::writeUint64(uint64_t val){$/;"	f	class:JKYi::ByteArray	signature:(uint64_t val)
writeUint64	JKYi/bytearray.h	/^    void writeUint64(uint64_t val);$/;"	p	class:JKYi::ByteArray	access:public	signature:(uint64_t val)
write_fun	JKYi/hook.h	/^typedef ssize_t (*write_fun)(int fd, const void *buf, size_t count);$/;"	t
writerIndex_	JKYi/reactor/Buffer.h	/^    size_t writerIndex_;            \/\/å½åå¯ä»¥åçç¬¬ä¸ä¸ªå­è$/;"	m	class:JKYi::net::Buffer	access:private
writev	JKYi/hook.cc	/^ssize_t writev(int fd, const struct iovec *iov, int iovcnt) {$/;"	f	signature:(int fd, const struct iovec *iov, int iovcnt)
writev_fun	JKYi/hook.h	/^typedef ssize_t (*writev_fun)(int fd, const struct iovec *iov, int iovcnt);$/;"	t
wrlock	JKYi/mutex.h	/^	void wrlock(){$/;"	f	class:JKYi::RWMutex	access:public	signature:()
xml_sent	JKYi/http/http11_parser.h	/^      int xml_sent;$/;"	m	struct:http_parser	access:public
~Acceptor	JKYi/reactor/acceptor.cc	/^Acceptor::~Acceptor(){$/;"	f	class:JKYi::net::Acceptor	signature:()
~Acceptor	JKYi/reactor/acceptor.h	/^    ~Acceptor();$/;"	p	class:JKYi::net::Acceptor	access:public	signature:()
~Address	JKYi/address.h	/^	virtual ~Address(){}$/;"	f	class:JKYi::Address	access:public	signature:()
~ByteArray	JKYi/bytearray.cc	/^ByteArray::~ByteArray(){$/;"	f	class:JKYi::ByteArray	signature:()
~ByteArray	JKYi/bytearray.h	/^    ~ByteArray();$/;"	p	class:JKYi::ByteArray	access:public	signature:()
~CASLock	JKYi/mutex.h	/^   ~CASLock(){$/;"	f	class:JKYi::CASLock	access:public	signature:()
~Channel	JKYi/reactor/channel.cc	/^Channel::~Channel(){$/;"	f	class:JKYi::net::Channel	signature:()
~Channel	JKYi/reactor/channel.h	/^    ~Channel();$/;"	p	class:JKYi::net::Channel	access:public	signature:()
~Condition	JKYi/condition.h	/^    ~Condition(){$/;"	f	class:JKYi::Condition	access:public	signature:()
~ConfigVarBase	JKYi/config.h	/^   virtual ~ConfigVarBase(){};\/\/å ä¸ºè¦ä½ä¸ºåºç±»$/;"	f	class:JKYi::ConfigVarBase	access:public	signature:()
~Connector	JKYi/reactor/Connector.cc	/^Connector::~Connector(){$/;"	f	class:JKYi::net::Connector	signature:()
~Connector	JKYi/reactor/Connector.h	/^    ~Connector();$/;"	p	class:JKYi::net::Connector	access:public	signature:()
~Copyable	JKYi/copyable.h	/^    ~Copyable() = default;$/;"	p	class:JKYi::Copyable	access:protected	signature:()
~Ctx	JKYi/db/redis.cc	/^FoxRedis::Ctx::~Ctx(){$/;"	f	class:JKYi::FoxRedis::Ctx	signature:()
~Ctx	JKYi/db/redis.cc	/^FoxRedisCluster::Ctx::~Ctx(){$/;"	f	class:JKYi::FoxRedisCluster::Ctx	signature:()
~Ctx	JKYi/db/redis.h	/^        ~Ctx();$/;"	p	struct:JKYi::FoxRedis::Ctx	access:public	signature:()
~Ctx	JKYi/db/redis.h	/^        ~Ctx();$/;"	p	struct:JKYi::FoxRedisCluster::Ctx	access:public	signature:()
~Data	JKYi/db/mysql.cc	/^MySQLStmtRes::Data::~Data(){$/;"	f	class:JKYi::MySQLStmtRes::Data	signature:()
~Data	JKYi/db/mysql.h	/^        ~Data();$/;"	p	struct:JKYi::MySQLStmtRes::Data	access:public	signature:()
~DynamicTable	JKYi/http2/dynamic_table.h	/^    ~DynamicTable();$/;"	p	class:JKYi::http2::DynamicTable	access:public	signature:()
~Entry	JKYi/reactor/examples/idleconnection/echo.h	/^        ~Entry(){$/;"	f	struct:EchoServer::Entry	access:public	signature:()
~EpollPoller	JKYi/reactor/poller/epollPoller.cc	/^EpollPoller::~EpollPoller(){$/;"	f	class:JKYi::net::EpollPoller	signature:()
~EventLoop	JKYi/reactor/EventLoop.cc	/^EventLoop::~EventLoop(){$/;"	f	class:JKYi::net::EventLoop	signature:()
~EventLoop	JKYi/reactor/EventLoop.h	/^    ~EventLoop();$/;"	p	class:JKYi::net::EventLoop	access:public	signature:()
~EventLoopThread	JKYi/reactor/EventLoopThread.cc	/^EventLoopThread::~EventLoopThread(){$/;"	f	class:JKYi::net::EventLoopThread	signature:()
~EventLoopThread	JKYi/reactor/EventLoopThread.h	/^    ~EventLoopThread();$/;"	p	class:JKYi::net::EventLoopThread	access:public	signature:()
~EventLoopThreadPool	JKYi/reactor/EventLoopThreadPool.cc	/^EventLoopThreadPool::~EventLoopThreadPool(){$/;"	f	class:JKYi::net::EventLoopThreadPool	signature:()
~EventLoopThreadPool	JKYi/reactor/EventLoopThreadPool.h	/^    ~EventLoopThreadPool();$/;"	p	class:JKYi::net::EventLoopThreadPool	access:public	signature:()
~FdCtx	JKYi/fdmanager.cc	/^FdCtx::~FdCtx(){$/;"	f	class:JKYi::FdCtx	signature:()
~FdCtx	JKYi/fdmanager.h	/^   ~FdCtx();$/;"	p	class:JKYi::FdCtx	access:public	signature:()
~FdManager	JKYi/fdmanager.cc	/^FdManager::~FdManager(){$/;"	f	class:JKYi::FdManager	signature:()
~FdManager	JKYi/fdmanager.h	/^	~FdManager();$/;"	p	class:JKYi::FdManager	access:public	signature:()
~Fiber	JKYi/fiber.cc	/^Fiber::~Fiber(){$/;"	f	class:JKYi::Fiber	signature:()
~Fiber	JKYi/fiber.h	/^	~Fiber();$/;"	p	class:JKYi::Fiber	access:public	signature:()
~FiberSemaphore	JKYi/mutex.cc	/^FiberSemaphore::~FiberSemaphore(){$/;"	f	class:JKYi::FiberSemaphore	signature:()
~FiberSemaphore	JKYi/mutex.h	/^    ~FiberSemaphore();$/;"	p	class:JKYi::FiberSemaphore	access:public	signature:()
~FormatItem	JKYi/log.h	/^       virtual ~FormatItem(){}$/;"	f	class:JKYi::LogFormatter::FormatItem	access:public	signature:()
~FoxRedis	JKYi/db/redis.cc	/^FoxRedis::~FoxRedis(){$/;"	f	class:JKYi::FoxRedis	signature:()
~FoxRedis	JKYi/db/redis.h	/^    ~FoxRedis();$/;"	p	class:JKYi::FoxRedis	access:public	signature:()
~FoxRedisCluster	JKYi/db/redis.cc	/^FoxRedisCluster::~FoxRedisCluster(){$/;"	f	class:JKYi::FoxRedisCluster	signature:()
~FoxRedisCluster	JKYi/db/redis.h	/^    ~FoxRedisCluster();$/;"	p	class:JKYi::FoxRedisCluster	access:public	signature:()
~FoxThread	JKYi/db/fox_thread.cc	/^FoxThread::~FoxThread(){$/;"	f	class:JKYi::FoxThread	signature:()
~FoxThread	JKYi/db/fox_thread.h	/^    ~FoxThread();$/;"	p	class:JKYi::FoxThread	access:public	signature:()
~FoxThreadPool	JKYi/db/fox_thread.cc	/^FoxThreadPool::~FoxThreadPool(){$/;"	f	class:JKYi::FoxThreadPool	signature:()
~FoxThreadPool	JKYi/db/fox_thread.h	/^    ~FoxThreadPool();$/;"	p	class:JKYi::FoxThreadPool	access:public	signature:()
~HttpConnection	JKYi/http/http_connection.cc	/^HttpConnection::~HttpConnection(){$/;"	f	class:JKYi::http::HttpConnection	signature:()
~HttpConnection	JKYi/http/http_connection.h	/^    ~HttpConnection();$/;"	p	class:JKYi::http::HttpConnection	access:public	signature:()
~IDB	JKYi/db/db.h	/^    virtual ~IDB(){}$/;"	f	class:JKYi::IDB	access:public	signature:()
~IFoxThread	JKYi/db/fox_thread.h	/^    virtual ~IFoxThread(){}$/;"	f	class:JKYi::IFoxThread	access:public	signature:()
~IFrame	JKYi/http2/frame.h	/^    virtual ~IFrame(){}$/;"	f	class:JKYi::http2::FrameType::FrameFlagData::FrameFlagHeaders::FrameFlagSettings::FrameFlagPing::FrameFlagContinuation::FrameFlagPromise::FrameR::IFrame	access:public	signature:()
~IOManager	JKYi/iomanager.cc	/^IOManager::~IOManager(){$/;"	f	class:JKYi::IOManager	signature:()
~IOManager	JKYi/iomanager.h	/^   ~IOManager();    $/;"	p	class:JKYi::IOManager	access:public	signature:()
~IRedis	JKYi/db/redis.h	/^    virtual ~IRedis(){}$/;"	f	class:JKYi::IRedis	access:public	signature:()
~ISQLData	JKYi/db/db.h	/^    virtual ~ISQLData(){}$/;"	f	class:JKYi::ISQLData	access:public	signature:()
~ISQLQuery	JKYi/db/db.h	/^    virtual ~ISQLQuery(){}$/;"	f	class:JKYi::ISQLQuery	access:public	signature:()
~ISQLUpdate	JKYi/db/db.h	/^    virtual ~ISQLUpdate(){}$/;"	f	class:JKYi::ISQLUpdate	access:public	signature:()
~IStmt	JKYi/db/db.h	/^    virtual ~IStmt(){}$/;"	f	class:JKYi::IStmt	access:public	signature:()
~ISyncRedis	JKYi/db/redis.h	/^    virtual ~ISyncRedis(){}$/;"	f	class:JKYi::ISyncRedis	access:public	signature:()
~ITransaction	JKYi/db/db.h	/^    virtual ~ITransaction(){}$/;"	f	class:JKYi::ITransaction	access:public	signature:()
~LogAppender	JKYi/log.h	/^    virtual ~LogAppender(){};\/\/ç±äºè¯¥ç±»éè¦ä½ä¸ºåºç±»ï¼æä»¥è¿éçè¯å°±ææå½æ°ç³æä¸ºèå½æ°ï¼é¿ååå­æ³æ¼$/;"	f	class:JKYi::LogAppender	access:public	signature:()
~LogEventWrap	JKYi/log.cc	/^LogEventWrap::~LogEventWrap(){$/;"	f	class:JKYi::LogEventWrap	signature:()
~LogEventWrap	JKYi/log.h	/^   ~LogEventWrap();$/;"	p	class:JKYi::LogEventWrap	access:public	signature:()
~Message	JKYi/protocol.h	/^    virtual ~Message() {}$/;"	f	class:JKYi::Message	access:public	signature:()
~MessageDecoder	JKYi/protocol.h	/^    virtual ~MessageDecoder(){}$/;"	f	class:JKYi::MessageDecoder	access:public	signature:()
~Module	JKYi/module.h	/^    virtual ~Module(){}$/;"	f	class:JKYi::Module	access:public	signature:()
~Mutex	JKYi/mutex.h	/^   ~Mutex(){$/;"	f	class:JKYi::Mutex	access:public	signature:()
~MySQLManager	JKYi/db/mysql.cc	/^MySQLManager::~MySQLManager(){$/;"	f	class:JKYi::MySQLManager	signature:()
~MySQLManager	JKYi/db/mysql.h	/^    ~MySQLManager();$/;"	p	class:JKYi::MySQLManager	access:public	signature:()
~MySQLStmt	JKYi/db/mysql.cc	/^MySQLStmt::~MySQLStmt(){$/;"	f	class:JKYi::MySQLStmt	signature:()
~MySQLStmt	JKYi/db/mysql.h	/^    ~MySQLStmt();$/;"	p	class:JKYi::MySQLStmt	access:public	signature:()
~MySQLStmtRes	JKYi/db/mysql.cc	/^MySQLStmtRes::~MySQLStmtRes(){$/;"	f	class:JKYi::MySQLStmtRes	signature:()
~MySQLStmtRes	JKYi/db/mysql.h	/^    ~MySQLStmtRes();$/;"	p	class:JKYi::MySQLStmtRes	access:public	signature:()
~MySQLThreadIniter	JKYi/db/mysql.cc	/^        ~MySQLThreadIniter(){$/;"	f	struct:JKYi::__anon21::MySQLThreadIniter	access:public	signature:()
~MySQLTransaction	JKYi/db/mysql.cc	/^MySQLTransaction::~MySQLTransaction(){$/;"	f	class:JKYi::MySQLTransaction	signature:()
~MySQLTransaction	JKYi/db/mysql.h	/^   ~MySQLTransaction();$/;"	p	class:JKYi::MySQLTransaction	access:public	signature:()
~Node	JKYi/bytearray.cc	/^ByteArray::Node::~Node(){$/;"	f	class:JKYi::ByteArray::Node	signature:()
~Node	JKYi/bytearray.h	/^        ~Node();$/;"	p	struct:JKYi::ByteArray::Node	access:public	signature:()
~Noncopyable	JKYi/noncopyable.h	/^  ~Noncopyable() = default;$/;"	p	class:JKYi::Noncopyable	access:public	signature:()
~PollPoller	JKYi/reactor/poller/pollPoller.cc	/^PollPoller::~PollPoller() = default;$/;"	p	class:JKYi::net::PollPoller	file:	signature:()
~Poller	JKYi/reactor/poller.cc	/^Poller::~Poller() = default;$/;"	p	class:JKYi::net::Poller	file:	signature:()
~Poller	JKYi/reactor/poller.h	/^    virtual ~Poller();$/;"	p	class:JKYi::net::Poller	access:public	signature:()
~RWMutex	JKYi/mutex.h	/^	~RWMutex(){$/;"	f	class:JKYi::RWMutex	access:public	signature:()
~ReadScopedLockImpl	JKYi/mutex.h	/^  ~ReadScopedLockImpl(){$/;"	f	class:JKYi::ReadScopedLockImpl	access:public	signature:()
~Scheduler	JKYi/scheduler.cc	/^Scheduler::~Scheduler(){$/;"	f	class:JKYi::Scheduler	signature:()
~Scheduler	JKYi/scheduler.h	/^   virtual ~Scheduler();$/;"	p	class:JKYi::Scheduler	access:public	signature:()
~ScopedLockImpl	JKYi/mutex.h	/^  ~ScopedLockImpl(){$/;"	f	class:JKYi::ScopedLockImpl	access:public	signature:()
~Semaphore	JKYi/mutex.cc	/^Semaphore::~Semaphore(){$/;"	f	class:JKYi::Semaphore	signature:()
~Semaphore	JKYi/mutex.h	/^   ~Semaphore();$/;"	p	class:JKYi::Semaphore	access:public	signature:()
~Servlet	JKYi/http/servlet.h	/^    virtual ~Servlet(){};$/;"	f	class:JKYi::http::Servlet	access:public	signature:()
~Socket	JKYi/reactor/Socket.cc	/^Socket::~Socket(){$/;"	f	class:JKYi::net::Socket	signature:()
~Socket	JKYi/reactor/Socket.h	/^    ~Socket();$/;"	p	class:JKYi::net::Socket	access:public	signature:()
~Socket	JKYi/socket.cc	/^Socket::~Socket(){$/;"	f	class:JKYi::Socket	signature:()
~Socket	JKYi/socket.h	/^    virtual ~Socket();$/;"	p	class:JKYi::Socket	access:public	signature:()
~SocketStream	JKYi/stream/socket_stream.cc	/^SocketStream::~SocketStream(){$/;"	f	class:JKYi::SocketStream	signature:()
~SocketStream	JKYi/stream/socket_stream.h	/^     ~SocketStream();$/;"	p	class:JKYi::SocketStream	access:public	signature:()
~SpinLock	JKYi/mutex.h	/^   ~SpinLock(){$/;"	f	class:JKYi::SpinLock	access:public	signature:()
~Stream	JKYi/stream.h	/^    virtual ~Stream(){}$/;"	f	class:JKYi::Stream	access:public	signature:()
~TcpClient	JKYi/reactor/TcpClient.cc	/^TcpClient::~TcpClient(){$/;"	f	class:JKYi::net::TcpClient	signature:()
~TcpClient	JKYi/reactor/TcpClient.h	/^    ~TcpClient();$/;"	p	class:JKYi::net::TcpClient	access:public	signature:()
~TcpConnection	JKYi/reactor/TcpConnection.cc	/^TcpConnection::~TcpConnection(){$/;"	f	class:JKYi::net::TcpConnection	signature:()
~TcpConnection	JKYi/reactor/TcpConnection.h	/^    ~TcpConnection();$/;"	p	class:JKYi::net::TcpConnection	access:public	signature:()
~TcpServer	JKYi/reactor/TcpServer.cc	/^TcpServer::~TcpServer(){$/;"	f	class:JKYi::net::TcpServer	signature:()
~TcpServer	JKYi/reactor/TcpServer.h	/^    ~TcpServer();$/;"	p	class:JKYi::net::TcpServer	access:public	signature:()
~TcpServer	JKYi/tcp_server.cc	/^TcpServer::~TcpServer(){$/;"	f	class:JKYi::TcpServer	signature:()
~TcpServer	JKYi/tcp_server.h	/^    virtual ~TcpServer();$/;"	p	class:JKYi::TcpServer	access:public	signature:()
~Thread	JKYi/reactor/Thread.cc	/^Thread::~Thread(){$/;"	f	class:JKYi::net::Thread	signature:()
~Thread	JKYi/reactor/Thread.h	/^    ~Thread();$/;"	p	class:JKYi::net::Thread	access:public	signature:()
~Thread	JKYi/thread.cc	/^Thread::~Thread(){$/;"	f	class:JKYi::Thread	signature:()
~Thread	JKYi/thread.h	/^   ~Thread(); $/;"	p	class:JKYi::Thread	access:public	signature:()
~TimerManager	JKYi/timer.cc	/^TimerManager::~TimerManager(){$/;"	f	class:JKYi::TimerManager	signature:()
~TimerManager	JKYi/timer.h	/^   virtual ~TimerManager(); $/;"	p	class:JKYi::TimerManager	access:public	signature:()
~TimerQueue	JKYi/reactor/timerQueue.cc	/^TimerQueue::~TimerQueue(){$/;"	f	class:TimerQueue	signature:()
~TimerQueue	JKYi/reactor/timerQueue.h	/^    ~TimerQueue();$/;"	p	class:JKYi::net::TimerQueue	access:public	signature:()
~WSServlet	JKYi/http/ws_servlet.h	/^    virtual ~WSServlet(){}$/;"	f	class:JKYi::http::WSServlet	access:public	signature:()
~WriteScopedLockImpl	JKYi/mutex.h	/^  ~WriteScopedLockImpl(){$/;"	f	class:JKYi::WriteScopedLockImpl	access:public	signature:()
~ZKClient	JKYi/zk_client.cc	/^ZKClient::~ZKClient(){$/;"	f	class:JKYi::ZKClient	signature:()
~ZKClient	JKYi/zk_client.h	/^    ~ZKClient();$/;"	p	class:JKYi::ZKClient	access:public	signature:()
